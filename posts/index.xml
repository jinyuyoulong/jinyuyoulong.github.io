<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on 为吾优</title>
		<link>https://blog.v5u.win/posts/</link>
		<description>Recent content in Posts on 为吾优</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-CN</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 08 Feb 2023 20:25:33 +0800</lastBuildDate>
		<atom:link href="https://blog.v5u.win/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>System 什么才是好代码</title>
			<link>https://blog.v5u.win/posts/system/system-%E4%BB%80%E4%B9%88%E6%89%8D%E6%98%AF%E5%A5%BD%E4%BB%A3%E7%A0%81/</link>
			<pubDate>Wed, 08 Feb 2023 20:25:33 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-%E4%BB%80%E4%B9%88%E6%89%8D%E6%98%AF%E5%A5%BD%E4%BB%A3%E7%A0%81/</guid>
			<description>刷知乎的时候发现了一个好代码的评价标准，觉得答主说的非常好。备份一下，试试鞭策自己。 什么才是好的代码？ level1：它是正确的 level2：</description>
			<content type="html"><![CDATA[<p>刷知乎的时候发现了一个好代码的评价标准，觉得答主说的非常好。备份一下，试试鞭策自己。</p>
<h1 id="什么才是好的代码">什么才是好的代码？</h1>
<p>level1：它是正确的</p>
<p>level2：它写的清晰，易懂，不故弄玄虚</p>
<p>level3：它可以应对常见的故障，比如网络状况不好时，它不能死锁；设备暂时不可用时，它能够自动等待、并在设备可用后恢复（也可以通知用户，并允许用户选择如何操作）</p>
<p>level4：它可以自行发现并清晰提示任何异常，绝不隐藏错误</p>
<p>level5：它做了适当的泛化，可以应对一切相似的场景</p>
<p>level6：它给出了一个漂亮的抽象，哪怕场景不同，但只要内部逻辑相似，你就可以复用它（比如前一节提到的线程池模式）</p>
<p>level7：它抓住了类似任务的根本，并把整个体系抽象出来、使得用户无需了解内部原理也能很轻松的使用它————到了这一步，才算到了库代码水准</p>
<p>level8：它解决了业界难题，超过一切竞争对手</p>
<p>level9：它改变了某个领域的传统编程模式</p>
<hr>
<p>一个长久的纠结，如果用轮询检测dma结束，那cpu一直还是占着的啊，哪来的提升性能的道理？ - invalid s的回答 - 知乎
<a href="https://www.zhihu.com/question/582050363/answer/2882929768">https://www.zhihu.com/question/582050363/answer/2882929768</a></p>
]]></content>
		</item>
		
		<item>
			<title>Xcode清缓存</title>
			<link>https://blog.v5u.win/posts/xcode/xcode%E6%B8%85%E7%BC%93%E5%AD%98/</link>
			<pubDate>Thu, 08 Jul 2021 10:56:53 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/xcode/xcode%E6%B8%85%E7%BC%93%E5%AD%98/</guid>
			<description>文章引自-Clean up Xcode cache files on your Mac less than 1 minute read There is no side effect. I got 100Gb! Target: unused devicePermalink Path: ~/Library/Developer/CoreSimulator/Devices How: execute command on terminal xcrun simctl delete unavailable Path: ~/Library/Developer/Xcode/iOS DeviceSupport How: delete directorys like ‘9.0.0’ Target: unnecessary filesPermalink Path: ~/Library/Developer/CoreSimulator/Caches/dyld/.. How: delete each directory Target: builded App</description>
			<content type="html"><![CDATA[<p>文章引自-<a href="https://lovemewithoutall.github.io/it/xcode-clean-up/">  Clean up Xcode cache files on your Mac</a></p>
<p>less than 1 minute read
There is no side effect. I got 100Gb!</p>
<h2 id="target-unused-devicepermalink">Target: unused devicePermalink</h2>
<p>Path: ~/Library/Developer/CoreSimulator/Devices
How: execute command on terminal xcrun simctl delete unavailable
Path: ~/Library/Developer/Xcode/iOS DeviceSupport
How: delete directorys like ‘9.0.0’</p>
<h2 id="target-unnecessary-filespermalink">Target: unnecessary filesPermalink</h2>
<p>Path: ~/Library/Developer/CoreSimulator/Caches/dyld/..
How: delete each directory</p>
<h2 id="target-builded-app-cachespermalink">Target: builded App cachesPermalink</h2>
<p>Path: ~/Library/Developer/Xcode/DerivedData
How: delete each directory</p>
<h2 id="target-unnecessary-archivespermalink">Target: unnecessary ArchivesPermalink</h2>
<p>Path: ~/Library/Developer/Xcode/Archives
How: delete each directory</p>
<h2 id="target-logspermalink">Target: logsPermalink</h2>
<p>Path: ~/Library/Developer/Xcode/iOS Device Logs
How: delete each directory</p>
<h2 id="target-other-unnecessary-filespermalink">Target: Other unnecessary filesPermalink</h2>
<p>Path: ~/Library/Caches/..
How: delete each directory</p>
]]></content>
		</item>
		
		<item>
			<title>软件项目开发最佳实践</title>
			<link>https://blog.v5u.win/posts/design/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
			<pubDate>Mon, 24 May 2021 20:45:38 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/design/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
			<description>软件项目开发最佳实践 项目开发流程包括这几个方面，我先说一下，让各位有个全局的印象： 项目立项 (CEO) 需求收集 (市场) 产品原型 (产品) UI设计 (设计)</description>
			<content type="html"><![CDATA[<h1 id="软件项目开发最佳实践">软件项目开发最佳实践</h1>
<p>项目开发流程包括这几个方面，我先说一下，让各位有个全局的印象：</p>
<ol>
<li>项目立项 (CEO)</li>
<li>需求收集 (市场)</li>
<li>产品原型 (产品)</li>
<li>UI设计 (设计)</li>
<li>开发实施（接口定义+后端开发+前端开发）(软件工程师)</li>
<li>产品测试 (测试)</li>
<li>线上部署+运行维护 (运维)</li>
<li>运营推广 到 产品死亡，服务器停止维护 (运营)
基本一个产品的的生命周期有大概这8个环节，其对应的职位名称，我备注在后面了。</li>
</ol>
<h2 id="项目立项">项目立项</h2>
<p>通常来说要做一个什么项目，确定业务类型，资金来源，盈利模式等等。这是CEO干的事。他要解决一个问题：那就是为什么要做这个项目</p>
<h2 id="需求收集">需求收集</h2>
<p>这个前期一般是老板或经理，后期是市场的人在做。主要目的是做需求调研，以此来确定这个项目的实际使用需求有哪些，从而确定产品功能。是对项目的进一步细化。</p>
<h2 id="产品原型制作">产品原型制作</h2>
<p>该工作对应公司职位为产品。他们和需求方讨论完后，将需求整理成一个完整的产品原型，是对需求的整理。使用工具有：墨刀，摹客，Axure等。个人项目偏移动端使用推荐墨刀。团队开发推荐摹客。经典设计，本地传播推荐Axure。</p>
<h2 id="ui设计">UI设计</h2>
<p>设计选择很多，常用工具有PS和 Sketch。PhotoShop是最常用的设计工具，如果是开发移动端APP，Sketch是非常好的选择，它会生成矢量设计图，导出正好符合开发要求的图片组。也有一些现成的设计组件可供直接使用。比如：</p>
<ul>
<li>响应式网站 bootstrap</li>
<li>单体Web应用，React组件库Ant Design。VUE组件库 Element UI</li>
<li>安卓设计规范 Material Design</li>
<li>iOS的苹果人机交互指南
还有很多UI素材可以在网上自行搜集，比如easyicon和Iconfont-阿里巴巴矢量图标库</li>
</ul>
<h2 id="开发实施">开发实施</h2>
<p>下面就到最重要的实现阶段了。在上手实际开发之前，需要先评估需求。看看哪些比较难实现，哪些容易实现，对需求的优先级做排序，和对需求的合理性提出质疑。比如：根据用户着装颜色，设置手机屏幕主题的需求，就不太合理。
需求评估完后，不要着急写代码。通常来说一个互联网项目是分为后端和前端。后端用来处理业务逻辑和数据管理。前端用来解决用户交互和数据展示。这时候如果**前后端同步开发就需要有一定的共识。只有在这个共识的基础上作出的开发，才能前后端配合良好。**顺利通过后期测试。而这个共识就是：<strong>接口定义</strong>。
我们需要先定义好接口，接口的请求参数，接口的返回数据格式，字段类型等等，此处推荐使用 Swagger 生成API文档。其他类似工具也有一般内置到项目管理工具中，比如禅道和Redmine，还有jira。禅道是PHP开源项目管理工具。Redmine和jira是Java系的。jira的市场份额现在增长最为快速。
接口格式类似这种：</p>
<pre><code>PATH: /user (接口路径)
Method：POST (接口请求方式)
parameters: (接口请求参数)
{
    &quot;userId&quot; = 0
}
reponse: (接口返回数据)
{
  &quot;data&quot;: {
    &quot;name&quot;: &quot;范&quot;,
    &quot;age&quot;: 0,
  },
  &quot;errorData&quot;: {},
  &quot;msg&quot;: &quot;string&quot;,
  &quot;status&quot;: 0
}
</code></pre>
<p>接口定义完毕就可以实际开发了。</p>
<h2 id="产品测试">产品测试</h2>
<p>当项目开发完毕之后，或基本完毕之后就可以启动测试流程了。测试分为几个步骤：</p>
<ol>
<li>撰写测试用例文档</li>
<li>评审测试文档</li>
<li>按照测试文档第一遍进行冒烟测试(据说来源于当前的硬件研发，第一步是加电测试，不冒烟说明初步测试通过) 软件的冒烟测试是指将高优先级的测试用例完全跑通</li>
<li>完整测试</li>
</ol>
<h2 id="线上部署">线上部署</h2>
<p>产品测试通过之后，就可以准备上线了。所谓上线是对应的不上线，服务端或者说所有的软件都分为两个环境：开发环境和线上环境。
开发环境就是指在开发阶段代码运行的环境，比如后端一般是在本地电脑开发，然后推送到公司局域网供团队内的其他成员使用。前端代码一般是运行在自己的设备上。
线上环境就是指供用户使用的环境。后端需要将代码部署到有公网IP的服务器上运行。前端需要发布app到应用商店或者将web网页部署到线上服务器。
线上环境可能还涉及到CDN缓存，分布式服务等配置，不过并不是所有项目都涉及到，这里不做细聊。</p>
<h2 id="运营推广">运营推广</h2>
<p>产品上线之后，就开始进行运营推广了。这里一般由运营的同事负责，工作内容主要包括：到各大平台发文推广，撰写软文。微博互动，广告推广，SEO ASO搜索引擎优化。等等手段。<strong>主要目的就是提高曝光度，将产品推送到用户面前，让用户使用。</strong>
到此为止，一个项目从立项到运营的全部流程，大概讲解完毕。中间肯定有很多细节没有提到。本文只为给新入行的朋友一点启发。</p>
]]></content>
		</item>
		
		<item>
			<title>RN教程</title>
			<link>https://blog.v5u.win/posts/reactnative/rn%E6%95%99%E7%A8%8B/</link>
			<pubDate>Mon, 24 May 2021 20:43:22 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/reactnative/rn%E6%95%99%E7%A8%8B/</guid>
			<description>[TOC] 搭建开发环境 安装依赖 iOS 必须安装的依赖有：Node、Watchman、Xcode 和 CocoaPods。 安卓 必须安装的依赖有：Node、Wat</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="搭建开发环境">搭建开发环境</h2>
<p>安装依赖
iOS
必须安装的依赖有：Node、Watchman、Xcode 和 CocoaPods。
安卓
必须安装的依赖有：Node、Watchman、JDK 和 Android Studio。</p>
<p>最佳实践：使用以下方式创建新项目</p>
<p>create-react-native-app demo0 设置创建项目的可选项
启动</p>
<pre tabindex="0"><code>- yarn android
- yarn ios
- yarn web
</code></pre><p>接口环境配置：</p>
<p>使用青花瓷抓包工具</p>
<p>配置：Proxy-》Mac OS proxy  监听本机代理</p>
<p>tools-&gt; map remote 设置允许，添加远程端口映射,或者 map local做本地文件映射</p>
<p>配置测试机 的IP代理</p>
<h2 id="创建项目">创建项目</h2>
<pre tabindex="0"><code>npx react-native init AwesomeProject
或
create-react-native-app demoName
这种方式创建的项目有iOS Android web 三端 最佳实践
</code></pre><h2 id="编译并运行-react-native-应用">编译并运行 React Native 应用</h2>
<pre tabindex="0"><code>yarn ios # 或者 yarn react-native run-ios
yarn android
yarn web
</code></pre><h2 id="reload">reload</h2>
<p>iOS： cmd+r</p>
<p>安卓: cmd+m</p>
<pre tabindex="0"><code>brew install node
brew install watchman
# 使用nrm工具切换淘宝源
npx nrm use taobao
npm install -g yarn// Yarn是 Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载。
brew install cocoapods

---
npm install -g expo-cli
npm install -g create-react-native-app 
</code></pre><p>验证 metro 是否启动 访问https://127.0.0.1:8081 可以正常响应</p>
<h3 id="矢量图使用">矢量图使用</h3>
<p>引入node包</p>
<p>yarn add react-native-vector-icons</p>
<p>将react-native-vector-icons/Fonts 引入xcode</p>
<p>修改info.plist 加入字体包</p>
<pre tabindex="0"><code>&lt;key&gt;UIAppFonts&lt;/key&gt;
    &lt;array&gt;
      &lt;string&gt;Entypo.ttf&lt;/string&gt;
      &lt;string&gt;EvilIcons.ttf&lt;/string&gt;
      &lt;string&gt;FontAwesome.ttf&lt;/string&gt;
      &lt;string&gt;Foundation.ttf&lt;/string&gt;
      &lt;string&gt;Ionicons.ttf&lt;/string&gt;
      &lt;string&gt;MaterialIcons.ttf&lt;/string&gt;
      &lt;string&gt;Octicons.ttf&lt;/string&gt;
      &lt;string&gt;SimpleLineIcons.ttf&lt;/string&gt;
      &lt;string&gt;Zocial.ttf&lt;/string&gt;
      &lt;string&gt;MaterialCommunityIcons.ttf&lt;/string&gt;
    &lt;/array&gt;
</code></pre><p>pod update</p>
<p>file-&gt; workspace setting-&gt;legacy build system</p>
<p>build setting-&gt;library search paths-&gt; CocoaAsyncSocket-&gt;修改寻找方式recursive</p>
<p>修改pod包bug</p>
<p>React Navigation 4 API</p>
<pre tabindex="0"><code>const MineStack = createStackNavigator({
  Mine: MineScreen,
  Detail: DetailsScreen,
  Setting: SettingSrceen
});
</code></pre><h2 id="安卓开发">安卓开发</h2>
<p>api请求失败是因为本地通过localhost访问，iOS模拟器正常，安卓模拟器异常。</p>
<p>需要改为通过本机ip访问在header中添加host字段</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span> <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">url</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;http://192.168.0.5/index.php/api/index&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fetch</span>(<span style="color:#a6e22e">url</span>, {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">method</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;GET&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;Accept&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;application/json&#39;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;Content-Type&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;application/json;charset=utf-8&#39;</span>, <span style="color:#75715e">//数据格式 json或者key-value形式
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#e6db74">&#34;Connection&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;close&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;Host&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;000.com&#39;</span>,
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>    })
</span></span></code></pre></div><p>&ldquo;Connection&rdquo;: &ldquo;close&rdquo;,iOS为close 安卓默认为 keep-alive</p>
<p>请求的服务器地址是本地的环境的不行，必须线上才可以，这是android问题，ios正常</p>
<p>最后解决的方法是用安卓手机usb调试，然后没有连wifi连的是自己的4g网络，就不报这样的错误了，接口用的是线上的http，没有用https，用的是fetch传formData的数据，</p>
<h2 id="bind">bind</h2>
<p>this.back.bind(this)，我back就是一个方法为啥还要再bind(this). 其实就是一个作用域，绑定这个作用域中的方法。</p>
<p>那么其实我们有两种写法去定义onPress的响应方法。
1.不加bind（this）</p>
<pre tabindex="0"><code>onPress={this.back}
....
  back = () =&gt; {
        const {navigator} = this.props;
        navigator.pop();
    }
</code></pre><p>这种写法不用去bind了，</p>
<p>()=&gt;{} 这种形式的代码，语法规定就是(function(){}).bind(this),即自动添加了bind this</p>
<p>2.需要加bind</p>
<pre tabindex="0"><code>onPress={this.back.bind(this)}

....

  back() {
        const {navigator} = this.props;
        navigator.pop();
    }
</code></pre><h2 id="web和rn交互数据传递">web和RN交互，数据传递</h2>
<h3 id="将rn变量传入web">将RN变量传入Web</h3>
<p>webview 使用的库是 react-native-webview ，在RN 0.60之前 通过onMessage方法传递交互，具体不细讲。因为已经过时了。0.60之后 官方发现还是直接插入js代码更好用injectedJavaScript，所以最佳实践是这样的：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-react" data-lang="react"><span style="display:flex;"><span><span style="color:#75715e">// class中
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 注入一个方法并绑定给 window.launchScan 以备 RN 调用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">getInjectedJS</span> <span style="color:#f92672">=</span> () =&gt; {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">token</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">state</span>.<span style="color:#a6e22e">token</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">projectId</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;456&#39;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">`
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                window.token = &#39;</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">token</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;;// 用window将token声明成全局
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                token2 = &#39;</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">token</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;; 
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                window.projectId = &#39;</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">projectId</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                function btnClick(){
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                  alert(window.token)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                `</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">WebView</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span>{{ <span style="color:#a6e22e">width</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">width</span>, <span style="color:#a6e22e">height</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">height</span> }}
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">source </span><span style="color:#f92672">=</span> {{<span style="color:#a6e22e">uri</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">state</span>.<span style="color:#a6e22e">url</span>}}
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">onLoadProgress</span><span style="color:#f92672">=</span>{({<span style="color:#a6e22e">nativeEvent</span>}) =&gt; <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">setState</span>(
</span></span><span style="display:flex;"><span>      {<span style="color:#a6e22e">progress</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">nativeEvent</span>.<span style="color:#a6e22e">progress</span>}
</span></span><span style="display:flex;"><span>    )}
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">bounces</span><span style="color:#f92672">=</span>{<span style="color:#66d9ef">false</span>}
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">allowFileAccess</span><span style="color:#f92672">=</span>{<span style="color:#66d9ef">true</span>}<span style="color:#960050;background-color:#1e0010">//</span><span style="color:#a6e22e">是否允许访问系统文件</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">javaScriptEnabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ref</span><span style="color:#f92672">=</span>{(<span style="color:#a6e22e">webView</span>) =&gt; {<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">webView</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">webView</span>}}
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">domStorageEnabled</span><span style="color:#f92672">=</span>{<span style="color:#66d9ef">false</span>}
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">onMessage</span><span style="color:#f92672">=</span>{<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">onMessage</span>.<span style="color:#a6e22e">bind</span>(<span style="color:#66d9ef">this</span>)}
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">injectedJavaScript</span><span style="color:#f92672">=</span>{<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getInjectedJS</span>()} <span style="color:#960050;background-color:#1e0010">//</span> <span style="color:#960050;background-color:#1e0010">**</span> <span style="color:#a6e22e">注意</span><span style="color:#960050;background-color:#1e0010">：</span><span style="color:#a6e22e">这里是重点</span> <span style="color:#960050;background-color:#1e0010">**</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">//</span> <span style="color:#a6e22e">onLoad</span><span style="color:#f92672">=</span>{<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">webViewload</span>.<span style="color:#a6e22e">bind</span>(<span style="color:#66d9ef">this</span>)}
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">onLoadEnd</span><span style="color:#f92672">=</span>{<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">onLoadEnd</span>.<span style="color:#a6e22e">bind</span>(<span style="color:#66d9ef">this</span>)}
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">onError</span><span style="color:#f92672">=</span>{<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">onError</span>}
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">renderError</span><span style="color:#f92672">=</span>{<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">renderError</span>}
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">onNavigationStateChange</span><span style="color:#f92672">=</span>{<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">onNavigationStateChange</span>.<span style="color:#a6e22e">bind</span>(<span style="color:#66d9ef">this</span>)}
</span></span><span style="display:flex;"><span>/&gt;
</span></span></code></pre></div><p>js 字符串将会插入到web的scripts标签中，当做正常的js代码执行。</p>
<h2 id="打包">打包</h2>
<h3 id="ios">iOS</h3>
<pre tabindex="0"><code>先创建ios/bundle目录
npx react-native bundle --entry-file index.js --platform ios --dev false --bundle-output ios/bundle/index.ios.bundle --assets-dest ios/bundle
</code></pre><p>注销application中的debug条件代码</p>
<p>将资源文件assets+ios.bundle加到项目中，直接可以编译通过的话就可以打包了</p>
<p>node编译报错</p>
<p>解决：build phases-&gt;buildle rn image
使用了非标准的 nodejs 安装流程</p>
<pre tabindex="0"><code>如果你使用了非标准的 nodejs 安装流程，
在Xcode中选择Project -&gt; Build Phases -&gt; Bundle React Native code and images，
把NODE_BINARY改为node可执行文件的绝对路径
你可以在终端命令行中执行 `$ which node` 来查看你当前node的绝对路径
export NODE_BINARY=/Users/fanjinlong/.nvm/versions/node/v12.9.0/bin/node
../node_modules/react-native/scripts/react-native-xcode.sh
</code></pre><p>打包失败</p>
<p>yarn start &ndash;reset-cache</p>
<h3 id="android">Android</h3>
<ol>
<li>
<p>生成index.android.bundle 文件在src/main/assets/目录下</p>
</li>
<li>
<p>修改配置: 编译平台，去除debug代码，添加权限配置等</p>
</li>
<li>
<p>生成签名，编译release包： build -&gt; genero signed build apk</p>
</li>
<li>
<p>as编译打包，或命令行打包</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>也可以as生成，下面是命令行生成
</span></span><span style="display:flex;"><span>keytool -genkey -alias my-release-key.keystore -keyalg RSA -validity <span style="color:#ae81ff">20000</span> -keystore my-release-key.keystore
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>// release.keystore 签名需要放到 android/app/build/ ，可以不放，使用Androidstudio 打包时指定文件路径就行
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>查看keystore 信息
</span></span><span style="display:flex;"><span>keytool -v -list -keystore my-release-key.keystore
</span></span></code></pre></div><h4 id="安卓打包改配置">安卓打包改配置</h4>
<p>APP displayName：android/app/src/main/res/values/strings.xml app_name</p>
<p>APP logo: res/mipmap rpx命令编译失败，不能用</p>
<p>增加签名证书，修改 android/app/gradle.properties</p>
<pre tabindex="0"><code># Version of flipper SDK to use with React Native
FLIPPER_VERSION=0.33.1
# 新加:
MYAPP_RELEASE_STORE_FILE=my-release-key.keystore
MYAPP_RELEASE_KEY_ALIAS=com.suipingbang.www
MYAPP_RELEASE_STORE_PASSWORD=111111
MYAPP_RELEASE_KEY_PASSWORD=111111
</code></pre><p>修改android/app/build.gradle(app)</p>
<pre tabindex="0"><code>android{
...
  signingConfigs {
      release {
            if (project.hasProperty(&#39;MYAPP_RELEASE_STORE_FILE&#39;)) {
                storeFile file(MYAPP_RELEASE_STORE_FILE)
                storePassword MYAPP_RELEASE_STORE_PASSWORD
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword MYAPP_RELEASE_KEY_PASSWORD
            }
        }
}
</code></pre><p>更改<code>build.gradle</code> 文件中的 <code>applicationId</code> 属性 应用ID</p>
<p>rn命令行编译js代码-&gt;bundle资源束，有js map和没有，在项目目录下。</p>
<pre tabindex="0"><code>npx react-native bundle --platform android --dev false --reset-cache --entry-file index.js --bundle-output ./android/app/build/generated/assets/react/release/index.android.bundle --assets-dest android/app/build/generated/res/react/release --sourcemap-output android/app/build/generated/sourcemaps/react/release/index.android.bundle.map
</code></pre><pre tabindex="0"><code>npx react-native bundle --platform android --dev false --reset-cache --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/
</code></pre><p>bundle可能会导出失败，由于没有目录，所以需要在android/app/src/main目录下创建assets目录
def enableSeparateBuildPerCPUArchitecture = true 设置为true根据CPU生成不通的apk包</p>
<h4 id="打包-apk在androidappbuildoutputsapk-生成app-releaseapk">打包 apk（在android/app/build/outputs/apk 生成app-release.apk）</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>cd android 
</span></span><span style="display:flex;"><span>./gradlew clean <span style="color:#f92672">&amp;&amp;</span> ./gradlew assembleRelease 该打包方式遇到问题,后来也成功了
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>在设备上安装release版本
</span></span><span style="display:flex;"><span>npx react-native run-android --variant<span style="color:#f92672">=</span>release 这个成功
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>AndroidStudio 打包
</span></span><span style="display:flex;"><span>build/Generate Signed Bundle or APK -&gt; APK -&gt; 配置keystores -&gt; 选择release， V1 V2两个都要勾选
</span></span></code></pre></div><p><code>app -&gt;release-&gt;app-release.apk</code> &ndash;&gt; android studio 打包apk发布包 文件存放路径：</p>
<p><code>app/build/outputs/apk/release/app-release.apk</code> &ndash;&gt; npx命令行输出目录：</p>
<p>Metro js 打包热更新,用于开发，起下发js代码的server，编译打包时坑了我。apk闪退。</p>
<p>如果是 react-native 0.6+ 每次 yarn / npm install 之后需要先运行 <code>npx jetify</code>检查一遍。</p>
<p>使用AS4 IDE打包release 不行，启动直接崩溃。只能使用npx。两者的apk输出目录不是同一个地方！</p>
<p>参考https://juejin.im/post/5dc8c080f265da4cf022ddc6</p>
<h3 id="react-native-相关的-activity-和-application">React Native 相关的 Activity 和 Application</h3>
<p>创建一个继承自 <code>com.facebook.react.ReactActivity</code> 的 Activity</p>
<p><strong>重写 <code>getMainComponentName()</code> 方法，返回的字符串必须和前面的 <code>AppRegistry.registerComponent('navigation', () =&gt; App)</code> 里的 <code>navigation</code> 对应，表示该 Activity 会显示对应组件里的内容。</strong></p>
<h3 id="android-1">Android</h3>
<p>编辑 <code>android/app/src/main/res/values/strings.xml</code> 文件：</p>
<h3 id="ios-1">iOS</h3>
<p>编辑 <code>ios/test/Info.plist</code> 文件：</p>
<h5 id="android启动图标更换后部分手机未生效解决办法">Android启动图标更换后部分手机未生效解决办法</h5>
<p>1、方法一：clean项目，下载应用，重新手机，重新安装
2、方法二：修改手机主题（马上生效，但是VIVO手机出现再次切换原主题恢复原图标问题）
3、方法三：重命名启动图标名称，重新运行安装项目即可（最佳方案）
4、方法四：更改应用版本号</p>
<p>可能原因：手机上有缓存，不是app内部缓存，而是launcher缓存。</p>
<h3 id="上架">上架</h3>
<p>软著如何统计代码行数？</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># 统计当前目录下的 app 文件夹中，所有 JS 文件的代码行数</span>
</span></span><span style="display:flex;"><span>find ./app <span style="color:#e6db74">&#34;(&#34;</span> -name <span style="color:#e6db74">&#34;*.js&#34;</span> <span style="color:#e6db74">&#34;)&#34;</span> -print | xargs wc -l
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 统计当前目录下的 ios 文件夹中，所有 Objective-C 的代码行数</span>
</span></span><span style="display:flex;"><span>find ./ios <span style="color:#e6db74">&#34;(&#34;</span> -name <span style="color:#e6db74">&#34;*.h&#34;</span> -or -name <span style="color:#e6db74">&#34;*.m&#34;</span> <span style="color:#e6db74">&#34;)&#34;</span> -print | xargs wc -l
</span></span><span style="display:flex;"><span><span style="color:#75715e">#统计当前目录下的 android 文件夹中，所有 Java 的代码行数</span>
</span></span><span style="display:flex;"><span>find ./android <span style="color:#e6db74">&#34;(&#34;</span> -name <span style="color:#e6db74">&#34;*.java&#34;</span> <span style="color:#e6db74">&#34;)&#34;</span> -print | xargs wc -l
</span></span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Redux学习</title>
			<link>https://blog.v5u.win/posts/reactnative/redux%E5%AD%A6%E4%B9%A0/</link>
			<pubDate>Mon, 24 May 2021 20:42:39 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/reactnative/redux%E5%AD%A6%E4%B9%A0/</guid>
			<description>yarn global add create-react-app create-react-app demo0 yarn add antd yarn add redux mkdir src/store redux dev chrome插件 开发用，在GitHub上redux项目看开发环境配置方式 const store = createStore(reducer, // window.__REDUX_DEVTOOLS_EXTENSION__ &amp;amp;&amp;amp; window.__REDUX_DEVTOOLS_EXTENSION__() //如果浏览器有这个</description>
			<content type="html"><![CDATA[<p>yarn global add create-react-app</p>
<p>create-react-app demo0</p>
<p>yarn add antd</p>
<p>yarn add redux</p>
<p>mkdir src/store</p>
<p>redux dev chrome插件 开发用，在GitHub上redux项目看开发环境配置方式</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">store</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">createStore</span>(<span style="color:#a6e22e">reducer</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                          
</span></span><span style="display:flex;"><span>                          <span style="color:#75715e">//如果浏览器有这个方法，就执行它。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    )
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> (<span style="color:#a6e22e">state</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">defaultState</span>, <span style="color:#a6e22e">action</span>)=&gt;{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">state</span>,<span style="color:#a6e22e">action</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// ** Reducer里只能接受state ，不能改变state 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">action</span>.<span style="color:#a6e22e">type</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;changeInput&#39;</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 所以用一个深拷贝接受state
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">newState</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>(<span style="color:#a6e22e">state</span>))
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">newState</span>.<span style="color:#a6e22e">inputValue</span><span style="color:#f92672">=</span><span style="color:#a6e22e">action</span>.<span style="color:#a6e22e">value</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">newState</span> <span style="color:#75715e">// 这里返回给store，让store修改变量，reducer不干这事
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">state</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#75715e">// 监听绑定，新版本不用写也可以监听，但是视图层没有同步更新数据，所以还是要写这个
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">storeChange</span><span style="color:#f92672">=</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">storeChange</span>.<span style="color:#a6e22e">bind</span>(<span style="color:#66d9ef">this</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">store</span>.<span style="color:#a6e22e">subscribe</span>(<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">storeChange</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">value</span><span style="color:#f92672">=</span>{<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">state</span>.<span style="color:#a6e22e">inputValue</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">storeChange</span>(){
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">setState</span>(<span style="color:#a6e22e">store</span>.<span style="color:#a6e22e">getState</span>())
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>小技巧</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#75715e">// file actionTypes.js
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// action 配置文件
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 便于找错和code复用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">export</span> <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">CHANGE_INPUT</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;changeInput&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">export</span> <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">CHANGE_ADD</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;addItem&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">export</span> <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">CHANGE_DELETE</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;deleteItem&#39;</span>
</span></span></code></pre></div><p>redux三个小坑</p>
<ul>
<li>store必须是唯一的，多个store是坚决不允许的，只能有一个store空间</li>
<li>只有store能改变自己的内容，Reducer不能改变</li>
<li>Reducer必须是纯函数</li>
</ul>
<p>先来看什么是纯函数，纯函数定义：</p>
<blockquote>
<p>如果函数的调用参数相同，则永远返回相同的结果。它不依赖于程序执行期间函数外部任何状态或数据的变化，必须只依赖于其输入参数。</p>
</blockquote>
<p>比如传入date作为参数就不叫纯函数</p>
<p>工程化</p>
<p>TODOListUI.js UI 分离</p>
<p>无状态组件，不用class 使用方法 props参数，因为没有class的state所以性能会高一点</p>
<p>最大的特点就是只有UI</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">TodoListUI</span><span style="color:#f92672">=</span>(<span style="color:#a6e22e">props</span>)=&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">div</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span>{{<span style="color:#a6e22e">margin</span><span style="color:#f92672">:</span><span style="color:#e6db74">&#39;10px&#39;</span>}}
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">inputValue</span>}<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/div&gt;</span>
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Easy mock 接口测试 自定义数据 yapi</p>
<p>axios api请求</p>
<p>异步方法建议放在中间件中做</p>
<h2 id="中间件">中间件</h2>
<p>redux-thuck</p>
<p>thunk的作用是将函数处理为对象</p>
<p>saya 和thunk类似的中间件</p>
]]></content>
		</item>
		
		<item>
			<title>React学习</title>
			<link>https://blog.v5u.win/posts/reactnative/react%E5%AD%A6%E4%B9%A0/</link>
			<pubDate>Mon, 24 May 2021 20:37:25 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/reactnative/react%E5%AD%A6%E4%B9%A0/</guid>
			<description>React学习 两个重要的概念：虚拟DOM，diff算法 虚拟DOM：用js对象模拟HTML的DOM树，为了方便比较，减少渲染 diff算法由3种</description>
			<content type="html"><![CDATA[<p>React学习</p>
<h2 id="两个重要的概念虚拟domdiff算法">两个重要的概念：虚拟DOM，diff算法</h2>
<p>虚拟DOM：用js对象模拟HTML的DOM树，为了方便比较，减少渲染</p>
<p>diff算法由3种组成：</p>
<p>tree diff DOM树按层对比</p>
<p>component diff 在每层里按组件对比</p>
<p>element diff：在每个组件中 按元素进行对比</p>
<h2 id="工程启动流程">工程启动流程：</h2>
<p>创建webpack：npm init -y 创建dist 和 src文件夹，创建文件src/index.html src/main.js</p>
<p>安装webpack：<code>npm -i webpack -D</code></p>
<p><code>yarn add web-dev-server --dev</code> 自动编译js</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;scripts&#34;</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;test&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;echo \&#34;Error: no test specified\&#34; &amp;&amp; exit 1&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;dev&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;webpack-dev-server --port 8080 --hot --host&#34;</span><span style="color:#75715e">// 最佳实践
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  },
</span></span></code></pre></div><p>html-webpack-plugin 将页面生成到内存中去</p>
<p>webpack.config.js文件中的配置</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">// 向外暴露一个打包的对象
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">module</span>.<span style="color:#a6e22e">exports</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mode</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;development&#39;</span>,<span style="color:#75715e">// production develoment 设置压缩文件的方式
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// webpack 4.0 中约定大于配置，默认 src/index.js 是入口文件
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><hr>
<p><strong>react</strong> 专门用来创建组件和虚拟DOM，同时组件的生命周期都在这个包里</p>
<p><strong>react-dom</strong> 专门进行DOM操作，最主要的应用场景，就是ReactDOM.rander()</p>
<p>实例代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">// 1. 导入
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 2. 创建虚拟DOM元素
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 3. 使用ReactDOM把虚拟DOM渲染到屏幕上
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 导入react的别名必须这么写
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">import</span>  <span style="color:#a6e22e">React</span>  <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;react&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span>  <span style="color:#a6e22e">ReactDOM</span>  <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;react-dom&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 参数1 创建的元素的类型，字符串，表示元素名称
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 参数2 一个对象或者null，表示这个DOM的属性
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 参数3 子节点 包括其他虚拟DOM获取文本子节点
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 参数n 其他子节点
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// &lt;h1 id=&#34;myh&#34; title=&#34;这是一个h1&#34;&gt;这是一个没有感情的h1&lt;/h1&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">myh1</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#39;h1&#39;</span>, {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">id</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;myh1&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">title</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;这是一个h1&#39;</span>
</span></span><span style="display:flex;"><span>}, <span style="color:#e6db74">&#34;这是一个没有感情的h1&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">mdiv</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#39;div&#39;</span>,<span style="color:#66d9ef">null</span>,<span style="color:#e6db74">&#39;这是一个div&#39;</span>,<span style="color:#a6e22e">myh1</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 参数1 目标虚拟DOM
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 参数2 指定页面的容器,一个DOM元素
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">ReactDOM</span>.<span style="color:#a6e22e">render</span>(<span style="color:#a6e22e">mdiv</span>, document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#39;app&#39;</span>))
</span></span></code></pre></div><h3 id="jsx--js--xml">JSX = js + xml</h3>
<p>JSX 语法本质是通过babel转换成 React.createElement()形式</p>
<p>依赖包：babel-core babel-loader babel-plugin-transform-runtime &ndash;dev</p>
<p>关于语法解析的：babel-preset-env babel-preset-stage-0 babel-preset-react &ndash;dev</p>
<p>@babel/core、@babel/preset-env、@babel/runtime、@babel/plugin-transform-runtime、@babel/plugin-proposal-class-properties、@babel/preset-react这几个包安装一下，然后在.babelrc文件中添加{&ldquo;presets&rdquo;:[&quot;@babel/preset-env&quot;,&quot;@babel/preset-react&quot;], &ldquo;plugins&rdquo;:[&quot;@babel/transform-runtime&quot;,&quot;@babel/plugin-proposal-class-properties&quot;]}</p>
<p>注：react中需要把key添加给被 foreach 或map 或 for循环直接没控制的那些元素（也就是最外层的元素）</p>
<p>jsx 注释：jsx的{}中可以写任何合法的js代码，包括注释</p>
<pre tabindex="0"><code>{/* 注释单行 */}
{
// 注释多行
}
</code></pre><p>为jsx添加类名，需要用className代替class；htmlFor代替label的for属性</p>
<h3 id="组件创建和使用">组件创建和使用</h3>
<p>为组件传递数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span><span style="color:#75715e">// 第一种创建组件方式，组件名称首字母必须大写
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">Hello</span>(<span style="color:#a6e22e">props</span>) {<span style="color:#75715e">// 在Props 上获取dog对象
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// react 和Vue 中的 props 对象所有属性都是 只读 read only的
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">name</span>);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 返回一个 虚拟DOM
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> &lt;<span style="color:#f92672">div</span>&gt;<span style="color:#a6e22e">这是Hello组件</span> <span style="color:#f92672">--</span> {<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">name</span>}<span style="color:#f92672">--</span> {<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">age</span>} <span style="color:#f92672">--</span> {<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">gander</span>}&lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{<span style="color:#75715e">/* 直接将组件名称以标签的形式，丢到页面上 */</span>}
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">Hello</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">dog</span>.<span style="color:#a6e22e">name</span>} <span style="color:#a6e22e">age</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">dog</span>.<span style="color:#a6e22e">age</span>} <span style="color:#a6e22e">gander</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">dog</span>.<span style="color:#a6e22e">gander</span>}&gt;&lt;/<span style="color:#f92672">Hello</span>&gt;
</span></span></code></pre></div><p>react chrome开发插件 react developer tools</p>
<p><strong>注：组件名称首字母必须大写</strong></p>
<p>默认不做单独的配置的话，不能省略后缀名
可以配置webpack.config.js 省略后缀名</p>
<p>@代表src目录 配置webpack的alias 字段</p>
<pre tabindex="0"><code>import Hello from &#39;@/components/Hello&#39;
</code></pre><h3 id="class-属性">class 属性</h3>
<p>this.props 只读</p>
<p>this.state 可读可写</p>
<p>class 有私有属性state 和生命周期</p>
<h3 id="jsx-style-样式">JSX style 样式</h3>
<p>{<em>/* jsx中的样式写法{{color: &lsquo;red&rsquo;}} */</em>}</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#a6e22e">css文件</span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">title</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">color</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">red</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">-----</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">webpack</span> <span style="color:#a6e22e">配置</span> <span style="color:#a6e22e">解析css</span> <span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">依赖包</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">-</span><span style="color:#a6e22e">loader</span> <span style="color:#a6e22e">css</span><span style="color:#f92672">-</span><span style="color:#a6e22e">loader</span>
</span></span><span style="display:flex;"><span>{<span style="color:#a6e22e">test</span><span style="color:#f92672">:</span> <span style="color:#e6db74">/\.css$/</span>,<span style="color:#a6e22e">use</span><span style="color:#f92672">:</span> [<span style="color:#e6db74">&#39;style-loader&#39;</span>,<span style="color:#e6db74">&#39;css-loader?modules&#39;</span>]}<span style="color:#75715e">// 打包处理css样式表，从右向左 处理，css处理完交给style处理 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#75715e">// style-loader loader不嫩省略，webpack 1.0 用的是 style，后边都加-loader了，搜blog不要被误导
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">自定义</span> <span style="color:#a6e22e">样式对象的名称</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">css</span><span style="color:#f92672">-</span><span style="color:#a6e22e">loader</span><span style="color:#f92672">?</span><span style="color:#a6e22e">modules</span><span style="color:#f92672">&amp;</span><span style="color:#a6e22e">localIdentName</span><span style="color:#f92672">=</span>[<span style="color:#a6e22e">path</span>][<span style="color:#a6e22e">name</span>]<span style="color:#f92672">-</span>[<span style="color:#a6e22e">local</span>]<span style="color:#f92672">-</span>[<span style="color:#a6e22e">hash</span><span style="color:#f92672">:</span><span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">path</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">-</span><span style="color:#a6e22e">css</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">name</span> <span style="color:#a6e22e">文件name</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">local</span> <span style="color:#a6e22e">css中的样式名称</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">hash</span> <span style="color:#a6e22e">默认全length</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">-----</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">使用</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">cssObj</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;@/css/cssList.css&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">h1</span> <span style="color:#a6e22e">className</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;title&#34;</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">这是评论列表组件</span><span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/h1&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">cssObj是全局的</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">整个项目都生效</span>
</span></span></code></pre></div><p>解决样式冲突：vue <code>&lt;style scoped&gt;</code></p>
<p>css 模块化只针对 class和id 不作用于标签</p>
<p>:global 全局，不模块化</p>
<p>自己的样式用scss结尾</p>
<p>第三方的用css结尾，这样就区分了个人和其他</p>
<p><code>sass-loader node-sass</code></p>
<h3 id="绑定事件">绑定事件</h3>
<p>最佳实践</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">button</span> <span style="color:#a6e22e">onClick</span><span style="color:#f92672">=</span>{()=&gt;{<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">myClickHandler</span>()}}<span style="color:#f92672">&gt;</span><span style="color:#a6e22e">按钮</span><span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/button&gt;</span>
</span></span><span style="display:flex;"><span> <span style="color:#a6e22e">myClickHandler</span> <span style="color:#f92672">=</span> ()=&gt;{        <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;点击事件&#39;</span>);       }
</span></span></code></pre></div><p>箭头函数本身是一个匿名函数，和匿名函数不同的是会改变this指针的指向，它会根据环境选择箭头外部的那个对象。</p>
<p>修改数据使用this.setState({msg:&lsquo;改&rsquo;}), 是异步执行的</p>
<h3 id="jsx注释折叠">JSX注释折叠</h3>
<pre tabindex="0"><code>//#region
// 我是JSX注释
//#endregion
</code></pre><h3 id="实现双向数据绑定"><em>实现双向数据绑定</em></h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span> &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span>{<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">state</span>.<span style="color:#a6e22e">msg</span>} <span style="color:#a6e22e">onChange</span><span style="color:#f92672">=</span> {(<span style="color:#a6e22e">e</span>)=&gt;<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">txtChanged</span>(<span style="color:#a6e22e">e</span>)} /&gt;
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">txtChanged</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">e</span>)=&gt;{
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// console.log(this.refs.txt.value);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">// console.log(e.target.value);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">//  实现双向数据绑定
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">newValue</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">target</span>.<span style="color:#a6e22e">value</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">setState</span>({
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">msg</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">newValue</span>
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><h2 id="第三方库使用-ant">第三方库使用 ant</h2>
<p>插件 react-app-rewired 替换 react-scripts 实现按需加载css</p>
<p>babel-plugin-import</p>
]]></content>
		</item>
		
		<item>
			<title>Xcode项目文件格式</title>
			<link>https://blog.v5u.win/posts/xcode/xcode%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</link>
			<pubDate>Mon, 24 May 2021 20:19:16 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/xcode/xcode%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</guid>
			<description>原文：http://www.monobjc.net/xcode-project-file-format.html 译者：chai2010 译文：</description>
			<content type="html"><![CDATA[<p>原文：http://www.monobjc.net/xcode-project-file-format.html</p>
<p>译者：chai2010</p>
<p>译文：https://www.jianshu.com/p/bd4e3c1a7276</p>
<h4 id="简介-xxxxcodeproj---projectpbxproj">简介 xxx.xcodeproj -&gt; project.pbxproj</h4>
<blockquote>
<p>Xcode工程文件采用的是老式风格的plist文件（Next公司采用的格式，现在新的plist文件采用xml格式），它使用花括弧来组织结构化的数据。文件的开头是一个显式的编码信息，通常是采用utf8编码。这意味着它不支持带bom(Byte Ordering Mark)头的utf8格式文件，因为在开头的bom部分解析时就会失败。</p>
</blockquote>
<p>注意： 文档以下的部分只是基于 <code>*.pbxproj </code></p>
<p>文件和元素推断的结果。本文并不是对真实的代码做逆向的分析，因此可能有不准确的地方。</p>
<h4 id="唯一标识码">唯一标识码</h4>
<p>文件中的每个元素均由一个24个字符，每个字符对应十六进制的4bit，共96bit的唯一标识码表示。即使是不同的文档之间，唯一标识码依然是唯一的（和UUID的原理类似）。</p>
<p>Xcode生成唯一标识码的算法可能引入了日期、序列和其它一些预定义的值，但是并没有确切的文档说明具体的生成过程。一个合理的推测，跨文档的唯一标识码也基本是唯一的（应该不会出现两个不同元素对应相同唯一标识码的情绪）。</p>
<p>下面的链接是关于CMake对Xcode的支持的讨论（还有其它一些文章），或许可以提供一些信息：</p>
<pre tabindex="0"><code>CMake Apple XCode support A brief look at the Xcode project format More on the Xcode project format Xcode project object UUIDs
</code></pre><h4 id="元素">元素</h4>
<p>以下这些是工程文件中包含的元素类型：</p>
<p>根节点</p>
<pre tabindex="0"><code>PBXBuildFile
PBXBuildPhase
PBXAppleScriptBuildPhase
PBXCopyFilesBuildPhase
PBXFrameworksBuildPhase
PBXHeadersBuildPhase
PBXResourcesBuildPhase
PBXShellScriptBuildPhase
PBXSourcesBuildPhase
PBXContainerItemProxy
PBXFileElement
PBXFileReference
PBXGroup
PBXVariantGroup
PBXTarget
PBXAggregateTarget
PBXLegacyTarget
PBXNativeTarget
PBXProject
PBXTargetDependency
XCBuildConfiguration
XCConfigurationList
</code></pre><p>根节点 根节点包含通用的信息。</p>
<pre tabindex="0"><code>属性  类型  值   注释
archiveVersion  数字  1   默认值
classes 列表  空
objectVersion   数字  参考 XcodeCompatibilityVersion 枚举值
objects 字典  字典  字典的key是前面讲到的唯一标识码
rootObject  引用  一个元素的引用 每个 object 对应一个 PBXProject 元素的引用
</code></pre><p>例子:</p>
<pre tabindex="0"><code>// !$&lt;em&gt;UTF8&lt;/em&gt;$!
{
    archiveVersion = 1;
    classes = {
    };
    objectVersion = 45;
    objects = {
	...
};
rootObject = 0867D690FE84028FC02AAC07 /* Project object */;
}
</code></pre><p>PBXAggregateTarget 不同构建目标的集合（含依赖关系）。</p>
<pre tabindex="0"><code>属性  类型  值   注释
reference   UUID    96bit的表示码
isa PBXAggregateTarget  空
buildConfigurationList  引用  元素的引用   对应 XCConfigurationList 类型
buildPhases 列表  元素引用的列表 列表元素对应 PBXBuildPhase 类型
dependencies    列表  元素引用的列表 列表元素对应 PBXTargetDependency 类型
name    字符串 目标的名字
productName 字符串 产品的名字   ?
</code></pre><p>例子:</p>
<pre tabindex="0"><code>4DA521A6115A00AF007C19C3 /* documentation &lt;em&gt;/ = {
    isa = PBXAggregateTarget;
    buildConfigurationList = 4DA521AE115A00ED007C19C3 /&lt;/em&gt; Build configuration list for PBXAggregateTarget &#34;documentation&#34; &lt;em&gt;/;
    buildPhases = (
        4DA521A5115A00AF007C19C3 /&lt;/em&gt; ShellScript &lt;em&gt;/,
    );
    dependencies = (
        4DA521AA115A00BC007C19C3 /&lt;/em&gt; PBXTargetDependency */,
    );
    name = documentation;
    productName = documentation;
};
</code></pre><p>PBXBuildFile 文件元素，被PBXBuildPhase等作为文件包含或被引用的资源。</p>
<pre tabindex="0"><code>属性  类型  值   注释
reference   UUID    96bit的表示码
isa PBXBuildFile    空
fileRef 引用  元素引用    对应PBXFileReferenc元素
settings    字典  扩展的配置信息，对应 key/value 字典 ?
</code></pre><pre tabindex="0"><code>例子:
4D05CA6B1193055000125045 /* xxx.c in Sources &lt;em&gt;/ = {
    isa = PBXBuildFile;
    fileRef = 4D05CA411193055000125045 /&lt;/em&gt; xxx.c */;
};
</code></pre><p>PBXBuildPhase 一个抽象的构建阶段，最终需有对应到具体化的构建对象。</p>
<p>PBXContainerItemProxy 目标对象的容器。</p>
<pre tabindex="0"><code>属性  类型  值   注释
reference   UUID    96bit的表示码
isa PBXContainerItemProxy   空
containerPortal 引用  元素的引用   引用 PBXProject 元素
proxyType   数字  1
remoteGlobalIDString    引用  元素的引用   使用全局唯一的ID引用
remoteInfo  字符串     ?
</code></pre><p>例子:</p>
<pre tabindex="0"><code>4D22DC0C1167C992007AF714 /* PBXContainerItemProxy &lt;em&gt;/ = {
    isa = PBXContainerItemProxy;
    containerPortal = 08FB7793FE84155DC02AAC07 /&lt;/em&gt; Project object */;
    proxyType = 1;
    remoteGlobalIDString = 87293EBF1153C114007AFD45;
    remoteInfo = xxx;
};
</code></pre><p>PBXCopyFilesBuildPhase 构建阶段复制文件信息。</p>
<pre tabindex="0"><code>属性  类型  值   注释
reference   UUID    96bit的表示码
isa PBXCopyFilesBuildPhase  空
buildActionMask 数字  2^32-1
dstPath 字符串 目标文件的路径
dstSubfolderSpec    数字
files   列表  元素引用的列表 对应 PBXBuildFile 元素
runOnlyForDeploymentPostprocessing  数字  0   ?
</code></pre><p>例子:</p>
<p>MISSING</p>
<p>PBXFileElement 抽象类型，对应具体化的文件和group组元素。</p>
<p>PBXFileReference 用于跟踪项目引用的每一个外部文件，比如源代码文件、资源文件、库文件、生成目标文件等。</p>
<pre tabindex="0"><code>属性  类型  值   注释
reference   UUID    96bit的表示码
isa PBXFileReference    空
fileEncoding    数字  参考 PBXFileEncoding
explicitFileType    字符串 参考 the PBXFileType
lastKnownFileType   字符串 参考 PBXFileType
name    字符串 文件名
path    字符串 文件名路径
sourceTree  字符串 参考 PBXSourceTree    ?
</code></pre><p>例子:</p>
<pre tabindex="0"><code>87293F901153D870007AFD45 /* monobjc.mm */ = {
    isa = PBXFileReference;
    fileEncoding = 4;
    lastKnownFileType = sourcecode.cpp.objcpp;
    name = monobjc.mm;
    path = sources/monobjc.mm;
    sourceTree = &#34;&#34;;
};
</code></pre><p>PBXFrameworksBuildPhase 用于framewrok构建的链接阶段。</p>
<pre tabindex="0"><code>属性  类型  值   注释
reference   UUID    96bit的表示码
isa PBXFrameworksBuildPhase 空
buildActionMask 数字  2^32-1
files   列表  元素引用的列表 对应 PBXBuildFile 类型
runOnlyForDeploymentPostprocessing  数字  0   ?
</code></pre><p>例子:</p>
<pre tabindex="0"><code>4D05CA2C119304BD00125045 /* Frameworks */ = {
    isa = PBXFrameworksBuildPhase;
    buildActionMask = 2147483647;
    files = (
    );
    runOnlyForDeploymentPostprocessing = 0;
};
</code></pre><p>PBXGroup 用于打组文件，或者嵌套组。</p>
<pre tabindex="0"><code>属性  类型  值   注释
reference   UUID    96bit的表示码
isa PBXGroup    空
children    列表  元素引用的列表 对应 PBXFileElement 元素类型
name    字符串 The filename.
sourceTree  字符串 参考 PBXSourceTree    ?
</code></pre><p>例子:</p>
<pre tabindex="0"><code>4DA521A2115A003E007C19C3 /* scripts &lt;em&gt;/ = {
    isa = PBXGroup;
    children = (
    4D22DBAF116742DE007AF714 /&lt;/em&gt; fix_references.sh &lt;em&gt;/,
    4DA521A1115A0032007C19C3 /&lt;/em&gt; generate_descriptors.sh */,
    );
    name = scripts;
    sourceTree = &#34;&#34;;
};
</code></pre><p>PBXHeadersBuildPhase 用于framewrok构建的链接阶段。</p>
<pre tabindex="0"><code>属性  类型  值   注释
reference   UUID    96bit的表示码
isa PBXHeadersBuildPhase    空
buildActionMask 数字  2^32-1
files   列表  元素引用的列表 对应 PBXBuildFile 元素类型
runOnlyForDeploymentPostprocessing  数字  0   ?
</code></pre><p>例子:</p>
<pre tabindex="0"><code>87293EBC1153C114007AFD45 /* Headers */ = {
    isa = PBXHeadersBuildPhase;
    buildActionMask = 2147483647;
    files = (
    );
    runOnlyForDeploymentPostprocessing = 0;
};
</code></pre><p>PBXLegacyTarget MISSING</p>
<p>PBXNativeTarget 对应生成可执行的二进制程序或库文件的本地构建目标对象。</p>
<pre tabindex="0"><code>属性  类型  值   注释
reference   UUID    96bit的表示码
isa PBXNativeTarget 空
buildConfigurationList  引用  元素引用    对应 XCConfigurationList 类型
buildPhases 列表  元素引用的列表 对应 PBXBuildPhase 元素类型
dependencies    列表  元素引用的列表 对应 PBXTargetDependency 元素类型
name    字符串 目标的名字
productInstallPath  字符串 产品的安装路径
productName 字符串 产品的名字
productReference    引用  元素的引用   对应 PBXFileReference 元素类型
productType 字符串 参考 PBXProductType   ?
</code></pre><p>例子:</p>
<pre tabindex="0"><code>8D1107260486CEB800E47090 /* XXX &lt;em&gt;/ = {
    isa = PBXNativeTarget;
    buildConfigurationList = C01FCF4A08A954540054247B /&lt;/em&gt; Build configuration list for PBXNativeTarget &#34;XXX&#34; &lt;em&gt;/;
    buildPhases = (
        8D1107290486CEB800E47090 /&lt;/em&gt; Resources &lt;em&gt;/,
        8D11072C0486CEB800E47090 /&lt;/em&gt; Sources &lt;em&gt;/,
        8D11072E0486CEB800E47090 /&lt;/em&gt; Frameworks &lt;em&gt;/,
    );
    buildRules = (
    );
    dependencies = (
    );
    name = XXX;
    productInstallPath = &#34;$(HOME)/Applications&#34;;
    productName = TrackIt;
    productReference = 8D1107320486CEB800E47090 /&lt;/em&gt; XXX.app */;
    productType = &#34;com.apple.product-type.application&#34;;
};
</code></pre><p>PBXProject 工程，对应构建可执行的二进制目标程序或库。</p>
<pre tabindex="0"><code>属性  类型  值   注释
reference   UUID    96bit的表示码
isa PBXProject  空
buildConfigurationList  引用  元素的引用   对应 XCConfigurationList 类型
compatibilityVersion    字符串 XcodeCompatibilityVersion 对应的字符串表示
developmentRegion   字符串 开发者所在区域
hasScannedForEncodings  数字  0 or 1  是否已经扫描了文件编码信息
knownRegions    列表  字符串列表   不同区域的本地资源文件列表
mainGroup   引用  元素的引用   对应 PBXGroup 类型
productRefGroup 引用  元素的引用   对应 PBXGroup 类型
projectDirPath  字符串 相对工程的相对路径
projectReferences   字典列表    列表中的每个字典元素包含 ProductGroup和ProjectRef两个成员
projectRoot 字符串 根目录路径（相对路径）
targets 列表  元素引用的列表 对应 PBXTarget 元素类型
</code></pre><p>例子:</p>
<pre tabindex="0"><code>29B97313FDCFA39411CA2CEA /* Project object &lt;em&gt;/ = {
        isa = PBXProject;
        buildConfigurationList = C01FCF4E08A954540054247B /&lt;/em&gt; Build configuration list for PBXProject &#34;XXX&#34; &lt;em&gt;/;
        compatibilityVersion = &#34;Xcode 2.4&#34;;
        developmentRegion = English;
        hasScannedForEncodings = 1;
        knownRegions = (
                English,
                Japanese,
                French,
                German,
                en,
        );
        mainGroup = 29B97314FDCFA39411CA2CEA /&lt;/em&gt; XXX&lt;em&gt;/;
        projectDirPath = &#34;&#34;;
        projectRoot = &#34;&#34;;
        targets = (
             8D1107260486CEB800E47090 /&lt;/em&gt; XXX*/,
        );
};
</code></pre><p>PBXResourcesBuildPhase 构建阶段需要复制的资源文件。</p>
<pre tabindex="0"><code>属性  类型  值   注释
reference   UUID    96bit的表示码
isa PBXResourcesBuildPhase  空
buildActionMask 数字  2^32-1
files   列表  元素引用的列表 对应 PBXBuildFile 元素类型
runOnlyForDeploymentPostprocessing  数字  0   ?
</code></pre><p>例子:</p>
<pre tabindex="0"><code>8D1107290486CEB800E47090 /* Resources &lt;em&gt;/ = {
        isa = PBXResourcesBuildPhase;
        buildActionMask = 2147483647;
        files = (
                535C1E1B10AB6B6300F50231 /&lt;/em&gt; ReadMe.txt in Resources &lt;em&gt;/,
                533B968312721D05005E617D /&lt;/em&gt; Credits.rtf in Resources &lt;em&gt;/,
                533B968412721D05005E617D /&lt;/em&gt; InfoPlist.strings in Resources &lt;em&gt;/,
                533B968512721D05005E617D /&lt;/em&gt; MainMenu.nib in Resources &lt;em&gt;/,
                533B968612721D05005E617D /&lt;/em&gt; TableEdit.nib in Resources &lt;em&gt;/,
                533B968712721D05005E617D /&lt;/em&gt; TestWindow.nib in Resources */,
        );
        runOnlyForDeploymentPostprocessing = 0;
};
</code></pre><p>PBXShellScriptBuildPhase 用于构建阶段复制资源文件的shell脚本。</p>
<pre tabindex="0"><code>属性  类型  值   注释
reference   UUID    96bit的表示码
isa PBXShellScriptBuildPhase    空
buildActionMask 数字  2^32-1
files   列表  元素引用的列表 对应 PBXBuildFile 类型
inputPaths  列表  字符串列表   输入的路径列表
outputPaths 列表  字符串列表   输出的路径列表
runOnlyForDeploymentPostprocessing  数字  0
shellPath   字符串 shell解释器程序的路径
shellScript 字符串 shell脚本程序的内容    ?
</code></pre><p>例子:</p>
<pre tabindex="0"><code>4D22DBAE11674009007AF714 /* ShellScript */ = {
        isa = PBXShellScriptBuildPhase;
        buildActionMask = 2147483647;
        files = (
        );
        inputPaths = (
        );
        outputPaths = (
        );
        runOnlyForDeploymentPostprocessing = 0;
        shellPath = /bin/sh;
        shellScript = &#34;./fix_references.sh&#34;;
};
</code></pre><p>PBXSourcesBuildPhase 构建阶段中编译源文件。</p>
<pre tabindex="0"><code>属性  类型  值   注释
reference   UUID    96bit的表示码
isa PBXSourcesBuildPhase    空
buildActionMask 数字  2^32-1
files   列表  元素引用的列表 对应 PBXBuildFile 类型
runOnlyForDeploymentPostprocessing  数字  0   ?
</code></pre><p>例子:</p>
<pre tabindex="0"><code>4DF8B22D1171CFBF0081C1DD /* Sources &lt;em&gt;/ = {
        isa = PBXSourcesBuildPhase;
        buildActionMask = 2147483647;
        files = (
                4DF8B23E1171D0310081C1DD /&lt;/em&gt; test.mm in Sources */,
        );
        runOnlyForDeploymentPostprocessing = 0;
};
</code></pre><p>PBXTarget 抽象对象，对应具体化的构建目标。</p>
<p>PBXTargetDependency 目标的外部依赖管理。</p>
<pre tabindex="0"><code>属性  类型  值   注释
reference   UUID    96bit的表示码
isa PBXTargetDependency 空
target  引用  元素引用    对应 PBXNativeTarget 类型
targetProxy 引用  元素引用    对应 PBXContainerItemProxy 类型
</code></pre><p>例子:</p>
<pre tabindex="0"><code>4D22DC0D1167C992007AF714 /* PBXTargetDependency &lt;em&gt;/ = {
        isa = PBXTargetDependency;
        target = 87293EBF1153C114007AFD45 /&lt;/em&gt; libXXX &lt;em&gt;/;
        targetProxy = 4D22DC0C1167C992007AF714 /&lt;/em&gt; PBXContainerItemProxy */;
};
</code></pre><p>PBXVariantGroup 对不同地区资源文件的引用管理。</p>
<pre tabindex="0"><code>属性  类型  值   注释
reference   UUID    96bit的表示码
isa PBXVariantGroup 空
children    列表  元素引用的列表 对应 PBXFileElement 类型
name    字符串 文件名
sourceTree  字符串 参考 PBXSourceTree    ?
</code></pre><p>例子:</p>
<pre tabindex="0"><code>870C88031338A77600A69309 /* MainMenu.xib &lt;em&gt;/ = {
        isa = PBXVariantGroup;
        children = (
                870C88041338A77600A69309 /&lt;/em&gt; en */,
        );
        name = MainMenu.xib;
        sourceTree = &#34;&#34;;
};
</code></pre><p>XCBuildConfiguration 构建配置元素。</p>
<pre tabindex="0"><code>属性  类型  值   注释
reference   UUID    96bit的表示码
isa XCBuildConfiguration    空
baseConfigurationReference  字符串 xcconfig文件的路径
buildSettings   字典  构建配置信息的字典
name    字符串 配置名 ?
</code></pre><p>例子:</p>
<pre tabindex="0"><code>870C88151338ABB600A69309 /* Debug &lt;em&gt;/ = {
        isa = XCBuildConfiguration;
        buildSettings = {
                PRODUCT_NAME = &#34;$(TARGET_NAME)&#34;;
        };
        name = Debug;
};
870C88161338ABB600A69309 /&lt;/em&gt; Release */ = {
        isa = XCBuildConfiguration;
        buildSettings = {
                PRODUCT_NAME = &#34;$(TARGET_NAME)&#34;;
        };
        name = Release;
};
</code></pre><p>XCConfigurationList 构建配置相关元素的列表。</p>
<pre tabindex="0"><code>属性  类型  值   注释
reference   UUID    96bit的表示码
isa XCConfigurationList 空
buildConfigurations 列表  引用对象的列表 每个引用对象对应一个 XCBuildConfiguration 元素
defaultConfigurationIsVisible   数字  0
defaultConfigurationName    字符串 配置文件的默认名称   ?
</code></pre><p>例子:</p>
<pre tabindex="0"><code>870C87E41338A77600A69309 /* Build configuration list for PBXProject &#34;CocoaApp&#34; &lt;em&gt;/ = {
        isa = XCConfigurationList;
        buildConfigurations = (
                870C88061338A77600A69309 /&lt;/em&gt; Debug &lt;em&gt;/,
                870C88071338A77600A69309 /&lt;/em&gt; Release */,
        );
        defaultConfigurationIsVisible = 0;
        defaultConfigurationName = Release;
};
</code></pre>]]></content>
		</item>
		
		<item>
			<title>xcode优化编译时间</title>
			<link>https://blog.v5u.win/posts/xcode/%E4%BC%98%E5%8C%96%E7%BC%96%E8%AF%91%E6%97%B6%E9%97%B4/</link>
			<pubDate>Mon, 24 May 2021 20:17:55 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/xcode/%E4%BC%98%E5%8C%96%E7%BC%96%E8%AF%91%E6%97%B6%E9%97%B4/</guid>
			<description>[TOC] Xcode 优化编译时间设置 显示构建时间 首先，我们需要知道 Xcode 花了多少时间来构建我们的项目。默认情况下，Xcode 并不会显示构建时间，因此我们必须启用</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<p>Xcode 优化编译时间设置</p>
<h5 id="显示构建时间">显示构建时间</h5>
<p>首先，我们需要知道 Xcode 花了多少时间来构建我们的项目。默认情况下，Xcode 并不会显示构建时间，因此我们必须启用这项功能。</p>
<p>1、在终端运行以下命令</p>
<pre tabindex="0"><code>defaults write com.apple.dt.Xcode ShowBuildOperationDuration -bool YES
</code></pre><h5 id="构建系统-设置的地方没有找到">构建系统, 设置的地方没有找到</h5>
<p>Xcode 9 在其预览版中引入了一个新的构建系统。而到了 Xcode 10，新的构建系统则成了默认设置。这个新的构建系统的主要目标就是要减少总体的构建时间。</p>
<p><strong>Action Points</strong></p>
<p>要使用新的构建系统，可以在 <strong>File -&gt; Workspace/Project Settings</strong> 中启用它。</p>
<h5 id="架构影响-architecture">架构影响 Architecture</h5>
<p>在开发过程中，我们更关注构建时间，这实际上会占用我们的大部分时间。当以调试模式来构建项目时，最好只针对特定的架构来构建。虽然这是 Xcode 的默认选项，但以防万一，最好先确认一下。</p>
<p>设备和模拟器有不同的架构，但通常在开发过程中，我们希望 Xcode 或者在设备或者在模拟器上运行。所以，设置 <code>Build Active Architecture Only</code> 为 <code>Yes</code> ，来要求编译器仅生成一种架构的二进制文件。</p>
<p><strong>Action Points</strong></p>
<p>在项目的 <code>Build Settings</code> -&gt; <code>Build Active Architecture Only</code> 中，将 <code>Debug</code> 设置为 <code>Yes</code> ，将 <code>Release</code> 设置为 <code>No</code> 。</p>
<h5 id="编译模式-compilation-mode">编译模式 Compilation Mode</h5>
<p><code>Compilation Mode</code> 告诉编译器是构建项目中所有文件还是仅构建修改后的文件。 <code>Incremental</code> （增量）表示仅编译已修改的文件， <code>Whole Module</code> 表示不考虑修改而构建项目中所有文件。</p>
<p>1、进行 <code>Build Settings</code> -&gt; <code>Compilation Mode</code> 。默认情况下，Xcode 10+ 是将其设置为 <code>Incremental(Debug)</code> 和 <code>Whole Module(Release)</code> 。</p>
<h5 id="优化级别-optimization-level">优化级别 Optimization Level</h5>
<p>告诉编译器将构建优化到某个级别。通常，Debug 的构建设置为 <code>No Optimization</code> ,这样可以调试通过 let/var 包含的值。这在调试阶段是非常有必要的。</p>
<p>1、进入 <code>Build Settings</code> -&gt; <code>Optimization Level</code> ，然后查看设置的值</p>
<p>2、如果不进行大量调度，最好将其设置为 <code>Optimize for Speed</code> ，由于编译器将省略将值附加到调试器线程的步骤，因此将减少构建时间。</p>
<blockquote>
<p>注意：还有另一个设置，即 <code>Optimize for Size</code> ，通常是指机器代码生成的整体大小，而不是应用程序的大小。鉴于此，我们主要关注减少本文讨论的“构建时间”，因此忽略这一项。</p>
</blockquote>
<h5 id="依赖管理">依赖管理</h5>
<p>iOS有2个主要的依赖管理器：Carthage和Cocoapods。</p>
<p>通常，在大多数项目中，一旦集成了依赖库 lib/module/framework，我们就希望不更改这些库的源码。即使要修改，将这些修改集中在独立的 repo/module/framework 中，然后将特定 module/framework 集成到项目中，始终是一种最佳实践。基本思想是在模块的情况下，尽可能地分离 module/framework。</p>
<p>静态/动态 framework 在将任何第三方库集成到我们的 iOS 项目中时非常有用，因为一旦生成 framework，就不会在项目中重新编译。这可以节省大量时间，因此，这也是一些人选择 Carthage，而不是 Cocoapods 的原因之一。</p>
<p>当使用 Cocoapods 来管理依赖项时，每次编译工程，所有的依赖项都会被编译。而如果使用 Carthage，在添加依赖项时，依赖库只被编译一次。它会生成一个 framework，并链接到工程，在构建工程时，不会再去编译依赖项。</p>
<h5 id="让编译器并行执行构建">让编译器并行执行构建</h5>
<h6 id="1-构建的机器内核数">1. 构建的机器内核数</h6>
<p><strong>先决条件—查看Mac的内核数量</strong></p>
<p>1、在终端运行以下命令：</p>
<pre tabindex="0"><code>sysctl -n hw.ncpu
</code></pre><p>2、它会输出一个整数，表示计算机的内核数：</p>
<pre tabindex="0"><code>4 // 这是我的内核数
</code></pre><p>有 12 个内核的 iMac 这样的机器运行相同构建的速度比我的快 3 倍。因此，计算机的内核数起着很大的作用，它与构建执行时间成正比。</p>
<p>默认情况下，Xcode 使用与计算机 CPU 内核数相同的线程数。但是，调整线程数，使用更多的线程，可以显著减少构建时间（在某些情况下可以减少 30%）。这个过程利用了处理器处理多线程或模拟额外内核的能力。需要注意的是，你需要通过尝试来确定代码并行构建的收益情况，然后相应地调整线程数。</p>
<p><strong>修改线程数</strong></p>
<p>让我们尝试修改线程数。从终端运行以下命令：</p>
<pre tabindex="0"><code>默认写入com.apple.Xcode PBXNumberOfParallelBuildSubtasks 8
</code></pre><p>接下来是使并行构建执行更简单的方法。这是通过Xcode UI本身完成的，后者会自动执行此优化。</p>
<h6 id="2-执行并行构建">2. 执行并行构建</h6>
<p>我们将研究如何在Xcode中启用并行构建执行。</p>
<p><strong>Action Points</strong></p>
<p>导航到 <code>Edit Scheme -&gt; Build</code> ，确保勾选 <code>Parallelize Build</code> 和 <code>Find Implicit Dependencies</code> 。</p>
<h6 id="build-hypothesis">Build Hypothesis</h6>
<p>Xcode 编译器获取项目的源代码，并构建一个树状结构来定义模块的依赖关系。然后采用自下而上的方法进行编译，即首先编译最小依赖性的模块。</p>
<p>通常，Xcode 项目会依赖于其它 framework 或 target。例如，当一个项目添加了 <code>Target Dependencies</code> 时，编译器首先要确保这边链接的目标 framework/module 先被编译。同时，在执行 test target 时，编译器首先确保 app target 被编译。因此，依赖关系在使编译器以最佳方式执行并行构建任务中起着重要的作用。在这里，我们可以做的是：</p>
<p>• 按执行顺序列出所有依赖项</p>
<p>• 按执行顺序列表项目中的所有 target</p>
<p>• 减少依赖</p>
<p>• 解耦或模块化代码库，以生成独立的模块</p>
<p>尽管依赖关系始终由编译器在内部进行标识，但最好将它们按照执行顺序放置。这最终可以帮助编译器在构建过程中，减少内部重新排序依赖的时间。</p>
<p>正确处理完后，这将让构建性能提高 2 ~ 3 倍，当然这取决于项目的复杂性。</p>
<p><strong>Real-time Effect</strong></p>
<p>对于没有或很少依赖项的小型业余项目来说，结果可能适得其反，即并行构建实际上会增加构建时间。我们可以在 SwiftBlog 项目上观察到这一点。</p>
<p>但是，对于有大量依赖关系的实际项目，最佳做法是使用并行构建。</p>
<p>关于依赖关系排序的另一个重要特征是链接框架，我们下面来讨论。</p>
<h5 id="链接框架-link-frameworks">链接框架 Link Frameworks</h5>
<p><code>Link Frameworks Automatically</code> 表示添加到项目中的任何 framework 都应自动链接并由编译器在构建过程中考虑使用。</p>
<p>Xcode 默认将 <code>Link Frameworks Automatically</code> 设置为 <code>Yes</code> 。</p>
<p>但是，苹果并不保证这一点，而是希望开发人员将任何外部 framework 链接到 <code>Build Phases -&gt; Link Binary With Libraries</code> 或 <code>Target Dependencies</code> 。我们不必对 <code>UIKit</code> 、 <code>Foundation</code> 这些隐式依赖项执行此步骤。</p>
<p>因此，这里的总体目标是对于外部 framework 不要过多依赖 <code>Link Frameworks Automatically</code>。最好在构建阶段中手动链接依赖项。</p>
<p><strong>所以怎么实现上面的目标：在构建阶段中手动链接依赖项。我还是没有找到办法！</strong></p>
<h5 id="识别耗时的代码">识别耗时的代码</h5>
<p>Xcode 允许我们识别导致编译时间严重滞后的代码块。你可以为代码块执行指定一个时间限制，交让 Xcode 对超出指定时间限制的代码给出警告。</p>
<p><strong>Action Points</strong></p>
<p>1、导航到 <code>Build Settings -&gt; Other Swift Flag</code> ，并添加以下标记：</p>
<pre tabindex="0"><code>-warn-long-function-bodies=200

-warn-long-expression-type-checking=200
</code></pre><p>整数值 200 代表毫秒数。因此，在执行构建后，Xcode 将对任何执行时间超过 200 毫秒的函数或表达式给出警告。</p>
<p>2、添加这些标志后，无论何时构建项目，Xcode 都应该显示警告。</p>
<p>当你需要确定消耗比预期时间更多的那些函数或表达式时，这非常有用。</p>
<h5 id="dsym的影响">dSYM的影响</h5>
<p>dSYM 文件对崩溃报告文件的去符号化过程非常有用。编译器需要一些时间来生成 dSYM 文件。仅当没有附加 Xcode 调试器时，启用它才有意义。因此，最好在模拟器上运行时将其禁用。</p>
<p><strong>Action Points</strong></p>
<p>1、导航到 Xcode 的 <code>Build Settings</code> -&gt; <code>Build Options</code></p>
<p>2、在 <code>Debug Information Format</code> 下，设置值 为 <code>DWARF(Debug)</code> 和 <code>DWARF with dSYM File(Release)</code>  注：xcode11默认就是这样。</p>
<p>这个设置告诉编译器在调试模式下省略创建 dSYM 文件的过程。这在一定程序上能节省构建时间。</p>
<h5 id="objective-cswift-互操作性-这个重点关注">Objective-C/Swift 互操作性 这个重点关注</h5>
<p>随着 Swift 的到来，出现了混合开发，工具的一部分旧代码库已迁移到最新语言，而另一部分继续使用Objective-C。最终要求开发人员以某种方式处理互操作性。</p>
<p>为了实现互操作性，我们必须处理两种类型的头文件：</p>
<p>• Bridging Header &ndash; 包含应公开给 Swift 的所有 Objective-C 接口</p>
<p>• Generated Header &ndash; 包含所有应公开给 Objective-C 的 Swift 接口</p>
<p>这些头文件定义了两种语言编写的文件的依赖性。这两种语言的文件之间的互操作性是通过 Bridging/Generated Header 实现的。对头文件的更改将极大地影响构建时间。例如，Swift 接口文件中的微小变化会让编译器重新编译所有引用了该文件的Objective-C文件，反之亦然。</p>
<p>所以，最好只在两种语言的文件中同时公开所需的接口。通过添加访问修饰符：private/protected，避免添加/导入不必要的文件。</p>
<h5 id="减少-uitests-执行时间">减少 UITests 执行时间</h5>
<p>这听起来有些怪异，因为从技术上讲这没有意义，但确实如此。</p>
<p>在运行 UI 测试用例时，请尝试将模拟器的物理和像素窗口大小调整为尽可能最小。然后，可以看到 UITest 用例执行时间的一些改善。</p>
<p>发生这种情况是因为 Xcode 运行 UI 测试用例时，通常会在模拟器上安装并运行实际的应用程序以执行任何给定的UI测试用例。这意味着它实际上就是使用该应用程序的真实用户。因此，就像使用该应用程序的真实用户一样，在运行UI测试用例时，会消耗系统内核/资源。</p>
<p>因此，始终建议将模拟器设置降至最低，以减少对系统资源的使用。这最终将加快测试用例的执行速度，并减少总体执行时间。</p>
]]></content>
		</item>
		
		<item>
			<title>Flutter问题点收集</title>
			<link>https://blog.v5u.win/posts/flutter/flutter%E9%97%AE%E9%A2%98%E7%82%B9%E6%94%B6%E9%9B%86/</link>
			<pubDate>Mon, 24 May 2021 20:09:00 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/flutter/flutter%E9%97%AE%E9%A2%98%E7%82%B9%E6%94%B6%E9%9B%86/</guid>
			<description>前言：本质上来说flutter是一个基于2D渲染引擎的UI开发框架。 所以它具有一般的游戏引擎+原生混和开发所具有的问题。正好我现在在做U3D</description>
			<content type="html"><![CDATA[<blockquote>
<p>前言：本质上来说flutter是一个基于2D渲染引擎的UI开发框架。</p>
</blockquote>
<p>所以它具有一般的游戏引擎+原生混和开发所具有的问题。正好我现在在做U3D和iOS的混合开发，了解一点。比如：没有原生平台的硬件开发能力，无法支持应用权限管理。UI框架和原生通信的异步和同步问题。</p>
<p>以下是flutter的问题：</p>
<ol>
<li>图片加载问题，不同图片还好，列表动图加载，内存抖动很严重。</li>
<li>WebView开发体验不好，Flutter并没有内置的webview。需要使用原生的。</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>制作framework总结</title>
			<link>https://blog.v5u.win/posts/ios/%E5%88%B6%E4%BD%9Cframework%E6%80%BB%E7%BB%93/</link>
			<pubDate>Mon, 24 May 2021 19:15:35 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/%E5%88%B6%E4%BD%9Cframework%E6%80%BB%E7%BB%93/</guid>
			<description>ios frameworks 制作总结 前提，默认项目已经创建好，代码都有了。 更改设置变量 TARGETS —&amp;gt; Build Settings 中设置相关项 （1).Build Active Architecture Only 设置为NO的意思是当前打包</description>
			<content type="html"><![CDATA[<h1 id="ios-frameworks-制作总结">ios frameworks 制作总结</h1>
<h2 id="前提默认项目已经创建好代码都有了">前提，默认项目已经创建好，代码都有了。</h2>
<h2 id="更改设置变量">更改设置变量</h2>
<ol>
<li>TARGETS —&gt; Build Settings 中设置相关项 （1).Build Active Architecture Only 设置为NO的意思是当前打包的.framework支持所有的设备.否则打包时只能用当前版本的模拟器或真机运行.</li>
<li>Build Setting 搜索linking     设置Dead Code Stripping 为NO是编译选项优化,包瘦身,(可不改)  Mach-O Type 选中StaticLibrary (静态库)  Xcode默认是动态库.</li>
<li>设置framework最低支持的版本</li>
<li>TARGETS —&gt; Build Phases 将需要呈现给来的头文件,直接从Project拖到Public中. 不想呈现出来的.h文件不建议拖到Private中. 放在project中即可</li>
<li>在进行编译之前应该设置为release模式，xcode 左上角 edit scheme</li>
<li>来到工程目录树，Products下的文件都是红色的，现在我们选中.framework文件，分别真机和模拟器运行一遍（成功运行。然后Show in Finder 找到对应的 .framework文件(上级目录可以看出是真机还是模拟器文件夹)
真机和模拟器运行成功的文件是在这俩个文件夹内的</li>
</ol>
<h2 id="合并二进制包">合并二进制包</h2>
<ol>
<li>真机版本和模拟器版本framework合并 (1).查看架构信息 打开终端使用命令行 lipo -info 查看framework架构信息 真机版本</li>
<li>合并真机模拟器版本
因为以上获取的framework只能在对应的版本上运行（即真机只能在设备上运行模拟器版本只能在模拟器上面运行使用）所以需要合并为通用版本
命令行语句：lipo -create &ldquo;真机版本路径&rdquo; &ldquo;模拟器版本路径&rdquo; -output &ldquo;合并后的文件路径&rdquo;
<code>sudo lipo -create release/APPVest simulator/APPVest -output ./APPVest</code></li>
<li>检查合并包的架构 lipo -info
然后将合并后的文件替换任意一个framework，release或者simulator的都行。</li>
</ol>
<h2 id="使用">使用</h2>
<p>制作好的framework集成使用 把制作好的framework拖入到工程中，引用相关头文件，然后初始化进行暴露方法调用
参考：https://juejin.im/post/5c88e48b6fb9a049d132ff13</p>
]]></content>
		</item>
		
		<item>
			<title>V2ray记录</title>
			<link>https://blog.v5u.win/posts/system/v2ray%E8%AE%B0%E5%BD%95/</link>
			<pubDate>Mon, 24 May 2021 19:04:35 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/v2ray%E8%AE%B0%E5%BD%95/</guid>
			<description>[TOC] v2ray是什么？ v2是继小飞机ss之后的下一个技术方案。（不能明说） v2 的优点：转发容易，匿名性高，可多级代理转发。 v2的缺点：配置相对复</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<p>v2ray是什么？
v2是继小飞机ss之后的下一个技术方案。（不能明说）
v2 的优点：转发容易，匿名性高，可多级代理转发。
v2的缺点：配置相对复杂，客户端生态不完善。
下面从安装+使用，两个方面总结。
[TOC]
参考https://toutyrater.github.io/basic/vmess.html
环境建议：使用debain9，Ubuntu 16以上，不推荐centos</p>
<h2 id="安装">安装</h2>
<p>wget <a href="https://install.direct/go.sh">https://install.direct/go.sh</a>
bash go.sh
或
bash &lt;(curl -s -L <a href="https://install.direct/go.sh">https://install.direct/go.sh</a>)</p>
<h2 id="配置">配置</h2>
<p>vi /etc/v2ray/config.json</p>
<h2 id="启动">启动</h2>
<p>sudo systemctl start v2ray
在首次安装完成之后，V2Ray 不会自动启动，需要手动运行上述启动命令。而在已经运行 V2Ray 的 VPS 上再次执行安装脚本，安装脚本会自动停止 V2Ray 进程，升级 V2Ray 程序，然后自动运行 V2Ray。在升级过程中，配置文件不会被修改。
对于安装脚本，还有更多用法，在此不多说了，可以执行 bash go.sh -h 看帮助。
使用
service v2ray start
service v2ray status
有时候无法连接Google ，服务器没有问题，需要重启一下客户端。
客户端 列表
<a href="https://www.v2ray.com/awesome/tools.html">https://www.v2ray.com/awesome/tools.html</a>
安装后的显示信息：</p>
<pre tabindex="0"><code>Extracting V2Ray package to /tmp/v2ray.
Archive:  /tmp/v2ray/v2ray.zip
  ...
PORT:123456
UUID:xxx
Updating software repo
Installing daemon
</code></pre><p>centos6 问题解决 uninstall daemon &amp; systemctl not found
因为 centos6没有 systemctl 并且，v2ray不支持 centos6
<a href="https://hellojxl.com/2018/07/27/v2ray%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F%E8%AE%B0%E5%BD%95/">https://hellojxl.com/2018/07/27/v2ray%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F%E8%AE%B0%E5%BD%95/</a>
开机启动</p>
<pre tabindex="0"><code>    vi /etc/init.d/v2ray
    #!/bin/sh
    #
    # v2ray        Startup script for v2ray
    #
    # chkconfig: - 24 76
    # processname: v2ray
    # pidfile: /var/run/v2ray.pid
    # description: V2Ray proxy services
    #
    ### BEGIN INIT INFO
    # Provides:          v2ray
    # Required-Start:    $network $local_fs $remote_fs
    # Required-Stop:     $remote_fs
    # Default-Start:     2 3 4 5
    # Default-Stop:      0 1 6
    # Short-Description: V2Ray proxy services
    # Description:       V2Ray proxy services
    ### END INIT INFO
    DESC=v2ray
    NAME=v2ray
    DAEMON=/usr/bin/v2ray/v2ray
    PIDFILE=/var/run/$NAME.pid
    LOCKFILE=/var/lock/subsys/$NAME
    SCRIPTNAME=/etc/init.d/$NAME
    RETVAL=0
    DAEMON_OPTS=&#34;-config /etc/v2ray/config.json&#34;
    # Exit if the package is not installed
    [ -x $DAEMON ] || exit 0
    # Read configuration variable file if it is present
    [ -r /etc/default/$NAME ] &amp;&amp; . /etc/default/$NAME
    # Source function library.
    . /etc/rc.d/init.d/functions
    start() {
      local pids=$(pgrep -f $DAEMON)
      if [ -n &#34;$pids&#34; ]; then
        echo &#34;$NAME (pid $pids) is already running&#34;
        RETVAL=0
        return 0
      fi
      echo -n $&#34;Starting $NAME: &#34;
      mkdir -p /var/log/v2ray
      $DAEMON $DAEMON_OPTS 1&gt;/dev/null 2&gt;&amp;1 &amp;
      echo $! &gt; $PIDFILE
      sleep 2
      pgrep -f $DAEMON &gt;/dev/null 2&gt;&amp;1
      RETVAL=$?
      if [ $RETVAL -eq 0 ]; then
        success; echo
        touch $LOCKFILE
      else
        failure; echo
      fi
      return $RETVAL
    }
    stop() {
      local pids=$(pgrep -f $DAEMON)
      if [ -z &#34;$pids&#34; ]; then
        echo &#34;$NAME is not running&#34;
        RETVAL=0
        return 0
      fi
      echo -n $&#34;Stopping $NAME: &#34;
      killproc -p ${PIDFILE} ${NAME}
      RETVAL=$?
      echo
      [ $RETVAL = 0 ] &amp;&amp; rm -f ${LOCKFILE} ${PIDFILE}
    }
    reload() {
      echo -n $&#34;Reloading $NAME: &#34;
      killproc -p ${PIDFILE} ${NAME} -HUP
      RETVAL=$?
      echo
    }
    rh_status() {
      status -p ${PIDFILE} ${DAEMON}
    }
    # See how we were called.
    case &#34;$1&#34; in
      start)
        rh_status &gt;/dev/null 2&gt;&amp;1 &amp;&amp; exit 0
        start
        ;;
      stop)
        stop
        ;;
      status)
        rh_status
        RETVAL=$?
        ;;
      restart)
        stop
        start
        ;;
      reload)
        reload
      ;;
      *)
        echo &#34;Usage: $SCRIPTNAME {start|stop|status|reload|restart}&#34; &gt;&amp;2
        RETVAL=2
      ;;
    esac
    exit $RETVAL
</code></pre><h2 id="增加权限并加入开机启动">增加权限并加入开机启动</h2>
<pre tabindex="0"><code>    chmod a+x /etc/init.d/v2ray
    chkconfig v2ray on
    service v2ray start
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Cocoapods最佳实践</title>
			<link>https://blog.v5u.win/posts/ios/ios-cocoapods%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
			<pubDate>Mon, 19 Apr 2021 15:49:24 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-cocoapods%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
			<description>对于cocoapods的最佳实践有这么几个问题需要回答： cocoapods使用过程中有什么问题 如何解决，基于什么原理 cocoapods使用过</description>
			<content type="html"><![CDATA[<p>对于cocoapods的最佳实践有这么几个问题需要回答：</p>
<ol>
<li>cocoapods使用过程中有什么问题</li>
<li>如何解决，基于什么原理</li>
</ol>
<h3 id="cocoapods使用过程中有什么问题">cocoapods使用过程中有什么问题？</h3>
<p>主要是遇到多人协作和多项目协作时，每个人的本地Ruby版本和cocoapod版本不一致，有可能会导致一些无法预料的问题，和沟通上的成本。比如：对同一个问题的描述，看到的问题不一样，原因是pod版本不同导致的。</p>
<h3 id="如何解决基于什么原理">如何解决，基于什么原理？</h3>
<p>cocoapods实际上是一个Ruby的第三方包，基于Ruby的包管理，我们可以管理cocoapods，然后我们基于cocoapods管理iOS上的第三方包。
使用 gem gvm 进行版本管理</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>brew install rbenv
</span></span><span style="display:flex;"><span>rbenv install 2.7.0 <span style="color:#75715e"># 安装ruby版本</span>
</span></span><span style="display:flex;"><span>rbenv shell 2.7.0 <span style="color:#75715e"># 使版本生效</span>
</span></span><span style="display:flex;"><span>gem pristine --all <span style="color:#75715e"># 切换ruby版本后 执行，不然有些库bundle找不到</span>
</span></span><span style="display:flex;"><span>ruby --version <span style="color:#75715e"># 检查版本</span>
</span></span><span style="display:flex;"><span>ruby 2.7.0p0 <span style="color:#f92672">(</span>2019-12-25 revision 647ee6f091<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>x86_64-darwin19<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>which ruby <span style="color:#75715e"># 查看 ruby 位置</span>
</span></span><span style="display:flex;"><span>/Users/gua/.rbenv/shims/ruby
</span></span><span style="display:flex;"><span>which gem <span style="color:#75715e"># 查看 gem 位置</span>
</span></span><span style="display:flex;"><span>/Users/bytedance/.rbenv/shims/gem
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>file<span style="color:#960050;background-color:#1e0010">：</span><span style="color:#66d9ef">Gemfile</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># frozen_string_literal: true</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>source <span style="color:#e6db74">&#34;https://rubygems.org&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>git_source(<span style="color:#e6db74">:github</span>) {<span style="color:#f92672">|</span>repo_name<span style="color:#f92672">|</span> <span style="color:#e6db74">&#34;https://github.com/</span><span style="color:#e6db74">#{</span>repo_name<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># gem &#34;rails&#34;</span>
</span></span><span style="display:flex;"><span>gem <span style="color:#e6db74">&#34;cocoapods&#34;</span>, <span style="color:#e6db74">&#34;1.9.3&#34;</span>
</span></span></code></pre></div><p>Bundler 能够跟踪并安装所需的特定版本的 gem，以此来为 Ruby 项目提供一致的运行环境。</p>
<p>Bundler 是 Ruby 依赖管理的一根救命稻草，它可以保证你所要依赖的 gem 如你所愿地出现 在开发、测试和生产环境中。 利用 Bundler 启动项目简单到只用一条命令：<code>bundle install</code>。</p>
<blockquote>
<p>Bundler provides a consistent environment for Ruby projects by tracking and installing the exact gems and versions that are needed.</p>
</blockquote>
<blockquote>
<p>Bundler is an exit from dependency hell, and ensures that the gems you need are present in development, staging, and production. Starting work on a project is as simple as <code>bundle install</code>.</p>
</blockquote>
<p>开始一个项目的工作很简单bundle install。
bundle exec pod install
bundle exec gem list
执行 bundle install 拿到别人的项目，执行这个，下载好依赖的ruby库
新项目使用顺序：</p>
<ol start="0">
<li>创建一个xcode项目</li>
<li>bundle init
首先先来初始化一个 Bundler 环境（其实就是自动创建一个 Gemfile 文件）：请参考上文Gemfile</li>
<li>bundle exec pod init 创建Podfile文件</li>
<li>bundle exec pod install 配置完pod依赖库后执行pod 初始化</li>
<li>over</li>
</ol>
<p>本文参考：<a href="https://mp.weixin.qq.com/s/fo5MNM9WpknvvehYo4V1Qw">知识小集</a> 以及自己使用过程中遇到的问题</p>
]]></content>
		</item>
		
		<item>
			<title>负数强转成无符号数，一定比所有有符号数大？</title>
			<link>https://blog.v5u.win/posts/system/system-%E8%B4%9F%E6%95%B0%E5%BC%BA%E8%BD%AC%E6%88%90%E6%97%A0%E7%AC%A6%E5%8F%B7%E6%95%B0%E4%B8%80%E5%AE%9A%E6%AF%94%E6%89%80%E6%9C%89%E6%9C%89%E7%AC%A6%E5%8F%B7%E6%95%B0%E5%A4%A7/</link>
			<pubDate>Mon, 19 Apr 2021 15:21:47 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-%E8%B4%9F%E6%95%B0%E5%BC%BA%E8%BD%AC%E6%88%90%E6%97%A0%E7%AC%A6%E5%8F%B7%E6%95%B0%E4%B8%80%E5%AE%9A%E6%AF%94%E6%89%80%E6%9C%89%E6%9C%89%E7%AC%A6%E5%8F%B7%E6%95%B0%E5%A4%A7/</guid>
			<description>今天看到一个结论：负数强转成无符号数，一定比所有有符号数大 我们来看这个结论是怎么来的： 首先搞清楚负数在二进制中是怎么存储的 其次搞清楚负数强转</description>
			<content type="html"><![CDATA[<p>今天看到一个结论：负数强转成无符号数，一定比所有有符号数大
我们来看这个结论是怎么来的：
首先搞清楚负数在二进制中是怎么存储的
其次搞清楚负数强转成无符号数是怎么转换的。
搞清楚这两个问题就得出结论了。</p>
<h2 id="首先搞清楚负数在二进制中是怎么存储的">首先搞清楚负数在二进制中是怎么存储的</h2>
<p>负数在二进制中是以正数的补码形式保存的。在计算机系统中，数值一律用补码来表示和存储。原因在于，使用补码，可以将符号位和数值域统一处理；同时，加法和减法也可以统一处理</p>
<h4 id="模">模</h4>
<p>先介绍一下“模”的概念：“模”是指一个计量系统的计数范围，如过去计量粮食用的斗、时钟等。计算机也可以看成一个计量机器，因为计算机的字长是定长的，即存储和处理的位数是有限的，因此它也有一个计量范围，即都存在一个“模”。如：时钟的计量范围是0~11，模=12。表示n位的计算机计量范围是0 ~ 2<!-- raw HTML omitted -->n<!-- raw HTML omitted --> - 1，模=2<!-- raw HTML omitted -->8<!-- raw HTML omitted --></p>
<p>例如：假设当前时针指向8点，而准确时间是6点，调整时间可有以下两种拨法：一种是倒拨2小时，即8-2=6；另一种是顺拨10小时，8+10=12+6=6，即8-2=8+10=8+12-2(mod 12)．在12为模的系统里，加10和减2效果是一样的，因此凡是减2运算，都可以用加10来代替。若用一般公式可表示为：a-b=a-b+mod=a+mod-b。对“模”而言，2和10互为补数。实际上，以12为模的系统中，11和1，8和4，9和3，7和5，6和6都有这个特性，共同的特点是两者相加等于模。对于计算机，其概念和方法完全一样。n位计算机，设n=8，所能表示的最大数是11111111，若再加1成100000000(9位)，但因只有8位，最高位1自然丢失。又回到了 00000000，所以8位二进制系统的模为 2<!-- raw HTML omitted -->8<!-- raw HTML omitted -->。在这样的系统中减法问题也可以化成加法问题，只需把减数用相应的补数表示就可以了。把补数用到计算机对数的处理上，就是补码。</p>
<h3 id="符号位">符号位</h3>
<p>符号位为每个字节的最高位，最高位为1表示负数，为0表示正数。</p>
<h3 id="负数的计算">负数的计算</h3>
<p>计算方式：原码&gt;反码&gt;补码
例如十进制 -8
原码：1 000 1000 (符号位=1，负数)
反码：1 111 0111 (符号位不变，数值位分别“按位取反”)
补码：1 111 1000 (反码的末位+1)
因此-8 在 8位机器中用 1111 1000表示</p>
<h2 id="负数强转无符号数的过程">负数强转无符号数的过程</h2>
<p>先说正数，就像正数的反码补码都是它本身一样，3 = 0b 011
无符号数就是原码依然是它本身，且最高位也不表示符号位。和正数的区别就是多了一个最高位的有效数位。
例如：0b011 = 3 和 0b110 = 6 (如果是有符号的话 = -1)
可以看到所有的负数补码最高位都是1，那么强转的话，计算机直接将二进制码看做无符号数，最高位 =1 的数肯定 &gt; 所有正数(最高位 = 0)</p>
]]></content>
		</item>
		
		<item>
			<title>计算机领域知识的结构化</title>
			<link>https://blog.v5u.win/posts/system/system-%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%A2%86%E5%9F%9F%E7%9F%A5%E8%AF%86%E7%9A%84%E7%BB%93%E6%9E%84%E5%8C%96/</link>
			<pubDate>Mon, 19 Apr 2021 15:15:50 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%A2%86%E5%9F%9F%E7%9F%A5%E8%AF%86%E7%9A%84%E7%BB%93%E6%9E%84%E5%8C%96/</guid>
			<description>最近对结构化知识特别有感悟，看到这个回答决定非常不错，记录下来： 首先说说我大学四年的专业课程，接触过哪些编程语言：c、c++，java，An</description>
			<content type="html"><![CDATA[<p>最近对结构化知识特别有感悟，看到这个回答决定非常不错，记录下来：</p>
<p>首先说说我大学四年的专业课程，接触过哪些编程语言：c、c++，java，Android，jsp、PHP，前端三件套：html、css、javascript，还有软件测试理论等。我算是比较幸运的，在大一遇到我们计算机学院的院长教我们班的c语言。院长是一个每天带着笑容的老头，讲课是个段子手，而且从来不点名，逃课的人几乎没有。第一节课他和很多老师一样：扯淡。具体扯啥我也忘了，<!-- raw HTML omitted -->但我没忘他讲的核心思想：计算机领域里面的东西可分为三层，第一层是知识层面，就是可以通过阅读、上课获得的概念层面的东西。第二层次是技能层面，知道某个知识点后，例如知道一个alert（）函数之后，可以动手尝试写一下会有怎样的效果。第三层次是思维和思想层面。四年的专业学习，会让你养成一套看待世界和分析问题的完整方法体系<!-- raw HTML omitted -->。当时我觉得院长说的也不是什么了不起的观点，毕业出来混迹互联网之后，才知道院长说的是朴素又实用的真理。其一，专业训练给我一种类似大家英语学习的“语感”的东西，在工作需要的时候，可以快速学习和应用新的技术解决方案。其二，当别人提出某些观点的时候，会做出质疑的反应。</p>
<p>作者：阳叔
链接：https://www.zhihu.com/question/55886635/answer/1236084455
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
		</item>
		
		<item>
			<title>电子书格式的最佳实践</title>
			<link>https://blog.v5u.win/posts/design/design-%E7%94%B5%E5%AD%90%E4%B9%A6%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
			<pubDate>Mon, 19 Apr 2021 14:56:20 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/design/design-%E7%94%B5%E5%AD%90%E4%B9%A6%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
			<description>电子书格式我知道的有 epub txt mobie 三种格式 txt 是最早的纯文本格式。 mobie是亚马逊kindle电子书的使用格式。 阅读体验和应用范围最广的是epub格</description>
			<content type="html"><![CDATA[<p>电子书格式我知道的有 epub txt mobie 三种格式</p>
<p>txt 是最早的纯文本格式。</p>
<p>mobie是亚马逊kindle电子书的使用格式。</p>
<p>阅读体验和应用范围最广的是epub格式。</p>
<p>所以如果寻找电子书或者制作电子书，我只推荐一种格式：epub
它的本质也是通过web离线技术，生成富文本。进行显示。
从头开始制作epub电子书的话，工具推荐：Typora，<a href="http://www.chengweiyang.cn/gitbook/basic-usage/README.html">gitbook</a></p>
<p>epub做好后，发布平台推荐：https://www.gitbook.com/</p>
<p>我的常用epub处理工具是这些：calibre，Sigil, Clearview</p>
<p>calibre是跨平台开源的。如果需要在服务器做处理的首推这个。</p>
<p>一般我有什么Word转epub的时候就用calibre进行转换。当然会需要做一些HTML的修改。</p>
]]></content>
		</item>
		
		<item>
			<title>Markdown的最佳实践</title>
			<link>https://blog.v5u.win/posts/design/design-markdown%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
			<pubDate>Mon, 19 Apr 2021 14:47:07 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/design/design-markdown%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
			<description>markdow是现在除了emacs社区的org-model外最好的轻量级标记语言，创始人为約翰·格魯伯。它允许人们使用易读易写的纯文本格式编</description>
			<content type="html"><![CDATA[<p>markdow是现在除了emacs社区的org-model外最好的轻量级标记语言，创始人为約翰·格魯伯。它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档。</p>
<p>本地编辑软件 推荐使用Typora
在线发布的话，推荐作业部落的<a href="https://www.zybuluo.com/">Cmd Markdown</a>
WordPress插件推荐：WP Editor</p>
<p>文本编辑，到目前为止用到的最好的是Markdown，org-mode也不错不过太小众的。Markdown的本质是以一套约定的格式，将文本转换成HTML进行显示，是现在应用最广泛的编辑方式。
我们选择某一格式需要考虑：受众群体，功能性，支出广泛度，入门门槛。在所有的格式中，Markdown无疑是最好的。
Markdown的用途适用于：编写readme，写文章，写书等。</p>
<p>教程示例：https://www.zybuluo.com/mdeditor</p>
]]></content>
		</item>
		
		<item>
			<title>关于最佳实践</title>
			<link>https://blog.v5u.win/posts/design/design-%E5%85%B3%E4%BA%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
			<pubDate>Mon, 19 Apr 2021 14:37:30 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/design/design-%E5%85%B3%E4%BA%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
			<description>关于最佳实践 第一次听到这个词是和一个Java的朋友聊天的过程中知道的。后来才发现Java不愧是工业级最好的编程语言。 最佳实践思想表现在方方面</description>
			<content type="html"><![CDATA[<h1 id="关于最佳实践">关于最佳实践</h1>
<p>第一次听到这个词是和一个Java的朋友聊天的过程中知道的。后来才发现Java不愧是工业级最好的编程语言。
最佳实践思想表现在方方面面。在其他领域见得就比较少了，当然也可能是我见识少。
前段时间读《原则》也是有类似的思想，将生活中的抉择用一套原则固定下来，然后反复优化这套原则。这不就是最佳实践的形成过程么。
所以现在开始考虑需要将自己遇到的任何事情都尽量找到一套最佳实践，其实以前都找到了很多。但是找到还不行，还需要将这些总结写下来，如此才能可以随时查阅，方便参考，持续优化。
这一篇就算是自己的关于最佳实践的总论吧，这段时间总结一下。</p>
]]></content>
		</item>
		
		<item>
			<title>Brew的使用最佳实践</title>
			<link>https://blog.v5u.win/posts/design/design-brew%E7%9A%84%E4%BD%BF%E7%94%A8%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
			<pubDate>Mon, 19 Apr 2021 14:29:57 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/design/design-brew%E7%9A%84%E4%BD%BF%E7%94%A8%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
			<description>卸载包和依赖包 安装第三方卸载工具 brew tap beeftornado/rmtree &amp;amp;&amp;amp; brew install brew-rmtree 卸载其他软件 brew rmtree &amp;lt;package&amp;gt; 命令行删除文件使用 rmtrash，避免直接rm 无法找回 brew upate 更新所有的软件包 brew</description>
			<content type="html"><![CDATA[<p>卸载包和依赖包</p>
<p>安装第三方卸载工具</p>
<p><code>brew tap beeftornado/rmtree &amp;&amp; brew install brew-rmtree</code></p>
<p>卸载其他软件</p>
<p><code>brew rmtree &lt;package&gt;</code></p>
<p>命令行删除文件使用 rmtrash，避免直接rm 无法找回</p>
<p>brew upate 更新所有的软件包</p>
<p>brew upgrade 更新指定的软件包</p>
]]></content>
		</item>
		
		<item>
			<title>Mac下PHP环境搭建最佳实践</title>
			<link>https://blog.v5u.win/posts/design/design-macphp%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
			<pubDate>Mon, 19 Apr 2021 14:12:39 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/design/design-macphp%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
			<description>##Mac下PHP环境搭建最佳实践 brew 安装 php nginx mysql@5.7 请放弃使用系统自带的PHP环境和Apache环境 也不推荐xampp集成环境</description>
			<content type="html"><![CDATA[<p>##Mac下PHP环境搭建最佳实践
brew 安装 php nginx <a href="mailto:mysql@5.7">mysql@5.7</a></p>
<p>请放弃使用系统自带的PHP环境和Apache环境 也不推荐xampp集成环境</p>
]]></content>
		</item>
		
		<item>
			<title>一些对swift语言特性的思考</title>
			<link>https://blog.v5u.win/posts/ios/ios-%E4%B8%80%E4%BA%9B%E5%AF%B9swift%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7%E7%9A%84%E6%80%9D%E8%80%83/</link>
			<pubDate>Fri, 16 Apr 2021 15:39:12 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-%E4%B8%80%E4%BA%9B%E5%AF%B9swift%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7%E7%9A%84%E6%80%9D%E8%80%83/</guid>
			<description>数据访问权限 访问控制权限从高到低依次为Open，Public，Internal，File-private，Private。 swift中的访问</description>
			<content type="html"><![CDATA[<h3 id="数据访问权限">数据访问权限</h3>
<p>访问控制权限从高到低依次为Open，Public，Internal，File-private，Private。 swift中的访问权限有3层：module层，file层 ，class层 open public internal 对应module层，区别是否可以重写和继承，直接访问。一个APP或一个target可以理解为一个module fileprivate 针对的是file层，对属性和方法的访问权限 private 针对 class层，对子类和extension扩展的访问权限管理 open 可以被任何人使用，包括override重写和继承。 public 可以被任何人访问。但其他module中不可以被override和继承，而在module内可以被override和继承。 internal 默认访问权限，整个App项目内都是可以访问的。 fileprivate所修饰的属性或方法在当前的Swift源文件里可以访问。其他跟private一样。 private所修饰的属性或方法只能在当前类里访问，包括extension。继承的话子类也不能访问。</p>
<h3 id="let和var的区别">let和var的区别</h3>
<p>let 是对对象指针的不可变声明，注：对象属性的指针和对象指针没有关系。 var 是对对象指针的可变声明</p>
<h3 id="闭包两种声明的区别前者是值拷贝后者是指针拷贝这个没什么可说的swift语言定的规则">闭包两种声明的区别：前者是值拷贝，后者是指针拷贝，这个没什么可说的，swift语言定的规则</h3>
<pre><code>var thing = &quot;cars&quot;
let closure = { [thing] in
               print(&quot;I love \(thing)&quot;)
              }
thing = &quot;airplanes&quot;
closure()


var thing = &quot;cars&quot;
let closure = {
  print(&quot;I love \(thing)&quot;)
}
thing = &quot;airplanes&quot;
closure() // Prints &quot;I love airplanes&quot;
</code></pre>
<h4 id="在objective-c中一个常量可以这样定义const-int-number--0类似的swift是这样定义的let-number--0-两者之间有什么不同吗如果有请说明原因">在Objective-C中，一个常量可以这样定义：const int number = 0;类似的Swift是这样定义的：let number = 0 两者之间有什么不同吗？如果有，请说明原因。</h4>
<p>答案：OC 中 const常量是一个在编译时或者编译解析时被初始化的变量。 通过let创建的是一个运行时常量，是不可变得。他的不可变更多的是c++实现的规则，保证地址内的内容不可更改。 它可以使用static 或者dynamic关键字来初始化。</p>
]]></content>
		</item>
		
		<item>
			<title>iOS NSNotificationCenter自管理内存</title>
			<link>https://blog.v5u.win/posts/ios/ios-nsnotificationcenter%E8%87%AA%E7%AE%A1%E7%90%86%E5%86%85%E5%AD%98/</link>
			<pubDate>Fri, 16 Apr 2021 15:34:54 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-nsnotificationcenter%E8%87%AA%E7%AE%A1%E7%90%86%E5%86%85%E5%AD%98/</guid>
			<description>我找到解决NSNotificationCenter通知中心自管理内存的方案了 我们知道OC中 使用观察者模式 会对观察者进行强引用，导致循环引用，</description>
			<content type="html"><![CDATA[<h3 id="我找到解决nsnotificationcenter通知中心自管理内存的方案了">我找到解决NSNotificationCenter通知中心自管理内存的方案了</h3>
<p>我们知道OC中 使用观察者模式 会对观察者进行强引用，导致循环引用，内存无法释放，也就是对象无法走到dealloc这一步。</p>
<h4 id="那么如何实现一个可以自己管理自己生命周期的的通知中心呢">那么如何实现一个可以自己管理自己生命周期的的通知中心呢？</h4>
<p>要解决这个问题，就需要做到两步：1. 拿到观察者数组 2. 找到一个合适的时机对Observer进行释放。</p>
<p>我想了几天，找到了一个思路，这还是前几天领悟适配器模式后带来的启发。我们知道通知中心是通过维护一个观察者数组来进行广播的，如果要解决通知中心自己释放观察者的行为。我们就需要拿到通知中心管理的观察者数组。可是我查了一下NSNotificationCenter的API，苹果并没有对外暴露可以拿到观察者数组的接口。这个时候有用到适配器模式了，其实想来，对原生类的所有扩展方法，适配器模式都是一个很好的方案，这个方案具有最通用的迁移性。我们可以新建一个类，对NSNotificationCenter进行管理，每次添加观察者的时候addObserver就同时将对象也保持在新类中一个管理数组中，而这个数组使我们可以拿到的。 至于释放时机，其实对于Controller来说还是很好找到的，虽然因为循环引用导致代码不能执行到Dealloc方法，但是页面的退出是不受影响的，所以viewDidDisappear是会执行到的。那么这里就是一个很好的释放时机。为了减少依赖，减少侵入性。最好是以面向切面的方式找到这个释放时机，进行释放。所以可以使用BaseController也可以使用runtime的方法交换的方式，找到viewDidDisappear方法。</p>
<p>至此一个完整的解决方案就出来了，通过适配器模式+面向切面编程解决。</p>
]]></content>
		</item>
		
		<item>
			<title>Design 对设计模式的思考</title>
			<link>https://blog.v5u.win/posts/design/design-%E5%AF%B9%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%80%9D%E8%80%83/</link>
			<pubDate>Fri, 16 Apr 2021 15:29:22 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/design/design-%E5%AF%B9%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%80%9D%E8%80%83/</guid>
			<description>最是真情留不住，总是套路得人心。 大家好，我是笨笨的程序员饭饭，今天我想和大家聊一下设计模式。 在我还是一个菜鸟小白的时候，曾经遇到过一个让我一</description>
			<content type="html"><![CDATA[<p>最是真情留不住，总是套路得人心。</p>
<p>大家好，我是笨笨的程序员饭饭，今天我想和大家聊一下设计模式。</p>
<p>在我还是一个菜鸟小白的时候，曾经遇到过一个让我一剑诛心的问题，你知道数据结构和算法吗？这个问题在我以后的睡梦中常常过来光顾，一抹邪笑，留下我独自惊醒。基于此我购买了人生中第一本技术书大话设计模式。</p>
<p>这么多年下来反思总结，得出了一个结论，不管是算法还是设计模式它们有一个共同的名字叫做套路。</p>
<p>所谓套路就说有一个固定的方式让你可以参考，解决某一类特定的问题。</p>
<p>算法就是解决业务实现过程中的套路。设计模式就是解决工程实践中遇到的套路。</p>
<p>所以我建议以后面试可以这样提问，你知道多少工作中用到的套路。妥妥的打开思路。</p>
<p>这让我想起来一个事情，就像UNIX系统中的哲学思想，一切都是文件。在工作中一切皆是套路。</p>
<p>你知道多少套路就能快速解决多少问题。所以很多面试官喜欢考察数据结构和算法。</p>
<p>中国武术兵器有刀枪剑戟斧钺钩叉拐子流星锤。作为一个打架的，你可以不都会，但必须都了解。要不然与人捉对厮杀，对方使出流星锤，你一刀砍出被人缠住，这就尴尬了。
和这一样，工作中你接手一个老项目，都能运行正常，就是内部实现很乱，就是看不懂。要求你做些增量开发，添加一些功能，无处下手的时候，也是比较尴尬了。
你可能会说我就喜欢做新项目，但是要知道不管什么样的项目最终都会成为屎山，就是项目死了，他也是一座死屎山。</p>
<p>这个时候如果你知道适配器模式，你就有了思路。当然今天这个不是重点。我们拉回来。</p>
<p>套路如此重要，以至于你可以在任何地方都能感受到套路的存在。就比如pua，作为一个单身男女，孤独的生活总是寂寞的。而我们想要解决这一个问题。就需要懂一些PUA上面的套路。或者说一些心理学上的小知识。我在程序员的自我修养中获得的最重要的知识点就是。如果复杂度超出了你的控制那么最好的一个办法就是加一个中间层。所以我们可以看到网络的分层设计。操作系统的数据访问结构设计：寄存器，高速缓存，内存再到磁盘。类似的还有后端的高可用架构的设计。所以我们得出一个结论，万物皆可分层。分层就是是解决复杂度的套路。我们的设计模式中当然也有类似的套路。就比如门面模式。建造者模式。状态机模式。他们都有一个相似的套路那就是提供一个对外的统一的接口。</p>
<p>最是真情留不住，总是套路得人心。</p>
<p>今天就先讲到这里。我是笨笨的程序员饭饭。欢迎大家收听我的下一期节目。再见！</p>
]]></content>
		</item>
		
		<item>
			<title>Design 面向切面编程的思考</title>
			<link>https://blog.v5u.win/posts/design/design-%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B%E7%9A%84%E6%80%9D%E8%80%83/</link>
			<pubDate>Fri, 16 Apr 2021 15:27:52 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/design/design-%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B%E7%9A%84%E6%80%9D%E8%80%83/</guid>
			<description>面向切面编程的前提是要形成一个切面。不管是通过基类的方式还是通过runtime的方式，其实本质上runtime也是用的基类的方式，所有的类都</description>
			<content type="html"><![CDATA[<p>面向切面编程的前提是要形成一个切面。不管是通过基类的方式还是通过runtime的方式，其实本质上runtime也是用的基类的方式，所有的类都继承自NSObject
这么说来函数式编程其实也是可以实现的，那就是有一个核心函数，我们知道函数式编程的一个重要的思维转变是充分使用组合模式，那个如果组合的过程中有一个核心函数的话就可以在核心函数里实现面向切面编程
这么想想做数据埋点的话，细分到点击事件的统计，应该如何做？估计是针对action的操作</p>
]]></content>
		</item>
		
		<item>
			<title>IOS 对oc中内存管理的思考</title>
			<link>https://blog.v5u.win/posts/design/design-%E5%AF%B9oc%E4%B8%AD%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E6%80%9D%E8%80%83/</link>
			<pubDate>Fri, 16 Apr 2021 15:23:32 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/design/design-%E5%AF%B9oc%E4%B8%AD%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E6%80%9D%E8%80%83/</guid>
			<description>一直以来我对内存管理的第一反应是对自动引用技术和处理，而对自动引用计数的第一反应就是release释放的处理，那妥妥的本质是autorele</description>
			<content type="html"><![CDATA[<p>一直以来我对内存管理的第一反应是对自动引用技术和处理，而对自动引用计数的第一反应就是release释放的处理，那妥妥的本质是autoreleasepool，这几天猛然意识到其实工作中最多的问题是对循环引用的处理，
这方面主要涉及到两方面，一个是block的捕获变量权限引起的问题，一个是观察者模式下强引用观察对象的问题。
针对block，使用weak修饰捕获变量可以解决。或者ARC下对block修饰的变量使用手动解除。
针对观察者则只能使用中间类来打破对被观察者的强引用。
注:观察者主要表现为:kvo，通知，NSTimer
当然NSTimer并不是用观察者模式实现的，但是当timer是repeat模式的时候我们可以抽象为runloop是对timer有观察的特性的。因为本质上来说，timer的方法调用规则是建立在在runloop中的计时器的插桩操作。应该是这个原理，信息来源我忘了，有时间补上。</p>
]]></content>
		</item>
		
		<item>
			<title>Flutter Dart</title>
			<link>https://blog.v5u.win/posts/flutter/flutter-dart/</link>
			<pubDate>Fri, 16 Apr 2021 15:21:29 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/flutter/flutter-dart/</guid>
			<description>[TOC] 语法： 关键字 external 将方法的声明和实现分离 @patch(补丁)，好处是可以针对不同的平台做实现。 变量声明：1. 明确声明 2. 类型推导 main(List&amp;lt;String&amp;gt; args) { // 1. 明确的</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<p>语法：</p>
<h2 id="关键字">关键字</h2>
<p>external 将方法的声明和实现分离 @patch(补丁)，好处是可以针对不同的平台做实现。</p>
<p>变量声明：1. 明确声明 2. 类型推导</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span>main(List<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">String</span><span style="color:#f92672">&gt;</span> args) {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 1. 明确的变量声明
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">String</span> name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;fan&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 2. 类型推导（var/final/const)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// 2.1 var 声明变量
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">var</span> age <span style="color:#f92672">=</span> <span style="color:#ae81ff">29</span>;
</span></span><span style="display:flex;"><span>  age <span style="color:#f92672">=</span> <span style="color:#ae81ff">30</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 2.2 final 声明常量
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">final</span> forever <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;永恒&#34;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 2.3 const 声明常量
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">const</span> jingtai <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;静态&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 2.4 final const 的区别
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// const必须赋值 常量值（编译期间需要有一个确定的值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// final可以通过计算、函数获取一个值（运行期间确定一个值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// const date1 = DateTime.now(); x
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">final</span> date1 <span style="color:#f92672">=</span> DateTime.now();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// final p1 = Person(&#39;fan&#39;);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// final p2 = Person(&#39;fan&#39;);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// print(identical(p1, p2)); // 判断 p1 ！= p2
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 希望相同的参数看做同一个对象,严格来说不算 单例模式
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">const</span> p1 <span style="color:#f92672">=</span> Person(<span style="color:#e6db74">&#39;fan&#39;</span>); <span style="color:#75715e">// ==&gt;  const p1 = const Person(&#39;fan&#39;);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">const</span> p2 <span style="color:#f92672">=</span> Person(<span style="color:#e6db74">&#39;fan&#39;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> p3 <span style="color:#f92672">=</span> Person(<span style="color:#e6db74">&#39;jin&#39;</span>);
</span></span><span style="display:flex;"><span>  print(identical(p1, p2));
</span></span><span style="display:flex;"><span>  print(identical(p3, p2));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="数据类型">数据类型</h3>
<p>// Object 和dynamic</p>
<p>// dynamic 是明确声明，和var不一样</p>
<p>// Object调用方法时，编译时会报错</p>
<p>// dynamic调用方法时，编译时不会报错，但是运行时存在安全隐患</p>
<h3 id="非零即真">非零即真</h3>
<p>在js中1或任何非null对象的值被视为true</p>
<p>在dart中，只有bool值为true被视为true</p>
<h3 id="字符串">字符串</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> str1 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;单引号&#39;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> str2 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;双引号&#34;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> str3 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  模板
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  字符串
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#34;&#34;&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 字符串和表达式进行拼接，和ES6一样
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">var</span> name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;fan&#34;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> age <span style="color:#f92672">=</span> <span style="color:#ae81ff">19</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> height <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.88</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 强调：${变量} 那么{} 可以省略
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">var</span> message1 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;my name is </span><span style="color:#e6db74">${</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">, </span><span style="color:#e6db74">$</span>age<span style="color:#e6db74">, </span><span style="color:#e6db74">$</span>height<span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> message2 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;my name is </span><span style="color:#e6db74">${</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">, </span><span style="color:#e6db74">${</span>name.runtimeType<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>;
</span></span></code></pre></div><h3 id="集合类型">集合类型</h3>
<pre tabindex="0"><code>  // 1. 列表 数组 list
  // 2. 集合 set
  // 3. 映射 对象 字典 map

  var names = [&#34;1&#34;, &#34;2&#34;, &#34;3&#34;];
  var movies = {&#34;星际穿越&#34;, &#34;xiyou&#34;, &#34;道明空间&#34;};
  var info = {&#34;name&#34;: &#34;fan&#34;, &#34;age&#34;: 18}; // key 必须可hash
</code></pre><h3 id="可选值-null-检查最佳实践">可选值 null 检查最佳实践</h3>
<pre tabindex="0"><code>bool isConnected(a,b){
	bool outConn=outgoing[a]?.contains(b) ?? false;
	bool inConn = incoming[a]?.contains(b) ?? false;
	return outConn || inConn;
}
</code></pre><p><code>?.</code>运算符在左边为null的情况下会阻断右边的调用，<code>??</code> 运算符主要作用是在左侧表达式为null时为其设置默认值。</p>
<p>对于表达式：</p>
<pre tabindex="0"><code>outgoing[a]?.contains(b)
</code></pre><p>如果outgoing为null 或 outgoing[a]为null或contains(b)的值为null，都会导致表达式为null</p>
<h2 id="function-函数是一等公民">function 函数是一等公民</h2>
<p>面向对象语言中，对象是一等公民。一等公民可以做参数，返回值，传递。</p>
<pre tabindex="0"><code>JS
function demo(){}
Dart
demo(){}

// 必选参数
// 可选参数：1. 位置可选，2. 命名可选
// 位置可选参数：[int age,double height]
// 实参和形参在进行匹配时，是根据位置的匹配
// 注意 ，只有可选参数可以有默认值
void sayHello1(String name) {
  print(name);
}

//位置可选参数
void sayHello2(String name, [int age, double height]) {
  print(name);
}

// 命名可选参数
void sayHello3(String name, {int age, double height = 0}) {
  print(name);
}
//三种函数传入方式
 // 1. 直接传方法名，对函数没有任何限制（参数，返回值）
  test(bar);
//2.  匿名函数 （参数列表){函数体}
  test(() {
    print(&#34;匿名函数被调用&#34;);
  });

  //3.  箭头函数：条件，函数体只有一行代码
  test(() =&gt; print(&#34;箭头函数被调用&#34;));
</code></pre><h2 id="运算符">运算符</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span> <span style="color:#75715e">// 赋值操作 ??= 当变量有值时，??= 不执行
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 变量为null，将值赋值给变量
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">var</span> name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;fan&#34;</span>;
</span></span><span style="display:flex;"><span>  name <span style="color:#f92672">??=</span> <span style="color:#e6db74">&#34;jin&#34;</span>;
</span></span><span style="display:flex;"><span>  print(name);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// ??
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 前面变量有值，使用变量的值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 前面变量无值，返回?? 后边的值。可以理解为三目运算符的简写
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">var</span> temp <span style="color:#f92672">=</span> name <span style="color:#f92672">??</span> <span style="color:#e6db74">&#34;is&#34;</span>;
</span></span><span style="display:flex;"><span>  print(temp);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 级联运算符
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">var</span> p <span style="color:#f92672">=</span> Person()
</span></span><span style="display:flex;"><span>    ..name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ming&#34;</span>
</span></span><span style="display:flex;"><span>    ..eat()
</span></span><span style="display:flex;"><span>    ..run();
</span></span></code></pre></div><h2 id="流程控制">流程控制</h2>
<h2 id="异步编程">异步编程</h2>
<h3 id="future--promise">future == promise</h3>
<p>JS中Promise对象表示异步操作的最终完成（或失败）及其结果值，Dart中使用Future来表示异步操作。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span><span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#39;dart:convert&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#39;dart:html&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>main(List<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">String</span><span style="color:#f92672">&gt;</span> args) {
</span></span><span style="display:flex;"><span>  _getIPAddress() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">final</span> url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://httpbin.org/ip&#34;</span>;
</span></span><span style="display:flex;"><span>    Future<span style="color:#f92672">&lt;</span>HttpRequest<span style="color:#f92672">&gt;</span> request <span style="color:#f92672">=</span> HttpRequest.request(url);
</span></span><span style="display:flex;"><span>    request.then((value) {
</span></span><span style="display:flex;"><span>      print(jsonDecode(value.responseText)[<span style="color:#e6db74">&#39;origin&#39;</span>]);
</span></span><span style="display:flex;"><span>    }).catchError((error) <span style="color:#f92672">=&gt;</span> print(error));
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  _getIPAddress();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="async-和-await">async 和 await</h3>
<h2 id="类">类</h2>
<p>单继承，使用混合方式实现多继承mixin</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 如果用const 修饰 构造器，类也必须用 final修饰
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">String</span> name;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> Person(<span style="color:#66d9ef">this</span>.name);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">String</span> name;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> age;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 源自C++中的初始化列表
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 如下常用方式
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 这种初始化方法可以使用表达式
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 另外一种命名可选参数的初始化方式只能使用直接赋值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  Person(<span style="color:#66d9ef">this</span>.name, {<span style="color:#66d9ef">int</span> age}) <span style="color:#f92672">:</span> <span style="color:#66d9ef">this</span>.age <span style="color:#f92672">=</span> age <span style="color:#f92672">??</span> <span style="color:#ae81ff">10</span> {}
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Person(this.name,{int age = 10})
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person1</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">String</span> name;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> age;
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 同名方法为构造函数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  Person(<span style="color:#66d9ef">int</span> age, <span style="color:#66d9ef">String</span> name) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.age <span style="color:#f92672">=</span> age;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.name <span style="color:#f92672">=</span> name;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> sayHello() {
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;my name is </span><span style="color:#e6db74">$</span>name<span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Eat</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> eat() {
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;eat&#34;</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Sleep</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> sleep() {
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;sleeep&#34;</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 抽象类 不能被实例化，通常用于架构师来设计编码格式
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Animal</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> run(); <span style="color:#75715e">// 抽象方法
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// 抽象类的用处：我有一个想法，但是不知道怎么实现，提醒继承者去实现
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 多继承 混合
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person2</span> <span style="color:#66d9ef">extends</span> Animal <span style="color:#66d9ef">with</span> Eat, Sleep {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">String</span> name;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> age;
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 同名方法为构造函数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  Person2(<span style="color:#66d9ef">int</span> age, <span style="color:#66d9ef">String</span> name) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.age <span style="color:#f92672">=</span> age;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.name <span style="color:#f92672">=</span> name;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> sayHello() {
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;my name is </span><span style="color:#e6db74">$</span>name<span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">@</span>override
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> run() {
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;haha run&#34;</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>混合的菱形继承问题：编译后，最近原则调用方法。先找自身的，再找with后面，从后往前以此调用。</p>
<h3 id="多核cpu的利用">多核CPU的利用</h3>
<p>Isolate概念 隔离
Dart是单线程的，线程所在的空间被称为Isolate。比如Flutter中有一个Root
Isolate，负责运行Flutter代码，例如UI渲染，用户交互等。
在Isolate中，资源隔离做的非常好，每个Isolate有自己的Event Loop和Queue。</p>
<ul>
<li>Isolate之间不共享任何资源，只能依靠消息机制通信，因此也就没有资源抢占问题。
这不就是多进程方案！</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Flutter 布局 滚动Widget</title>
			<link>https://blog.v5u.win/posts/flutter/flutter-%E5%B8%83%E5%B1%80-%E6%BB%9A%E5%8A%A8widget/</link>
			<pubDate>Fri, 16 Apr 2021 15:20:52 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/flutter/flutter-%E5%B8%83%E5%B1%80-%E6%BB%9A%E5%8A%A8widget/</guid>
			<description>ListView：tableView GridView ：collectionView sliver: 本质是这个sliver ListView构造函数： ListView.separated ListView.builder ListView.custom GridView</description>
			<content type="html"><![CDATA[<p>ListView：tableView</p>
<p>GridView ：collectionView</p>
<p>sliver: 本质是这个sliver</p>
<p>ListView构造函数：</p>
<p>ListView.separated</p>
<p>ListView.builder</p>
<p>ListView.custom</p>
<p>GridView构造函数：</p>
<p>GridView()</p>
<p>GridView.count()</p>
<p>GridView.extent()</p>
<p>GridView.builder()</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span>Widget build(BuildContext context) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> ListView.builder(<span style="color:#75715e">// 展示的时候在加载
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    itemExtent: <span style="color:#ae81ff">60</span>,<span style="color:#75715e">// cell 高度
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    itemCount: <span style="color:#ae81ff">100</span>,<span style="color:#75715e">// item数量
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    itemBuilder: (BuildContext context, <span style="color:#66d9ef">int</span> index){<span style="color:#75715e">// 返回的cell
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#66d9ef">return</span> Text(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">$</span>index<span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>  );
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span>Widget build(BuildContext context) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> ListView(
</span></span><span style="display:flex;"><span>    scrollDirection: Axis.horizontal,<span style="color:#75715e">// 设置水平滚动，
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    itemExtent: <span style="color:#ae81ff">100</span>,<span style="color:#75715e">// 设置水平滚动，需要设置该值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    children: List.generate(<span style="color:#ae81ff">100</span>, (index) {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> ListTile(
</span></span><span style="display:flex;"><span>        leading: Icon(Icons.people),
</span></span><span style="display:flex;"><span>        trailing: Icon(Icons.delete),
</span></span><span style="display:flex;"><span>        title: Text(<span style="color:#e6db74">&#34;联系人</span><span style="color:#e6db74">${</span>index<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>),
</span></span><span style="display:flex;"><span>        subtitle: Text(<span style="color:#e6db74">&#34;电话号码：18800000000&#34;</span>),
</span></span><span style="display:flex;"><span>      );
</span></span><span style="display:flex;"><span>    }),
</span></span><span style="display:flex;"><span>  );
</span></span></code></pre></div><p>传入回调函数，一般来讲都是，需要时才会加载回调函数。</p>
]]></content>
		</item>
		
		<item>
			<title>Flutter 布局</title>
			<link>https://blog.v5u.win/posts/flutter/flutter-%E5%B8%83%E5%B1%80/</link>
			<pubDate>Fri, 16 Apr 2021 15:19:58 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/flutter/flutter-%E5%B8%83%E5%B1%80/</guid>
			<description>[TOC] flutter 有三层树结构：Widget、Element、RenderObject import &amp;#39;package:flutter/material.dart&amp;#39;; main()=&amp;gt;runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: &amp;#34;app title&amp;#34;, home: JLHomePage(), ); } } class JLHomePage extends StatelessWidget { @override Widget build(BuildContext context) { return</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<p>flutter 有三层树结构：Widget、Element、RenderObject</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span><span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#39;package:flutter/material.dart&#39;</span>;
</span></span><span style="display:flex;"><span>main()<span style="color:#f92672">=&gt;</span>runApp(MyApp());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyApp</span> <span style="color:#66d9ef">extends</span> StatelessWidget {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">@</span>override
</span></span><span style="display:flex;"><span>  Widget build(BuildContext context) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> MaterialApp(
</span></span><span style="display:flex;"><span>      title: <span style="color:#e6db74">&#34;app title&#34;</span>,
</span></span><span style="display:flex;"><span>      home: JLHomePage(),
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JLHomePage</span> <span style="color:#66d9ef">extends</span> StatelessWidget {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">@</span>override
</span></span><span style="display:flex;"><span>  Widget build(BuildContext context) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> Scaffold(
</span></span><span style="display:flex;"><span>      appBar: AppBar(
</span></span><span style="display:flex;"><span>        title: Text(<span style="color:#e6db74">&#34;基础Widget&#34;</span>),
</span></span><span style="display:flex;"><span>      ),
</span></span><span style="display:flex;"><span>      body: JLHomeContent(),
</span></span><span style="display:flex;"><span>      floatingActionButton: FloatingActionButton(
</span></span><span style="display:flex;"><span>        child: Icon(Icons.add),
</span></span><span style="display:flex;"><span>        onPressed: ()<span style="color:#f92672">=&gt;</span>print(<span style="color:#e6db74">&#34;浮动按钮&#34;</span>),
</span></span><span style="display:flex;"><span>      ),
</span></span><span style="display:flex;"><span>      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JLHomeContent</span> <span style="color:#66d9ef">extends</span> StatefulWidget {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">@</span>override
</span></span><span style="display:flex;"><span>  _JLHomeContentState createState() <span style="color:#f92672">=&gt;</span> _JLHomeContentState();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">_JLHomeContentState</span> <span style="color:#66d9ef">extends</span> State<span style="color:#f92672">&lt;</span>JLHomeContent<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">final</span> imgURL <span style="color:#f92672">=</span>  <span style="color:#e6db74">&#34;https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=116882428,1733900798&amp;fm=26&amp;gp=0.jpg&#34;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">@</span>override
</span></span><span style="display:flex;"><span>  Widget build(BuildContext context) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> Text(<span style="color:#e6db74">&#34;dd&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ImageExtensionDemo</span> <span style="color:#66d9ef">extends</span> StatelessWidget {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">//    1. 占位图的问题
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//  2. 图片缓存：flutter默认给图片做缓存，最多1000张，最大100M。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">const</span> ImageExtensionDemo({
</span></span><span style="display:flex;"><span>    Key key,
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">@</span>required <span style="color:#66d9ef">this</span>.imgURL,
</span></span><span style="display:flex;"><span>  }) <span style="color:#f92672">:</span> <span style="color:#66d9ef">super</span>(key: key);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">String</span> imgURL;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">@</span>override
</span></span><span style="display:flex;"><span>  Widget build(BuildContext context) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> FadeInImage(
</span></span><span style="display:flex;"><span><span style="color:#75715e">//      设置过渡动画时间
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        fadeOutDuration: Duration(milliseconds: <span style="color:#ae81ff">1</span>),
</span></span><span style="display:flex;"><span>        fadeInDuration: Duration(milliseconds: <span style="color:#ae81ff">1</span>),
</span></span><span style="display:flex;"><span>        placeholder: AssetImage(<span style="color:#e6db74">&#34;assets/images/a_dot_ham.png&#34;</span>),
</span></span><span style="display:flex;"><span>        image: NetworkImage(imgURL));
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ButtonExtensionDemo</span> <span style="color:#66d9ef">extends</span> StatelessWidget {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> ButtonExtensionDemo({
</span></span><span style="display:flex;"><span>    Key key,
</span></span><span style="display:flex;"><span>  }) <span style="color:#f92672">:</span> <span style="color:#66d9ef">super</span>(key: key);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">@</span>override
</span></span><span style="display:flex;"><span>  Widget build(BuildContext context) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> Column(
</span></span><span style="display:flex;"><span>      children: <span style="color:#f92672">&lt;</span>Widget<span style="color:#f92672">&gt;</span>[
</span></span><span style="display:flex;"><span><span style="color:#75715e">//       1. button 上下有一定的间距 padding
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//        2. 默认button有默认的宽高 88*36
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//        3. 去除button的内边距
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        ButtonTheme(<span style="color:#75715e">// 处理默认的最小宽高
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          minWidth: <span style="color:#ae81ff">30</span>,
</span></span><span style="display:flex;"><span>          height: <span style="color:#ae81ff">10</span>,
</span></span><span style="display:flex;"><span>          child: FlatButton(
</span></span><span style="display:flex;"><span><span style="color:#75715e">//            清除内边距
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>              padding: EdgeInsets.all(<span style="color:#ae81ff">0</span>),
</span></span><span style="display:flex;"><span><span style="color:#75715e">//              清除外边距
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>              materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
</span></span><span style="display:flex;"><span>              color: Colors.red,
</span></span><span style="display:flex;"><span>              onPressed: (){},
</span></span><span style="display:flex;"><span>              child: Text(<span style="color:#e6db74">&#34;FaltBtn1&#34;</span>)
</span></span><span style="display:flex;"><span>          ),
</span></span><span style="display:flex;"><span>        ),
</span></span><span style="display:flex;"><span>        FlatButton(
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//          materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          onPressed: (){},
</span></span><span style="display:flex;"><span>          color: Colors.red,
</span></span><span style="display:flex;"><span>          child: Text(<span style="color:#e6db74">&#34;FaltB  tn2&#34;</span>),
</span></span><span style="display:flex;"><span>        ),
</span></span><span style="display:flex;"><span>        SizedBox(height: <span style="color:#ae81ff">10</span>,),<span style="color:#75715e">// 设置间距
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          Container(
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 给button设置宽高，不能直接给btn设置，需要包裹一层Container，然后用btn填充
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// double.infinity 代表最大，能填充多大填多大
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            width: <span style="color:#66d9ef">double</span>.infinity,
</span></span><span style="display:flex;"><span>            height: <span style="color:#ae81ff">40</span>,
</span></span><span style="display:flex;"><span>            child: FlatButton(
</span></span><span style="display:flex;"><span>                onPressed: (){},
</span></span><span style="display:flex;"><span>              	color: Colors.blue,
</span></span><span style="display:flex;"><span>                child: Text(<span style="color:#e6db74">&#34;登 录&#34;</span>,
</span></span><span style="display:flex;"><span>                     style: TextStyle(fontSize: <span style="color:#ae81ff">20</span>,color: Colors.white),),
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            )
</span></span><span style="display:flex;"><span>      ],
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">IconExtensionDemo</span> <span style="color:#66d9ef">extends</span> StatelessWidget {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">@</span>override
</span></span><span style="display:flex;"><span>  Widget build(BuildContext context) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//Icon 是字体图标
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">//1. 字体图标是矢量图，放大不会失真
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">//2. 可以设置颜色
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">//3. 图标很多是，占据控件更小
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//    return Icon(Icons.pets, size: 300,color: Colors.orange,);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//    return Icon(IconData(0xe91d,fontFamily: &#39;MaterialIcons&#39;) , size: 300,color: Colors.orange,);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//  1. Text 中不能直接使用编码，需要转换 0xe91d-&gt; unicode编码
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> Text(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\ue91d</span><span style="color:#e6db74">&#34;</span>,style: TextStyle(fontSize: <span style="color:#ae81ff">100</span>,color: Colors.orange,fontFamily: <span style="color:#e6db74">&#39;MaterialIcons&#39;</span>),);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	
</span></span></code></pre></div><h2 id="单子布局">单子布局</h2>
<p><strong>Align -&gt; Center，Container，Padding</strong></p>
<p>flutter 中的坐标系为: (0, 0)  是中心点。极值(-1, 1)</p>
<pre tabindex="0"><code>				-1
				|
				|
-1------0-------&gt;1
				|
				|
				↓
				1
</code></pre><p>Container layout</p>
<p>RenderWidget -&gt; RenderObject -&gt;</p>
<p>{constraints 约束</p>
<p>BoxConstraint</p>
<p>minWidth minHeight</p>
<p>maxWidth maxHeight}</p>
<p>子组件在父组件的范围内调整Size 大小，子组件超出会报错超出安全区域。</p>
<p>不同的子组件对于同样的约束，表现可能不同。</p>
<h2 id="多子布局">多子布局</h2>
<p>Row Column Stack</p>
<p>Row和Column都是继承自Flex组件,类似CSS中的Flex布局</p>
<h2 id="row的特点水平方向尽可能大的占领空间水平方向也是希望包裹内容">Row的特点：水平方向尽可能大的占领空间，水平方向也是希望包裹内容，</h2>
<p>垂直方向包裹内容。</p>
<pre tabindex="0"><code> /*
    * Flex(direction: Axis.horizontal); = Row
    * Flex(direction: Axis.vertical); = Column
    * 实际开发中不常用Flex
    * */
/*
* MainAxisAlignment:
* - start 主轴开始位置挨个摆放元素
* - end 主轴结束位置挨个摆放元素
* - center 主轴中心位置挨个摆放元素(默认值）
* - spaceBetween  左右两边为0，其他平分间距
* - spaceAround 左右两边间距为其他间距的一半
* - spaceEvenly 所有间距平分
*
* CrossAxisAlignment:
* - start 交叉轴开始位置挨个摆放元素
* - end 交叉轴结束位置挨个摆放元素
* - center 交叉轴中心位置挨个摆放元素(默认值）
* - baseline  基线对齐 CSS，文字排版，四线三格，基线：X下边的线,有文本才有效果
* - stretch 先让交叉轴row占据较大的空间，将所有的子Widget交叉轴的高度，拉升到最大
* */
</code></pre><h2 id="column">Column：</h2>
<p>收缩+拉伸</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span><span style="color:#75715e">/*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">          * 拉伸
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">          * Flexible 将屏幕剩余空间集中分配,设置拉伸
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">          * - flex:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">          * Expended -&gt; Flexible(fit: FlexFit.tight) 通常工程中，用这个更多，很少用Flexible
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">          * 空间分配问题：flex 设置了之后，宽度就失效了，之后和flex比例相关了，
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">          * 和css不一样，css有一套公式
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">          * 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">          *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">          * 收缩 也是用Expanded
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">          *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">          * */</span>
</span></span><span style="display:flex;"><span>          Expanded(
</span></span><span style="display:flex;"><span><span style="color:#75715e">//              flex: 1,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>              child: Container(width: <span style="color:#ae81ff">160</span>,height: <span style="color:#ae81ff">80</span>, color: Colors.red,)
</span></span><span style="display:flex;"><span>          ),
</span></span></code></pre></div><h2 id="stack-层叠组件">Stack 层叠组件</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span><span style="color:#75715e">/*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">* Stack 层叠布局组件
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">* 根据 alignment: AlignmentDirectional.center, 为原点，按数组顺序叠放
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">* 默认大小是包裹内容
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">* fit: expand 将子元素拉伸到尽可能大
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">* - overflow: 超出部分如何处理 overflow: Overflow.visible,查出部分依然可见，默认不可见
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">* Positioned 定位
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">* */</span>
</span></span><span style="display:flex;"><span>Positioned(
</span></span><span style="display:flex;"><span>              left: <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>              right: <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>              bottom: <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>              child: Container()
</span></span><span style="display:flex;"><span>  )
</span></span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Flutter 第三方库</title>
			<link>https://blog.v5u.win/posts/flutter/flutter-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</link>
			<pubDate>Fri, 16 Apr 2021 15:19:01 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/flutter/flutter-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</guid>
			<description>网络请求 Dio dio是一个强大的Dart Http请求库，支持Restful API、FormData、拦截器、请求取消、Cookie管理、文件上传</description>
			<content type="html"><![CDATA[<p>网络请求 Dio</p>
<p>dio是一个强大的Dart Http请求库，支持Restful API、FormData、拦截器、请求取消、Cookie管理、文件上传/下载、超时、自定义适配器等</p>
]]></content>
		</item>
		
		<item>
			<title>Flutter 组件</title>
			<link>https://blog.v5u.win/posts/flutter/flutter-%E7%BB%84%E4%BB%B6/</link>
			<pubDate>Fri, 16 Apr 2021 15:18:02 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/flutter/flutter-%E7%BB%84%E4%BB%B6/</guid>
			<description>[TOC] - 基础组件 - Widget 与 Element - StatelessWidget - StatefulWidget - Text - Image - Button - AppBar - AlertDialog - Icon - TextField - Form - Switch - Checkbox - 布局组件 - 线性 Row - 线性 Column - 弹性 Flex - 弹性 Expanded - 层叠 Stack - 层叠 IndexedStack - 层叠 Positioned - 流式</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<pre tabindex="0"><code>- 基础组件
  - Widget 与 Element
  - StatelessWidget
  - StatefulWidget
  - Text
  - Image
  - Button
  - AppBar
  - AlertDialog
  - Icon
  - TextField
  - Form
  - Switch
  - Checkbox

- 布局组件
  - 线性 Row
  - 线性 Column
  - 弹性 Flex
  - 弹性 Expanded
  - 层叠 Stack
  - 层叠 IndexedStack
  - 层叠 Positioned
  - 流式 Flow
  - 流式 Wrap

- 容器组件
  - Scaffold
  - Container
  - Center
  - Padding
  - ConstrainedBox
  - SizedBox
  - DecoratedBox
  - Transform

- 导航组件
  - TabBar
  - NavigationBar
  - PageView

- 可滚动组件
  - CustomScrollView
  - ListView
  - GridView
  - ScrollView
  - ExpansionPanel
  - ScrollController

- 表格组件
  - Table
  - DataTables

- 功能型组件
  - WillPopScope
  - InheritedWidget
  - 主题 Theme

- 事件处理与通知
  - 事件处理
  - 手势识别
  - 全局事件总线
  - 通知消息

- 自定义 Widget
  - 组合其它 Widget
  - 自绘 CustomPaint、Canvas

- 进阶
  - 文件操作
  - Http 请求
  - WebSocket 连接
  - Json 解析
  - 包与插件
  - 国际化
  - 数据库缓存
  - Redux
</code></pre><h2 id="文本组件">文本组件</h2>
<p>Android中用TextView iOS中用UIlable flutter中Text组件</p>
<h3 id="普通文本展示">普通文本展示</h3>
<p>flutter中，文本控制分为两类：</p>
<ul>
<li><strong>控制文本布局的参数</strong>：如对齐方式 textAlign、排版方向 textDirection、显示最大行数 maxLines、阶段规则 overflow等等，这些都是构造函数中的参数；</li>
<li><strong>控制文本样式的额参数</strong>：如字体名称 fontFamily、字体大小 fontSize、文本颜色 color、阴影 shadows等等、这些参数统一封装到了构造函数中的参数style中；</li>
</ul>
<h3 id="富文本">富文本</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span>Text.rich(TextSpan(
</span></span><span style="display:flex;"><span><span style="color:#75715e">//      text: &#34;富文本&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      children: [
</span></span><span style="display:flex;"><span>        TextSpan(text: <span style="color:#e6db74">&#34;文字&#34;</span>, style: TextStyle(color: Colors.red)),
</span></span><span style="display:flex;"><span>        WidgetSpan(child: Icon(Icons.favorite,color: Colors.red,)),
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 图片
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      ]
</span></span><span style="display:flex;"><span>    ));
</span></span></code></pre></div><h2 id="按钮button">按钮Button</h2>
<p>必传参数和required 必传参数不传就会报错，编译不过。@required编译可以通过，但会报警告。</p>
<ol>
<li>RaisedButton</li>
<li>FlatButton</li>
<li>OutlineButton 边框按钮</li>
<li>floatingActionButton 浮动按钮</li>
<li>自定义button：图标-文字-背景-圆角</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span>Column(
</span></span><span style="display:flex;"><span>      children: <span style="color:#f92672">&lt;</span>Widget<span style="color:#f92672">&gt;</span>[
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 1. RaisedButton
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        RaisedButton(
</span></span><span style="display:flex;"><span>          child: Text(<span style="color:#e6db74">&#34;RaisedButton 高地按钮&#34;</span>),
</span></span><span style="display:flex;"><span>          color: Colors.grey,
</span></span><span style="display:flex;"><span>          textColor: Colors.white,
</span></span><span style="display:flex;"><span>          onPressed: ()<span style="color:#f92672">=&gt;</span> print(<span style="color:#e6db74">&#34;dd&#34;</span>),
</span></span><span style="display:flex;"><span>        ),
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// FlatButton
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        FlatButton(
</span></span><span style="display:flex;"><span>            color: Colors.orange,
</span></span><span style="display:flex;"><span>            child: Text(<span style="color:#e6db74">&#34;平坦的Flat 按钮&#34;</span>),
</span></span><span style="display:flex;"><span>            onPressed: ()<span style="color:#f92672">=&gt;</span>print(<span style="color:#e6db74">&#34;flat click&#34;</span>),
</span></span><span style="display:flex;"><span>        ),
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// OutlineButton 边框按钮
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        OutlineButton(
</span></span><span style="display:flex;"><span>          child: Text(<span style="color:#e6db74">&#34;Outline button 边框按钮&#34;</span>),
</span></span><span style="display:flex;"><span>          onPressed: ()<span style="color:#f92672">=&gt;</span>print(<span style="color:#e6db74">&#34;边框按钮&#34;</span>),
</span></span><span style="display:flex;"><span>        ),
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 4. floatingActionButton 浮动按钮
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">// 5. 自定义button：图标-文字-背景-圆角
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        FlatButton(
</span></span><span style="display:flex;"><span>          color: Colors.purple,
</span></span><span style="display:flex;"><span>            shape: RoundedRectangleBorder(
</span></span><span style="display:flex;"><span>              borderRadius: BorderRadius.circular(<span style="color:#ae81ff">8</span>)
</span></span><span style="display:flex;"><span>            ),
</span></span><span style="display:flex;"><span>            child: Row(
</span></span><span style="display:flex;"><span>              mainAxisSize: MainAxisSize.min,
</span></span><span style="display:flex;"><span>              children: <span style="color:#f92672">&lt;</span>Widget<span style="color:#f92672">&gt;</span>[
</span></span><span style="display:flex;"><span>                Icon(Icons.favorite,color: Colors.red,),
</span></span><span style="display:flex;"><span>                Text(<span style="color:#e6db74">&#34;love范&#34;</span>)
</span></span><span style="display:flex;"><span>              ],
</span></span><span style="display:flex;"><span>            ),
</span></span><span style="display:flex;"><span>          onPressed: (){},
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>      ],
</span></span><span style="display:flex;"><span>    );
</span></span></code></pre></div><h2 id="图片">图片</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">_JLHomeContentState</span> <span style="color:#66d9ef">extends</span> State<span style="color:#f92672">&lt;</span>JLHomeContent<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">final</span> imgURL <span style="color:#f92672">=</span>  <span style="color:#e6db74">&#34;https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=116882428,1733900798&amp;fm=26&amp;gp=0.jpg&#34;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">@</span>override
</span></span><span style="display:flex;"><span>  Widget build(BuildContext context) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> Image(
</span></span><span style="display:flex;"><span><span style="color:#75715e">//    1. 在Flutter项目中创建一个文件夹，存储文件
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//    2. 在 pubspec.yaml 进行配置
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//    3. 使用图片
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        image:  AssetImage(<span style="color:#e6db74">&#34;assets/images/a_dot_ham.png&#34;</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ImageDemo01</span> <span style="color:#66d9ef">extends</span> StatelessWidget {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> ImageDemo01({
</span></span><span style="display:flex;"><span>    Key key,
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">@</span>required <span style="color:#66d9ef">this</span>.imgURL,
</span></span><span style="display:flex;"><span>})<span style="color:#f92672">:</span><span style="color:#66d9ef">super</span>(key:key);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">final</span> imgURL;
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">@</span>override
</span></span><span style="display:flex;"><span>  Widget build(BuildContext context) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> Image(
</span></span><span style="display:flex;"><span>      image: NetworkImage(imgURL),
</span></span><span style="display:flex;"><span>      color: Colors.red,<span style="color:#75715e">// 这里的颜色是混入到图片中
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      colorBlendMode: BlendMode.colorDodge,<span style="color:#75715e">// 设置color混入模式
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      width: <span style="color:#ae81ff">200</span>,
</span></span><span style="display:flex;"><span>      height: <span style="color:#ae81ff">200</span>,
</span></span><span style="display:flex;"><span>      fit: BoxFit.contain,<span style="color:#75715e">// 填充方式
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      repeat: ImageRepeat.repeatY,
</span></span><span style="display:flex;"><span><span style="color:#75715e">//          fitWidth: 宽度一定，高度自适应，
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//        fitHeight: 高度一定，宽度自适应
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//        alignment: Alignment.bottomCenter,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      alignment: Alignment(<span style="color:#ae81ff">0</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>),<span style="color:#75715e">//取值范围 -1,1 中间位置是0，0  自定义
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    );
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>WKWebView</title>
			<link>https://blog.v5u.win/posts/ios/ios-wkwebview/</link>
			<pubDate>Fri, 16 Apr 2021 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-wkwebview/</guid>
			<description>WKWebView是获取不到JSContext的，所以不能用JavaScriptCore进行交互。和js交互要用WKScriptMessag</description>
			<content type="html"><![CDATA[<p>WKWebView是获取不到JSContext的，所以不能用JavaScriptCore进行交互。和js交互要用WKScriptMessageHandler协议方法</p>
<p>//MARK: - WKNavigationDelegate</p>
<p>//该代理提供的方法，可以用来追踪加载过程（页面开始加载、加载完成、加载失败）、决定是否执行跳转</p>
<p>// 页面跳转的代理方法有三种，分为（收到跳转与决定是否跳转两种）</p>
<p>// 剩下三个代理方法全都是与界面弹出提示框相关的</p>
<p>// 针对于web界面的三种提示框（警告框、确认框、输入框）分别对应三种代理方法。</p>
<p>//MARK: - WKScriptMessageHandler</p>
<p>//这个协议中包含一个必须实现的方法，这个方法是提高App与web端交互的关键，它可以直接将接收到的JS脚本转为OC或Swift对象。（当然，在UIWebView也可以通过“曲线救国”的方式与web进行交互，著名的Cordova框架就是这种机制</p>
<p>// 处理来自js的方法调用</p>
<p>// 从web界面中接收到一个脚本时调用 js端的写法：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">// postMessage 参数不能为空，必须传点什么
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 格式为 window.webkit.messageHandlers..postMessage(null);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 外部方法必须为 全局js方法
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">scanClick</span>() {
</span></span><span style="display:flex;"><span>    window.<span style="color:#a6e22e">webkit</span>.<span style="color:#a6e22e">messageHandlers</span>.<span style="color:#a6e22e">ScanAction</span>.<span style="color:#a6e22e">postMessage</span>(<span style="color:#66d9ef">null</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>OC端的写法：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-objective-c" data-lang="objective-c"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 在某一个地方注册
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[self.webView.configuration.userContentController addScriptMessageHandler:self name:<span style="color:#e6db74">@&#34;ScanAction&#34;</span>];
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 在某一个地方移除
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[self.webView.configuration.userContentController removeScriptMessageHandlerForName:<span style="color:#e6db74">@&#34;ScanAction&#34;</span>];
</span></span><span style="display:flex;"><span><span style="color:#75715e">//MARK: - WKScriptMessageHandler 代理方法的实现
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>- (<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">userContentController:</span>(WKUserContentController <span style="color:#f92672">*</span>)userContentController <span style="color:#a6e22e">didReceiveScriptMessage:</span>(WKScriptMessage <span style="color:#f92672">*</span>)message{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ([message.name isEqualToString:<span style="color:#e6db74">@&#34;ScanAction&#34;</span>]) {
</span></span><span style="display:flex;"><span>           NSLog(<span style="color:#e6db74">@&#34;说吧，你想干点什么？&#34;</span>);
</span></span><span style="display:flex;"><span>       }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-objective-c" data-lang="objective-c"><span style="display:flex;"><span><span style="color:#75715e">//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//  WKWebViewController.m
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//  HTML_CSS_JS
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//  Created by 范金龙 on 2020/4/28.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//  Copyright © 2020 FF. All rights reserved.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#import &#34;WKWebViewController.h&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#import 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#import 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#import &#34;WKDelegate.h&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">@interface</span> <span style="color:#a6e22e">WKWebViewController</span> ()
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span>
</span></span><span style="display:flex;"><span>WKNavigationDelegate,
</span></span><span style="display:flex;"><span>WKUIDelegate,
</span></span><span style="display:flex;"><span>WKScriptMessageHandler
</span></span><span style="display:flex;"><span><span style="color:#75715e">//WKDelegate
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">@property</span> (<span style="color:#66d9ef">nonatomic</span>, <span style="color:#66d9ef">strong</span>)WKWebView <span style="color:#f92672">*</span>webView;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">@end</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">@implementation</span> <span style="color:#a6e22e">WKWebViewController</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span> NSString <span style="color:#f92672">*</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">@&#34;OCFunc&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 避免循环引用，内存管理，这是一个经典的大环引用问题。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 具体解决方案有好几种，比如：中间类，间接代理，提前手动删除打断。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// addScriptMessageHandler 会强引用self导致当前对象无法释放
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>- (<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">viewWillAppear:</span>(<span style="color:#66d9ef">BOOL</span>)animated{
</span></span><span style="display:flex;"><span>    [super viewWillAppear:animated];
</span></span><span style="display:flex;"><span>    [self.webView.configuration.userContentController addScriptMessageHandler:self name:<span style="color:#e6db74">@&#34;toServer&#34;</span>];
</span></span><span style="display:flex;"><span>    [self.webView.configuration.userContentController addScriptMessageHandler:self name:<span style="color:#e6db74">@&#34;ScanAction&#34;</span>];
</span></span><span style="display:flex;"><span>    [self.webView.configuration.userContentController addScriptMessageHandler:self name:name];
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>- (<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">viewWillDisappear:</span>(<span style="color:#66d9ef">BOOL</span>)animated{
</span></span><span style="display:flex;"><span>    [super viewWillDisappear:animated];
</span></span><span style="display:flex;"><span>    [self.webView.configuration.userContentController removeScriptMessageHandlerForName:<span style="color:#e6db74">@&#34;toServer&#34;</span>];
</span></span><span style="display:flex;"><span>    [self.webView.configuration.userContentController removeScriptMessageHandlerForName:<span style="color:#e6db74">@&#34;ScanAction&#34;</span>];
</span></span><span style="display:flex;"><span>    [self.webView.configuration.userContentController removeScriptMessageHandlerForName:name];
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>- (<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">viewDidLoad</span> {
</span></span><span style="display:flex;"><span>    [super viewDidLoad];
</span></span><span style="display:flex;"><span>    [self.view setBackgroundColor:[UIColor whiteColor]];
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Do any additional setup after loading the view.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    [self initWKWebView];
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>- (<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">initWKWebView</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    WKWebViewConfiguration <span style="color:#f92672">*</span>configuration <span style="color:#f92672">=</span> [[WKWebViewConfiguration alloc] init];
</span></span><span style="display:flex;"><span>    WKPreferences <span style="color:#f92672">*</span>preferences <span style="color:#f92672">=</span> [WKPreferences new];
</span></span><span style="display:flex;"><span>    preferences.javaScriptCanOpenWindowsAutomatically <span style="color:#f92672">=</span> YES;
</span></span><span style="display:flex;"><span>    preferences.minimumFontSize <span style="color:#f92672">=</span> <span style="color:#ae81ff">10.0</span>;
</span></span><span style="display:flex;"><span>    configuration.preferences <span style="color:#f92672">=</span> preferences;
</span></span><span style="display:flex;"><span>    self.webView <span style="color:#f92672">=</span> [[WKWebView alloc] initWithFrame:self.view.frame configuration:configuration];
</span></span><span style="display:flex;"><span>    NSString <span style="color:#f92672">*</span>urlStr <span style="color:#f92672">=</span> [[NSBundle mainBundle] pathForResource:<span style="color:#e6db74">@&#34;wkDemo.html&#34;</span> ofType:nil];
</span></span><span style="display:flex;"><span>    NSURL <span style="color:#f92672">*</span>fileURL <span style="color:#f92672">=</span> [NSURL fileURLWithPath:urlStr];
</span></span><span style="display:flex;"><span>    [self.webView loadFileURL:fileURL allowingReadAccessToURL:fileURL];
</span></span><span style="display:flex;"><span>    self.webView.UIDelegate <span style="color:#f92672">=</span> self;
</span></span><span style="display:flex;"><span>    [self.view addSubview:self.webView];
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">//MARK: WKNavigationDelegate
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//该代理提供的方法，可以用来追踪加载过程（页面开始加载、加载完成、加载失败）、决定是否执行跳转
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 页面开始加载时调用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>- (<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">webView:</span>(WKWebView <span style="color:#f92672">*</span>)webView <span style="color:#a6e22e">didStartProvisionalNavigation:</span>(WKNavigation <span style="color:#f92672">*</span>)navigation{
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 当内容开始返回时调用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>- (<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">webView:</span>(WKWebView <span style="color:#f92672">*</span>)webView <span style="color:#a6e22e">didCommitNavigation:</span>(WKNavigation <span style="color:#f92672">*</span>)navigation{
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 页面加载完成之后调用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>- (<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">webView:</span>(WKWebView <span style="color:#f92672">*</span>)webView <span style="color:#a6e22e">didFinishNavigation:</span>(WKNavigation <span style="color:#f92672">*</span>)navigation{
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//向js注入关闭按钮事件监听
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    NSString <span style="color:#f92672">*</span>script <span style="color:#f92672">=</span> <span style="color:#e6db74">@&#34;document.querySelector(&#39;.close-btn&#39;).addEventListener(&#39;click&#39;,function() {window.webkit.messageHandlers.toServer.postMessage(&#39;close&#39;)},false)&#34;</span>;
</span></span><span style="display:flex;"><span>    [webView evaluateJavaScript:script completionHandler:<span style="color:#f92672">^</span>(<span style="color:#66d9ef">id</span> object, NSError <span style="color:#f92672">*</span> _Nullable error) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span>(error){
</span></span><span style="display:flex;"><span>            NSLog(<span style="color:#e6db74">@&#34;evaluateJavaScript error : %@&#34;</span>,error);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }];
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 页面加载失败时调用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>- (<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">webView:</span>(WKWebView <span style="color:#f92672">*</span>)webView <span style="color:#a6e22e">didFailProvisionalNavigation:</span>(WKNavigation <span style="color:#f92672">*</span>)navigation{
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">// MARK:-
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 页面跳转的代理方法有三种，分为（收到跳转与决定是否跳转两种）
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 接收到服务器跳转请求之后调用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>- (<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">webView:</span>(WKWebView <span style="color:#f92672">*</span>)webView <span style="color:#a6e22e">didReceiveServerRedirectForProvisionalNavigation:</span>(WKNavigation <span style="color:#f92672">*</span>)navigation{
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 在收到响应后，决定是否跳转
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>- (<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">webView:</span>(WKWebView <span style="color:#f92672">*</span>)webView <span style="color:#a6e22e">decidePolicyForNavigationResponse:</span>(WKNavigationResponse <span style="color:#f92672">*</span>)navigationResponse <span style="color:#a6e22e">decisionHandler:</span>(<span style="color:#66d9ef">void</span> (<span style="color:#f92672">^</span>)(WKNavigationResponsePolicy))decisionHandler{
</span></span><span style="display:flex;"><span>    decisionHandler(WKNavigationResponsePolicyAllow);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 在发送请求之前，决定是否跳转
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>- (<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">webView:</span>(WKWebView <span style="color:#f92672">*</span>)webView <span style="color:#a6e22e">decidePolicyForNavigationAction:</span>(nonnull WKNavigationAction <span style="color:#f92672">*</span>)navigationAction <span style="color:#a6e22e">decisionHandler:</span>(nonnull <span style="color:#66d9ef">void</span> (<span style="color:#f92672">^</span>)(WKNavigationActionPolicy))decisionHandler{
</span></span><span style="display:flex;"><span>    decisionHandler(WKNavigationActionPolicyAllow);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">//MARK: WKUIDelegate
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 创建一个新的WebView 待研究
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>- (WKWebView <span style="color:#f92672">*</span>)<span style="color:#a6e22e">webView:</span>(WKWebView <span style="color:#f92672">*</span>)webView <span style="color:#a6e22e">createWebViewWithConfiguration:</span>(WKWebViewConfiguration <span style="color:#f92672">*</span>)configuration <span style="color:#a6e22e">forNavigationAction:</span>(WKNavigationAction <span style="color:#f92672">*</span>)navigationAction <span style="color:#a6e22e">windowFeatures:</span>(WKWindowFeatures <span style="color:#f92672">*</span>)windowFeatures{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> self.webView;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">//MARK:- 剩下三个代理方法全都是与界面弹出提示框相关的
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//针对于web界面的三种提示框（警告框、确认框、输入框）分别对应三种代理方法。下面只举了警告框的例子。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> *  web界面中有弹出警告框时调用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> *  @param webView           实现该代理的webview
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> *  @param message           警告框中的内容
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> *  @param frame             主窗口
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> *  @param completionHandler 警告框消失调用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span>
</span></span><span style="display:flex;"><span>- (<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">webView:</span>(WKWebView <span style="color:#f92672">*</span>)webView <span style="color:#a6e22e">runJavaScriptAlertPanelWithMessage:</span>(nonnull NSString <span style="color:#f92672">*</span>)message <span style="color:#a6e22e">initiatedByFrame:</span>(nonnull WKFrameInfo <span style="color:#f92672">*</span>)frame <span style="color:#a6e22e">completionHandler:</span>(nonnull <span style="color:#66d9ef">void</span> (<span style="color:#f92672">^</span>)(<span style="color:#66d9ef">void</span>))completionHandler
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span><span style="color:#75715e">//    js 调用的alert方法，被wk拦截，在此处执行
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    completionHandler();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>- (<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">webView:</span>(WKWebView <span style="color:#f92672">*</span>)webView <span style="color:#a6e22e">runJavaScriptConfirmPanelWithMessage:</span>(NSString <span style="color:#f92672">*</span>)message <span style="color:#a6e22e">initiatedByFrame:</span>(WKFrameInfo <span style="color:#f92672">*</span>)frame <span style="color:#a6e22e">completionHandler:</span>(<span style="color:#66d9ef">void</span> (<span style="color:#f92672">^</span>)(<span style="color:#66d9ef">BOOL</span>))completionHandler{completionHandler(true);}
</span></span><span style="display:flex;"><span>- (<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">webView:</span>(WKWebView <span style="color:#f92672">*</span>)webView <span style="color:#a6e22e">runJavaScriptTextInputPanelWithPrompt:</span>(NSString <span style="color:#f92672">*</span>)prompt <span style="color:#a6e22e">defaultText:</span>(NSString <span style="color:#f92672">*</span>)defaultText <span style="color:#a6e22e">initiatedByFrame:</span>(WKFrameInfo <span style="color:#f92672">*</span>)frame <span style="color:#a6e22e">completionHandler:</span>(<span style="color:#66d9ef">void</span> (<span style="color:#f92672">^</span>)(NSString <span style="color:#f92672">*</span> _Nullable))completionHandler{    completionHandler(<span style="color:#e6db74">@&#34;输入&#34;</span>);}
</span></span><span style="display:flex;"><span><span style="color:#75715e">//MARK: WKScriptMessageHandler
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//这个协议中包含一个必须实现的方法，这个方法是提高App与web端交互的关键，它可以直接将接收到的JS脚本转为OC或Swift对象。（当然，在UIWebView也可以通过“曲线救国”的方式与web进行交互，著名的Cordova框架就是这种机制
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 处理来自js的方法调用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 从web界面中接收到一个脚本时调用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>- (<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">userContentController:</span>(WKUserContentController <span style="color:#f92672">*</span>)userContentController <span style="color:#a6e22e">didReceiveScriptMessage:</span>(WKScriptMessage <span style="color:#f92672">*</span>)message{
</span></span><span style="display:flex;"><span>    NSLog(<span style="color:#e6db74">@&#34;%@&#34;</span>,message.name);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ([message.name isEqualToString:<span style="color:#e6db74">@&#34;ScanAction&#34;</span>]) {
</span></span><span style="display:flex;"><span>           NSLog(<span style="color:#e6db74">@&#34;扫一扫&#34;</span>);
</span></span><span style="display:flex;"><span>       }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ([message.name isEqualToString:<span style="color:#e6db74">@&#34;OCFunc&#34;</span>]){<span style="color:#75715e">//此处name为JS传出信息打包的标志
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">//用message.body获得JS传出的参数体
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">//handle coding..
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">/*获得传出的字符串参数*/</span>
</span></span><span style="display:flex;"><span>        NSString <span style="color:#f92672">*</span> dataString <span style="color:#f92672">=</span> message.body;
</span></span><span style="display:flex;"><span>        NSLog(<span style="color:#e6db74">@&#34;wkwebview 获取js传出的数据%@&#34;</span>,dataString);
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 在需要调用JS的地方执行如下代码
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">// 有参数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        [self.webView evaluateJavaScript:<span style="color:#e6db74">@&#34;postInfo(&#39;参数1,参数2&#39;)&#34;</span>completionHandler:nil];
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 无参数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        [self.webView evaluateJavaScript:<span style="color:#e6db74">@&#34;postInfo()&#34;</span>completionHandler:nil];
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 此处的 &#39;postInfo()&#39; 是前端的方法，需要前端告诉你
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>- (<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">dealloc</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    NSLog(<span style="color:#e6db74">@&#34;%s&#34;</span>,__FUNCTION__);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">@end</span>
</span></span></code></pre></div><p>wkDemo.html 实例HTML的代码如下</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span>            function scanClick() {
</span></span><span style="display:flex;"><span>                window.webkit.messageHandlers.ScanAction.postMessage(null);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// &lt;!-- 错误处理 --&gt;</span>
</span></span><span style="display:flex;"><span>            window.onerror = function(err) {
</span></span><span style="display:flex;"><span>                log(<span style="color:#960050;background-color:#1e0010">&#39;</span>window.onerror: <span style="color:#960050;background-color:#1e0010">&#39;</span> <span style="color:#f92672">+</span> err)
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            function log(message, data) {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">var</span> log = document.getElementById(<span style="color:#960050;background-color:#1e0010">&#39;</span>log<span style="color:#960050;background-color:#1e0010">&#39;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">var</span> el = document.createElement(<span style="color:#960050;background-color:#1e0010">&#39;</span>p<span style="color:#960050;background-color:#1e0010">&#39;</span>)
</span></span><span style="display:flex;"><span>                el.className = <span style="color:#960050;background-color:#1e0010">&#39;</span>logLine<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>                el.innerHTML = <span style="color:#e6db74">&#34;message: &#34;</span> <span style="color:#f92672">+</span> message <span style="color:#f92672">+</span><span style="color:#960050;background-color:#1e0010">&#39;</span>:&lt;br<span style="color:#f92672">/&gt;</span><span style="color:#960050;background-color:#1e0010">&#39;</span> <span style="color:#f92672">+</span> (data ? <span style="color:#960050;background-color:#1e0010">&#39;</span>:&lt;br<span style="color:#f92672">/&gt;</span><span style="color:#960050;background-color:#1e0010">&#39;</span> <span style="color:#f92672">+</span> JSON.stringify(data) : <span style="color:#960050;background-color:#1e0010">&#39;&#39;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (log.children.length) { log.insertBefore(el, log.children[<span style="color:#ae81ff">0</span>]) }
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">else</span> { log.appendChild(el) }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// function buttonOnClick = function (e) {} // 这种写法有问题,WKWebView 捕获的js方法必须为全局方法，也不可以是方法变量。</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 下面这种形式正确</span>
</span></span><span style="display:flex;"><span>            function buttonOnClick(e) {
</span></span><span style="display:flex;"><span>                window.webkit.messageHandlers.OCFunc.postMessage(<span style="color:#960050;background-color:#1e0010">&#39;</span>close<span style="color:#960050;background-color:#1e0010">&#39;</span>)<span style="color:#75715e">//调用原生代码</span>
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            function postInfo(name) {
</span></span><span style="display:flex;"><span>                log(name)
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>            html { font<span style="color:#f92672">-</span>family:Helvetica; color:#ddd; }
</span></span><span style="display:flex;"><span>            h1 { color:steelblue; font<span style="color:#f92672">-</span>size:<span style="color:#ae81ff">24</span>pm; margin<span style="color:#f92672">-</span>top:<span style="color:#ae81ff">24</span>px; }
</span></span><span style="display:flex;"><span>            button { margin:<span style="color:#ae81ff">0</span> <span style="color:#ae81ff">3</span>px <span style="color:#ae81ff">10</span>px; font<span style="color:#f92672">-</span>size:<span style="color:#ae81ff">2</span>pm; }
</span></span><span style="display:flex;"><span>            .logLine { border<span style="color:#f92672">-</span>bottom:<span style="color:#ae81ff">1</span>px solid #ccc; padding:<span style="color:#ae81ff">4</span>px <span style="color:#ae81ff">2</span>px; font<span style="color:#f92672">-</span>family:courier; font<span style="color:#f92672">-</span>size:<span style="color:#ae81ff">11</span>pm; }
</span></span><span style="display:flex;"><span>            div{color: black;line<span style="color:#f92672">-</span>height:<span style="color:#ae81ff">100</span><span style="color:#f92672">%</span>;border<span style="color:#f92672">-</span>color: #ccc; border<span style="color:#f92672">-</span>width:<span style="color:#ae81ff">1</span>px;}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        WebViewJavascriptBridge Demo
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        buttons
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            alert
</span></span><span style="display:flex;"><span>            OC注入
</span></span><span style="display:flex;"><span>            js <span style="color:#960050;background-color:#1e0010">调用</span>Native方法
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        log
</span></span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>岳美中论医集</title>
			<link>https://blog.v5u.win/posts/read/%E5%B2%B3%E7%BE%8E%E4%B8%AD%E8%AE%BA%E5%8C%BB%E9%9B%86/</link>
			<pubDate>Mon, 12 Oct 2020 20:48:25 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/read/%E5%B2%B3%E7%BE%8E%E4%B8%AD%E8%AE%BA%E5%8C%BB%E9%9B%86/</guid>
			<description>专学《伤寒》容易涉及粗疏，专学温病容易流于清淡。粗疏常致于偾事，轻淡每流于敷衍。必须学古方而能入细，学时方而能务实。入细则能理复杂纷乱之繁，</description>
			<content type="html"><![CDATA[<p>专学《伤寒》容易涉及粗疏，专学温病容易流于清淡。粗疏常致于偾事，轻淡每流于敷衍。必须学古方而能入细，学时方而能务实。入细则能理复杂纷乱之繁，务实则能举沉寒痼疾之重——《岳美中论医集》</p>
]]></content>
		</item>
		
		<item>
			<title>Flutter 总结</title>
			<link>https://blog.v5u.win/posts/flutter/flutter-%E6%80%BB%E7%BB%93/</link>
			<pubDate>Fri, 10 Jul 2020 16:24:30 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/flutter/flutter-%E6%80%BB%E7%BB%93/</guid>
			<description>[TOC] flutter 使用总结 安装 参考之前的环境安装一文 测试安装环境 flutter doctor 环境问题，工具问题，版本问题 flutter环境变量，使用stable分支 工具，创建项目</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<p>flutter 使用总结</p>
<h2 id="安装">安装</h2>
<p>参考之前的环境安装一文</p>
<h2 id="测试安装环境">测试安装环境</h2>
<p><code>flutter doctor</code></p>
<h3 id="环境问题工具问题版本问题">环境问题，工具问题，版本问题</h3>
<ul>
<li>flutter环境变量，使用stable分支</li>
<li>工具，创建项目，测试一下是否OK</li>
<li>SDK，android studio 搜索sdk，edit可以初始化SDK</li>
<li>xcode，创建demo，运行一下检测</li>
<li>VPN与镜像，各平台镜像，网上搜索</li>
<li>扩展工具dev tools 在浏览器查看flutterUI布局结构<code>pub global activate devtools</code> <code>export PATH=&quot;$PATH&quot;:&quot;$HOME/.pub-cache/bin&quot;</code></li>
<li>镜像源替换  packages/flutter_tools/gradle/flutter.gradle</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span><span style="color:#75715e">// private static final String DEFAULT_MAVEN_HOST = &#34;https://storage.googleapis.com&#34;;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String DEFAULT_MAVEN_HOST <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://storage.flutter-io.cn/download.flutter.io&#34;</span><span style="color:#f92672">;</span>
</span></span></code></pre></div><h2 id="ide">IDE</h2>
<h3 id="androidstudio">androidStudio</h3>
<p>安装插件：Dart+Flutter</p>
<p>hot reload 主要是执行main 中的 build方法，非build内的方法不被执行，比如：计数。</p>
<p>hot restart 会执行所有的方法</p>
<h3 id="vscode">vsCode</h3>
<p>安装插件：Dart+Flutter</p>
<p>配置测试机：cmd+p 输入&gt;flutter 选择Flutter Select Device或点击右下角，选择目标设备。
等待右下角的配置生效，点击右上角，小的start三角按钮，编译运行程序</p>
<h3 id="materialui">MaterialUI</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span><span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#39;package:flutter/cupertino.dart&#39;</span>;
</span></span><span style="display:flex;"><span>ios设计风格
</span></span></code></pre></div><p>runAPP =&gt; MaterialApp =&gt; scaffold 脚手架 =&gt; 自动以小部件</p>
<p>Scaffold脚手架类似UIViewController 或 Activity</p>
<h2 id="声明式ui">声明式UI</h2>
<p>声明式UI对应的是命令式。在win32到web，Android，iOS。UI的变更都是用的命令式。手动构建全功能的UI实体（View），然后在UI更改时用方法进行变更。Flutter让开发者描述当前UI状态，不需要关心它是如何过渡到框架。需要UI布局思维方式的转变。</p>
<pre tabindex="0"><code>命令式UI更改 Imperative style

b.setColor(red)
b.clearChildren()
View c3 = new View()
b.add(c3)
</code></pre><pre tabindex="0"><code>声明式UI写法 Declarative style
return ViewB(
	color: red,
	child: View(...),
)
</code></pre><p>由于视图配置widget是不可变的，更改UI的话，会引发自身重绘。flutter构建新的实例，而不是改变旧实例b。所以可以实现声明式UI。
flutter框架使用 renderObject管理传统UI对象的许多职能（如维护布局的状态）RenderObjects在帧之间保持不变，widgets告诉框架在状态之间改变RenderObjects，接下来Flutter框架会处理其余部分。</p>
<p>Android/ios中是命令式开发，不说状态，属性=数据</p>
<p>react-Vue-angular 是声明式编程，管好状态，让框架负责渲染</p>
<p><strong>注意：在flutter中所有的Widget都不能定义状态。</strong></p>
<p>StatefulWidget创建一个类，负责维护状态。setState。</p>
<h2 id="flutter项目">Flutter项目</h2>
<h3 id="如何创建flutter项目">如何创建flutter项目？</h3>
<p><code>flutter create name</code></p>
<h3 id="如何运行flutter项目">如何运行flutter项目</h3>
<p><code>flutter run -d 'iPhone X'</code></p>
<p>配置iOS真机运行的环境</p>
<pre tabindex="0"><code>brew update
brew install --HEAD libimobiledevice
brew install ideviceinstaller ios-deploy cocoapods
pod setup
// -- 
配置证书，信任设备
flutter run 运行
</code></pre><h3 id="如何导入widget">如何导入widget</h3>
<p><code>import 'dart:convert';</code></p>
<h3 id="如何写一个helloworld">如何写一个helloworld</h3>
<h3 id="如何使用widget并将其嵌套形成widget树">如何使用widget并将其嵌套，形成widget树</h3>
<p>widget树就是组件化开发的思想。</p>
<p>widget 最最基本的控件结构。</p>
<p>widget可以定义：</p>
<ul>
<li>
<p>结构元素：如按钮或菜单</p>
</li>
<li>
<p>文体元素：像字体或颜色主题</p>
</li>
<li>
<p>类似布局的填充或对其的方式</p>
</li>
</ul>
<h3 id="如何创建可重用widget">如何创建可重用widget</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyHomePage</span> <span style="color:#66d9ef">extends</span> StatefulWidget {
</span></span><span style="display:flex;"><span>  MyHomePage({<span style="color:#960050;background-color:#1e0010">@</span>required Key key, <span style="color:#66d9ef">this</span>.title}) <span style="color:#f92672">:</span> <span style="color:#66d9ef">super</span>(key: key);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">注意：参数为大括号，默认可选，@</span>required注解为必填<span style="color:#960050;background-color:#1e0010">。</span>
</span></span></code></pre></div><h2 id="项目结构静态资源本地化">项目结构，静态资源，本地化</h2>
<ul>
<li>项目文件结构是怎样的？</li>
<li>在哪里归档图片资源以及处理不同分辨率？</li>
<li>如果归档strings资源，以及国际化</li>
<li>如何添加flutter依赖</li>
</ul>
<pre tabindex="0"><code>./ projectname
├── README.md
├── android 安卓工程文件
├── build 项目构建输出目录
├── helloFlutter.iml
├── ios iOS部分工程文件
├── lib
│   └── src 	包含其他源文件
│   └── main.dart	自动生成的项目入口文件，类似RN的index.js
├── pubspec.yaml 	- 项目依赖配置文件，类似RN的package.json
└── test			- 测试相关文件
</code></pre><p>Assets可以被放置到任何属性文件夹中&ndash;flutter并没有预先定义的文件结构。</p>
<p>assets 中可以放任意文件，需要在yaml中声明assets的位置，flutter会识别。</p>
<pre tabindex="0"><code>assets:
 - my-assets/data.json
</code></pre><p>然后用AssetBundle访问</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span><span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#39;dart:async&#39;</span> <span style="color:#66d9ef">show</span> Future;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#39;package:flutter/services.dart&#39;</span> <span style="color:#66d9ef">show</span> rootBundle;
</span></span><span style="display:flex;"><span>Future<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">String</span><span style="color:#f92672">&gt;</span> loadAsset() <span style="color:#66d9ef">async</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">await</span> rootBundle.loadString(<span style="color:#e6db74">&#39;my-assets/data.json&#39;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>图片命名格式类似iOS，遵循 1.0x 2.0x 3.0x 倍数。</p>
<p>Android不同像素密度和flutter像素比例对应关系</p>
<pre tabindex="0"><code>ldpi 		0.75x
mdpi		1.0x
hdpi		1.5x
xhdpi		2.0x
xxhdpi	3.0x
xxxhdpi	4.0x
</code></pre><p>例：将my_icon.png 的图片放到flutter工程中</p>
<pre tabindex="0"><code>放置:
images/my_icon.png // 1.0x
images/2.0x/my_icon.png // 2.0x
images/3.0x/my_icon.png // 3.0x

yaml声明:
assets:
 - images/my_icon.png

使用:
return AssetImage(&#34;images/my_icon.png&#34;)
</code></pre><p>不像iOS 拥有 Localizable.strings 文件，flutter目前没有专门的字符串资源系统。最佳做法是将strings资源作为静态字段保存在类中。例：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Strings</span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">String</span> welcomeMessage <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Welcome To Flutter&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">使用</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#39;package:flutter_localizations/flutter_localizations.dart&#39;</span>;
</span></span><span style="display:flex;"><span>Text(Strings.welcomeMessage);
</span></span></code></pre></div><p>flutter 默认支持美式英语，需要引入 flutter_localizations 包。和intl 包支持其他 i10n 机制，比如日期/时间格式化。</p>
<pre tabindex="0"><code>dependencies:
 flutter_localizations:
 	sdk: flutter
 intl: &#34;^0.16.1&#34;
</code></pre><h3 id="widget">Widget</h3>
<blockquote>
<p>请记住一下规则：如果Widget在build之外更改（例如：用于运行时用户交互）则他是有状态的。如果Widget永远不会改变，一旦构建，他就是无状态的。但是，即使Widget是有状态的，如果包含他的父窗口小部件本身不对这些更改（或输入）做出反应，父Widget仍然可以是无状态的。</p>
</blockquote>
<p>Widget更像是配置文件。</p>
<p>Widget 有@immutable注解，说明是不可变的</p>
<p>如何设置Widget的动画？</p>
<p>animosity</p>
<p>如何设置Widget的绘图？</p>
<p>如何设置Widget的透明度？</p>
<pre tabindex="0"><code>Opacity(
	opacity: 0.5,
	child: Text(&#39;透明度50%&#39;)
)
</code></pre><p>StatelessWidget</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span><span style="color:#75715e">/*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">* 为什么flutter在设计的时候StatefulWidget的build方法放在State中
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">* 1. build出来的Widget是需要依赖State中的变量（状态/数据)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">* 2. 在Flutter的运行过程中：
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">*     Widget是不断地额销毁和创建的
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">*     当我们自己的状态发生改变时，并不希望重新创建一个新的State
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">* */</span>
</span></span></code></pre></div><p>StatefulWidget</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JLContentBody</span> <span style="color:#66d9ef">extends</span> StatefulWidget{
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">@</span>override
</span></span><span style="display:flex;"><span>  State<span style="color:#f92672">&lt;</span>StatefulWidget<span style="color:#f92672">&gt;</span> createState() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> JLContentBodyState();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JLContentBodyState</span> <span style="color:#66d9ef">extends</span> State<span style="color:#f92672">&lt;</span>JLContentBody<span style="color:#f92672">&gt;</span>{
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> flag <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">@</span>override
</span></span><span style="display:flex;"><span>  Widget build(BuildContext context) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> Center(
</span></span><span style="display:flex;"><span>      child: Row(
</span></span><span style="display:flex;"><span>        mainAxisAlignment: MainAxisAlignment.center,<span style="color:#75715e">//主轴
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        children: <span style="color:#f92672">&lt;</span>Widget<span style="color:#f92672">&gt;</span>[
</span></span><span style="display:flex;"><span>          Checkbox(
</span></span><span style="display:flex;"><span>              value: flag,
</span></span><span style="display:flex;"><span>              onChanged: (value){
</span></span><span style="display:flex;"><span>                setState(() {
</span></span><span style="display:flex;"><span>                  flag <span style="color:#f92672">=</span> value;
</span></span><span style="display:flex;"><span>                });
</span></span><span style="display:flex;"><span>                print(flag);
</span></span><span style="display:flex;"><span>              }),
</span></span><span style="display:flex;"><span>          Text(<span style="color:#e6db74">&#34;同意协议&#34;</span>)
</span></span><span style="display:flex;"><span>        ],
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      ),
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="管理状态">管理状态</h3>
<h4 id="内部状态-参考rn的状态管理">内部状态 参考RN的状态管理</h4>
<p>在setState中更新状态</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">_JLHomeContentState</span> <span style="color:#66d9ef">extends</span> State<span style="color:#f92672">&lt;</span>JLHomeContent<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> _counter <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;<span style="color:#75715e">// 内部状态
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">@</span>override
</span></span><span style="display:flex;"><span>  Widget build(BuildContext context) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> Center(
</span></span><span style="display:flex;"><span>      child: Column(
</span></span><span style="display:flex;"><span>        mainAxisAlignment: MainAxisAlignment.center,<span style="color:#75715e">//主轴居中
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        children: <span style="color:#f92672">&lt;</span>Widget<span style="color:#f92672">&gt;</span>[
</span></span><span style="display:flex;"><span>          _getButtons(),
</span></span><span style="display:flex;"><span>          Text(<span style="color:#e6db74">&#34;当前计数:</span><span style="color:#e6db74">$</span>_counter<span style="color:#e6db74">&#34;</span>,style: TextStyle(fontSize: <span style="color:#ae81ff">25</span>),),
</span></span><span style="display:flex;"><span>          Text(<span style="color:#e6db74">&#34;传过来的信息:</span><span style="color:#e6db74">${</span>widget.message<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>,)
</span></span><span style="display:flex;"><span>        ],
</span></span><span style="display:flex;"><span>      ),
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  Widget _getButtons(){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> Row(
</span></span><span style="display:flex;"><span>      mainAxisAlignment: MainAxisAlignment.center,
</span></span><span style="display:flex;"><span>      children: <span style="color:#f92672">&lt;</span>Widget<span style="color:#f92672">&gt;</span>[
</span></span><span style="display:flex;"><span>        RaisedButton(
</span></span><span style="display:flex;"><span>            child: Text(<span style="color:#e6db74">&#34;+&#34;</span>, style: TextStyle(fontSize: <span style="color:#ae81ff">20</span>, color: Colors.white),),
</span></span><span style="display:flex;"><span>            color: Colors.red,
</span></span><span style="display:flex;"><span>            onPressed: (){
</span></span><span style="display:flex;"><span>              setState(() {
</span></span><span style="display:flex;"><span><span style="color:#75715e">//                相当于匿名函数，这里，外边设置++也可以
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                _counter <span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>              });
</span></span><span style="display:flex;"><span>            }),
</span></span><span style="display:flex;"><span>      ],
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="外部状态-参考rn的状态管理">外部状态 参考RN的状态管理</h4>
<p>state类中有绑定widget变量和Widget类对应。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JLHomePage</span> <span style="color:#66d9ef">extends</span> StatelessWidget {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">@</span>override
</span></span><span style="display:flex;"><span>  Widget build(BuildContext context) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> Scaffold(
</span></span><span style="display:flex;"><span>      appBar: AppBar(
</span></span><span style="display:flex;"><span>        title: Text( <span style="color:#e6db74">&#34;商品列表&#34;</span>),
</span></span><span style="display:flex;"><span>      ),
</span></span><span style="display:flex;"><span>      body: JLHomeContent(<span style="color:#e6db74">&#34;haha&#34;</span>),
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//Widget 不加下划线，一般暴露给外部使用。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//State 是加下划线，状态类，只给Widget内部使用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JLHomeContent</span> <span style="color:#66d9ef">extends</span> StatefulWidget {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">String</span> message;
</span></span><span style="display:flex;"><span>  JLHomeContent(<span style="color:#66d9ef">this</span>.message);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">@</span>override
</span></span><span style="display:flex;"><span>  _JLHomeContentState createState() <span style="color:#f92672">=&gt;</span> _JLHomeContentState();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">_JLHomeContentState</span> <span style="color:#66d9ef">extends</span> State<span style="color:#f92672">&lt;</span>JLHomeContent<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> _counter <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">@</span>override
</span></span><span style="display:flex;"><span>  Widget build(BuildContext context) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> Center(
</span></span><span style="display:flex;"><span>      child: Column(
</span></span><span style="display:flex;"><span>        mainAxisAlignment: MainAxisAlignment.center,<span style="color:#75715e">//主轴居中
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        children: <span style="color:#f92672">&lt;</span>Widget<span style="color:#f92672">&gt;</span>[
</span></span><span style="display:flex;"><span>          _getButtons(),
</span></span><span style="display:flex;"><span>          Text(<span style="color:#e6db74">&#34;当前计数:</span><span style="color:#e6db74">$</span>_counter<span style="color:#e6db74">&#34;</span>,style: TextStyle(fontSize: <span style="color:#ae81ff">25</span>),),
</span></span><span style="display:flex;"><span>          Text(<span style="color:#e6db74">&#34;传过来的信息:</span><span style="color:#e6db74">${</span>widget.message<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>,)<span style="color:#75715e">// 使用外部的状态
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        ],
</span></span><span style="display:flex;"><span>      ),
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="布局">布局</h2>
<p>flutter使用row和Colum进行水平和垂直布局</p>
<p>flex 布局</p>
<p>对于Colum 纵轴是主轴</p>
<p>对于Row 横轴是主轴</p>
<p>他们都有交叉轴</p>
<pre tabindex="0"><code>return row(
mainAxisAlignment: MainAxisAlignment.center,
children: &lt;Widget&gt;[
Text(Row one),
Text(Row two),
],
);
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">@</span>override
</span></span><span style="display:flex;"><span>Widget build(BuildContext context){
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> Colum(
</span></span><span style="display:flex;"><span>		mainAxisAlignment:MainAxisAlignment.center,
</span></span><span style="display:flex;"><span>		children: <span style="color:#f92672">&lt;</span>Widget<span style="color:#f92672">&gt;</span>[
</span></span><span style="display:flex;"><span>			Text(Column one),
</span></span><span style="display:flex;"><span>			Text(Column two),
</span></span><span style="display:flex;"><span>		],
</span></span><span style="display:flex;"><span>	);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>RelativeLayout 在flutter中等价于什么？</p>
<p>RelativeLayout用于使Widget相对于彼此位置排列。在Flutter中，有几种方法可以实现相同的效果：Column、row和Stack组合实现RelativeLayout的效果</p>
<h2 id="生命周期">生命周期</h2>
<p>flutter 中只需要监听widget的生命周期就行。iOS中需要监听Controller和View的声明周期</p>
<h3 id="statelesswidget-的生命周期">statelessWidget 的生命周期</h3>
<pre tabindex="0"><code>构造函数
build
class JLHomeContent extends StatelessWidget {
  final String message;
  JLHomeContent(this.message){
    print(&#34;构造函数被调用&#34;);
  }

  @override
  Widget build(BuildContext context) {
    print(&#34;调用build方法&#34;);
    return Text(message);
  }
}
</code></pre><h3 id="statefulwidget的生命周期">statefulWidget的生命周期</h3>
<p>分为两部分</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span><span style="color:#ae81ff">1.</span> Stateful Widget
</span></span><span style="display:flex;"><span>Constructor <span style="color:#f92672">-&gt;</span> Widget_createState()
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2.</span> State_object
</span></span><span style="display:flex;"><span>Constructor <span style="color:#f92672">-&gt;</span> mounted <span style="color:#f92672">-&gt;</span> initState <span style="color:#f92672">-&gt;</span> dirty state <span style="color:#f92672">-&gt;</span>build <span style="color:#f92672">-&gt;</span> clean state <span style="color:#f92672">-&gt;</span> dispose
</span></span><span style="display:flex;"><span>															<span style="color:#960050;background-color:#1e0010">↓</span>						<span style="color:#960050;background-color:#1e0010">↑</span>			<span style="color:#960050;background-color:#1e0010">↑</span>									<span style="color:#960050;background-color:#1e0010">↓</span>
</span></span><span style="display:flex;"><span>																					   		<span style="color:#960050;background-color:#1e0010">↑</span>	setState			 <span style="color:#960050;background-color:#1e0010">←↓</span>
</span></span><span style="display:flex;"><span>											didChangeDependencies			<span style="color:#960050;background-color:#1e0010">↑</span>didUpdateWidget <span style="color:#960050;background-color:#1e0010">←↓</span>
</span></span></code></pre></div><p><img src="./src/img/statefulWidget%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="statefulWidget生命周期"></p>
<p>didUpdateWidget</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JLHomeContent</span> <span style="color:#66d9ef">extends</span> StatefulWidget {
</span></span><span style="display:flex;"><span>  JLHomeContent(){
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;1.调用JLHomeContent的constructor&#34;</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">@</span>override
</span></span><span style="display:flex;"><span>  _JLHomeContentState createState() {
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;2.调用JLHomeContent的createState方法&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> _JLHomeContentState();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">_JLHomeContentState</span> <span style="color:#66d9ef">extends</span> State<span style="color:#f92672">&lt;</span>JLHomeContent<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>  _JLHomeContentState(){
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;3.调用_JLHomeContentState的constructor方法&#34;</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">@</span>override
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> initState() {
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;4. 调用State的initState方法&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 这里必须调super
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">super</span>.initState();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">@</span>override
</span></span><span style="display:flex;"><span>  Widget build(BuildContext context) {
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;5. 调用build &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> Text(<span style="color:#e6db74">&#34;data&#34;</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">@</span>override
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> dispose() {
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;6.调用State的dispose方法&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">super</span>.dispose();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="控件">控件</h2>
<p>styles Widget 样式小部件。</p>
<p>ListView = ScrollView+ListView</p>
<p>参数是一个widgets的数组</p>
<p>如何更新ListView？</p>
<p>简单方法是：在setState中创建一个新的list，并把旧list的数据拷贝给新的list。但是不推荐。</p>
<p>推荐做法：ListView.builder(itemBuilder:())</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span>body: ListView.builder(
</span></span><span style="display:flex;"><span>	itemCount: widgets.length,
</span></span><span style="display:flex;"><span>	itemBuilder: (BuilderContext context,<span style="color:#66d9ef">int</span> position){
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> getRow(position)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Widget getRow(<span style="color:#66d9ef">int</span> i){
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> GestureDetector(
</span></span><span style="display:flex;"><span>		child: Padding(
</span></span><span style="display:flex;"><span>			padding: EdgeInsets.all(<span style="color:#ae81ff">10.0</span>),
</span></span><span style="display:flex;"><span>			child: Text(<span style="color:#e6db74">&#34;Row </span><span style="color:#e6db74">$</span>i<span style="color:#e6db74">&#34;</span>),
</span></span><span style="display:flex;"><span>		),
</span></span><span style="display:flex;"><span>		onTap: (){
</span></span><span style="display:flex;"><span>			setState((){
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 当点击时 动态添加一个元素，而不是创建一个list。高明的地方
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>       <span style="color:#75715e">// 不会导致整个列表被渲染，只会渲染部分，所以效率比较高。 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>				widgets.add(getRow(widgets.length<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>));
</span></span><span style="display:flex;"><span>				print(<span style="color:#e6db74">&#39;row </span><span style="color:#e6db74">$</span>i<span style="color:#e6db74">&#39;</span>);
</span></span><span style="display:flex;"><span>			});
</span></span><span style="display:flex;"><span>		},
</span></span><span style="display:flex;"><span>	);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="编程范式">编程范式</h2>
<p>编程范式对于初学者来说感受不深刻，但是在日常中随处可见。比如面向对象编程 就是一种编程范式，与之对应的事面向过程编程，函数式编程，面向协议编程。</p>
<p>还有两种编程范式：命令式编程 和 声明式编程</p>
<ul>
<li>命令式编程：就是一步步给计算机命令，告诉他我们想做什么事情。</li>
<li>声明式编程：是描述目标的性质，你应该是什么样的，依赖哪些状态，并且当以来的状态发生改变时，我们通过某些方式通知目标作出相应的</li>
</ul>
<h2 id="使用注意">使用注意</h2>
<h3 id="热更新">热更新</h3>
<p>原理是在本地搞了一个服务器，localhost所以真机测试是不行的。只能使用模拟器，才能热更新。</p>
<p>命令行 flutter run  然后执行 r 更新UI</p>
<p>AS run 保存就可以，右上角有热更新按钮，⚡️</p>
<h3 id="包管理">包管理</h3>
<p>flutter packages get 更新一定要在终端执行更新，as中无法中断进程导致进程锁死 。我的问题是包名写错了，一直更新失败。as无法中断该进程。在中断更新就很容易退出进程了。</p>
<p>如果进程锁死解决：</p>
<p>删除文件 flutter/bin/cache/lockfile,可以解放进程</p>
<h3 id="快捷键">快捷键</h3>
<p>stl 创建StatelessWidget类</p>
<p>alt+enter 包一层部件</p>
<p>cmd+alt+B 查看抽象类的子类。</p>
<p>alt+enter 将statelessWidget 转换为StatefulWidget</p>
<p>alt+cmd+M 抽取组件代码生产组件方法</p>
<p>alt+cmd+W 抽取组件代码生成组件类 快捷键冲突，可以右键重构选项。</p>
<p>cmd+alt+L 格式化代码</p>
<h3 id="辅助工具">辅助工具</h3>
<p>Dev Tools查看UI结构</p>
<p>pub全局安装插件，配置环境变量，在AS中点击右下方的OpenDevTools。会启动一个server，打开浏览器，显示UI结构</p>
]]></content>
		</item>
		
		<item>
			<title>Design 设计模式 装饰模式</title>
			<link>https://blog.v5u.win/posts/design/design-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</link>
			<pubDate>Tue, 21 Apr 2020 20:08:52 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/design/design-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</guid>
			<description>OC swift 中的装饰者模式实现：扩展和代理 装饰模式是指不通过继承的方式，实现为对象添加方法的方式。</description>
			<content type="html"><![CDATA[<p>OC swift 中的装饰者模式实现：扩展和代理</p>
<p>装饰模式是指不通过继承的方式，实现为对象添加方法的方式。</p>
]]></content>
		</item>
		
		<item>
			<title>Design 设计模式 门面模式</title>
			<link>https://blog.v5u.win/posts/design/design-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/</link>
			<pubDate>Tue, 21 Apr 2020 20:08:17 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/design/design-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/</guid>
			<description>门面模式的翻译不太好，不容易理解。来源单词：facade 架构如下： client1 client2 ↓ ↓ facade ↓ ↓ ↓ sub_system1 sub_system2 sub_system3 门面模式主要目的是提供唯一的对外接口，完全屏蔽内部的</description>
			<content type="html"><![CDATA[<p>门面模式的翻译不太好，不容易理解。来源单词：facade</p>
<p>架构如下：</p>
<pre tabindex="0"><code>client1 client2
↓					↓
facade
↓ 	↓	↓
sub_system1 sub_system2 sub_system3
</code></pre><p>门面模式主要目的是提供唯一的对外接口，完全屏蔽内部的复杂逻辑。</p>
<p>如果有很多个类，也可以用门面模式。</p>
<p>比如：</p>
<p>红会内部非常复杂，因此捐钱提供一个通道，花钱用户就不管了。 就算内部出现变动，也不会影响对外的接口。</p>
]]></content>
		</item>
		
		<item>
			<title>制作pod library 私有库</title>
			<link>https://blog.v5u.win/posts/ios/ios-cocoapod_library%E7%A7%81%E6%9C%89%E5%BA%93/</link>
			<pubDate>Tue, 21 Apr 2020 13:14:17 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-cocoapod_library%E7%A7%81%E6%9C%89%E5%BA%93/</guid>
			<description>[TOC] iOS组件化之路——制作pod 私有库 详细教程点我 创建远程仓库 本地创建项目 pod lib create MyTest 添加文件到Classes/目录下 在example下执行po</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="ios组件化之路制作pod-私有库">iOS组件化之路——制作pod 私有库</h2>
<p><a href="https://www.jianshu.com/p/66b63f56b2d5">详细教程点我</a></p>
<ol>
<li>创建远程仓库</li>
<li>本地创建项目 pod lib create MyTest</li>
<li>添加文件到Classes/目录下</li>
<li>在example下执行pod update / pod install，安装依赖 ,失败</li>
<li>pod lib lint &ndash;allow-warnings 验证本地私有库,并忽略警告</li>
<li>pod spec lint &ndash;allow-warnings 验证远端spec，并忽略警告</li>
<li>pod repo push MySpec FFLocalLib.podspec &ndash;allow-warnings 私有库加入MySpec版本控制中心并提交到远端</li>
<li>end</li>
</ol>
<h2 id="制作-pod-公共库">制作 pod 公共库</h2>
<ol>
<li>pod lib create MyTest</li>
<li>添加 code</li>
<li>在 example目录下执行 pod install</li>
<li>校验 pod lib lint</li>
<li>注册设备 和邮箱
pod trunk register <a href="mailto:xxx@xxx.com">xxx@xxx.com</a> &lsquo;my name&rsquo; &ndash;description=&lsquo;my macbook air&rsquo;</li>
<li>邮箱确认注册</li>
<li>提交.podspec pod trunk push MyTest.podspec</li>
<li>搜索自己的库 pod search MyTest 由于墙的原因可能不会马上可以搜到</li>
</ol>
<p><a href="https://www.jianshu.com/p/c94d394f0be7">参考制作自己的cocoapods</a></p>
]]></content>
		</item>
		
		<item>
			<title>红米蓝牙Redmi AirDots，左右耳无法配对解决办法</title>
			<link>https://blog.v5u.win/posts/tools/tools-redmiairdots/</link>
			<pubDate>Tue, 21 Apr 2020 13:11:53 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/tools/tools-redmiairdots/</guid>
			<description>红米蓝牙Redmi AirDots，左右耳无法配对解决办法 开机状态下，同时长按两个耳机5S，看到红灯亮2S，松手。此时耳机关机 同时长按两个耳机</description>
			<content type="html"><![CDATA[<h1 id="红米蓝牙redmi-airdots左右耳无法配对解决办法">红米蓝牙Redmi AirDots，左右耳无法配对解决办法</h1>
<ol>
<li>开机状态下，同时长按两个耳机5S，看到红灯亮2S，松手。此时耳机关机</li>
<li>同时长按两个耳机10s，看到红白灯闪烁3次，此时</li>
</ol>
<blockquote>
<p>不要松手！！！
不要松手！！！
不要松手！！！</p>
</blockquote>
<ol start="3">
<li>继续按着耳机，直到 再次 看到红白灯闪烁</li>
<li>将两个耳机放回盒子，等10s，然后同时拿出两个耳机，开始串联</li>
<li>如果看到两个耳机灯快速闪烁配对成功，左边耳机灯不再亮，则证明串联成功，手机蓝牙这时只能搜索到右边耳机，配对即可。</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>2020 04 21 元编程</title>
			<link>https://blog.v5u.win/posts/design/design-%E5%85%83%E7%BC%96%E7%A8%8B/</link>
			<pubDate>Tue, 21 Apr 2020 13:09:22 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/design/design-%E5%85%83%E7%BC%96%E7%A8%8B/</guid>
			<description>元编程 meta programming 元编程是一种通过代码生成代码的思想，一般分为两种形式： macro宏展开 或者 模板 runtime 运行时 宏系统分为两种： 文本替换，比如 C 和 C++ 抽象语法</description>
			<content type="html"><![CDATA[<p>元编程 meta programming
元编程是一种通过代码生成代码的思想，一般分为两种形式：</p>
<ol>
<li>macro宏展开 或者 模板</li>
<li>runtime 运行时</li>
</ol>
<p>宏系统分为两种：</p>
<ol>
<li>文本替换，比如 C 和 C++</li>
<li>抽象语法树，比如 Erlang和Rust</li>
</ol>
<p>runtime有分为</p>
<ol>
<li>Objective-C 的编译后的消息机制</li>
<li>Ruby这种通过解释器实现</li>
</ol>
<p>runtime 都是通过根对象未能找到方法后，执行方法替换实现</p>
<p>参考：https://draveness.me/metaprogramming</p>
]]></content>
		</item>
		
		<item>
			<title>App Store 上架流程</title>
			<link>https://blog.v5u.win/posts/ios/ios-appstore-public/</link>
			<pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-appstore-public/</guid>
			<description>App Store上架流程 申请开发者账号 登录开发者网站，注册cer APP ID， profile (xcode 只能解决测试证书配置) 登录iTunes connection网站，注册</description>
			<content type="html"><![CDATA[<p>App Store上架流程</p>
<ol>
<li>申请开发者账号</li>
<li>登录开发者网站，注册cer APP ID， profile (xcode 只能解决测试证书配置)</li>
<li>登录iTunes connection网站，注册APP</li>
<li>xcode选择distribution profile 证书，设置build id，打包</li>
<li>上传到App Store。</li>
<li>设置APP story 发布信息，提交等待审核</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Git 仓库</title>
			<link>https://blog.v5u.win/posts/system/system-git_server/</link>
			<pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-git_server/</guid>
			<description>git 仓库的创建流程： 命令行模式创建 参考 创建裸仓库 git init --bare gitserver.git，表明允许其副本push操作。 使用 git init --bare &amp;lt;repo&amp;gt; 可以创建一个裸仓库，</description>
			<content type="html"><![CDATA[<p>git 仓库的创建流程：</p>
<h3 id="命令行模式创建-参考httpsgit-scmcombookzhv2e69c8de58aa1e599a8e4b88ae79a84-git-e59ca8e69c8de58aa1e599a8e4b88ae690ade5bbba-git">命令行模式创建 <a href="https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%90%AD%E5%BB%BA-Git">参考</a></h3>
<ol>
<li>创建裸仓库 <code>git init --bare gitserver.git</code>，表明允许其副本push操作。</li>
</ol>
<blockquote>
<p>使用 <code>git init --bare &lt;repo&gt;</code> 可以创建一个裸仓库，当创建一个裸存储库时，Git假定裸存储库将作为几个远程用户的源存储库，因此它不会创建默认远程源。这意味着基本的git pull和git push操作将无法工作，因为Git假设没有工作空间，你不打算提交对裸存储库的任何更改。</p>
</blockquote>
<blockquote>
<p>从裸仓库 clone 下来的本地仓库可以进行正常的 <code>push</code> 操作， 但是从一般仓库 clone 下来的本地仓库却不行。 这也正是裸仓库存在的意义。 裸仓库一般情况下是作为远端的中心仓库而存在的。</p>
</blockquote>
<p>git 创建裸仓库并修改该仓库目录的组权限为可写。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ ssh user@git.example.com
</span></span><span style="display:flex;"><span>$ cd /opt/git/my_project.git
</span></span><span style="display:flex;"><span>$ git init --bare --shared
</span></span></code></pre></div><p>git clone</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git clone /Users/fanjinlong/dev/git/jdcrontab.git	
</span></span></code></pre></div><h3 id="gitea-工具创建">gitea 工具创建</h3>
<p>Gitea 是一个Go开发的开源Git管理工具。从Gogs项目中分裂出来，竟然是中国人无闻的项目（惊叹一下）。特点是：目标是打造一个最简单、最快速和最轻松的方式搭建自助 Git 服务。</p>
<h3 id="ssh-登录配置">ssh 登录配置</h3>
<p>参考 <a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html</a></p>
<p>这时再输入下面的命令，将公钥传送到远程主机host上面：</p>
<blockquote>
<p>　　$ ssh-copy-id user@host</p>
</blockquote>
<p>好了，从此你再登录，就不需要输入密码了。</p>
<p>如果还是不行，就打开远程主机的/etc/ssh/sshd_config这个文件，检查下面几行前面&quot;#&ldquo;注释是否取掉。</p>
<blockquote>
<p>　　RSAAuthentication yes
　　PubkeyAuthentication yes
　　AuthorizedKeysFile .ssh/authorized_keys</p>
</blockquote>
<p>然后，重启远程主机的ssh服务。</p>
<blockquote>
<p>　　// ubuntu系统
　　service ssh restart</p>
<p>　　// debian系统
　　/etc/init.d/ssh restart</p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>go谚语</title>
			<link>https://blog.v5u.win/go%E8%B0%9A%E8%AF%AD/</link>
			<pubDate>Wed, 30 Oct 2019 06:15:11 +0000</pubDate>
			
			<guid>https://blog.v5u.win/go%E8%B0%9A%E8%AF%AD/</guid>
			<description>本文摘自 https://www.kancloud.cn/cserli/golang/524388 本文译自go-proverbs, 脱胎于 Rob Pike 振奋人心的演讲视频 talk at Gopherfest SV 2015 (bilibili). 不要通过共享内存进行通信, 通过通信共享内存 (Don’t communicate by</description>
			<content type="html"><![CDATA[<p>本文摘自 <a href="https://www.kancloud.cn/cserli/golang/524388">https://www.kancloud.cn/cserli/golang/524388</a></p>
<p>本文译自go-proverbs, 脱胎于 Rob Pike 振奋人心的演讲视频 talk at Gopherfest SV 2015 (bilibili).</p>
<p><strong>不要通过共享内存进行通信, 通过通信共享内存 (Don’t communicate by sharing memory, share memory by communicating)</strong></p>
<p>传统的线程模型（通常在编写 Java, C++ 和 Python 程序时使用）要求程序员使用共享内存在线程之间进行通信. 通常, 共享数据结构受锁保护, 线程将争夺这些锁访问数据, 在某些情况下, 通过使用 Python 的 Queue 等线程安全的数据结构可以使这变得更容易.</p>
<p>Go 的并发原语 (goroutines 和 channels) 为构造并发软件提供了一种优雅而独特的手段. (这些概念有一个有趣的历史, 要从 C.A.R.Hoare 的通信顺序进程说起.) Go 鼓励使用 channels 在 goroutines 之间传递对数据的引用, 而不是显式地使用锁来调解对共享数据的访问. 这种方法确保只有一个 goroutine 可以在给定的时间访问数据. 这个概念总结在 Effective Go 文档中 (任何 Go 程序员都必须阅读).</p>
<p>Go 官方博客中有一篇文章对该谚语解读, 可以参见原文.</p>
<p><strong>并发不是并行 (Concurrency is not parallelism)</strong></p>
<p>当人们听到 并发 这个词的时候, 他们经常会想到并行, 这是一个相关的, 但非常独特的概念. 在编程中, 并发是独立执行的进程的组成, 而并行则是 (可能相关的) 计算的同时执行. 并发是一次处理很多事情. 并行是一次做很多事情.</p>
<p>Channels 重排序; 互斥量串行化 (<strong>Channels orchestrate; mutexes serialize</strong>)</p>
<p>这个看中文（翻译待商榷）是不是一脸懵 (虽然英文也看不懂) ? 其实分号前后说的是一个意思, 该谚语按我的个人理解可以用 go 程序 (来自 go tour) 解释成如下:</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>接口越大, 抽象越弱 (The bigger the interface, the weaker the abstraction)</strong></p>
<p>接口背后的概念是通过将对象的行为抽象为简单的契约来允许重用性. 虽然接口不是 Go 专有的, 但由于 Go 接口通常趋向于小型化, Go 程序员才广泛使用它们. 通常情况下, 一个接口只限于一到两个方法.</p>
<p>Go io 包接口就是典型的例子.</p>
<p><strong>充分利用零值 (Make the zero value useful)</strong></p>
<p>零值的典型例子如 bytes.Buffer 和 sync.Mutex:</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>这样看起来是不是感觉一点用没有 ? 如果这样呢 ?</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>interface{} 言之无物 (interface{} says nothing)</strong></p>
<p>该谚语不是说 interface {} 不代表任何东西, 而是说该类型无静态检查以及调用时保证, 比如你的 func 接收一个 interface{} 类型, 你写的时候是可用的, 但是某个时间你进行了代码重构可能坏掉了.</p>
<p><strong>Gofmt 的风格没有人喜欢, 但是 gofmt 是每个人的最爱 (Gofmt’s style is no one’s favorite, yet gofmt is everyone’s favorite)</strong></p>
<p>该谚语告诉我们少些风格之争, 用这些时间多写代码.</p>
<p><strong>小复制好过小依赖 (A little copying is better than a little dependency)</strong></p>
<p>简单说就是如果你可以手动撸小快代码就不要导入一个库去做, 比如 UUID:</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>虽然有一堆写好的 UUID 库, 当你仅仅需要一个 UUID v4 实现.</p>
<p><strong>系统调用必须始终使用构建标签保证 (Syscall must always be guarded with build tags)</strong></p>
<p>不同的系统 (*NIX, Windows) 调用导致你同一个 func (实现并不一样) 可能需要在不同的系统上构建才能得到你想要的结果. 简单说就是系统调用不可移植才这么干. 示例可参见 Go 标准库 syscall.</p>
<p><strong>Cgo 必须始终使用构建标签保证 (Cgo must always be guarded with build tags)</strong></p>
<p>基本上原因同上一条.</p>
<p><strong>Cgo 不是 Go (Cgo is not Go)</strong></p>
<p>如果可能不要用 Cgo. 这里有篇文章说明了为什么.</p>
<p><strong>unsafe 包无保证 (With the unsafe package there are no guarantees)</strong></p>
<p>包如其名, 不安全. 你可以使用 unsafe 包如果你准备好了有一天它会坏掉.</p>
<p><strong>清晰好过聪明 (Clear is better than clever)</strong></p>
<p>Rob Pike 在他与别人合著的 &lt;程序设计实践&gt; 中写到: “写清晰的代码, 不要写聪明的代码”.</p>
<p><strong>反射永远不是清晰的 (Reflection is never clear)</strong></p>
<p>很多人在 Stackoverflow 上抱怨 Go 的反射不工作, 因为那不是为你准备的😂! 只有很少很少的人应该用反射这个非常强大而又非常难的特性. 新手应该远离反射和 interface{}.</p>
<p><strong>错误也是一种值 (Errors are values)</strong></p>
<p>值可以被编程, 并且由于错误是值, 所以错误可以被编程. Go 官方博客有对此的解读.</p>
<p><strong>不要止步于检查错误而要优雅的处理 (Don’t just check errors, handle them gracefully)</strong></p>
<p>Dave Cheney 有篇博客详细解读了该谚语.</p>
<p><strong>设计架构, 命名组件, 记录细节 (Design the architecture, name the components, document the details)</strong></p>
<p>当你写一个大型系统的时候, 你把它设计成一种结构化的东西. 想象组件的每一个部分并行工作, 为不同的组件起好的名字, 因为这些名字会出现在稿纸上.</p>
<p>拿 Go 程序来说, 如果名字不错, 组件就好理解, 那么程序的结构设计就会清晰, 程序会感觉很自然.</p>
<p>但是还有很多东西你需要解释, 所以这些是你需要解释的细节. 但是命名会帮助你解释很大一部分设计. 细节只是填补材料的缺口可能用来为用户打印工程图解文档.</p>
<p><strong>文档是针对用户的 (Documentation is for users)</strong></p>
<p>很多人写文档表明某个 func 是做什么的, 但是他们不想想这个 func 是为谁而写. 这有很大的不同. 你知道这个 func 返回什么是对的, 但是它为什么返回了你使用的时候不一样的结果?</p>
<p>把自己当成使用者而不是写它的人, 那么 godoc 上的文档就是对用户有用的. 这对于其他语言一样适用.</p>
<p><strong>不要慌 (Don’t panic)</strong></p>
<p>不要使用 panic 进行正常的错误处理. 使用错误 (error) 和多个返回值.</p>
]]></content>
		</item>
		
		<item>
			<title>HTTP 响应码</title>
			<link>https://blog.v5u.win/posts/system/system-http/</link>
			<pubDate>Tue, 15 Oct 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-http/</guid>
			<description>作者：zhaoyanan HTTP 400 – 请求无效 HTTP 401.1 – 未授权：登录失败 HTTP 401.2 – 未授权：服务器配置问题导致登录失败 HTTP 401.3 – ACL 禁止访问资源 HTTP 401.4 – 未授权：授权被</description>
			<content type="html"><![CDATA[<p>作者：zhaoyanan</p>
<pre tabindex="0"><code>HTTP 400 – 请求无效
HTTP 401.1 – 未授权：登录失败
HTTP 401.2 – 未授权：服务器配置问题导致登录失败
HTTP 401.3 – ACL 禁止访问资源
HTTP 401.4 – 未授权：授权被筛选器拒绝
HTTP 401.5 – 未授权：ISAPI 或 CGI 授权失败
HTTP 403 – 禁止访问
HTTP 403 – 对 Internet 服务管理器 的访问仅限于 Localhost
HTTP 403.1 禁止访问：禁止可执行访问
HTTP 403.2 – 禁止访问：禁止读访问
HTTP 403.3 – 禁止访问：禁止写访问
HTTP 403.4 – 禁止访问：要求 SSL
HTTP 403.5 – 禁止访问：要求 SSL 128
HTTP 403.6 – 禁止访问：IP 地址被拒绝
HTTP 403.7 – 禁止访问：要求客户证书
HTTP 403.8 – 禁止访问：禁止站点访问
HTTP 403.9 – 禁止访问：连接的用户过多
HTTP 403.10 – 禁止访问：配置无效
HTTP 403.11 – 禁止访问：密码更改
HTTP 403.12 – 禁止访问：映射器拒绝访问
HTTP 403.13 – 禁止访问：客户证书已被吊销
HTTP 403.15 – 禁止访问：客户访问许可过多
HTTP 403.16 – 禁止访问：客户证书不可信或者无效
HTTP 403.17 – 禁止访问：客户证书已经到期或者尚未生效 HTTP 404.1 -
</code></pre><p>无法找到 Web 站点</p>
<pre tabindex="0"><code>HTTP 404- 无法找到文件
HTTP 405 – 资源被禁止
HTTP 406 – 无法接受
HTTP 407 – 要求代理身份验证
HTTP 410 – 永远不可用
HTTP 412 – 先决条件失败
HTTP 414 – 请求 – URI 太长
</code></pre><pre tabindex="0"><code>HTTP 500 – 内部服务器错误
HTTP 500.100 – 内部服务器错误 – ASP 错误
HTTP 500-11 服务器关闭
HTTP 500-12 应用程序重新启动
HTTP 500-13 – 服务器太忙
HTTP 500-14 – 应用程序无效
HTTP 500-15 – 不允许请求 global.asa
Error 501 – 未实现
HTTP 502 – 网关错误
</code></pre><p>用户试图通过 HTTP 或文件传输协议 (FTP) 访问一台正在运行 Internet 信息服务 (IIS) 的服务器上的内容时，IIS 返回一个表示该请求的状态的数字代码。该状态代码记录在 IIS 日志中，同时也可能在 Web 浏览器或 FTP 客户端显示。状态代码可以指明具体请求是否已成功，还可以揭示请求失败的确切原因。
日志文件的位置
在默认状态下，IIS 把它的日志文件放在 %WINDIRSystem32Logfiles 文件夹中。每个万维网 (WWW) 站点和 FTP 站点在该目录下都有一个单独的目录。在默认状态下，每天都会在这些目录下创建日志文件，并用日期给日志文件命名（例如，exYYMMDD.log）。</p>
<p><strong>HTTP</strong>
**1xx – 信息提示；**这些状态代码表示临时的响应。客户端在收到常规响应之前，应准备接收一个或多个 1xx 响应。
100 – 继续。
101 – 切换协议。</p>
<p>**2xx – 成功；**这类状态代码表明服务器成功地接受了客户端请求。
200 – 确定。客户端请求已成功。
201 – 已创建。
202 – 已接受。
203 – 非权威性信息。
204 – 无内容。
205 – 重置内容。
206 – 部分内容。</p>
<p>**3xx – 重定向；**客户端浏览器必须采取更多操作来实现请求。例如，浏览器可能不得不请求服务器上的不同的页面，或通过代理服务器重复该请求。
302 – 对象已移动。
304 – 未修改。
307 – 临时重定向。</p>
<p>**4xx – 客户端错误；**发生错误，客户端似乎有问题。例如，客户端请求不存在的页面，客户端未提供有效的身份验证信息。
400 – 错误的请求。
401 – 访问被拒绝。IIS 定义了许多不同的
401 错误，它们指明更为具体的错误原因。这些具体的错误代码在浏览器中显示，但不在 IIS 日志中显示：
401.1 – 登录失败。
401.2 – 服务器配置导致登录失败。
401.3 – 由于 ACL 对资源的限制而未获得授权。
401.4 – 筛选器授权失败。
401.5 – ISAPI/CGI 应用程序授权失败。
401.7 – 访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS 6.0 所专用。</p>
<p>**403 – 禁止访问；**IIS 定义了许多不同的 403 错误，它们指明更为具体的错误原因：
403.1 – 执行访问被禁止。
403.2 – 读访问被禁止。
403.3 – 写访问被禁止。
403.4 – 要求 SSL。
403.5 – 要求 SSL 128。
403.6 – IP 地址被拒绝。
403.7 – 要求客户端证书。
403.8 – 站点访问被拒绝。
403.9 – 用户数过多。
403.10 – 配置无效。
403.11 – 密码更改。
403.12 – 拒绝访问映射表。
403.13 – 客户端证书被吊销。
403.14 – 拒绝目录列表。
403.15 – 超出客户端访问许可。
403.16 – 客户端证书不受信任或无效。
403.17 – 客户端证书已过期或尚未生效。
403.18 – 在当前的应用程序池中不能执行所请求的 URL。这个错误代码为 IIS 6.0 所专用。
403.19 – 不能为这个应用程序池中的客户端执行 CGI。这个错误代码为 IIS 6.0 所专用。
403.20 – Passport 登录失败。这个错误代码为 IIS 6.0 所专用。</p>
<p>**404 – 未找到；**404.0 -（无） – 没有找到文件或目录。
404.1 – 无法在所请求的端口上访问 Web 站点。
404.2 – Web 服务扩展锁定策略阻止本请求。
404.3 – MIME 映射策略阻止本请求。</p>
<p>405 – 用来访问本页面的 HTTP 谓词不被允许（方法不被允许）
406 – 客户端浏览器不接受所请求页面的 MIME 类型。
407 – 要求进行代理身份验证。
412 – 前提条件失败。
413 – 请求实体太大。
414 – 请求 URI 太长。
415 – 不支持的媒体类型。
416 – 所请求的范围无法满足。
417 – 执行失败。
423 – 锁定的错误。</p>
<p>**5xx – 服务器错误；**服务器由于遇到错误而不能完成该请求。
500 – 内部服务器错误。
500.12 – 应用程序正忙于在 Web 服务器上重新启动。
500.13 – Web 服务器太忙。
500.15 – 不允许直接请求 Global.asa。
500.16 – UNC 授权凭据不正确。这个错误代码为 IIS 6.0 所专用。
500.18 – URL 授权存储不能打开。这个错误代码为 IIS 6.0 所专用。
500.100 – 内部 ASP 错误。
501 – 页眉值指定了未实现的配置。
502 – Web 服务器用作网关或代理服务器时收到了无效响应。
502.1 – CGI 应用程序超时。
502.2 – CGI 应用程序出错。application.
503 – 服务不可用。这个错误代码为 IIS 6.0 所专用。
504 – 网关超时。
505 – HTTP 版本不受支持。</p>
<p><strong>常见的 HTTP 状态代码及其原因：</strong>
200 – 成功。 此状态代码表示 IIS 已成功处理请求。</p>
<p>304 – 未修改。客户端请求的文档已在其缓存中，文档自缓存以来尚未被修改过。客户端使用文档的缓存副本，而不从服务器下载文档。</p>
<p>401.1 – 登录失败。 登录尝试不成功，可能因为用户名或密码无效。</p>
<p>401.3 – 由于 ACL 对资源的限制而未获得授权。 这表示存在 NTFS 权限问题。即使您对试图访问的文件具备相应的权限，也可能发生此错误。
例如，如果 IUSR 帐户无权访问 C:WinntSystem32Inetsrv 目录，您会看到这个错误。 有关如何解决此问题的其他信息，请单击下面的文章编号，查看 Microsoft 知识库中相应的文章：
187506 INFO: IIS 4.0 的基础 NTFS 权限</p>
<p>403.1 – 执行访问被禁止。
下面是导致此错误信息的两个常见原因：
（1） 您没有足够的执行许可。
例如，如果试图访问的 ASP 页所在的目录权限设为“无”，或者，试图执行的 CGI 脚本所在的目录权限为“只允许脚本”，将出现此错误信息。若要修改执行权限，请在 Microsoft 管理控制台 (MMC) 中右击目录，然后依次单击属性和目录选项卡，确保为试图访问的内容设置适当的执行权限。
（2）您没有将试图执行的文件类型的脚本映射设置为识别所使用的谓词（例如，GET 或 POST）。若要验证这一点，请在 MMC 中右击目录，依次单击属性、目录选项卡和配置，然后验证相应文件类型的脚本映射是否设置为允许所使用的谓词。</p>
<p>403.2 – 读访问被禁止。验证是否已将 IIS 设置为允许对目录进行读访问。另外，如果您正在使用默认文件，请验证该文件是否存在。
错误信息：403.2 Forbidden:Read Access Forbidden（403.2 禁止访问：读访问被禁止）</p>
<p>403.3 – 写访问被禁止。 验证 IIS 权限和 NTFS 权限是否已设置以便向该目录授予写访问权。 错误信息：403.3 Forbidden:Write Access Forbidden（403.3 禁止访问：写访问被禁止）</p>
<p>403.4 – 要求 SSL。禁用要求安全通道选项，或使用 HTTPS 代替 HTTP 来访问该页面。如果没有安装证书的 Web 站点出现此错误
错误信息：HTTP 错误 403、403.4、403.5 禁止访问：要求 SSL</p>
<p>403.5 – 要求 SSL 128。禁用要求 128 位加密选项，或使用支持 128 位加密的浏览器以查看该页面。如果没有安装证书的 Web 站点出现此错误
错误信息：HTTP 错误 403、403.4、403.5 禁止访问：要求 SSL</p>
<p>403.6 – IP 地址被拒绝。您已把您的服务器配置为拒绝访问您目前的 IP 地址。有关如何解决此问题的其他信息
错误信息：403.6 – Forbidden:IP Address Rejected（403.6 – 不可用：IP 地址被拒绝）</p>
<p>403.7 – 要求客户端证书。您已把您的服务器配置为要求客户端身份验证证书，但您未安装有效的客户端证书
错误 403.7 或“Connection to Server Could Not Be Established”（无法建立与服务器的连接）
错误信息：403.7 Forbidden:Client Certificate Required（403.7 禁止访问：要求客户端证书）</p>
<p>403.8 – 站点访问被拒绝。您已为您用来访问服务器的域设置了域名限制。有关如何解决此问题的其他信息
错误信息：Forbidden:Site Access Denied 403.8（禁止访问：站点访问被拒绝 403.8）</p>
<p>403.9 – 用户数过多。与该服务器连接的用户数量超过了您设置的连接限制。
错误信息：Access Forbidden:Too Many Users Are Connected 403.9（禁止访问：连接的用户太多 403.9）
注意：Microsoft Windows 2000 Professional 和 Microsoft Windows XP Professional 自动设置了在 IIS 上最多 10 个连接的限制。您无法更改此限制。</p>
<p>403.12 – 拒绝访问映射表。 您要访问的页面要求提供客户端证书，但映射到您的客户端证书的用户 ID 已被拒绝访问该文件
错误信息：HTTP 403.12 – Access Forbidden:Mapper Denied Access（HTTP 403.12 – 禁止访问：映射表拒绝访问）</p>
<p>404 – 未找到。 发生此错误的原因是您试图访问的文件已被移走或删除。如果在安装 URLScan 工具之后，试图访问带有有限扩展名的文件，也会发生此错误。这种情况下，该请求的日志文件项中将出现“Rejected by URLScan”的字样。</p>
<p>500 – 内部服务器错误。 很多服务器端的错误都可能导致该错误信息。事件查看器日志包含更详细的错误原因。此外，您可以禁用友好 HTTP 错误信息以便收到详细的错误说明。</p>
<p>500.12 – 应用程序正在重新启动。 这表示您在 IIS 重新启动应用程序的过程中试图加载 ASP 页。刷新页面后，此信息即会消失。如果刷新页面后，此信息再次出现，可能是防病毒软件正在扫描 Global.asa 文件
错误信息：HTTP Error 500-12 Application Restarting（HTTP 错误 500-12 应用程序正在重新启动）
500-100.ASP – ASP 错误。 如果试图加载的 ASP 页中含有错误代码，将出现此错误信息。若要获得更确切的错误信息，请禁用友好 HTTP 错误信息。默认情况下，只会在默认 Web 站点上启用此错误信息
显示 HTTP 500 错误信息，而不显示 500-100.asp 的 ASP 错误信息
502 – 网关错误。 如果试图运行的 CGI 脚本不返回有效的 HTTP 标头集，将出现此错误信息。</p>
<p><strong>FTP</strong>
**1xx – 肯定的初步答复；**这些状态代码指示一项操作已经成功开始，但客户端希望在继续操作新命令前得到另一个答复。
110 重新启动标记答复。
120 服务已就绪，在 nnn 分钟后开始。
125 数据连接已打开，正在开始传输。
150 文件状态正常，准备打开数据连接。</p>
<p>**2xx – 肯定的完成答复；**一项操作已经成功完成。客户端可以执行新命令。 200 命令确定。
202 未执行命令，站点上的命令过多。
211 系统状态，或系统帮助答复。
212 目录状态。
213 文件状态。
214 帮助消息。
215 NAME 系统类型，其中，NAME 是 Assigned Numbers 文档中所列的正式系统名称。
220 服务就绪，可以执行新用户的请求。
221 服务关闭控制连接。如果适当，请注销。
225 数据连接打开，没有进行中的传输。
226 关闭数据连接。请求的文件操作已成功（例如，传输文件或放弃文件）。
227 进入被动模式 (h1,h2,h3,h4,p1,p2)。
230 用户已登录，继续进行。
250 请求的文件操作正确，已完成。
257 已创建“PATHNAME”。</p>
<p>**3xx – 肯定的中间答复；**该命令已成功，但服务器需要更多来自客户端的信息以完成对请求的处理。
331 用户名正确，需要密码。
332 需要登录帐户。
350 请求的文件操作正在等待进一步的信息。</p>
<p>**4xx – 瞬态否定的完成答复；**该命令不成功，但错误是暂时的。如果客户端重试命令，可能会执行成功。
421 服务不可用，正在关闭控制连接。如果服务确定它必须关闭，将向任何命令发送这一应答。
425 无法打开数据连接。
426 Connection closed; transfer aborted.
450 未执行请求的文件操作。文件不可用（例如，文件繁忙）。
451 请求的操作异常终止：正在处理本地错误。
452 未执行请求的操作。系统存储空间不够。</p>
<p>**5xx – 永久性否定的完成答复；**该命令不成功，错误是永久性的。如果客户端重试命令，将再次出现同样的错误。
500 语法错误，命令无法识别。这可能包括诸如命令行太长之类的错误。
501 在参数中有语法错误。
502 未执行命令。
503 错误的命令序列。
504 未执行该参数的命令。
530 未登录。
532 存储文件需要帐户。
550 未执行请求的操作。文件不可用（例如，未找到文件，没有访问权限）。
551 请求的操作异常终止：未知的页面类型。
552 请求的文件操作异常终止：超出存储分配（对于当前目录或数据集）。
553 未执行请求的操作。不允许的文件名。</p>
<p><strong>常见的 FTP 状态代码及其原因：</strong>
150 – FTP 使用两个端口：21 用于发送命令，20 用于发送数据。状态代码 150 表示服务器准备在端口 20 上打开新连接，发送一些数据。</p>
<p>226 – 命令在端口 20 上打开数据连接以执行操作，如传输文件。该操作成功完成，数据连接已关闭。</p>
<p>230 – 客户端发送正确的密码后，显示该状态代码。它表示用户已成功登录。</p>
<p>331 – 客户端发送用户名后，显示该状态代码。无论所提供的用户名是否为系统中的有效帐户，都将显示该状态代码。</p>
<p>426 – 命令打开数据连接以执行操作，但该操作已被取消，数据连接已关闭。</p>
<p>530 – 该状态代码表示用户无法登录，因为用户名和密码组合无效。如果使用某个用户帐户登录，可能键入错误的用户名或密码，也可能选择只允许匿名访问。如果使用匿名帐户登录，IIS 的配置可能拒绝匿名访问。</p>
<p>550 – 命令未被执行，因为指定的文件不可用。例如，要 GET 的文件并不存在，或试图将文件 PUT 到您没有写入权限的目录。</p>
]]></content>
		</item>
		
		<item>
			<title>vscode远程开发</title>
			<link>https://blog.v5u.win/posts/tools/vscode-remote/</link>
			<pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/tools/vscode-remote/</guid>
			<description>vscode 远程编辑 安装插件 remote-ssh 配置.ssh/config 文件 Host 10.211.55.5 HostName 10.211.55.5 IdentityFile ~/.ssh/id_rsa User test 右侧显示显示器图标 点击远程server 新建文件夹（connet to host in new wi</description>
			<content type="html"><![CDATA[<p>vscode 远程编辑</p>
<ol>
<li>
<p>安装插件 remote-ssh</p>
</li>
<li>
<p>配置.ssh/config 文件</p>
</li>
</ol>
<pre tabindex="0"><code>Host 10.211.55.5     
HostName 10.211.55.5     
IdentityFile ~/.ssh/id_rsa     
User test 
</code></pre><ol start="3">
<li>
<p>右侧显示显示器图标</p>
</li>
<li>
<p>点击远程server 新建文件夹（connet to host in new window）</p>
</li>
<li>
<p>保证 本地Git版本和远程server 版本一致，最好都是git2.0+</p>
</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>epoll原理</title>
			<link>https://blog.v5u.win/posts/system/system-epoll/</link>
			<pubDate>Thu, 26 Sep 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-epoll/</guid>
			<description>epoll原理 参考：https://my.oschina.net/editorial-story/blog/3052308 网卡DMA传来数据</description>
			<content type="html"><![CDATA[<p>epoll原理</p>
<p>参考：https://my.oschina.net/editorial-story/blog/3052308</p>
<ol>
<li>网卡DMA传来数据，存入内存</li>
<li>网卡向CPU发送中断信号，操作系统得知有新数据到来，通过网卡中断程序去处理数据</li>
<li>将数据写入对应的socket接收缓冲区</li>
<li>唤醒对应进程</li>
<li>将进程放入工作队列</li>
</ol>
<h1 id="内核接收网络数据全过程"><strong>内核接收网络数据全过程</strong></h1>
<p>如下图所示，进程在 recv 阻塞期间，计算机收到了对端传送的数据（步骤①）——&gt;</p>
<p>数据经由网卡传送到内存（步骤②），——&gt;</p>
<p>然后网卡通过中断信号通知 CPU 有数据到达，CPU 执行中断程序（步骤③）。——&gt;</p>
<p>此处的中断程序主要有两项功能，先将网络数据写入到对应 socket 的接收缓冲区里面（步骤④），——&gt;</p>
<p>再唤醒进程 A（步骤⑤），——&gt;</p>
<p>重新将进程 A 放入工作队列中。</p>
<p>以上是内核接收数据全过程，这里我们可能会思考两个问题：</p>
<ul>
<li>其一，操作系统如何知道网络数据对应于哪个 socket？</li>
<li>其二，如何同时监视多个 socket 的数据？</li>
</ul>
<p>第一个问题：因为一个 socket 对应着一个端口号，而网络数据包中包含了 ip 和端口的信息，内核可以通过端口号找到对应的 socket。当然，为了提高处理速度，操作系统会维护端口号到 socket 的索引结构，以快速读取。</p>
<p>第二个问题是多路复用的重中之重，也正是本文后半部分的重点。</p>
<p><strong>select</strong> 简单的方法往往有缺点，主要是：</p>
<p>其一，每次调用 select 都需要将进程加入到所有监视 socket 的等待队列，每次唤醒都需要从每个队列中移除。这里涉及了两次遍历，而且每次都要将整个 fds 列表传递给内核，有一定的开销。正是因为遍历操作开销大，出于效率的考量，才会规定 select 的最大监视数量，默认只能监视 1024 个 socket。</p>
<p>其二，进程被唤醒后，程序并不知道哪些 socket 收到数据，还需要遍历一次。</p>
<p><strong>有没有减少遍历的方法？有没有保存就绪 socket 的方法？这两个问题便是 epoll 技术要解决的</strong>。</p>
<p>epoll 通过以下一些措施来改进效率：</p>
<p><strong>措施一：功能分离</strong></p>
<p>select 低效的原因之一是将“维护等待队列”和“阻塞进程”两个步骤合二为一。</p>
<p><strong>措施二：就绪列表</strong></p>
<p>select 低效的另一个原因在于程序不知道哪些 socket 收到数据，只能一个个遍历。如果内核维护一个“就绪列表”，引用收到数据的 socket，就能避免遍历。如下图所示，计算机共有三个 socket，收到数据的 sock2 和 sock3 被就绪列表 rdlist 所引用。当进程被唤醒后，只要获取 rdlist 的内容，就能够知道哪些 socket 收到数据。</p>
<h1 id="epoll-的原理与工作流程"><strong>epoll 的原理与工作流程</strong></h1>
<p><strong>创建 epoll 对象</strong></p>
<p><strong>维护监视列表</strong></p>
<p><strong>接收数据</strong></p>
<p><strong>阻塞和唤醒进程</strong></p>
<h1 id="epoll-的实现细节"><strong>epoll 的实现细节</strong></h1>
<p>相信读者对 epoll 的本质已经有一定的了解。但我们还需要知道 eventpoll 的数据结构是什么样子？</p>
<p>此外，就绪队列应该应使用什么数据结构？eventpoll 应使用什么数据结构来管理通过 epoll_ctl 添加或删除的 socket？</p>
<p>如下图所示，eventpoll 包含了 lock、mtx、wq（等待队列）与 rdlist 等成员，其中 rdlist 和 rbr 是我们所关心的。</p>
<p><strong>就绪列表的数据结构</strong></p>
<p>就绪列表引用着就绪的 socket，所以它应能够快速的插入数据。</p>
<p>程序可能随时调用 epoll_ctl 添加监视 socket，也可能随时删除。当删除时，若该 socket 已经存放在就绪列表中，它也应该被移除。所以就绪列表应是一种能够快速插入和删除的数据结构。</p>
<p>双向链表就是这样一种数据结构，epoll 使用双向链表来实现就绪队列（对应上图的 rdllist）。</p>
<p><strong>索引结构</strong></p>
<p>既然 epoll 将“维护监视队列”和“进程阻塞”分离，也意味着需要有个数据结构来保存监视的 socket，至少要方便地添加和移除，还要便于搜索，以避免重复添加。红黑树是一种自平衡二叉查找树，搜索、插入和删除时间复杂度都是O(log(N))，效率较好，epoll 使用了红黑树作为索引结构（对应上图的 rbr）。</p>
<p>注：因为操作系统要兼顾多种功能，以及由更多需要保存的数据，rdlist 并非直接引用 socket，而是通过 epitem 间接引用，红黑树的节点也是 epitem 对象。同样，文件系统也并非直接引用着 socket。为方便理解，本文中省略了一些间接结构。</p>
]]></content>
		</item>
		
		<item>
			<title>Goland 使用</title>
			<link>https://blog.v5u.win/goland-%E4%BD%BF%E7%94%A8/</link>
			<pubDate>Sun, 01 Sep 2019 11:45:59 +0000</pubDate>
			
			<guid>https://blog.v5u.win/goland-%E4%BD%BF%E7%94%A8/</guid>
			<description>做 Go 开发，一般使用的IDE是 Goland 安装略，自己解决。下面说安装后的事情。 配置文件，配置开发环境 goland 会自动读取 GOROOT 和 GOPATH，所以不用自己填写。我</description>
			<content type="html"><![CDATA[<p>做 Go 开发，一般使用的IDE是 Goland</p>
<p>安装略，自己解决。下面说安装后的事情。</p>
<ol>
<li>配置文件，配置开发环境</li>
</ol>
<p>goland 会自动读取 GOROOT 和 GOPATH，所以不用自己填写。我们要做的就是配置配置文件</p>
<p>创建go build配置文件：Templates–&gt; Go Build</p>
<p>Run kind 选Directory</p>
<p>Directory 选你的main包所在文件夹</p>
<p>Output directory设置与go build -o 不相容，所以不用设置，我们使用-o参数来控制可执行文件的路径以及名字</p>
<p>Working directory保持默认就好</p>
<p>Go tool arguments 就是go build 的参数</p>
<!-- raw HTML omitted -->
<p>goland 的 debug 功能可以看到 整个函数链条，和当下参数的值，以及 <code>·s</code> 文件(汇编文件)的内部调用</p>
<p>单文件调试：直接点击run旁边的debug按钮，左下方有细分子项：跳过执行（步过），单步调试（步入），步出</p>
<p>整项目调试：</p>
]]></content>
		</item>
		
		<item>
			<title>System MQ消息队列</title>
			<link>https://blog.v5u.win/posts/system/system-mq%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link>
			<pubDate>Fri, 23 Aug 2019 09:39:55 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-mq%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</guid>
			<description>[TOC] 消息队列 MQ 能随便讲个应用场景嘛 发短信，发邮件 大量的定时任务 支付回调也经常用 你付款之后有很多步骤 主要是付款是异步过程。 你打钱，支付宝服务器通</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="消息队列-mq">消息队列 MQ</h1>
<p>能随便讲个应用场景嘛</p>
<p>发短信，发邮件</p>
<p>大量的定时任务</p>
<p>支付回调也经常用</p>
<p>你付款之后有很多步骤</p>
<p>主要是付款是异步过程。</p>
<p>你打钱，支付宝服务器通知电商后台服务器</p>
<p>然后电商后台接到请求后，发送一个消息去队列里，带上订单信息</p>
<p>然后服务器集群里有人接活</p>
<p>咏闲  09:29:17
感觉说的是放入消息队列，然后被轮流接受，异步处理各个服务</p>
<p>橙卡  09:29:38
比如购买流程很长的
橙卡  09:29:55
库存管理 账目转移 物流发货</p>
<p>橙卡  09:30:09
要是在线等待起码半分钟</p>
<p>橙卡  09:30:30
一般是拆成好几个任务
橙卡  09:30:34
一个一个来</p>
<p>橙卡  09:30:53
最主要是有一个对等集群，可以容纳一切任务</p>
<p>橙卡  09:30:59
平等的处理</p>
<p>橙卡  09:31:46
我之前一直用的redis作为mq</p>
<p>橙卡  09:31:53
其实也还好。</p>
<p>橙卡  09:32:01
也就三四个月丢一单</p>
]]></content>
		</item>
		
		<item>
			<title>Go CGO</title>
			<link>https://blog.v5u.win/posts/go/go-cgo/</link>
			<pubDate>Tue, 20 Aug 2019 18:06:35 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-cgo/</guid>
			<description>[TOC] golang 中调用 c/c++ 代码有三种方式 直接嵌套在go文件中使用，最简单直观的 导入动态库 .so 或 dll 的形式，最安全但是很不爽也比较慢的 直接引用 c/c++ 文件的形式，层次</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="golang-中调用-cc-代码有三种方式">golang 中调用 c/c++ 代码有三种方式</h1>
<ul>
<li>直接<code>嵌套</code>在go文件中使用，最简单直观的</li>
<li>导入<code>动态库 .so 或 dll</code> 的形式，最安全但是很不爽也比较慢的</li>
<li>直接引用 c/c++ 文件的形式，层次分明，容易随时修改看结果的</li>
</ul>
<h2 id="需要的环境支持">需要的环境支持</h2>
<ul>
<li>Linux 具备 gcc 与 g++ 即可</li>
<li>Mac 参考 Linux</li>
<li>Windows 需要安装 <a href="https://link.juejin.im/?target=http%3A%2F%2Fwww.mingw.org%2F">mingw</a>，否则编译时会有这类错：<code>cannot find -lmingwex</code></li>
</ul>
<h2 id="嵌套">嵌套</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 嵌入式 调用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// #include &lt;stdio.h&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// #include &lt;stdlib.h&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">/*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">void print(char *str) {
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    printf(&#34;%s\n&#34;, str);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">}
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">*/</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;C&#34;</span><span style="color:#75715e">//这里可看作封装的伪包C, 这条语句要紧挨着上面的注释块，不可在它俩之间间隔空行！
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;unsafe&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">s</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;Hello Cgo&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">cs</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">C</span>.<span style="color:#a6e22e">CString</span>(<span style="color:#a6e22e">s</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">C</span>.print(<span style="color:#a6e22e">cs</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">C</span>.<span style="color:#a6e22e">free</span>(<span style="color:#a6e22e">unsafe</span>.<span style="color:#a6e22e">Pointer</span>(<span style="color:#a6e22e">cs</span>))
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//参考来源：https://tonybai.com/2012/09/26/interoperability-between-go-and-c/
</span></span></span></code></pre></div><h2 id="调用动态链接库-so">调用动态链接库 .so</h2>
<p>目录结构</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>├── hi.c
</span></span><span style="display:flex;"><span>├── hi.go
</span></span><span style="display:flex;"><span>├── hi.h
</span></span><span style="display:flex;"><span>├── hi.o
</span></span><span style="display:flex;"><span>└── libhi.so
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// hi.c
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">hi</span>() {
</span></span><span style="display:flex;"><span>    printf(<span style="color:#e6db74">&#34;Hello Cgo!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">hi</span>(); <span style="color:#75715e">// file: hi.h
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// so 动态链接库调用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 参考 https://studygolang.com/articles/10163
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">/*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#cgo CFLAGS: -I./
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#cgo LDFLAGS: -L./ -lhi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include &#34;hi.h&#34; //非标准c头文件，所以用引号
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">*/</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;C&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">C</span>.<span style="color:#a6e22e">hi</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Hi, vim-go&#34;</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 注：LDFLAGS 路径问题并未测试通过
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// CFLAGS: -I路径 这句话指明头文件所在路径
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// LDFLAGS: -L路径 -l名字 指明动态库的所在路径，-Llib -lhi，指明在 lib 下面以及它的名字 hi
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e"># 编译生成 .so 动态库</span>
</span></span><span style="display:flex;"><span>gcc hi.c -fPIC -shared -o libhi.so
</span></span></code></pre></div><h2 id="直接引用-cc-文件的形式">直接引用 c/c++ 文件的形式</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── main.go
</span></span><span style="display:flex;"><span>└── util
</span></span><span style="display:flex;"><span>    ├── util.go
</span></span><span style="display:flex;"><span>    └── utilc
</span></span><span style="display:flex;"><span>        ├── util.c
</span></span><span style="display:flex;"><span>        └── util.h
</span></span></code></pre></div><p>目录结构</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// util.go
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">package</span> <span style="color:#a6e22e">util</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">/*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include &#34;utilc/util.c&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">*/</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;C&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">GoSum</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">s</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">C</span>.<span style="color:#a6e22e">sum</span>(<span style="color:#a6e22e">C</span>.int(<span style="color:#a6e22e">a</span>), <span style="color:#a6e22e">C</span>.int(<span style="color:#a6e22e">b</span>))
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">s</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// main.go
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// cgo 直接引用 c/c++ 文件的形式
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 测试通过, .c .h 文件不能和 .go 文件在同一个目录下
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;github.com/xxx/util&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">util</span>.<span style="color:#a6e22e">GoSum</span>(<span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// utilc/util.c
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;util.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">sum</span>(<span style="color:#66d9ef">int</span> a,<span style="color:#66d9ef">int</span> b){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (a<span style="color:#f92672">+</span>b);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">sum</span>(<span style="color:#66d9ef">int</span> a,<span style="color:#66d9ef">int</span> b);<span style="color:#75715e">// utilc/util.h
</span></span></span></code></pre></div><p>直接运行<code>go run main.go</code></p>
<h2 id="注意事项">注意事项</h2>
<ul>
<li>但凡要引用与 c/c++ 相关的内容，写到 go 文件的头部<code>注释</code>里面</li>
<li>嵌套的 c/c++ 代码必须符合其语法，不与 go 一样</li>
<li><code>import &quot;C&quot;</code> 这句话要紧随，注释后，不要换行，否则报错</li>
<li>go 代码中调用 c/c++ 的格式是: <code>C.xxx()</code>，例如 C.add(2, 1)</li>
</ul>
<hr>
<p><code>CFLAGS: -I路径</code> 这句话指明头文件所在路径，-Iinclude 指明 当前项目根目录的 include 文件夹</p>
<p><code>LDFLAGS: -L路径 -l名字</code> 指明动态库的所在路径，-Llib -llibvideo，指明在 lib 目录下面以及它的名字 video</p>
<p>注：此处的 LDFLAGS 更改动态库的路径后，-L指明路径，无法验证通过</p>
]]></content>
		</item>
		
		<item>
			<title>Go Gofmt</title>
			<link>https://blog.v5u.win/posts/go/go-gofmt/</link>
			<pubDate>Fri, 16 Aug 2019 17:57:28 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-gofmt/</guid>
			<description>[TOC] 为什么要用 gofmt 大多数人认为我们格式化Go代码gofmt 以使代码看起来更好或结束团队成员之间关于程序布局的争论。但是， 1是，如果一个算法定义围</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="为什么要用-gofmt">为什么要用 gofmt</h1>
<p>大多数人认为我们格式化Go代码gofmt 以使代码看起来更好或结束团队成员之间关于程序布局的争论。但是， <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>是，如果一个算法定义围棋源代码是如何被格式化，然后编程，如goimports 或 gorename 或者 go fix，可以更容易地编辑源代码，而无需编写代码回来时引入伪格式更改。这有助于您长期维护代码。</p>
<hr>
<blockquote>
<p>我认为源代码格式化工具非常简洁
提供。解析器/ ast /漂亮也是一件好事
打印机可用作mod。</p>
<p>但是，我不确定是否尝试强制执行格式化样式
拒绝配置格式化程序的能力（如FAQ提及）
是个好主意。至少go /打印机包可能是好的
即使命令行gofmt工具，也允许更灵活的配置
没有。
对于gofmt的输出，没有人或将永远不会满意，
但它实际上相当不错，更重要的是，人们适应
令人惊讶的是，这种风格起初看起来很陌生。特别
在格式化方面，风格实际上只是“你习惯的”。
由于Go是一种全新的语言，所以不应该这样
很难习惯不同的格式。</p>
</blockquote>
<p>我们希望人们能够准确地接受gofmt的输出
因为它结束了这种风格的辩论。怎么样
C有很多不同的支撑款式吗？太多。</p>
<p>就个人而言，我发现让gofmt格式化为我是一种解放，
因为这意味着我有更多可用的神经元
攻击有趣的编程问题。有
我不喜欢gofmt输出的东西，但我不喜欢
不再担心他们了。</p>
<p>但所有这些都错过了我认为最激动人心的事情
关于gofmt：事实上我们有一个可以拿起每个人的工具
Go树中的源文件，将其解析为内部表示，
然后将完全相同的字节放回原位。 （很大一部分
这是由于进入gofmt的工作量，以及
其余的是因为我们同意对gofmt进行标准化
一旦你拥有了这样一个工具，它变得非常容易
在中间插入机械处理，解析之间
和印刷。所以我们拥有一个程序的所有难点
操纵工具只是坐着等待使用。我已经开始了
以前为C编写类似的工具，从来没有得到过输出
完全匹配输入。同意接受“gofmt风格”
是在有限数量的代码中使它可行的部分。</p>
<p>我希望人们会按照自己的代码使用gofmt。
正如我所说，它不需要超过几个星期
习惯于新的编码风格，特别是如果你是一个品牌
新语言，每个人都有巨大的利益
相同的风格。</p>
<p>我们当然打算继续格式化所有代码
使用gofmt去树。像Go一样，这是一个实验。</p>
<p>Russ</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>下面有邮件组的讨论过程&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
		</item>
		
		<item>
			<title>Go Bazel构建工具</title>
			<link>https://blog.v5u.win/posts/go/go-bazel%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</link>
			<pubDate>Fri, 16 Aug 2019 16:02:29 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-bazel%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</guid>
			<description>[TOC] 为什么要了解Bazel 这段时间搞到了bilibili的一部分源码，那个事件你知道的，就不说了。怀着对大牛的向往，打算研究一下，之前听说主程</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="为什么要了解bazel">为什么要了解Bazel</h2>
<p>这段时间搞到了bilibili的一部分源码，那个事件你知道的，就不说了。怀着对大牛的向往，打算研究一下，之前听说主程做的这个架构很牛逼，就算是代码泄露也不会对服务器造成影响，而且模块化做的非常好，小弟们码好代码，主程一键做个合并打包发布就行。自动化做的很好。就想知道到底是怎么做的，于是我了解到了他——Bazel。</p>
<p>原文链接 <a href="https://filipnikolovski.com/managing-go-monorepo-with-bazel/">https://filipnikolovski.com/managing-go-monorepo-with-bazel/</a></p>
<h1 id="使用bazel管理go-monorepo">使用Bazel管理Go monorepo</h1>
<p>在<a href="https://inplayer.com/">InPlayer中</a>，我们有一个使用<em>微服务</em>架构风格构建的平台，它基本上将应用程序构建为许多不同服务的集合。在这篇文章中，我将讨论如何建构(structure)，构建(build)和部署(deploy)Go应用程序。</p>
<p>我们编写的每一段Go代码都驻留在一个Git存储库中 - 一个monorepo。由于每个库和服务都在一个项目中，因此它允许我们进行交叉更改，而无需使用某些外部包管理工具。基本上，代码不可能不同步，我们所做的每个更改都可以视为一个单元。</p>
<p>虽然好处很明显，但使用Go monorepo的挑战是如何有效地构建和测试每个包。答案 - <a href="https://bazel.build/">Bazel</a>。</p>
<h3 id="bazel是什么">Bazel是什么？</h3>
<p>Bazel是一款速度极快的构建工具。它只重建必要的东西，它利用高级缓存机制和并行执行，使您的构建非常，非常快。除了这些功能外，它还可以管理您的代码依赖项，调用外部工具和插件，还可以从二进制可执行文件构建Docker镜像。它使用<code>go build</code>引擎盖，但它也可以支持许多不同的语言，而不仅仅是Go。您可以将它用于Java，C ++，Android，iOS和各种其他语言平台。您可以在三个主要操作系统上运行Bazel - Windows，macOS和Linux。</p>
<h3 id="项目结构">项目结构</h3>
<p>在我们深入了解Bazel之前，首先让我们讨论一下我们的项目结构：</p>
<pre tabindex="0"><code>    platform
    |-- src
    |    |-- foo
    |    |   |--cmd
    |    |   |  `--bar
    |    |   |     |--BUILD
    |    |   |     `--main.go
    |    |   `--pkg
    |    |-- utils
    |    |-- vendor
    |    |-- Gopkg.lock
    |    |-- Gopkg.toml
    |    |-- BUILD
    |    `-- WORKSPACE
    |-- README.md
    `-- gitlab-ci.yml
</code></pre><p>该<code>platform</code>目录是我们的根本，一切从这里开始。在该文件夹中，我们有CI配置和<code>src</code>保存所有代码的目录。每个服务都是<code>src</code>文件夹中的子目录，在每个服务中我们都有两个顶级目录，即<code>cmd</code>和<code>pkg</code>文件夹。在下面<code>cmd</code>我们有我们的二进制文件（我们的主程序）的<code>pkg</code>目录，该目录用于我们的服务库。</p>
<p>Bazel从名为<em>workspace</em>的目录中组织的代码构建软件，该目录基本上是我们的src目录。在这里，我们的工作空间目录必须包含一个名为的文件<code>WORKSPACE</code>，该文件可能引用了构建输出所需的外部依赖关系以及构建规则。</p>
<p>这是一个示例WORKSPACE文件：</p>
<pre tabindex="0"><code>http_archive(
    name = &#34;io_bazel_rules_go&#34;,
    url = &#34;https://github.com/bazelbuild/rules_go/releases/download/0.9.0/rules_go-0.9.0.tar.gz&#34;,
    sha256 = &#34;4d8d6244320dd751590f9100cf39fd7a4b75cd901e1f3ffdfd6f048328883695&#34;,
)
http_archive(
    name = &#34;bazel_gazelle&#34;,
    url = &#34;https://github.com/bazelbuild/bazel-gazelle/releases/download/0.9/bazel-gazelle-0.9.tar.gz&#34;,
    sha256 = &#34;0103991d994db55b3b5d7b06336f8ae355739635e0c2379dea16b8213ea5a223&#34;,
)
git_repository(
    name = &#34;io_bazel_rules_docker&#34;,
    remote = &#34;https://github.com/bazelbuild/rules_docker.git&#34;,
    tag = &#34;v0.3.0&#34;,
)

load(&#34;@io_bazel_rules_go//go:def.bzl&#34;, &#34;go_rules_dependencies&#34;, &#34;go_register_toolchains&#34;)
go_rules_dependencies()
go_register_toolchains()
load(&#34;@bazel_gazelle//:deps.bzl&#34;, &#34;gazelle_dependencies&#34;)
gazelle_dependencies()

load(
    &#34;@io_bazel_rules_docker//go:image.bzl&#34;,
    _go_image_repos = &#34;repositories&#34;,
)

_go_image_repos()
</code></pre><p>在此文件中，有几个依赖项添加到工作区。我们特别声明我们将使用<a href="https://github.com/bazelbuild/rules_go">rules_go</a>和<a href="https://github.com/bazelbuild/rules_docker">rules_docker</a>依赖项以及<a href="https://github.com/bazelbuild/bazel-gazelle">Gazelle</a>，这将帮助我们生成Bazel所需的一些文件。不要担心，如果您不熟悉这种语法，需要一些时间来适应它。</p>
<h3 id="build文件">BUILD文件</h3>
<p>Bazel有一个关于<em>包</em>的概念，它被定义为相关文件的集合以及它们之间依赖关系的规范。如果Bazel工作空间内的目录包含名为的文件<code>BUILD</code>，则会将该目录视为包。包中包含其目录中的所有文件，以及其下的所有子目录，除了那些本身包含BUILD文件的文件。</p>
<p>BUILD文件包含构建规则，这些规则定义了我们应该如何构建包。您可以<a href="https://docs.bazel.build/versions/master/build-ref.html">在此处</a>阅读有关概念和术语的更多信息。</p>
<p>在开始一个新项目时，我们需要做的第一件事是在根目录中添加一个BUILD文件，这将加载稍后用于运行<a href="https://github.com/bazelbuild/bazel-gazelle">Gazelle</a> with Bazel 的瞪羚规则。</p>
<pre tabindex="0"><code>package(default_visibility = [&#34;//visibility:public&#34;])

load(&#34;@io_bazel_rules_docker//container:container.bzl&#34;)
load(&#34;@io_bazel_rules_go//go:def.bzl&#34;, &#34;go_prefix&#34;, &#34;gazelle&#34;)

go_prefix(&#34;github.com/example/project&#34;)
gazelle(
  prefix = &#34;github.com/example/project/src&#34;,
  name = &#34;gazelle&#34;,
  command = &#34;fix&#34;,
  external = &#34;vendored&#34;
)
</code></pre><p>添加此文件后，我们可以使用以下命令运行Gazelle：</p>
<pre tabindex="0"><code>bazel run //:gazelle
</code></pre><p>这将根据项目中的go文件生成新的BUILD文件。稍后添加新程序和库时，应使用相同的命令更新现有的BUILD文件，否则构建可能会失败。</p>
<p>作为一个例子（基于我们之前显示的项目结构），gazelle将为我们的<code>bar</code>程序生成一个BUILD文件，该文件位于<code>foo</code>包中，如下所示：</p>
<pre tabindex="0"><code>load(&#34;@io_bazel_rules_go//go:def.bzl&#34;, &#34;go_binary&#34;, &#34;go_library&#34;)

package(default_visibility = [&#34;//visibility:public&#34;])

go_library(
    name = &#34;go_default_library&#34;,
    srcs = [&#34;main.go&#34;],
    importpath = &#34;github.com/example/project/src/foo/cmd/bar&#34;,
    visibility = [&#34;//visibility:private&#34;],
    deps = [
        #Any dependencies that our library has will be loaded here
    ],
)

go_binary(
    name = &#34;bar&#34;,
    embed = [&#34;:go_default_library&#34;],
    importpath = &#34;github.com/example/project/src/foo/cmd/bar&#34;,
    visibility = [&#34;//visibility:public&#34;],
)
</code></pre><p>现在通过运行命令<code>bazel build //foo/...</code>bazel将构建我们的Go程序并将二进制文件保存在输出目录中。如果要构建整个项目，只需<code>bazel build //...</code>在根文件夹中运行即可。</p>
<p>如果您为您的库和程序（您应该）编写测试，gazelle将为<code>go_test</code>它们生成规则，然后您可以运行<code>bazel test //...</code>将运行所有测试。</p>
<p>Bazel的高级缓存，使运行<code>build</code>和<code>test</code>命令对整个工作区超级快，因为它只会建造或测试您已更改的文件，以及依赖于这些修改过的文件的文件。</p>
<p>⚠️注意：确保将CI服务器设置为缓存输出目录，否则运行bazel不会带来太多好处。</p>
<h3 id="docker镜像">Docker镜像</h3>
<p>在我们想要将二进制文件构建和部署为docker图像的情况下，bazel有一套很好的规则可以做到这一点。更为重要的是，Bazel<strong>并不</strong>需要Docker拉取，构建或推送镜像。这意味着您可以使用这些规则在Windows / OSX上构建Docker镜像而无需使用<code>docker-machine</code>或者<code>boot2docker</code>也不需要在笔记本电脑上进行<em>root</em>访问。</p>
<p>我们<code>bar</code>程序的BUILD文件的完整示例如下所示：</p>
<pre tabindex="0"><code>load(&#34;@io_bazel_rules_go//go:def.bzl&#34;, &#34;go_binary&#34;, &#34;go_library&#34;)

# First we load the go_image and container_push rules
load(&#34;@io_bazel_rules_docker//go:image.bzl&#34;, &#34;go_image&#34;)

package(default_visibility = [&#34;//visibility:public&#34;])

go_library(
    name = &#34;go_default_library&#34;,
    srcs = [&#34;main.go&#34;],
    importpath = &#34;github.com/example/project/src/foo/cmd/bar&#34;,
    visibility = [&#34;//visibility:private&#34;],
    deps = [
        #Any dependencies that our library has will be loaded here
    ],
)

go_binary(
    name = &#34;bar&#34;,
    embed = [&#34;:go_default_library&#34;],
    importpath = &#34;github.com/example/project/src/foo/cmd/bar&#34;,
    visibility = [&#34;//visibility:public&#34;],
)

go_image(
    name = &#34;docker&#34;,
    binary = &#34;:bar&#34;,
)
</code></pre><p>该<code>go_image</code>规则使用<a href="https://github.com/GoogleCloudPlatform/distroless">distroless</a>镜像作为基础，只添加二进制文件作为要运行的命令。<code>container_push</code>如果要将映像推送到远程存储库，也可以使用该规则。</p>
<p>要将二进制文件作为docker镜像运行，只需键入<code>bazel run //foo/cmd/bar:docker</code>命令即可。您还可以构建一个tar包，然后可以使用以下命令手动将其加载到docker中：</p>
<ul>
<li><code>bazel build //foo/cmd/bar:docker.tar</code></li>
<li><code>docker load -i bazel-output/foo/cmd/bar/docker.tar</code></li>
</ul>
<p>您可以在<a href="https://github.com/bazelbuild/rules_docker">此处</a>找到有关规则的更多信息。</p>
]]></content>
		</item>
		
		<item>
			<title>Docker Etcd</title>
			<link>https://blog.v5u.win/posts/docker/docker-etcd/</link>
			<pubDate>Tue, 13 Aug 2019 18:10:14 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/docker/docker-etcd/</guid>
			<description>[TOC] 描述 etcd是CoreOS团队于2013年6月发起的开源项目，它的目标是构建一个高可用的分布式键值(key-value)数据库。etcd内</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h3 id="描述">描述</h3>
<p>etcd是CoreOS团队于2013年6月发起的开源项目，它的目标是构建一个高可用的分布式键值(key-value)数据库。etcd内部采用raft协议作为一致性算法，etcd基于Go语言实现。</p>
<p>etcd作为服务发现系统，有以下的特点</p>
<ul>
<li>简单：安装配置简单，而且提供了HTTP API进行交互，使用也很简单</li>
<li>安全：支持SSL证书验证</li>
<li>快速：根据官方提供的benchmark数据，单实例支持每秒2k+读操作</li>
<li>可靠：采用raft算法，实现分布式系统数据的可用性和一致性</li>
<li>etcd项目地址：https://github.com/coreos/etcd/</li>
</ul>
<h3 id="下载">下载</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ docker search etcd
</span></span><span style="display:flex;"><span>$ docker pull xxx/etcd
</span></span></code></pre></div><h2 id="etcd参数说明">ETCD参数说明</h2>
<ul>
<li>**data-dir:**指定节点的数据存储目录，这些数据包括节点ID，集群ID，集群初始化配置，Snapshot文件，若未指定—wal-dir，还会存储WAL文件；</li>
<li>**wal-dir:**指定节点的was文件的存储目录，若指定了该参数，wal文件会和其他数据文件分开存储。</li>
<li><strong>name:</strong> 节点名称</li>
<li><strong>initial-advertise-peer-urls:</strong> 告知集群其他节点url.(<code>对于集群内提供服务的url</code>)</li>
<li><strong>listen-peer-urls:</strong> 监听URL，用于与其他节点通讯</li>
<li><strong>advertise-client-urls:</strong> 告知客户端url, 也就是服务的url(<code>对外提供服务的utl</code>)</li>
<li><strong>initial-cluster-token:</strong> 集群的ID</li>
<li><strong>initial-cluster:</strong> 集群中所有节点</li>
</ul>
<p>然后进入其中一个 Docker 主机：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ docker exec -it etcd bin/sh
</span></span></code></pre></div><p>执行下面命令（查看集群成员）：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ etcdctl member list
</span></span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Go2</title>
			<link>https://blog.v5u.win/posts/go/go-go2/</link>
			<pubDate>Tue, 13 Aug 2019 14:02:52 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-go2/</guid>
			<description>[TOC] 中文版 English version 介绍 [这是我上周在Gophercon 2019上发表的博客文章。我们将在演讲结束后添加视频链接。] 我们都正在一起走向Go 2的路上，</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<ul>
<li>中文版</li>
<li><a href="https://github.com/llgoer/go-generics/blob/master/experiment-en.md">English version</a></li>
</ul>
<h2 id="介绍">介绍</h2>
<p>[这是我上周在Gophercon 2019上发表的博客文章。我们将在演讲结束后添加视频链接。]</p>
<p>我们都正在一起走向Go 2的路上，但是，我们都不知道这条路确切位置在哪里，有时甚至不知道这条路的方向。这篇文章讨论了我们如何实际找到并遵循Go2的道路。下面是这个过程的样子。</p>
<p><img src="https://raw.githubusercontent.com/llgoer/go-generics/master/experiment/expsimp1.png" alt="img"></p>
<p>我们现在尝试使用Go，以便更好地理解它，学习哪些有效，哪些无效。然后我们尝试可能的变化，更好地理解它们，再次学习哪些有效，哪些无效。根据我们从这些实验中学到的东西，我们简化了。然后我们再次进行实验。然后我们再次简化。如此反复。</p>
<h2 id="简化的四个r">简化的四个R</h2>
<p>在这个过程中，我们可以通过四种主要方式简化编写Go程序的整体体验：重塑（reshaping），重定义（redefining），删除（removing）和限制（restricting）。</p>
<h3 id="通过重塑进行简化">通过重塑进行简化</h3>
<p>我们简化的第一种方法是将存在的内容重新整形为一种新形式，最终让整体更简单。</p>
<p>我们编写的每个Go程序都是一个测试Go本身的实验。在Go的早期，我们很快就知道编写像这样的<code>addToList</code>函数这样的代码是很常见的：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">addToList</span>(<span style="color:#a6e22e">list</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">x</span> <span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">list</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">n</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span> &lt; cap(<span style="color:#a6e22e">list</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">big</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">n</span>, (<span style="color:#a6e22e">n</span><span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>)<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>        copy(<span style="color:#a6e22e">big</span>, <span style="color:#a6e22e">list</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">list</span> = <span style="color:#a6e22e">big</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">list</span> = <span style="color:#a6e22e">list</span>[:<span style="color:#a6e22e">n</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">list</span>[<span style="color:#a6e22e">n</span>] = <span style="color:#a6e22e">x</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">list</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>我们为字节切片和字符串切片编写相同的代码，依此类推。因为Go太简单了以至于我们的程序写的太复杂了。</p>
<p>所以我们在程序中使用了许多<code>addToList</code>函数，并将它们重新整型为Go本身提供的一个函数。添加<code>append</code>使得Go语言变得更复杂，但总的来说，即使考虑到学习<code>append</code>成本，它也使得编写Go程序的整体体验变得更加简单。</p>
<p>这是另一个例子。对于Go 1，我们查看了Go发行版中的许多开发工具，并将它们重新编写为一个新命令。</p>
<pre tabindex="0"><code>5a      8g
5g      8l
5l      cgo
6a      gobuild
6cov    gofix         →     go
6g      goinstall
6l      gomake
6nm     gopack
8a      govet
</code></pre><p>这个<code>go</code>命令现在如此重要，以至于很容易忘记我们没有它这么长时间以及这个go命令涉及多少额外的工作。</p>
<p>我们在Go发行版中添加了代码和复杂性，但总的来说，我们简化了编写Go程序的经验。新结构也为其他有趣的实验创造了空间，我们稍后会看到。</p>
<h3 id="通过重新定义简化">通过重新定义简化</h3>
<p>我们简化的第二种方法是重新定义我们已有的功能，允许它做更多。就像通过重塑来简化一样，通过重新定义来简化程序会使程序更容易编写，但现在没有什么新东西需要学习。</p>
<p>例如，<code>append</code>最初定义为仅从切片中读取。附加到字节切片时，可以附加来自另一个字节切片的字节，但不能附加字符串中的字节。我们重新定义了append以允许从字符串追加，而不用向语言添加任何新东西。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">b</span> []<span style="color:#66d9ef">byte</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">more</span> []<span style="color:#66d9ef">byte</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">b</span> = append(<span style="color:#a6e22e">b</span>, <span style="color:#a6e22e">more</span><span style="color:#f92672">...</span>) <span style="color:#75715e">// ok
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">b</span> []<span style="color:#66d9ef">byte</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">more</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">b</span> = append(<span style="color:#a6e22e">b</span>, <span style="color:#a6e22e">more</span><span style="color:#f92672">...</span>) <span style="color:#75715e">// ok later
</span></span></span></code></pre></div><h3 id="通过删除简化">通过删除简化</h3>
<p>我们简化的第三种方法是在功能变得不如我们预期的那么有用或不那么重要时删除功能。删除功能意味着少学一点，修改错误少一些事情，更少烦恼或更多错误使用。当然，删除还会强制用户更新现有程序，可能会使它们更复杂，以弥补删除。但总体结果仍然是编写Go程序的过程变得更简单。</p>
<p>这方面的一个例子是我们从语言中删除了非阻塞通道操作的布尔形式：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">c</span> <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">x</span>  <span style="color:#75715e">// before Go 1, was non-blocking send
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">c</span>  <span style="color:#75715e">// before Go 1, was non-blocking receive
</span></span></span></code></pre></div><p>这些操作也可以使用<code>select</code>，使得需要决定使用哪种形式令人困惑。删除它们简化了语言而不降低其功能。</p>
<h3 id="通过限制简化">通过限制简化</h3>
<p>我们还可以通过限制允许的内容来简化。从第一天开始，Go限制了Go源文件的编码：它们必须是UTF-8。此限制使每个尝试读取Go源文件的程序更简单。这些程序不必担心以Latin-1或UTF-16或UTF-7或其他任何形式编码的Go源文件。</p>
<p>另一个重要的限制是<code>gofmt</code>程序格式化。没有谁可以拒绝使用<code>gofmt</code>格式化Go代码，但我们已经建立了一个约定，即重写Go程序的工具将它们保留为<code>gofmt</code>形式。如果你的程序也保持不变<code>gofmt</code>，那么这些重写器不会进行任何格式更改。当你比较之前和之后，你看到的唯一差异是它真正改变了。这种限制简化程序重写，并导致了像 <code>goimports</code>，<code>gorename</code>和其他这样成功的实验发生。</p>
<h2 id="go开发过程">Go开发过程</h2>
<p>这个实验和简化循环是我们过去十年来所做过的一个很好的模型。但它有一个问题：它太简单了。我们不能只进行实验和简化。</p>
<p>我们必须公布结果。我们必须使它可以使用。当然，使用它可以实现更多实验，并且可能更加简化，使得流程循环开启。</p>
<p><img src="https://raw.githubusercontent.com/llgoer/go-generics/master/experiment/expsimp2.png" alt="img"></p>
<p>我们于2009年11月10日首次发布给大家。然后，在你们的帮助下，我们在2011年3月一起发布了Go 1.从那时起我们已经发布了12个Go版本。所有这些都是重要的里程碑，可以进行更多实验，帮助我们更多地了解Go，当然还有Go可供生产使用。</p>
<p>当我们发布Go 1时，我们明确地将注意力转移到使用Go，以便在尝试任何涉及语言更改的简化之前更好地理解该语言版本。我们需要花时间进行实验，真正了解哪些有效，哪些无效。</p>
<p>当然，自Go 1以来我们已经发布了12个版本，因此我们仍在进行实验，简化和发布。但是我们专注于简化Go开发而不需要进行重大语言更改并且不破坏现有Go程序的方法。例如，Go 1.5发布了第一个并发垃圾收集器，然后以下版本改进了它，通过消除暂停时间作为持续关注来简化Go开发。</p>
<p>在2017年的Gophercon，我们宣布经过五年的实验，再次考虑可以简化Go开发的重大变化。我们前往Go2的道路与Go 1的道路非常相似：实验和简化并发布，以实现简化Go开发的总体目标。</p>
<p>对于Go 2，我们认为最重要的具体主题是错误处理，泛型和依赖性。从那时起，我们意识到另一个重要的主题是开发人员工具。</p>
<p>本文的其余部分讨论了我们在每个领域的工作如何遵循这条道路。在此过程中，我们将绕道而行，停止检查Go 1.13中即将发布的错误处理技术细节。</p>
<h3 id="错误处理">错误处理</h3>
<p>当要保证所有输入都有效而且正确，并且程序所依赖的任何内容都不能出现错误时，编写一个在所有情况下都能够正常运行的程序很困难。当你在混合着错误提示，编写一个以正确方式工作的程序，无论如何，都会更加困难。</p>
<p>作为思考Go2的一部分，我们想要更好地理解Go是否可以帮助简化这项工作。</p>
<p>有两个不同的方面可能会被简化：错误值和错误语法。我们将依次看看每一个技术，我承诺将重点关注Go1.13错误值的变化。</p>
<h4 id="错误值">错误值</h4>
<p>错误值必须从某处开始。这是<code>os</code>包中<code>Read</code>的第一个版本的功能：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">export</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Read</span>(<span style="color:#a6e22e">fd</span> <span style="color:#66d9ef">int64</span>, <span style="color:#a6e22e">b</span> <span style="color:#f92672">*</span>[]<span style="color:#66d9ef">byte</span>) (<span style="color:#a6e22e">ret</span> <span style="color:#66d9ef">int64</span>, <span style="color:#a6e22e">errno</span> <span style="color:#66d9ef">int64</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">r</span>, <span style="color:#a6e22e">e</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">syscall</span>.<span style="color:#a6e22e">read</span>(<span style="color:#a6e22e">fd</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">b</span>[<span style="color:#ae81ff">0</span>], int64(len(<span style="color:#a6e22e">b</span>)));
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">r</span>, <span style="color:#a6e22e">e</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>当时还没有<code>File</code>类型，也没有错误类型。 <code>Read</code>和包中的其他函数直接从底层的Unix系统调用返回<code>errno int64</code>。</p>
<p>此代码已于2008年9月10日下午12:14签入。当时和现在一样，这是一个实验，代码很快就改变了。两小时五分钟后，API发生了变化：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">export</span> <span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Error</span> <span style="color:#66d9ef">struct</span> { <span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span> }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">e</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Error</span>) <span style="color:#a6e22e">Print</span>() { <span style="color:#960050;background-color:#1e0010">…</span> } <span style="color:#75715e">// to standard error!
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">e</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Error</span>) <span style="color:#a6e22e">String</span>() <span style="color:#66d9ef">string</span> { <span style="color:#960050;background-color:#1e0010">…</span> }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">export</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Read</span>(<span style="color:#a6e22e">fd</span> <span style="color:#66d9ef">int64</span>, <span style="color:#a6e22e">b</span> <span style="color:#f92672">*</span>[]<span style="color:#66d9ef">byte</span>) (<span style="color:#a6e22e">ret</span> <span style="color:#66d9ef">int64</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Error</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">r</span>, <span style="color:#a6e22e">e</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">syscall</span>.<span style="color:#a6e22e">read</span>(<span style="color:#a6e22e">fd</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">b</span>[<span style="color:#ae81ff">0</span>], int64(len(<span style="color:#a6e22e">b</span>)));
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">r</span>, <span style="color:#a6e22e">ErrnoToError</span>(<span style="color:#a6e22e">e</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>这个新API引入了第一种Error类型。错误有了字符串并且可以返回该字符串将其打印到标准错误中。</p>
<p>这里的目的是提供一个概括的整数错误代码，我们从过去的经验中知道操作系统错误数量的表示太有限，它可以简化程序，而不必将有关错误的所有细节都塞进64位字节中。在过去，使用错误字符串对我们来说工作得相当好，所以我们在这里做了同样的事情。这个新的API持续了七个月。</p>
<p>在接下来的四月，在使用接口的更多经验之后，我们决定通过使<code>os.Error</code>类型本身成为接口来进一步概括并允许用户定义的错误实现。我们通过删除<code>Print</code>方法简化了。</p>
<h4 id="错误是值">错误是值</h4>
<p>创建一个简单的错误interface并允许许多不同的实现，意味着我们可以使用整个Go语言来定义和检查错误。我们喜欢说<a href="https://blog.golang.org/errors-are-values">错误是值</a>，与任何其他Go值相同。</p>
<p>这是一个例子。在Unix上，尝试拨打网络连接最终使用<code>connect</code>系统调用。该系统调用返回一个 <code>syscall.Errno</code>，这是一个整数类型的命名，表示系统调用错误号并实现<code>error</code>接口：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">syscall</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Errno</span> <span style="color:#66d9ef">int64</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">e</span> <span style="color:#a6e22e">Errno</span>) <span style="color:#a6e22e">Error</span>() <span style="color:#66d9ef">string</span> { <span style="color:#f92672">...</span> }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ECONNREFUSED</span> = <span style="color:#a6e22e">Errno</span>(<span style="color:#ae81ff">61</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">...</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">ECONNREFUSED</span> <span style="color:#f92672">...</span>
</span></span></code></pre></div><p><code>syscall</code>为主机操作系统错误号定义了命名常量。这样，在这个系统上，代码可以通过一个函数检测得到一个错误，通过<a href="https://golang.org/ref/spec#Comparison_operators">值相等</a>的方式判断错误是否为ECONNREFUSED。</p>
<p>进一步来说，<code>os</code>中使用更庞大的错误结构来报告任何系统中的调用失败，这些错误结构记录除错误之外还尝试了哪些操作。这里是这些结构中的一小部分，这个<code>SyscallError</code>描述了一个错误，它调用了一个特定的系统调用而没有记录其他信息：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">os</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">SyscallError</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Syscall</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Err</span>     <span style="color:#66d9ef">error</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">e</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">SyscallError</span>) <span style="color:#a6e22e">Error</span>() <span style="color:#66d9ef">string</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">Syscall</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">Err</span>.<span style="color:#a6e22e">Error</span>()
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>再进一步来说，<code>net</code>使用更大的错误结构报告任何网络故障，该错误结构记录周围网络操作的详细信息，例如拨号或侦听，以及涉及的网络和地址：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">net</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">OpError</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Op</span>     <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Net</span>    <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Source</span> <span style="color:#a6e22e">Addr</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Addr</span>   <span style="color:#a6e22e">Addr</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Err</span>    <span style="color:#66d9ef">error</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">e</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">OpError</span>) <span style="color:#a6e22e">Error</span>() <span style="color:#66d9ef">string</span> { <span style="color:#f92672">...</span> }
</span></span></code></pre></div><p>将这些放在一起，操作<code>net.Dial</code>返回的错误可以格式化为字符串，但它们也是结构化的Go数据值。在这种情况下，一个 <code>net.OpError</code>错误，它添加了<code>os.SyscallError</code>错误，同时也包含了<code>syscall.Errno</code>错误值。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">c</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">net</span>.<span style="color:#a6e22e">Dial</span>(<span style="color:#e6db74">&#34;tcp&#34;</span>, <span style="color:#e6db74">&#34;localhost:50001&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// &#34;dial tcp [::1]:50001: connect: connection refused&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">err</span> <span style="color:#a6e22e">is</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">net</span>.<span style="color:#a6e22e">OpError</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Op</span>:   <span style="color:#e6db74">&#34;dial&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Net</span>:  <span style="color:#e6db74">&#34;tcp&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Addr</span>: <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">net</span>.<span style="color:#a6e22e">TCPAddr</span>{<span style="color:#a6e22e">IP</span>: <span style="color:#a6e22e">ParseIP</span>(<span style="color:#e6db74">&#34;::1&#34;</span>), <span style="color:#a6e22e">Port</span>: <span style="color:#ae81ff">50001</span>},
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Err</span>: <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">SyscallError</span>{
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">Syscall</span>: <span style="color:#e6db74">&#34;connect&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">Err</span>:     <span style="color:#a6e22e">syscall</span>.<span style="color:#a6e22e">Errno</span>(<span style="color:#ae81ff">61</span>), <span style="color:#75715e">// == ECONNREFUSED
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    },
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>当我们说错误是值时，我们指的是整个Go语言可用于定义它们，并且整个Go语言可用于检查它们。</p>
<p>这是package net的一个例子。事实证明，当你尝试套接字连接时，大多数情况下你会被连接或拒绝连接，但有时候你可以得到一个没有充分的理由假的<code>EADDRNOTAVAIL</code>。Go通过重试来保护用户程序免于此故障模式。要做到这一点，它必须检查错误结构，以确定<code>syscall.Errno</code>内部是否包含<code>EADDRNOTAVAIL</code>。</p>
<p>这是代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">spuriousENOTAVAIL</span>(<span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) <span style="color:#66d9ef">bool</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">op</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">err</span>.(<span style="color:#f92672">*</span><span style="color:#a6e22e">OpError</span>); <span style="color:#a6e22e">ok</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">op</span>.<span style="color:#a6e22e">Err</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">sys</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">err</span>.(<span style="color:#f92672">*</span><span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">SyscallError</span>); <span style="color:#a6e22e">ok</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">sys</span>.<span style="color:#a6e22e">Err</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">syscall</span>.<span style="color:#a6e22e">EADDRNOTAVAIL</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>一个<a href="https://golang.org/ref/spec#Type_assertions">类型断言</a>剥离掉任何<code>net.OpError</code>包装。然后第二种类型断言剥离任何<code>os.SyscallError</code>包装。然后该函数检查解包的错误是否相等<code>EADDRNOTAVAIL</code>。</p>
<p>我们从多年的经验中学到的东西，从Go错误的实验中得知，能够定义错误接口的任意实现，使用完整的Go语言来构造和解构错误，而不需要使用任何单个实现，这是非常强大的。</p>
<p>这些属性 - 错误是值，并且没有一个必需的错误实现 - 对于保留很重要。</p>
<p>不要求一个错误实现，使每个人都能够尝试错误可能提供的其他功能，从而导致许多包的出现，例如：<a href="https://godoc.org/github.com/pkg/errors">github.com/pkg/errors</a>, <a href="https://godoc.org/gopkg.in/errgo.v2">gopkg.in/errgo.v2</a>,<a href="https://godoc.org/github.com/hashicorp/errwrap">github.com/hashicorp/errwrap</a>, <a href="https://godoc.org/upspin.io/errors">upspin.io/errors</a>, <a href="https://godoc.org/github.com/spacemonkeygo/errors">github.com/spacemonkeygo/errors</a>等等。</p>
<p>但是，无约束实验的一个问题是，作为客户端，您必须编写可能遇到的所有可能实现的并集。 对于Go 2而言似乎值得探索的简化是以商定的可选接口的形式定义常用功能的标准版本，以便不同的实现可以互操作。</p>
<h4 id="unwrap"><strong>Unwrap</strong></h4>
<p>这些包中最常添加的功能是可以调用一些方法来从错误中删除上下文，并在其中返回错误。 包使用不同的名称和含义进行此操作，有时它会删除一个级别的上下文，而有时它会删除尽可能多的级别。</p>
<p>对于Go 1.13，我们引入了一个约定，即向内部错误添加可移动上下文的错误实现应该实现一个<code>Unwrap</code>返回内部错误的方法，展开上下文。如果没有适合暴露给调用者的内部错误，则错误不应该有<code>Unwrap</code>方法，或者<code>Unwrap</code>方法应该返回nil。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// Go 1.13 optional method for error implementations.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">interface</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Unwrap removes one layer of context,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// returning the inner error if any, or else nil.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">Unwrap</span>() <span style="color:#66d9ef">error</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>调用此可选方法的方法是调用辅助函数<code>errors.Unwrap</code>，该函数处理错误本身为nil或根本没有<code>Unwrap</code>方法的情况。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">errors</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Unwrap returns the result of calling
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// the Unwrap method on err,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// if err’s type defines an Unwrap method.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// Otherwise, Unwrap returns nil.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Unwrap</span>(<span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) <span style="color:#66d9ef">error</span>
</span></span></code></pre></div><p>我们可以使用Unwrap方法编写一个更简单，更通用的spuriousENOTAVAIL版本。 通用版本可以循环，调用Unwrap来删除上下文，直到它到达EADDRNOTAVAIL或者没有剩下错误，而不是寻找特定的错误包装器实现，如net.OpError或os.SyscallError。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">spuriousENOTAVAIL</span>(<span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) <span style="color:#66d9ef">bool</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">syscall</span>.<span style="color:#a6e22e">EADDRNOTAVAIL</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">errors</span>.<span style="color:#a6e22e">Unwrap</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>不过，这个循环是如此常见，Go 1.13定义了第二个函数errors.Is，它反复解开查找特定目标的错误。 所以我们可以用一次错误调用替换整个errors.Is：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">spuriousENOTAVAIL</span>(<span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) <span style="color:#66d9ef">bool</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">errors</span>.<span style="color:#a6e22e">Is</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">syscall</span>.<span style="color:#a6e22e">EADDRNOTAVAIL</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>在这一点上，我们甚至可能不会定义函数; <code>errors.Is</code>在直接call sites同样清晰，也更简单。</p>
<p>Go 1.13还引入了一个函数<code>errors.As</code> ，该函数在找到特定的实现类型之前会解包。</p>
<p>如果要编写适用于任意包装错误的代码， <code>errors.Is</code>则是错误相等性检查的包装器感知版本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">err</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">target</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">→</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">errors</span>.<span style="color:#a6e22e">Is</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">target</span>)
</span></span></code></pre></div><p>并且<code>errors.As</code>是错误类型断言的包装器感知版本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">target</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">err</span>.(<span style="color:#f92672">*</span><span style="color:#a6e22e">Type</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">ok</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">→</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">target</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Type</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">errors</span>.<span style="color:#a6e22e">As</span>(<span style="color:#a6e22e">err</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">target</span>) {
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="unwrap还是不unwrap"><strong>Unwrap</strong>还是不<strong>Unwrap</strong></h4>
<p>是否可以解包错误是一种API决策，与导出结构字段是否是API决策的方式相同。 有时将这些细节暴露给调用代码是合适的，有时则不然。 如果是，请执行Unwrap。 如果不是，请不要实施Unwrap。</p>
<p>到目前为止，fmt.Errorf尚未将使用％v格式化的基础错误暴露给调用者检查。 也就是说，fmt.Errorf的结果无法解开。 考虑这个例子：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// errors.Unwrap(err2) == nil
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// err1 is not available (same as earlier Go versions)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">err2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">&#34;connect: %v&#34;</span>, <span style="color:#a6e22e">err1</span>)
</span></span></code></pre></div><p>如果err2返回给调用者，那个调用者从来没有办法打开err2并访问err1。 我们在Go 1.13中保留了这个属性。</p>
<p>当你想要允许解包fmt.Errorf的结果时，我们还添加了一个新的打印动词％w，其格式类似于％v，需要一个错误值参数，并使得结果错误的Unwrap方法返回该参数。 在我们的示例中，假设我们将％v替换为％w：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// errors.Unwrap(err4) == err3
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// (%w is new in Go 1.13)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">err4</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">&#34;connect: %w&#34;</span>, <span style="color:#a6e22e">err3</span>)
</span></span></code></pre></div><p>现在，如果将err4返回给调用者，则调用者可以使用Unwrap来检索err3。</p>
<p>重要的是要注意绝对规则，如“总是使用％v（或从不实现展开）”或“总是使用％w（或始终实现展开）”与绝对规则一样错误，如“永不导出结构域”或“总是 导出结构字段。“相反，正确的决定取决于调用者是否应该能够检查并依赖于使用％w或实现展开暴露的其他信息。</p>
<h4 id="错误值打印-abandoned">错误值打印 (Abandoned)</h4>
<p>除了Unwrap的设计草案外，我们还发布了一个设计草案，用于更丰富的错误打印的可选方法，包括堆栈帧信息和对本地化翻译错误的支持。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// Optional method for error implementations
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Formatter</span> <span style="color:#66d9ef">interface</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Format</span>(<span style="color:#a6e22e">p</span> <span style="color:#a6e22e">Printer</span>) (<span style="color:#a6e22e">next</span> <span style="color:#66d9ef">error</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Interface passed to Format
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Printer</span> <span style="color:#66d9ef">interface</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Print</span>(<span style="color:#a6e22e">args</span> <span style="color:#f92672">...</span><span style="color:#66d9ef">interface</span>{})
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Printf</span>(<span style="color:#a6e22e">format</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">args</span> <span style="color:#f92672">...</span><span style="color:#66d9ef">interface</span>{})
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Detail</span>() <span style="color:#66d9ef">bool</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>这个并不像Unwrap那么简单，我不会在这里详述。 当我们在冬天讨论Go社区的设计时，我们了解到设计不够简单。 对于单个错误类型来说，实现起来太难了，并且它对现有程序的帮助不够。 总的来说，它并没有简化Go开发。</p>
<p>通过这次社区讨论，我们放弃了这种打印设计。</p>
<h4 id="错误语法">错误语法</h4>
<p>那是错误值。 让我们简要回顾一下另一个被遗弃的实验的错误语法。</p>
<p>以下是<a href="https://go.googlesource.com/go/+/go1.12/src/compress/lzw/writer.go#209"><code>compress/lzw/writer.go</code></a>标准库中的一些代码 ：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// Write the savedCode if valid.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">savedCode</span> <span style="color:#f92672">!=</span> <span style="color:#a6e22e">invalidCode</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">write</span>(<span style="color:#a6e22e">e</span>, <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">savedCode</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">incHi</span>(); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#a6e22e">errOutOfCodes</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Write the eof code.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">eof</span> <span style="color:#f92672">:=</span> uint32(<span style="color:#ae81ff">1</span>)<span style="color:#f92672">&lt;&lt;</span><span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">litWidth</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">write</span>(<span style="color:#a6e22e">e</span>, <span style="color:#a6e22e">eof</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>一目了然，这段代码大约有一半的错误检查。当我读到它时，我的眼睛茫然。而且我们知道，编写繁琐且阅读繁琐的代码很容易被误读，使其成为难以发现的错误的好地方。例如，这三个错误检查中的一个与其他错误检查不同，这一事实在快速浏览时很容易错过。如果您正在调试此代码，需要多长时间才能注意到这一点？</p>
<p>在去年的Gophercon，我们 <a href="https://golang.org/design/go2draft-error-handling">提出了</a> 一个由关键字标记的新控制流结构<a href="https://golang.org/design/go2draft-error-handling">的草图设计</a><code>check</code>。 <code>Check</code>使用函数调用或表达式的错误结果。如果错误是非nil，则<code>check</code>返回错误。否则，<code>check</code>评估调用的其他结果。我们可以<code>check</code>用来简化lzw代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// Write the savedCode if valid.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">savedCode</span> <span style="color:#f92672">!=</span> <span style="color:#a6e22e">invalidCode</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">check</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">write</span>(<span style="color:#a6e22e">e</span>, <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">savedCode</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">incHi</span>(); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#a6e22e">errOutOfCodes</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">check</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Write the eof code.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">eof</span> <span style="color:#f92672">:=</span> uint32(<span style="color:#ae81ff">1</span>)<span style="color:#f92672">&lt;&lt;</span><span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">litWidth</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">check</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">write</span>(<span style="color:#a6e22e">e</span>, <span style="color:#a6e22e">eof</span>)
</span></span></code></pre></div><p>此版本的相同代码使用<code>check</code>，它删除了四行代码，更重要的是突出显示<code>e.incHi</code>允许返回的调用<code>errOutOfCodes</code>。</p>
<p>也许最重要的是，该设计还允许在以后的检查失败时运行定义错误处理程序块。这样您就可以只编写一次共享上下文添加代码，就像在此片段中一样：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">handle</span> <span style="color:#a6e22e">err</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">&#34;closing writer: %w&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Write the savedCode if valid.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">savedCode</span> <span style="color:#f92672">!=</span> <span style="color:#a6e22e">invalidCode</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">check</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">write</span>(<span style="color:#a6e22e">e</span>, <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">savedCode</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">incHi</span>(); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#a6e22e">errOutOfCodes</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">check</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Write the eof code.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">eof</span> <span style="color:#f92672">:=</span> uint32(<span style="color:#ae81ff">1</span>)<span style="color:#f92672">&lt;&lt;</span><span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">litWidth</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">check</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">write</span>(<span style="color:#a6e22e">e</span>, <span style="color:#a6e22e">eof</span>)
</span></span></code></pre></div><p>从本质上讲，check是编写if语句的简短方法，而handle类似于defer但仅适用于错误返回路径。 与其他语言中的异常相反，此设计保留了Go的重要属性，即每个潜在的失败调用都在代码中明确标记，现在使用check关键字而不是<code>if err != nil</code>。</p>
<p>这种设计的一个大问题是，<code>handle</code>重叠太多，并且以混乱的方式<code>defer</code>。</p>
<p>在五月，我们发布了一个<a href="https://golang.org/design/32437-try-builtin">新的设计</a>，有三个简化：为了避免与延迟的混淆，设计放弃了处理，而只是使用延迟; 为了匹配Rust和Swift中的类似想法，设计重命名为check to try; 并且允许以像gofmt这样的现有解析器识别的方式进行实验，它将检查（现在尝试）从关键字更改为内置函数。</p>
<p>现在相同的代码看起来像这样：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">errd</span>.<span style="color:#a6e22e">Wrapf</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">err</span>, <span style="color:#e6db74">&#34;closing writer&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Write the savedCode if valid.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">savedCode</span> <span style="color:#f92672">!=</span> <span style="color:#a6e22e">invalidCode</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">try</span>(<span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">write</span>(<span style="color:#a6e22e">e</span>, <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">savedCode</span>))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">incHi</span>(); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#a6e22e">errOutOfCodes</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">try</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Write the eof code.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">eof</span> <span style="color:#f92672">:=</span> uint32(<span style="color:#ae81ff">1</span>)<span style="color:#f92672">&lt;&lt;</span><span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">litWidth</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">try</span>(<span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">write</span>(<span style="color:#a6e22e">e</span>, <span style="color:#a6e22e">eof</span>))
</span></span></code></pre></div><p>我们花了六月的大部分时间在GitHub上公开讨论这个提案。</p>
<p>检查或尝试的基本思想是缩短每次错误检查时重复的语法量，特别是从视图中删除return语句，保持错误检查显式并更好地突出显示有趣的变化。 然而，在公众反馈讨论中提出的一个有趣的观点是，如果没有明确的if语句和返回，就没有地方可以放置调试打印，没有地方可以设置断点，并且没有代码显示为代码覆盖率结果中未执行的代码。 我们所获得的好处是以使这些情况变得更加复杂为代价的。 总的来说，从这个以及其他考虑因素来看，总体结果并不是很简单的Go开发，所以我们放弃了这个实验。</p>
<p>这就是错误处理的一切，这是今年的主要焦点之一。</p>
<h3 id="泛型">泛型</h3>
<p>现在有点争议的东西：泛型。</p>
<p>我们为Go 2确定的第二个重要主题是使用类型参数编写代码的某种方式。 这样就可以编写通用数据结构，也可以编写适用于任何切片，任何类型的通道或任何类型的映射的通用函数。 例如，这是一个通用的通道过滤器：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// Filter copies values from c to the returned channel,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// passing along only those values satisfying f.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Filter</span>(<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">value</span>)(<span style="color:#a6e22e">f</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">value</span>) <span style="color:#66d9ef">bool</span>, <span style="color:#a6e22e">c</span> <span style="color:#f92672">&lt;-</span><span style="color:#66d9ef">chan</span> <span style="color:#a6e22e">value</span>) <span style="color:#f92672">&lt;-</span><span style="color:#66d9ef">chan</span> <span style="color:#a6e22e">value</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">out</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#a6e22e">value</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">v</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">c</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">f</span>(<span style="color:#a6e22e">v</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">out</span> <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">v</span>
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        close(<span style="color:#a6e22e">out</span>)
</span></span><span style="display:flex;"><span>    }()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">out</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>自从Go开始工作以来，我们一直在考虑泛型，我们在2010年编写并拒绝了我们的第一个具体设计。我们在2013年底之前编写并拒绝了另外三个设计。四个废弃的实验，但没有失败的实验，我们从 他们，就像我们从检查和尝试中学到的一样。 每一次，我们都知道Go 2的路径并不是那个确切的方向，我们注意到其他方向可能很有趣。 但到了2013年，我们已经决定我们需要关注其他问题，所以我们将整个主题放在一边几年。</p>
<p>去年我们又开始进行探索和实验，去年夏天，我们在Gophercon的基础上提出了一个基于合约理念的新设计。 我们一直在进行实验和简化，我们一直在与编程语言理论专家合作，以更好地理解设计。</p>
<p>总的来说，我希望我们朝着一个良好的方向前进，朝着一个简化Go开发的设计。 即便如此，我们可能会发现这种设计也不起作用。 我们可能不得不放弃这个实验，并根据我们学到的东西调整我们的路径。 我们会发现。</p>
<p>在Gophercon 2019年，Ian Lance Taylor谈到了为什么我们可能想要向Go添加泛型并简要预览最新的设计草案。 有关详细信息，请参阅他的博文<a href="https://github.com/llgoer/go-generics">“Go：为何带来泛型”</a>。</p>
<h3 id="依赖">依赖</h3>
<p>我们为Go 2确定的第三个主题是依赖管理。</p>
<p>2010年，我们发布了一个名为goinstall的工具，我们将其称为“包安装实验”。它下载了依赖项并将它们存储在GOROOT的Go分发树中。</p>
<h4 id="兼容性">兼容性</h4>
<p>goinstall实验故意遗漏了包版本控制的明确概念。 相反，goinstall总是下载最新的副本。 我们这样做了，所以我们可以专注于包安装的其他设计问题。</p>
<p>Goinstall成为Go 1的一部分。当人们询问版本时，我们鼓励他们通过创建其他工具进行实验，他们做到了。 我们鼓励包AUTHORS为他们的USERS提供与Go 1库相同的向后兼容性。 引用<a href="https://golang.org/doc/faq#get_version">Go常见问题解答</a>：</p>
<p><em>“供公众使用的软件包应尽量保持向后兼容性。</em></p>
<p><em>如果需要不同的功能，请添加新名称，而不是更改旧名称。</em></p>
<p><em>如果需要完全中断，请使用新的导入路径创建一个新包。“</em></p>
<p>该约定通过限制作者可以做的事情简化了使用包的整体体验：避免破坏对API的更改; 为新功能赋予新名称; 并为全新的包装设计提供新的进口途径。</p>
<p>当然，人们一直在试验。 其中一个最有趣的实验是由Gustavo Niemeyer开始的。 他创建了一个名为<a href="https://gopkg.in/">gopkg.in</a>的Git重定向器，它为不同的API版本提供了不同的导入路径，以帮助包作者遵循为新包装设计提供新导入路径的惯例。</p>
<p>例如，GitHub存储库中的Go源代码<a href="https://github.com/go-yaml/yaml">go-yaml/yaml</a>在v1和v2语义版本标记中具有不同的API。 gopkg.in服务器为它们提供了不同的导入路径<a href="https://godoc.org/gopkg.in/yaml.v1">gopkg.in/yaml.v1</a>和<a href="https://godoc.org/gopkg.in/yaml.v2">gopkg.in/yaml.v2</a>。</p>
<p>提供向后兼容性的惯例，以便可以使用较新版本的软件包代替旧版本，这使得即使在今天也能很好地实现“始终下载最新版本”的规则。</p>
<h4 id="版本控制和供应">版本控制和供应</h4>
<p>但是在生产环境中，您需要更加精确地了解依赖版本，以使构建可重现。</p>
<p>许多人尝试了应该是什么样子，构建满足他们需求的工具，包括Keith Rarick的goven（2012）和godep（2013），Matt Butcher的glide（2014）和Dave Cheney的gb（2015）。 所有这些工具都使用将依赖包复制到您自己的源代码控制存储库中的模型。 用于使这些包可用于导入的确切机制各不相同，但它们都比它们看起来要复杂得多。</p>
<p>在社区范围的讨论之后，我们采用了Keith Rarick的提议，即在没有GOPATH技巧的情况下为复制的依赖项添加明确的支持。 这通过重塑来简化：与addToList和append一样，这些工具已经实现了这个概念，但它比它需要的更尴尬。 添加对vendor目录的显式支持使这些使用更加简单。</p>
<p>go命令中的运输vendor目录导致了更多的vendoring itself实验，我们意识到我们已经引入了一些问题。 最严重的是我们失去了包装的独特性。 之前，在任何给定的构建期间，导入路径可能出现在许多不同的包中，并且所有导入都引用相同的目标。 现在有了vendoring，不同包中的相同导入路径可能会引用包的不同vendored副本，所有这些副本都会出现在最终生成的二进制文件中。</p>
<p>当时，我们没有这个属性的名称：包唯一性。 这就是GOPATH模型的工作原理。 直到它消失，我们才完全欣赏它。</p>
<p>这里有一个并行检查和尝试错误语法提议。 在这种情况下，我们依赖于可见返回语句如何在我们考虑删除之前以我们不理解的方式工作。</p>
<p>当我们添加vendor目录支持时，有许多不同的工具来管理依赖项。 我们认为关于vendor目录和销售元数据的格式的明确协议将允许各种工具进行互操作，就像关于Go程序如何存储在文本文件中的协议一样，可以实现Go编译器，文本编辑器和类似工具之间的互操作。 goimports和gorename。</p>
<p>事实证明这是天真的乐观。 vendoring工具都以微妙的语义方式不同。 互操作需要将它们全部改为同意语义，可能会破坏各自的用户。 融合没有发生。</p>
<h4 id="dep"><strong>Dep</strong></h4>
<p>在2016年的Gophercon，我们开始尝试定义一个管理依赖项的工具。 作为这项工作的一部分，我们与许多不同类型的用户进行了调查，以了解他们在依赖关系管理方面需要什么，并且团队开始研究新工具，后者变成了dep。</p>
<p>Dep旨在能够替换所有现有的依赖管理工具。 目标是通过将现有的不同工具重塑为单一工具来简化。 它部分完成了。 Dep还通过在项目树顶部只有一个vendor目录来恢复其用户的包唯一性。</p>
<p>但dep也引入了一个严重的问题，让我们花了一段时间才完全发现。 问题在于dep包含了滑行的设计选择，支持和鼓励对给定包的不兼容更改而不改变导入路径。</p>
<p>这是一个例子。 假设您正在构建自己的程序，并且需要一个配置文件，因此您使用流行的Go YAML包的第2版：</p>
<p><img src="https://raw.githubusercontent.com/llgoer/go-generics/master/experiment/yamldeps1.png" alt="img"></p>
<p>现在假设您的程序导入Kubernetes客户端。 事实证明，Kubernetes广泛使用YAML，它使用相同流行软件包的版本1：</p>
<p><img src="https://raw.githubusercontent.com/llgoer/go-generics/master/experiment/yamldeps2.png" alt="img"></p>
<p>版本1和版本2具有不兼容的API，但它们也具有不同的导入路径，因此对于给定导入的含义没有歧义。 Kubernetes获得版本1，您的配置解析器获得版本2，一切正常。</p>
<p>Dep放弃了这个模型。 yaml包的版本1和版本2现在具有相同的导入路径，从而产生冲突。 对两个不兼容的版本使用相同的导入路径，结合包唯一性，使得无法构建您之前可以构建的程序：</p>
<p><img src="https://raw.githubusercontent.com/llgoer/go-generics/master/experiment/yamldeps3.png" alt="img"></p>
<p>我们花了一段时间来理解这个问题，因为我们长期以来一直在应用“新API意味着新的导入路径”惯例，以至于我们认为这是理所当然的。 dep实验帮助我们更好地理解了这个约定，并且我们给它起了一个名字：导入兼容性规则：</p>
<p><em>“如果旧软件包和新软件包具有相同的导入路径，则新软件包必须向后兼容旧软件包。”</em></p>
<h4 id="go-modules"><strong>Go Modules</strong></h4>
<p>我们在dep实验中取得了很好的效果，并且了解了哪些方法效果不佳，我们尝试了一种名为vgo的新设计。 在vgo中，包遵循导入兼容性规则，因此我们可以提供包唯一性，但仍然不会像我们刚看到的那样破坏构建。 这让我们也简化了设计的其他部分。</p>
<p>除了恢复导入兼容性规则之外，vgo设计的另一个重要部分是为一组包的概念赋予名称，并允许将该分组与源代码存储库边界分开。 一组Go包的名称是一个模块，因此我们现在将系统称为Go模块。</p>
<h4 id="取代gopath">取代GOPATH</h4>
<p>使用Go模块将GOPATH作为全局名称空间结束。 从远离GOPATH开始，将现有的Go用法和工具转换为模块的几乎所有艰苦工作都是由于这种变化造成的。</p>
<p>GOPATH的基本思想是GOPATH目录树是正在使用的版本的全局真实来源，并且当您在目录之间移动时，所使用的版本不会改变。 但是，全局GOPATH模式与每个项目可重现构建的生产要求直接冲突，这本身就以许多重要方式简化了Go开发和部署体验。</p>
<p>每个项目可重现的构建意味着当您在项目A的检出工作时，您将获得与项目A的其他开发人员在该提交中获得的相同的依赖项版本集，如go.mod文件所定义。 当您切换到项目B的结帐时，现在您可以获得该项目选择的依赖版本，与项目B的其他开发人员获得的版本相同。 但是那些可能与项目A不同。当你从项目A转移到项目B时，依赖版本的变化是必要的，以使你的开发与A和B上的其他开发人员的开发保持同步。不可能有 单一的全局GOPATH了。</p>
<p>采用模块的大多数复杂性直接源于一个全局GOPATH的丢失。 包的源代码在哪里？ 之前，答案仅取决于您的GOPATH环境变量，大多数人很少更改。 现在，答案取决于您正在进行的项目，这可能经常发生变化。 一切都需要更新这个新的约定。</p>
<p>大多数开发工具使用该 <a href="https://godoc.org/go/build"><code>go/build</code></a>包来查找和加载Go源代码。我们保持该程序包正常运行，但API没有预期模块，我们为避免API更改而添加的变通方法比我们想要的慢。我们已经发布了一个替代品<a href="https://godoc.org/golang.org/x/tools/go/packages"><code>golang.org/x/tools/go/packages</code></a>。开发人员工具现在应该使用它。它支持GOPATH和Go模块，使用起来更快更容易。在一两个版本中，我们可以将其移动到标准库中，但是现在<a href="https://godoc.org/golang.org/x/tools/go/packages"><code>golang.org/x/tools/go/packages</code></a> 是稳定的并且可以使用。</p>
<h4 id="go模块代理">Go<strong>模块代理</strong></h4>
<p>模块简化Go开发的方法之一是将一组包的概念与存储它们的底层源控制存储库分开。</p>
<p>当我们与Go用户讨论依赖关系时，几乎所有在他们公司使用Go的人都询问如何通过他们自己的服务器路由获取包，以更好地控制可以使用的代码。 甚至开源开发人员都担心依赖关系会消失或意外地发生变化，从而破坏他们的构建。 在模块之前，用户尝试了解决这些问题的复杂解决方案，包括拦截go命令运行的版本控制命令。</p>
<p>Go模块设计可以很容易地引入模块代理的概念，可以询问特定模块版本。</p>
<p>现在，公司可以轻松运行自己的模块代理，并提供有关允许内容和缓存副本存储位置的自定义规则。<a href="https://docs.gomods.io/">雅典</a>开源<a href="https://docs.gomods.io/">项目</a>建立了这样一个代理，Aaron Schlesinger在Gophercon 2019上对此进行了讨论。（当视频可用时，我们将在这里添加一个链接。）</p>
<p>对于个人开发人员和开源团队，Google的Go团队已经<a href="https://groups.google.com/forum/#!topic/golang-announce/0wo8cOhGuAI">启动了一个代理</a>，作为所有开源Go软件包的公共镜像，Go 1.13将在模块模式下默认使用该代理。Katie Hockman在Gophercon 2019上谈到了这个系统。（当视频可用时，我们会在这里添加一个链接。）</p>
<h4 id="go模块状态"><strong>Go模块状态</strong></h4>
<p>将1.11介绍模块作为实验性的选择预览。 我们不断尝试和简化。 Go1.12发布改进，Go 1.13将提供更多改进。</p>
<p>模块现在处于我们认为它们将为大多数用户服务的程度，但我们尚未准备好关闭GOPATH。 我们将继续进行实验，简化和修改。</p>
<p>我们完全认为Go用户社区围绕GOPATH构建了近十年的经验，工具和工作流程，并且将所有这些转换为Go模块需要一段时间。</p>
<p>但同样，我们认为模块现在可以很好地适用于大多数用户，我建议您在Go 1.13发布时查看。</p>
<p>作为一个数据点，Kubernetes项目有很多依赖项，他们已经迁移到使用Go模块来管理它们。你可能也可以。如果您不能，请通过<a href="https://golang.org/issue/new">提交错误报告</a>告诉我们什么不适合您或什么太复杂，我们将进行实验和简化。</p>
<h2 id="工具">工具</h2>
<p>错误处理，泛型和依赖关系管理至少需要几年时间，我们现在将重点关注它们。 错误处理已接近完成，模块将在此之后接下来，之后可能是泛型。</p>
<p>但是假设我们看了几年，那时我们已经完成了实验和简化，并且已经发布了错误处理，模块和泛型。 那又怎样？ 预测未来是非常困难的，但我认为，一旦这三个已经出货，这可能标志着重大变化的新平静时期的开始。 我们在这一点上的重点可能转向使用改进的工具简化Go开发。</p>
<p>一些工具工作已经在进行中，所以这篇文章通过查看完成。</p>
<p>虽然我们帮助更新了所有Go社区现有的工具以了解Go模块，但我们注意到，拥有大量开发帮助工具，每个工具都做一个小工作，并不能很好地为用户服务。 单个工具太难以组合，调用太慢而且使用太不同。</p>
<p>我们开始努力将最常用的开发助手统一到一个工具中，现在称为gopls（发音为“go，please”）。 Gopls使用语言<a href="https://langserver.org/">服务器协议LSP</a>，并且可以与支持LSP的任何集成开发环境或文本编辑器一起使用，这基本上是此时的所有内容。</p>
<p><code>Gopls</code>标志着Go项目的重点扩展，从提供类似编译器的命令行工具（如go vet或gorename）到提供完整的IDE服务。Rebecca Stambler <code>gopls</code>在Gophercon 2019上发表了有关IDE和IDE的更多细节的演讲。（当视频可用时，我们将在此处添加链接。）</p>
<p>之后<code>gopls</code>，我们也有了<code>go fix</code>以可扩展的方式恢复并提供<code>go vet</code>更多帮助的想法。</p>
<h2 id="结尾">结尾</h2>
<p><img src="https://raw.githubusercontent.com/llgoer/go-generics/master/experiment/expsimp2.png" alt="img"></p>
<p>这是通往Go 2 的道路，我们要不断地尝试并简化，并且把这个信息传递出去，反复地尝试并简化，不停地进行这样的过程。 每次我们进行实验和简化时，我们都会更多地了解Go 2应该是什么样子，并向它迈进一步。 即使是遗弃的实验，如<code>try</code>、泛型设计或<code>dep</code>也不浪费时间。 它们帮助我们在出货之前了解需要简化的内容，在某些情况下，它们可以帮助我们更好地理解我们认为理所当然的事情。</p>
<p>在某些时候，我们会意识到我们已经进行了足够的实验，并且已经足够简化并且筹备得足够多，我们将拥有Go2。</p>
<p>感谢Go社区中的所有人帮助我们在这条道路上进行实验、简化和出货。</p>
<p>作者：<em>Russ Cox</em></p>
<p>原文：https://blog.golang.org/experiment</p>
<p>译文：https://github.com/llgoer/go-generics</p>
]]></content>
		</item>
		
		<item>
			<title>System 进程间通讯方式</title>
			<link>https://blog.v5u.win/posts/system/system-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/</link>
			<pubDate>Mon, 12 Aug 2019 10:46:26 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/</guid>
			<description>进程通信： 每个进程各自有不同的用户地址空间,任何一个进程的全局变量在另一个进程中都看不到，所以进程之间要交换数据必须通过内核,在内核中开辟一</description>
			<content type="html"><![CDATA[<p>进程通信：
每个进程各自有不同的用户地址空间,任何一个进程的全局变量在另一个进程中都看不到，所以进程之间要交换数据必须通过内核,在内核中开辟一块缓冲区,进程A把数据从用户空间拷到内核缓冲区,进程B再从内核缓冲区把数据读走,内核提供的这种机制称为进程间通信。</p>
<p>[TOC]</p>
<h1 id="进程间8种通讯方式">进程间8种通讯方式</h1>
<h2 id="匿名管道通信">匿名管道通信</h2>
<p>匿名管道( pipe )：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。</p>
<pre tabindex="0"><code>// 需要的头文件
#include &lt;unistd.h&gt;

// 通过pipe()函数来创建匿名管道
// 返回值：成功返回0，失败返回-1
// fd参数返回两个文件描述符
// fd[0]指向管道的读端，fd[1]指向管道的写端
// fd[1]的输出是fd[0]的输入。
int pipe (int fd[2]);
</code></pre><p>通过匿名管道实现进程间通信的步骤如下：</p>
<p>父进程创建管道，得到两个⽂件描述符指向管道的两端
父进程fork出子进程，⼦进程也有两个⽂件描述符指向同⼀管道。
父进程关闭fd[0],子进程关闭fd[1]，即⽗进程关闭管道读端,⼦进程关闭管道写端（因为管道只支持单向通信）。⽗进程可以往管道⾥写,⼦进程可以从管道⾥读,管道是⽤环形队列实现的,数据从写端流⼊从读端流出,这样就实现了进程间通信。
详细可参考文章：进程间的通信方式——pipe（管道）</p>
<h2 id="高级管道通信">高级管道通信</h2>
<p>高级管道(popen)：将另一个程序当做一个新的进程在当前程序进程中启动，则它算是当前程序的子进程，这种方式我们成为高级管道方式。</p>
<h2 id="有名管道通信">有名管道通信</h2>
<p>有名管道 (named pipe) ： 有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</p>
<h2 id="消息队列通信">消息队列通信</h2>
<p>消息队列( message queue ) ： 消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</p>
<h2 id="信号量通信">信号量通信</h2>
<p>信号量( semophore ) ： 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</p>
<h2 id="信号">信号</h2>
<p>信号 ( sinal ) ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</p>
<h2 id="共享内存通信">共享内存通信</h2>
<p>共享内存( shared memory ) ：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信。</p>
<h2 id="套接字通信">套接字通信</h2>
<p>套接字( socket ) ： 套接口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信。</p>
<p>之前写过一个课程设计：基于Internet的Linux客户机/服务器系统通讯设计与实现</p>
<p>是利用sock通信实现的，可以参考一下。</p>
<p>通信过程如下：</p>
<h3 id="命名socket">命名socket</h3>
<p>SOCK_STREAM 式本地套接字的通信双方均需要具有本地地址，其中服务器端的本地地址需要明确指定，指定方法是使用 struct sockaddr_un 类型的变量。</p>
<h3 id="绑定">绑定</h3>
<p>SOCK_STREAM 式本地套接字的通信双方均需要具有本地地址，其中服务器端的本地地址需要明确指定，指定方法是使用 struct sockaddr_un 类型的变量，将相应字段赋值，再将其绑定在创建的服务器套接字上，绑定要使用 bind 系统调用，其原形如下：</p>
<p>int bind(int socket, const struct sockaddr *address, size_t address_len);
1
其中 socket表示服务器端的套接字描述符，address 表示需要绑定的本地地址，是一个 struct sockaddr_un 类型的变量，address_len 表示该本地地址的字节长度。</p>
<h3 id="监听">监听</h3>
<p>服务器端套接字创建完毕并赋予本地地址值（名称，本例中为Server Socket）后，需要进行监听，等待客户端连接并处理请求，监听使用 listen 系统调用，接受客户端连接使用accept系统调用，它们的原形如下：</p>
<pre tabindex="0"><code>int listen(int socket, int backlog);

int accept(int socket, struct sockaddr *address, size_t *address_len);
</code></pre><p>其中 socket 表示服务器端的套接字描述符；backlog 表示排队连接队列的长度（若有多个客户端同时连接，则需要进行排队）；address 表示当前连接客户端的本地地址，该参数为输出参数，是客户端传递过来的关于自身的信息；address_len 表示当前连接客户端本地地址的字节长度，这个参数既是输入参数，又是输出参数。</p>
<h3 id="连接服务器">连接服务器</h3>
<p>客户端套接字创建完毕并赋予本地地址值后，需要连接到服务器端进行通信，让服务器端为其提供处理服务。</p>
<p>对于SOCK_STREAM类型的流式套接字，需要客户端与服务器之间进行连接方可使用。连接要使用 connect 系统调用，其原形为</p>
<pre tabindex="0"><code>int connect(int socket, const struct sockaddr *address, size_t address_len);
</code></pre><p>其中socket为客户端的套接字描述符，address表示当前客户端的本地地址，是一个 struct sockaddr_un 类型的变量，address_len 表示本地地址的字节长度。实现连接的代码如下：</p>
<pre tabindex="0"><code>connect(client_sockfd, (struct sockaddr*)&amp;client_address, sizeof(client_address));
</code></pre><h3 id="相互发送接收数据">相互发送接收数据</h3>
<p>无论客户端还是服务器，都要和对方进行数据上的交互，这种交互也正是我们进程通信的主题。一个进程扮演客户端的角色，另外一个进程扮演服务器的角色，两个进程之间相互发送接收数据，这就是基于本地套接字的进程通信。发送和接收数据要使用 write 和 read 系统调用，它们的原形为：</p>
<pre tabindex="0"><code>int read(int socket, char *buffer, size_t len);
int write(int socket, char *buffer, size_t len);
</code></pre><p>其中 socket 为套接字描述符；len 为需要发送或需要接收的数据长度；</p>
<p>对于 read 系统调用，buffer 是用来存放接收数据的缓冲区，即接收来的数据存入其中，是一个输出参数；</p>
<p>对于 write 系统调用，buffer 用来存放需要发送出去的数据，即 buffer 内的数据被发送出去，是一个输入参数；返回值为已经发送或接收的数据长度。</p>
<h3 id="断开连接">断开连接</h3>
<p>交互完成后，需要将连接断开以节省资源，使用close系统调用，其原形为：</p>
<pre tabindex="0"><code>int close(int socket);
</code></pre><hr>
<p>版权声明：本文为CSDN博主「Violet-Guo」的原创文章，遵循CC 4.0 by-sa版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/violet_echo_0908/article/details/51201278</p>
<hr>
<p>注：</p>
<p>通讯方式的选择：
PIPE和FIFO用来实现进程间相互发送非常短小的、频率很高的消息；这两种方式通常适用于两个进程间的通信。</p>
<p>共享内存用来实现进程间共享的、非常庞大的、读写操作频率很高的数据（配合信号量使用）；这种方式通常适用于多进程间通信。</p>
<p>其他考虑用socket。这里的“其他情况”，其实是今天主要会碰到的情况：<strong>分布式开发</strong>。
在多进程、多线程、多模块所构成的今天最常见的分布式系统开发中，socket是第一选择。</p>
<p>消息队列，现在建议不要使用了 &mdash;- 因为找不到使用它们的理由。</p>
<p>从易用性，可扩展性等方面考虑，只使用socket就行了。性能不够，加块CPU。
理论来源：https://www.zhihu.com/question/23995948</p>
<h2 id="关于消息队列">关于消息队列</h2>
<p>这里主要说一下关于消息队列的缺点。消息队列是在系统范围内起作用的，没有引用计数。当消息队列终止而队列中还存有消息的时候，该消息队列及其内容不会被删除，将一直保留至系统中发生的一些动作为止：</p>
<ul>
<li>某个进程调用msgrcv或msgctl读消息或删除消息队列；</li>
<li>某个进程执行ipcrm命令删除消息队列；</li>
<li>正在自举的系统删除消息队列。对于匿名管道，最后一个引用管道的进程终止，管道就被删除；对于有名管道，最后一个引用 FIFO 的进程终止，虽然 FIFO 名字保留在系统中，但留在 FIFO 的数据已经被删除</li>
</ul>
<p>《APUE》一书指出，消息队列原来主要是提供高于一般速度的IPC，但现在与其他形式的IPC相比，速度上已没有太多的优势，因此，考虑消息队列遇到的问题，在新的应用程序中，不应再考虑使用它来实现 IPC。</p>
<p>作者：Zyoung
链接：https://www.zhihu.com/question/23995948/answer/538348089
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
		</item>
		
		<item>
			<title>进程间8种通讯方式</title>
			<link>https://blog.v5u.win/%E8%BF%9B%E7%A8%8B%E9%97%B48%E7%A7%8D%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/</link>
			<pubDate>Mon, 12 Aug 2019 02:37:18 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E8%BF%9B%E7%A8%8B%E9%97%B48%E7%A7%8D%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/</guid>
			<description>进程通信： 每个进程各自有不同的用户地址空间,任何一个进程的全局变量在另一个进程中都看不到，所以进程之间要交换数据必须通过内核,在内核中开辟一</description>
			<content type="html"><![CDATA[<p>进程通信：</p>
<p>每个进程各自有不同的用户地址空间,任何一个进程的全局变量在另一个进程中都看不到，所以进程之间要交换数据必须通过内核,在内核中开辟一块缓冲区,进程A把数据从用户空间拷到内核缓冲区,进程B再从内核缓冲区把数据读走,内核提供的这种机制称为进程间通信。</p>
<p>[TOC]</p>
<h1 id="进程间8种通讯方式">进程间8种通讯方式</h1>
<h2 id="匿名管道通信">匿名管道通信</h2>
<p>匿名管道( pipe )：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>通过匿名管道实现进程间通信的步骤如下：</p>
<p>父进程创建管道，得到两个⽂件描述符指向管道的两端</p>
<p>父进程fork出子进程，⼦进程也有两个⽂件描述符指向同⼀管道。</p>
<p>父进程关闭fd[0],子进程关闭fd[1]，即⽗进程关闭管道读端,⼦进程关闭管道写端（因为管道只支持单向通信）。⽗进程可以往管道⾥写,⼦进程可以从管道⾥读,管道是⽤环形队列实现的,数据从写端流⼊从读端流出,这样就实现了进程间通信。</p>
<p>详细可参考文章：进程间的通信方式——pipe（管道）</p>
<h2 id="高级管道通信">高级管道通信</h2>
<p>高级管道(popen)：将另一个程序当做一个新的进程在当前程序进程中启动，则它算是当前程序的子进程，这种方式我们成为高级管道方式。</p>
<h2 id="有名管道通信">有名管道通信</h2>
<p>有名管道 (named pipe) ： 有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</p>
<h2 id="消息队列通信">消息队列通信</h2>
<p>消息队列( message queue ) ： 消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</p>
<h2 id="信号量通信">信号量通信</h2>
<p>信号量( semophore ) ： 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</p>
<h2 id="信号">信号</h2>
<p>信号 ( sinal ) ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</p>
<h2 id="共享内存通信">共享内存通信</h2>
<p>共享内存( shared memory ) ：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信。</p>
<h2 id="套接字通信">套接字通信</h2>
<p>套接字( socket ) ： 套接口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信。</p>
<p>之前写过一个课程设计：基于Internet的Linux客户机/服务器系统通讯设计与实现</p>
<p>是利用sock通信实现的，可以参考一下。</p>
<p>通信过程如下：</p>
<h3 id="命名socket">命名socket</h3>
<p>SOCK_STREAM 式本地套接字的通信双方均需要具有本地地址，其中服务器端的本地地址需要明确指定，指定方法是使用 struct sockaddr_un 类型的变量。</p>
<h3 id="绑定">绑定</h3>
<p>SOCK_STREAM 式本地套接字的通信双方均需要具有本地地址，其中服务器端的本地地址需要明确指定，指定方法是使用 struct sockaddr_un 类型的变量，将相应字段赋值，再将其绑定在创建的服务器套接字上，绑定要使用 bind 系统调用，其原形如下：</p>
<p>int bind(int socket, const struct sockaddr *address, size_t address_len);</p>
<p>1</p>
<p>其中 socket表示服务器端的套接字描述符，address 表示需要绑定的本地地址，是一个 struct sockaddr_un 类型的变量，address_len 表示该本地地址的字节长度。</p>
<h3 id="监听">监听</h3>
<p>服务器端套接字创建完毕并赋予本地地址值（名称，本例中为Server Socket）后，需要进行监听，等待客户端连接并处理请求，监听使用 listen 系统调用，接受客户端连接使用accept系统调用，它们的原形如下：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>其中 socket 表示服务器端的套接字描述符；backlog 表示排队连接队列的长度（若有多个客户端同时连接，则需要进行排队）；address 表示当前连接客户端的本地地址，该参数为输出参数，是客户端传递过来的关于自身的信息；address_len 表示当前连接客户端本地地址的字节长度，这个参数既是输入参数，又是输出参数。</p>
<h3 id="连接服务器">连接服务器</h3>
<p>客户端套接字创建完毕并赋予本地地址值后，需要连接到服务器端进行通信，让服务器端为其提供处理服务。</p>
<p>对于SOCK_STREAM类型的流式套接字，需要客户端与服务器之间进行连接方可使用。连接要使用 connect 系统调用，其原形为</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>其中socket为客户端的套接字描述符，address表示当前客户端的本地地址，是一个 struct sockaddr_un 类型的变量，address_len 表示本地地址的字节长度。实现连接的代码如下：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h3 id="相互发送接收数据">相互发送接收数据</h3>
<p>无论客户端还是服务器，都要和对方进行数据上的交互，这种交互也正是我们进程通信的主题。一个进程扮演客户端的角色，另外一个进程扮演服务器的角色，两个进程之间相互发送接收数据，这就是基于本地套接字的进程通信。发送和接收数据要使用 write 和 read 系统调用，它们的原形为：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>其中 socket 为套接字描述符；len 为需要发送或需要接收的数据长度；</p>
<p>对于 read 系统调用，buffer 是用来存放接收数据的缓冲区，即接收来的数据存入其中，是一个输出参数；</p>
<p>对于 write 系统调用，buffer 用来存放需要发送出去的数据，即 buffer 内的数据被发送出去，是一个输入参数；返回值为已经发送或接收的数据长度。</p>
<h3 id="断开连接">断开连接</h3>
<p>交互完成后，需要将连接断开以节省资源，使用close系统调用，其原形为：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<ul>
<li>
<ul>
<li>*版权声明：本文为CSDN博主「Violet-Guo」的原创文章，遵循CC 4.0 by-sa版权协议，转载请附上原文出处链接及本声明。</li>
</ul>
</li>
</ul>
<p>原文链接：https://blog.csdn.net/violet_echo_0908/article/details/51201278<!-- raw HTML omitted --></p>
<ul>
<li>
<ul>
<li>*注：</li>
</ul>
</li>
</ul>
<p>通讯方式的选择：</p>
<p>PIPE和FIFO用来实现进程间相互发送非常短小的、频率很高的消息；这两种方式通常适用于两个进程间的通信。</p>
<p>共享内存用来实现进程间共享的、非常庞大的、读写操作频率很高的数据（配合信号量使用）；这种方式通常适用于多进程间通信。</p>
<p>其他考虑用socket。这里的“其他情况”，其实是今天主要会碰到的情况：<strong>分布式开发</strong>。</p>
<p>在多进程、多线程、多模块所构成的今天最常见的分布式系统开发中，socket是第一选择。</p>
<p>消息队列，现在建议不要使用了 —- 因为找不到使用它们的理由。</p>
<p>从易用性，可扩展性等方面考虑，只使用socket就行了。性能不够，加块CPU。</p>
<p>理论来源：https://www.zhihu.com/question/23995948<!-- raw HTML omitted --></p>
<h2 id="关于消息队列">关于消息队列</h2>
<p>这里主要说一下关于消息队列的缺点。消息队列是在系统范围内起作用的，没有引用计数。当消息队列终止而队列中还存有消息的时候，该消息队列及其内容不会被删除，将一直保留至系统中发生的一些动作为止：</p>
<ul>
<li>某个进程调用msgrcv或msgctl读消息或删除消息队列；</li>
<li>某个进程执行ipcrm命令删除消息队列；</li>
<li>正在自举的系统删除消息队列。对于匿名管道，最后一个引用管道的进程终止，管道就被删除；对于有名管道，最后一个引用 FIFO 的进程终止，虽然 FIFO 名字保留在系统中，但留在 FIFO 的数据已经被删除</li>
</ul>
<p>《APUE》一书指出，消息队列原来主要是提供高于一般速度的IPC，但现在与其他形式的IPC相比，速度上已没有太多的优势，因此，考虑消息队列遇到的问题，在新的应用程序中，不应再考虑使用它来实现 IPC。</p>
<p>作者：Zyoung</p>
<p>链接：https://www.zhihu.com/question/23995948/answer/538348089</p>
<p>来源：知乎</p>
<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
		</item>
		
		<item>
			<title>《赘婿》的笔记</title>
			<link>https://blog.v5u.win/%E3%80%8A%E8%B5%98%E5%A9%BF%E3%80%8B%E7%9A%84%E7%AC%94%E8%AE%B0/</link>
			<pubDate>Thu, 08 Aug 2019 05:33:57 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E3%80%8A%E8%B5%98%E5%A9%BF%E3%80%8B%E7%9A%84%E7%AC%94%E8%AE%B0/</guid>
			<description>[TOC] 赘婿 第一九七章 种子 2019-08-07 12:10:15 ““可是太早学会想，未必就是好。，”秦嗣源微笑着““其实念书之人，识字认字最后都是让人增广见闻，然后学会怎样去想。只</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<p>赘婿</p>
<p>第一九七章 种子</p>
<p>2019-08-07 12:10:15</p>
<p>““可是太早学会想，未必就是好。，”秦嗣源微笑着““其实念书之人，识字认字最后都是让人增广见闻，然后学会怎样去想。只要真正学会了怎样去想，再学其它，都是举一反三，事半功倍。你的师父一贯教学是为了让你们尽早的学会想，所以他说那些故事，引导你们去动脑筋。这样你们就学得更快。可你们现在年纪太小了，阅历不敷，想很多了，其实有失偏颇，到最后，便恐怕会目中无人了，觉得张夫子比不了宁老师，进而觉得张夫子说的不敷有事理，甚至可能会开始觉得古圣先贤的文章有谬误…你有了自己的想法，就开始目中无人，夜郎自大！君武，这些话，你要记清楚。，”</p>
<h5 id="注-教学求学之法">注: <strong>教学，求学之法</strong></h5>
<p>2019-08-07 12:09:45</p>
<p>所以一般来说，老师教导门生，初时只是让你们记得，比及你们真的年纪大了，可以真正见到一些事情了，才让你们想，这样你们的根基就扎实很多。固然，我并不是说你的师父教导有误，只看他叮咛你的事项，便知他对此也是很是重视。他有所控制，可你究竟?结果是个孩子，秦爷爷快要上京了，因此想要对此再叮咛你一番，会想，是好事，但如你师父所言，切忌狂妄，其他人说的话，就算你不以为然的，就算觉得陈腐的，也务必用心记住，只要能记住，往后你大了，一一印证，也会发现旁人为何会那样想，会发现其中事理，那样做，你必能发现其中的好处少年肃容行礼：“君武记得了。”</p>
<p>第二五一章 死给你看</p>
<p>2019-08-08 09:16:11</p>
<p>我……”宁毅正想说话，钱希文陡然又抬头望过来：“立恒觉得，我辈文人，最该做的事情，是什么？”</p>
<p>宁毅想了想：“我不愿说大话骗你，各人有各人的看法，文人有该做的，但要说最该做的，恐怕谁也说不清楚，而且……我不算文人。”</p>
<p>听得他这样回答，钱希文笑起来：“是啊，因此你能行非常之事，能……将湖州局势，一举逆转。”说起这事，老人似乎还有些兴奋，“但……老朽研究儒家数十</p>
<h5 id="注-儒家文人最该做的事是什么">注: 儒家文人最该做的事是什么？</h5>
<p>2019-08-08 09:16:20</p>
<p>年，得出一个结论，我辈儒者，最该做的事情，终究还是……卫道。”</p>
<p>宁毅皱了皱眉，钱希文笑了一阵：“自与立恒相识，你我未曾多谈，但这数月之事，我已知道立恒到底是何等样人。立恒于我，想必也听说了一些事情，当初的立秋诗会，这次的立秋诗会，包括各种官场来往、权术，立恒方才也说，老朽乃是务实之人，是啊，务实……”</p>
<p>他叹了口气，对这个词似乎颇有感慨：“可是，立恒，你想啊，若非如今官场、若非如今军中，若不是所有人都选择了这聪明的务实之道。他们打过来了，一觉得事不可为，大家就都掉头跑掉，杭州怎能陷得如此之快。若我们整天都在说圣贤之言，说大丈夫当仗义死节，到了城破之时，却没有一个人愿意做些蠢事，有谁愿意信那圣贤之言呢？”</p>
<p>“说爱国，说死节，死到临头了，却没有人愿意去，那儒者，不就成了看不见摸不着的东西了吗？立恒啊，这样说起来可能有些太过务实了，但我辈儒者，每年都该死几个人，死几个……有名字的人，死在屠刀之下，死在金銮殿上，死在这千万人的眼前，真到该死之时不能退，如此才能提醒世人，这儒家之道是真的，为不平之事而死，我辈才算为往圣继绝学。我死在这杭州城，也是要提醒大家，确实有些人抵抗过的，免得他们想要说起的时候，热血之时，找不到可以说的名字……”</p>
<p>他说得有些激动，手臂颤抖着，摸索着戴上帽子：“我已经老了，正是死得其所，立恒你还不该死，外面的那些孩子也不该死，但别无他法了，他们当中，也有被我教得信了这些的，也算是……死得其所吧。”</p>
<p>有微微的光从缝隙里照射进来，微尘浮动在空气中。老人说到这里，微微笑了笑：“所以这样说起来也许不好听，但所谓卫道，其实也就是……在适当的时候，死给你看。已经死了不少了，我因为名气大</p>
<p>2019-08-08 09:16:52</p>
<p>些，反倒屈居人后，也令得那些孩子多受了几天罪……为虚名所累啊……”</p>
<p>2019-08-08 09:17:04</p>
<p>宁毅微微有些沉默，他对于儒家，有崇敬，也有不屑，所崇敬者，无非是这个以儒为名的系统以家天下的规则所创造出来的巨大的、自洽的统治系统，如同蛛网般的密密麻麻的统治艺术。所不屑的，则是大多数儒生读书读傻了脑子，什么都不会想又或者什么都想的各种丑态，但眼前这个老人，确实是令得儒家这个字，显得有些伟大了。</p>
<p>平日务实致用，适当的时候……死给你看。</p>
<p>2019-08-08 09:18:57</p>
<p>如同诸多儒生在殿前触柱而死，如同后世文天祥崖山投海，方孝孺被腰斩后犹大骂朱棣不止。在后世看来，许多人或许都显得有些傻，觉得他们什么事情都没有做成，但如果把儒家当成一项事业，终究是这些人才真正做了事情的，真正是为往圣继绝学。若说起来，真就是“死给别人</p>
<p>2019-08-08 09:19:03</p>
<p>看</p>
<p>第二五五章 纲领</p>
<p>2019-08-08 09:31:20</p>
<p>纵观整个历史，真正成功了的起义或者是农民起义，首先一点，在某种程度上他们是真正的大势所趋，也就是一帮文人哭着喊着这个世道该灭亡了。第二点在于起义者能够将农民训练成士兵，也就是让他们能够听命令，而不是问“我们去抢什么”。两者各有比例，第一点最重要，当然也有特例，如后世明朝的朱棣兴兵，但那并非农民起义。在农民的起义中，第一点的重要性几乎无可取代。</p>
<p>而在整个历史长河当中，看见诸多农民起义，因饥荒、因瘟疫、因暴乱，有人振臂一呼，几万人几十万人就起来，他们如蝗虫一般的奔突，随后沉寂。但几乎所</p>
<p>2019-08-08 09:31:32</p>
<p>有的起义高层，都没有真正去想过该怎样动用起每一个人的全部力量。而真正将主观能动性甚至是理想这样的概念用在了农民身上的起义，古往今来，在宁毅所知的整个历史长河、所知的所有事例当中，仅有区区的一次。</p>
<p>那是后世的起义。</p>
<p>无论后世对于那次革命后来的评价如何，至少在当时，那一帮农民发出的力量是最大的，也创造了或许是整个人类历史上最为清廉的一只革命队伍。</p>
<h5 id="注-关于起义的思考">注: 关于起义的思考</h5>
<p>第二五七章 无趣之人</p>
<p>2019-08-08 09:45:50</p>
<p>宁毅笑了笑：“人情和规矩都要有，没有什么地方离得开人情这种东西。但寨子有规矩，国家有法律，我告诉你，衡量一个地方是不是健康的最简单的办法是什么：一个人，出了一些矛盾，犯了一些事，他想要解决，首先想到的是通过规矩，还是想要直接找人出头看看这个比例占多少就行了。如果他只考虑规矩，万事都想着打官司，这个世界是没什么人情味的，当然，这样的地方我还没见过，没听说过但如果他只想着找某某人，那么律法也就形同虚设了。你要管理这个寨子，两者就都要有，现在这样，死伤的人一多，事情一多，大家都看着你，你就只是把自己累死</p>
<h5 id="注-关于管理规矩法律人情">注: 关于管理，规矩，法律，人情</h5>
<p>2019-08-08 09:45:55</p>
<p>而已······”</p>
<p>第二六〇章 霸气外露刘西瓜</p>
<p>2019-08-08 09:52:44</p>
<p>宁毅不介意看些八卦和热闹，倒是有些意外刘大彪也对此感兴趣。夭光逐渐亮起来时，那边的街道上一片呻吟之声，少女吃完了卷饼，低喃道：“待会要让入送些药去。”</p>
<p>“你倒是好心……”</p>
<p>宁毅只是敷衍地一说，少女的善心往往来得很古怪，城破时发馒头，这时送药，</p>
<p>2019-08-08 09:52:49</p>
<p>兴许都是一时兴起的好玩，不过，这次的说话，倒是有些出乎他的意料之外。</p>
<p>“我让他们打起来的。”晨风拂动了那层面纱，面纱之下，少女精致的双唇似乎微微勾勒了起来，像是在说着一件颇为自豪的杰作。</p>
<p>“嗯？”</p>
<p>“我让他们打起来的o阿。”刘大彪得意地笑起来，“城破的时候，他们往这边过来，我来发馒头，发的也不多，不过有的入就打起来了，我也没去管。”</p>
<p>“听说了，有个孩子的馒头当着你的面被抢了，你也没管。”</p>
<p>“嗯，我做了善事就行了o阿，我是好入了，反正会有入吃到我的馒头，谁吃到的，有什么关系呢。在乎心诚嘛。”她说着，“他们也不认识我，就以为我是个有些小背景的富家小姐，有一次我过来，把我的包袱也抢了呢。所以后来我就驾了马车过来，在马车上发了。”</p>
<p>对于少女说的这些事，宁毅在霸刀营中已经听过几次，这边街上入多，少女发馒头或者之类的东西，哪里管的了所有入，她发的东西也不多，就一个包袱，发完了就心安理得的走入，所以大家基本也以为她是只求自己心安而已。</p>
<p>“发的东西不多，我就发给几个入，那样以来，每一个入就有很多啦。有些入忽然拿到了十个馒头，那可吃不完，想要藏起来，又被入发现了，就有入来抢。后来我也发点腊肉什么的，反正是很好吃的东西，这边有个金老大，有个田老大，还有……反正有好几个头领，手下都有些入，欺负不了我们这边的，只好欺负街上的入了，每次东西都被他们抢来抢去，后来我去发东西，都没什么入敢要了。”刘大彪用手背靠在唇上笑了起来，“不过我可不是坏入，他们不敢要，我还是要发o阿，有些入饿得不行了，总是会铤而走险</p>
<p>2019-08-08 09:52:59</p>
<p>的，我听说，有个孩子为了抢些东西给他妈妈吃，被打成残废了呢。呵呵……”</p>
<p>日光渐渐升起来，少女穿着靛蓝色的碎花裙，戴着斗篷，没有背负那巨剑的霸气时，看起来柔美而纯净，但这时候却又一股邪魅的感觉融在那笑声里。宁毅皱起眉头来，陡然间想到一个可能：“你不会是想……”</p>
<p>少女放下手，那笑声停了下来，面纱后的入微微显得有些安静了，好半晌，方才说话：“我每次都多发一点东西，但肯定是不够的，我又不发那些看起来很强壮的入，每次当然是看见谁需要我就给谁啦。十个馒头，二十个馒头，一斤腊肉……这些入，在城里过惯了，什么事情都不敢做，给他们一个馒头，立刻就吃掉，十个馒头吃不完了吧，一斤腊肉舍不得吃了吧，每次都被抢，被欺负的就一直被欺负，有入饿死，有入病死，有入被打得重伤，一直痛痛死了，真可怜。总算在前几夭，有个</p>
<p>2019-08-08 09:53:21</p>
<p>十五岁的男孩，被抢了馒头，又被打了一</p>
<p>2019-08-08 09:53:33</p>
<p>顿，他抢了一把刀，捅死了过来抢东西的三个入，然后就被抓了，我叫入去保下了他，让他加入我霸刀营的亲卫队里……然后这几夭，他们很多入就都打起来了。”</p>
<p>远远的，似乎有黑翎卫的执法队往这边过来，少女便又笑了起来：“是法平等、无有高下。可是这等世道，若是连手都不敢动的，就算我给了他们东西，也不会是他们白勺。那我就只能教他们用自己的双手去拿了。给了他们东西都拿不稳，还得我看着他们把东西吃完，我又不是他们白勺娘亲，凭什么？这块地方是我们用血抢下来的，他们就是因为这样所以丢了这块地方，如果还不懂这些，就只能去死了。”</p>
<p>她微微仰起了下巴：“我也希望有一夭，可以有一块地方，能让他们拿到一样东西，就成了他们自己的，可是在这之前，得把那些不该拿到那么多东西的入都给打败才行。这个世界上，有太多入拿到了不属于他们白勺东西了……”</p>
<h5 id="注-关于血性争取">注: 关于血性，争取</h5>
<p>第三一二章 错估、脑补、误会</p>
<p>2019-08-08 13:09:05</p>
<p>从古至今。每一次皇朝的更替，一个国家会变成什么样子，从它建立之初，其实就已经决定了。”</p>
<p>2019-08-08 13:09:19</p>
<p>这样说的原因是，每一个朝代开朝时，皇上或者说当时的思想风潮会决定这个朝代的……”他抬起手划了划，“会决定这个朝代的统治阶层更重视什么，如果我们要求的只有一点，比如说国家强盛，那很简单，减少制约放手让地方发展，不出三代，只要这个国家还在，我们就可以把外族踏平，收复幽燕，谁说不行呢。”</p>
<h5 id="注-关于政府体制">注: 关于政府体制</h5>
<p>2019-08-08 13:10:01</p>
<p>“诸朝皆以弱亡，独汉以强亡，我们像汉朝一样治国，然后就可以像汉朝一样灭亡。汉亡之后，历朝历代都更讲究集权与制衡，帝王术说要手下平级的人不停的猜忌、达到平衡。现在我们说要振兴武备要如何如何，其实有一条路很简单，假设……这里只做假设，假设能做到，当今圣上只要将下面的掌握放开，套上汉时的标准，不出六十年，假如武朝还在，那么北面若还有辽、金的立足寸土，我头砍给你。”</p>
<p>2019-08-08 13:10:08</p>
<p>康贤看着他：“假设？”</p>
<p>“嗯，假设。”宁毅点头：“之所以是假设，是因为不负责任，现在的局面下，假如真的这样做，没有二十年就诸侯并起了。但我这样讲，只是想说，每朝每代，上面侧重什么，其实都是可以控制的，只是能选的方向不多，往一个方向倒，另外一些东西就得放弃掉。我们选了如今这江宁繁华，就看不到虎贲如云、踏破贺兰山的景象，都是自己选的。”</p>
<p>“那又如何？”</p>
<p>2019-08-08 13:10:37</p>
<p>明公，我知道，儒家所谓的万世开太平，就是想要找到一个最好的状态。可是今天咱们不说道，只说用，武朝建立至今，走的方向。已经定了，咱们儒家建立的那张网，它会不断的收紧、收紧、再收紧。从古至今，为什么变法者从无好下场，因为任何一个系统都会自发地维护自己的状态和趋势，北伐为什么会出问题，因为这张网已经盘根错节，谁想要大展拳脚。</p>
<p>2019-08-08 13:10:46</p>
<p>谁就全身上下都血淋淋的。好事坏事都一样，因为谁都不会有大展拳脚的空间，这样对国家最好。这是立国之时就决定了的，就是不让你乱动！假如这次北伐成功，我们真是运气到了。用的力也是够大，但接下来会怎么样，你看不到吗？网还会收紧的。”</p>
<p>2019-08-08 13:15:01</p>
<p>宁毅偏着头笑了笑：“我这次从杭州回来，揽了很多关系。苏家有一个亲戚叫宋茂宋予繁，在外地当知州，明公，接下来会怎么样你也清楚，等他过来，会来拜访我这边。我们两边的利益就挂在一起，变得更厉害，但也许他是个贪官，我将来就被他牵累，这是风险。成国公主府的产业属于皇家，看起来自己管自己，可是。您背后到底有怎样的牵扯勾连，你自己清楚，这些人，代表各种利益的都有，秦公被刺杀。动手的是那些不想与辽国开战的商人，明公。你后面有没有这类人？”</p>
<p>康贤皱着眉头。</p>
<p>2019-08-08 13:15:06</p>
<p>宁毅继续说道：“谁都不能动，立国之初，这些就已经决定了，到现在，当今圣上都改不了，想要改，连他都会碰得头破血流，也许有两代入愿意冒这样的危险来把国家导向另一边，可谁真的敢？”</p>
<p>“明公你现在研究的是理学，接下来就可以说存天理灭人欲，人按照什么规矩去过，一条一划全都规定清楚，男人如何女人如何圣人如何，全拿模子刻出来。这是道，但要说用，就是让人动不了，越来越动不了。假如当今天下就我武朝，就这样发展下去一千年后武朝都不会垮，这就是为万世开太平……可国家是有敌人的。我们选了这个方向，我们若身边都是规规条条，各种利益缠身，到头来就是如今北伐的情景，我打不过别人，而且越来越打不过……”</p>
<p>“事实上与你说的自然有差距，真走</p>
<p>2019-08-08 13:15:14</p>
<p>偏了，敢于变法，敢撞得血淋淋的人，哪朝哪代都有。”想了很久，康贤才缓缓地说起来，“不过大体与你说的类似，便是这</p>
<p>2019-08-08 13:15:21</p>
<p>样，跟你在那霸刀营中做的事情又有何关系？”</p>
<p>“说万世开太平，有些大了。其实治国也好从政也好，一般就是查漏补缺，好像提着一杆秤，一直在晃，哪里出问题了哪里打个补丁，大局呢，就一直往一个方向走，孟子说五百年必有王者兴，一个朝代，五百年也就到头了，因为收得太紧了，别人越来越难有希望，怨气越来越大。然后轰的一下，秤砣掉到地上，一掉到地上，人就过得连猪狗都不如了……”</p>
<p>宁毅顿了顿：“但也许有一种办法可以避免这样，也许不会最好，但可以避免最坏。”</p>
<p>“就是你做的那些？”</p>
<p>“就是一句话，少数服从多数。”</p>
<p>康贤笑了起来：“真到那时候，你背后的，我背后的，这些少数岂会服从多数？”“那是细节问题。明公，儒家传承这么多年，每一代更替，上位的都叫做皇上。文化传承决定整个规矩、体制存在的方式。假设数百年上千年后有这样的一个体制，三五年一更替，有人想要造反，他的人多，他自然就可以上去，那还有人会造反吗？人不如猪狗的年月，就没有了。”</p>
<p>“哪会这样，人多就说话，猜拳吗？而且你可知道乡愿德之贼也的意思？假如你上位了，你愿意将手中权力让出来？你上位的几年就要把这些东西打得干干净净！而且要保证这一方法的传续，你……你置圣上于何地？你这想法是大逆不道。”说到最后，康贤已经下意识的压低了声音。</p>
<p>宁毅看着他：“都是旁枝末节，明公，别告诉我你想不到，是大家信的文化决定这朝代是什么样子，文化，决定体制——我把它叫做体制。若是所有人都信少数服从多数是真理，有些东西就会慢慢磨合出来……而且那也应该是几百年后的事情</p>
<p>2019-08-08 13:15:31</p>
<p>了。少数服从多数，大家都在说，我只是用另外一种方法说一说而已。明公，咱们说句大逆不道的。假如武朝撑不过五百年，该不该有点新的东西？”</p>
<h5 id="注-文人的尺-武人的刀">注: 文人的尺 武人的刀</h5>
<p>2019-01-06 09:29:40</p>
<p>周侗摇了摇头：“义气豪迈，那不是刀，只是一个人的姓情。谭大师曾经跟我说起过，在好的世道上，文人心里有一把尺，用之丈量世事人心，厘定规矩，而武人心里，要有一把刀，这刀太利了不行，但是没有也不行，当那些规矩老了，不合用了，世道走岔了，武人要用刀把它斩断，如此方有新的规矩出来。”</p>
<p>2019-01-06 09:29:31</p>
<p>他低头望着茶杯中的茶水：“事情如此，因为习武之人，心姓才是最敏感的，匹夫一怒血溅十步。人心里的刀，就是良知血姓，对便对错便错。文人厘定了规矩，可他们只会修修补补，做错了事他们一堆理由。可良知血姓最为直接，错了肯定是出了问题，就该打破他出更好的规矩！所以豪迈不是刀，刀是对错，是大智大勇，是杀规矩！”</p>
<p>“世人被逼无奈，都上山当匪？因为大家都这样做，所以那不是刀！随波逐流不是刀，做他人做不了不敢做不去做的事情才是刀！心中记着道义，倒是每天说自己被逼无奈的不是刀，义之所在虽千万人而吾往才是刀！林冲心中无刀，他被逼成那样，仍只敢活在规矩里，因为他知道，被逼无奈上山当匪那就是规矩，上山当匪便要滥杀无辜，那是规矩，有规矩他就只跟规矩走。嘿，他杀了人造了反，连皇帝老子都不要了，却没有胆子打破心里半点的规矩。他武艺再好又有何用……废人一个！”</p>
<p>第五六一章 当时的曲调（上）</p>
<p>2019-01-07 15:55:38</p>
<p>这样的事情。主要也是因为宁毅的教育理念所致了。在他而言，男人最重要的品质是节制，虽然他也希望孩子过得幸福，但百分百的幸福，绝不是一个孩子——尤其是男孩子——所需要的。毋宁说，绝对的幸福。是一个孩子成长的过程中应该被避免的东西，若不然。这个孩子将来就很难成为一个真正的男人。</p>
<h5 id="注-家庭教育">注: 家庭教育</h5>
<p>多看笔记 来自多看阅读 for iOS</p>
]]></content>
		</item>
		
		<item>
			<title>摸鱼儿</title>
			<link>https://blog.v5u.win/%E6%91%B8%E9%B1%BC%E5%84%BF/</link>
			<pubDate>Wed, 07 Aug 2019 02:05:25 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E6%91%B8%E9%B1%BC%E5%84%BF/</guid>
			<description>摸鱼儿 问世间、情是何物，直教生死相许。 天南地北双飞客，老翅几回寒暑。 欢乐趣，离别苦。就中更有痴儿女，君应有语， 渺万里层云，千山暮雪，只影为谁</description>
			<content type="html"><![CDATA[<p>摸鱼儿</p>
<p>问世间、情是何物，直教生死相许。</p>
<p>天南地北双飞客，老翅几回寒暑。</p>
<p>欢乐趣，离别苦。就中更有痴儿女，君应有语，</p>
<p>渺万里层云，千山暮雪，只影为谁去。</p>
<p>横汾路，寂寞当年萧鼓。荒烟依旧平楚，招魂楚些何嗟及。</p>
<p>山鬼自啼风雨，天也妒。未信与、莺儿燕子俱黄土。</p>
<p>千秋万古。为留待骚人，狂歌痛饮，来访雁邱处。</p>
<p>原作：</p>
<p>《摸鱼儿》 （元好问）</p>
<p>乙丑岁赴试并州，道逢捕雁者云，今旦获一雁，杀之矣。其脱网者悲鸣不能去，竟自投於地而死。予因买得之，葬之汾水之上，累石为识，号曰雁丘。时同行者多为赋诗，予亦有雁丘辞，旧所作无宫商，今改定之：</p>
<p>恨人间、情是何物，直教生死相许。</p>
<p>天南地北双飞客，老翅几回寒暑。</p>
<p>欢乐趣。离别苦。是中更有痴儿女。</p>
<p>君应有语。</p>
<p>渺万里层云，千山暮景，只影为谁去。</p>
<p>横汾路。寂寞当年箫鼓。荒烟依旧平楚。</p>
<p>招魂楚些何嗟及，山鬼自啼风雨。</p>
<p>天也妒。未信与、莺儿燕子俱黄土。</p>
<p>千秋万古。为留待骚人，狂歌痛饮，来访雁丘。</p>
<p>译：</p>
<p>当年，元好问去并州赴试，途中遇到一个捕雁者。这个捕雁者告诉元好问今天遇到的一件奇事：他今天设网捕雁，捕得一只，但一只脱网而逃。岂料脱网之雁并不飞走，而是在他上空盘旋一阵，然后投地而死。元好问看看捕雁者手中的两只雁，一时心绪难平。便花钱买下这两只雁，接着把它们葬在汾河岸边，垒上石头做为记号，号曰“雁邱”，并作《雁邱词》。</p>
]]></content>
		</item>
		
		<item>
			<title>Go Liteide IDE</title>
			<link>https://blog.v5u.win/posts/go/go-liteide/</link>
			<pubDate>Fri, 02 Aug 2019 16:33:56 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-liteide/</guid>
			<description>[TOC] liteide是专门为go编写的一个基于qt5的IDE，免费开源跨平台。 LiteIDE 是一个轻量级的开源跨平台 Go语言 IDE. 作者: 七叶 (visualfc) 支持 Windows</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h3 id="liteide是专门为go编写的一个基于qt5的ide免费开源跨平台">liteide是专门为go编写的一个基于qt5的IDE，免费开源跨平台。</h3>
<p><em>LiteIDE 是一个轻量级的开源跨平台 Go语言 IDE.</em> 作者: 七叶 (visualfc)</p>
<p>支持 Windows，Linux，Mac。</p>
<p>下载地址：https://github.com/visualfc/liteide.git</p>
<p>或命令行安装：<code>brew search liteide</code></p>
<h3 id="配置环境变量">配置环境变量</h3>
<ol>
<li>切换当前环境 &gt; system—&gt; darwin64-home, 点击旁边的小灰框(编辑当前环境)</li>
<li>在打开的文件中设置 go 环境： GOROOT, GOPATH,GOBIN, GOPROXY</li>
<li>注意查看下方的&quot;事件记录&quot; 输出日志，确认不在有报错</li>
</ol>
<h3 id="编译运行">编译运行</h3>
<p>BR : go build &amp; run</p>
<p>R : 直接运行可执行文件</p>
<p>FR : go run file.go</p>
<p>B : go build</p>
<h3 id="调试">调试</h3>
<p>用 <a href="https://github.com/visualfc/liteide">LiteIDE</a> 可以方便调试 Go 程序，它是用的 GDB 调试的，如果没有安装 GDB 的话，运行 “调试” 就会提示：</p>
<p>Mac没有内置gdb，所以需要使用brew安装，但是Mac又不信任 gdb ，所以还要生成信任证书给gdb用。</p>
<p>参考：shttps://windmt.com/2016/01/07/installing-gdb-on-macos/</p>
<p>2.4 设置编译选项及编译</p>
<p>编译-&gt;编译配置，设置编译参数。在BUILDARGS添加**-gcflags &ldquo;-N -l&rdquo;**，目的是去掉编译优化，方便调试。</p>
<p>按F5启动调试，程序在main函数处停止</p>
<p>通过F10单步调试，可以看到i、j的变化（好像会稍微延迟那么0.X秒）</p>
]]></content>
		</item>
		
		<item>
			<title>flutter安装</title>
			<link>https://blog.v5u.win/posts/system/system-flutter%E5%AE%89%E8%A3%85/</link>
			<pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-flutter%E5%AE%89%E8%A3%85/</guid>
			<description>flutter安装 git 下载 flutter：git clone -b stable https://github.com/flutter/flutter.git 配置.zshrc export PATH=/Users/fanjinlong/dev/flutter/flutter/bin:$PATH export ANDROID_HOME=/Users/fanjinlong/Library/Android/sdk export PATH=${PATH}:${ANDROID_HOME}/tools export PATH=${PATH}:${ANDROID_HOME}/platform-tools export PUB_HOSTED_URL=https://pub.flutter-io.cn export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn # 记得配置完了，执行下 source ~/.zshrc 更新环境变量 命令行执</description>
			<content type="html"><![CDATA[<p>flutter安装</p>
<ol>
<li>git 下载 flutter：git clone -b stable <a href="https://github.com/flutter/flutter.git">https://github.com/flutter/flutter.git</a></li>
<li>配置.zshrc</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>export PATH<span style="color:#f92672">=</span>/Users/fanjinlong/dev/flutter/flutter/bin:$PATH
</span></span><span style="display:flex;"><span>export ANDROID_HOME<span style="color:#f92672">=</span>/Users/fanjinlong/Library/Android/sdk
</span></span><span style="display:flex;"><span>export PATH<span style="color:#f92672">=</span><span style="color:#e6db74">${</span>PATH<span style="color:#e6db74">}</span>:<span style="color:#e6db74">${</span>ANDROID_HOME<span style="color:#e6db74">}</span>/tools
</span></span><span style="display:flex;"><span>export PATH<span style="color:#f92672">=</span><span style="color:#e6db74">${</span>PATH<span style="color:#e6db74">}</span>:<span style="color:#e6db74">${</span>ANDROID_HOME<span style="color:#e6db74">}</span>/platform-tools
</span></span><span style="display:flex;"><span>export PUB_HOSTED_URL<span style="color:#f92672">=</span>https://pub.flutter-io.cn
</span></span><span style="display:flex;"><span>export FLUTTER_STORAGE_BASE_URL<span style="color:#f92672">=</span>https://storage.flutter-io.cn	
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 记得配置完了，执行下 source ~/.zshrc 更新环境变量</span>
</span></span></code></pre></div><ol start="3">
<li>命令行执行 <code>flutter doctor</code> 检查环境配置情况。</li>
<li>在 Android studio 中添加插件 flutter + dart</li>
<li>根据<code>flutter doctor</code> 解决所有必要的问题</li>
<li>运行 flutter run</li>
<li>如果不能运行，查看报错，比如 <code>flutter emulators</code>——&gt;<code>flutter emulators --launch Pixel_2_API_29</code>——&gt; <code>flutter run</code></li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>Running <span style="color:#e6db74">&#34;flutter pub get&#34;</span> in flutter_app...                         3.4s
</span></span><span style="display:flex;"><span>Using hardware rendering with device Android SDK built <span style="color:#66d9ef">for</span> x86. If you get graphics artifacts, consider
</span></span><span style="display:flex;"><span>enabling software rendering with <span style="color:#e6db74">&#34;--enable-software-rendering&#34;</span>.
</span></span><span style="display:flex;"><span>Launching lib/main.dart on Android SDK built <span style="color:#66d9ef">for</span> x86 in debug mode...
</span></span><span style="display:flex;"><span>Initializing gradle...
</span></span><span style="display:flex;"><span>540.5s <span style="color:#f92672">(</span>!<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Resolving dependencies...
</span></span><span style="display:flex;"><span>  634.0s <span style="color:#f92672">(</span>!<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Running Gradle task <span style="color:#e6db74">&#39;assembleDebug&#39;</span>...
</span></span><span style="display:flex;"><span>Running Gradle task <span style="color:#e6db74">&#39;assembleDebug&#39;</span>... Done                       147.6s <span style="color:#f92672">(</span>!<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Built build/app/outputs/apk/debug/app-debug.apk.
</span></span><span style="display:flex;"><span>Installing build/app/outputs/apk/app.apk...                         2.9s
</span></span><span style="display:flex;"><span>D/EGL_emulation<span style="color:#f92672">(</span> 4282<span style="color:#f92672">)</span>: eglMakeCurrent: 0xd681a0c0: ver <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">(</span>tinfo 0xd680f300<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>D/eglCodecCommon<span style="color:#f92672">(</span> 4282<span style="color:#f92672">)</span>: setVertexArrayObject: set vao to <span style="color:#ae81ff">0</span> <span style="color:#f92672">(</span>0<span style="color:#f92672">)</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>Syncing files to device Android SDK built <span style="color:#66d9ef">for</span> x86...
</span></span><span style="display:flex;"><span>I/OpenGLRenderer<span style="color:#f92672">(</span> 4282<span style="color:#f92672">)</span>: Davey! duration<span style="color:#f92672">=</span>788ms; Flags<span style="color:#f92672">=</span>1, IntendedVsync<span style="color:#f92672">=</span>1386986507632, Vsync<span style="color:#f92672">=</span>1386986507632, OldestInputEvent<span style="color:#f92672">=</span>9223372036854775807, NewestInputEvent<span style="color:#f92672">=</span>0, HandleInputStart<span style="color:#f92672">=</span>1386993436664, AnimationStart<span style="color:#f92672">=</span>1386993471165, PerformTraversalsStart<span style="color:#f92672">=</span>1386993474034, DrawStart<span style="color:#f92672">=</span>1387600641641, SyncQueued<span style="color:#f92672">=</span>1387601916409, SyncStart<span style="color:#f92672">=</span>1387607434150, IssueDrawCommandsStart<span style="color:#f92672">=</span>1387609441987, SwapBuffers<span style="color:#f92672">=</span>1387725240730, FrameCompleted<span style="color:#f92672">=</span>1387780735364, DequeueBufferDuration<span style="color:#f92672">=</span>31361000, QueueBufferDuration<span style="color:#f92672">=</span>260000,
</span></span><span style="display:flex;"><span>I/Choreographer<span style="color:#f92672">(</span> 4282<span style="color:#f92672">)</span>: Skipped <span style="color:#ae81ff">46</span> frames!  The application may be doing too much work on its main thread.     D/EGL_emulation<span style="color:#f92672">(</span> 4282<span style="color:#f92672">)</span>: eglMakeCurrent: 0xd681a300: ver <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">(</span>tinfo 0xd680f3d0<span style="color:#f92672">)</span>                                 D/eglCodecCommon<span style="color:#f92672">(</span> 4282<span style="color:#f92672">)</span>: setVertexArrayObject: set vao to <span style="color:#ae81ff">0</span> <span style="color:#f92672">(</span>0<span style="color:#f92672">)</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">0</span>                                            Syncing files to device Android SDK built <span style="color:#66d9ef">for</span> x86...            183,943ms <span style="color:#f92672">(</span>!<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>🔥  To hot reload changes <span style="color:#66d9ef">while</span> running, press <span style="color:#e6db74">&#34;r&#34;</span>. To hot restart <span style="color:#f92672">(</span>and rebuild state<span style="color:#f92672">)</span>, press <span style="color:#e6db74">&#34;R&#34;</span>.
</span></span><span style="display:flex;"><span>An Observatory debugger and profiler on Android SDK built <span style="color:#66d9ef">for</span> x86 is available at:
</span></span><span style="display:flex;"><span>http://127.0.0.1:52933/6NColDWV2ps<span style="color:#f92672">=</span>/
</span></span><span style="display:flex;"><span>For a more detailed help message, press <span style="color:#e6db74">&#34;h&#34;</span>. To detach, press <span style="color:#e6db74">&#34;d&#34;</span>; to quit, press <span style="color:#e6db74">&#34;q&#34;</span>.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Initializing hot reload...
</span></span><span style="display:flex;"><span>Reloaded <span style="color:#ae81ff">0</span> of <span style="color:#ae81ff">455</span> libraries in 956ms.
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>To run an emulator, run <span style="color:#e6db74">&#39;flutter emulators --launch &lt;emulator id&gt;&#39;</span>.
</span></span><span style="display:flex;"><span>To create a new emulator, run <span style="color:#e6db74">&#39;flutter emulators --create [--name xyz]&#39;</span>	
</span></span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Go Crontab</title>
			<link>https://blog.v5u.win/posts/go/go-crontab/</link>
			<pubDate>Fri, 19 Jul 2019 16:51:27 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-crontab/</guid>
			<description>[TOC] 计划任务 from Godoc 包cron实现了cron规范解析器和作业运行器。 安装 要下载特定的标记版本，请运行: go get github.com/robfig/cron/v3@v3.0.0 将其导入您的程序中: import “github.</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="计划任务">计划任务</h1>
<p>from Godoc</p>
<p>包cron实现了cron规范解析器和作业运行器。</p>
<p>安装
要下载特定的标记版本，请运行:</p>
<p><code>go get github.com/robfig/cron/v3@v3.0.0</code>
将其导入您的程序中:</p>
<p><code>import “github.com/robfig/cron/v3”</code>
由于Go Modules的使用，它需要Go 1.11或更高版本。</p>
<p>用法
呼叫者可以在给定的时间表上注册要调用的Func。Cron将在他们自己的goroutines中运行它们。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">New</span>()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">AddFunc</span>(<span style="color:#e6db74">&#34;30 * * * *&#34;</span>, <span style="color:#66d9ef">func</span>() { <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Every hour on the half hour&#34;</span>) })
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">AddFunc</span>(<span style="color:#e6db74">&#34;30 3-6,20-23 * * *&#34;</span>, <span style="color:#66d9ef">func</span>() { <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;.. in the range 3-6am, 8-11pm&#34;</span>) })
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">AddFunc</span>(<span style="color:#e6db74">&#34;CRON_TZ=Asia/Tokyo 30 04 * * * *&#34;</span>, <span style="color:#66d9ef">func</span>() { <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Runs at 04:30 Tokyo time every day&#34;</span>) })
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">AddFunc</span>(<span style="color:#e6db74">&#34;@hourly&#34;</span>,      <span style="color:#66d9ef">func</span>() { <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Every hour, starting an hour from now&#34;</span>) })
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">AddFunc</span>(<span style="color:#e6db74">&#34;@every 1h30m&#34;</span>, <span style="color:#66d9ef">func</span>() { <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Every hour thirty, starting an hour thirty from now&#34;</span>) })
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">Start</span>()
</span></span><span style="display:flex;"><span>..
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Funcs are invoked in their own goroutine, asynchronously.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Funcs may also be added to a running Cron
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">AddFunc</span>(<span style="color:#e6db74">&#34;@daily&#34;</span>, <span style="color:#66d9ef">func</span>() { <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Every day&#34;</span>) })
</span></span><span style="display:flex;"><span>..
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Inspect the cron job entries&#39; next and previous run times.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">inspect</span>(<span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">Entries</span>())
</span></span><span style="display:flex;"><span>..
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">Stop</span>()  <span style="color:#75715e">// Stop the scheduler (does not stop any jobs already running).
</span></span></span></code></pre></div><h3 id="cron表达格式">CRON表达格式</h3>
<p>cron表达式表示一组时间，使用5个以空格分隔的字段。</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>强制性？</th>
<th>允许值</th>
<th>允许特殊字符</th>
</tr>
</thead>
<tbody>
<tr>
<td>分钟</td>
<td>是的</td>
<td>0-59</td>
<td>* /， -</td>
</tr>
<tr>
<td>小时</td>
<td>是的</td>
<td>0-23</td>
<td>* /， -</td>
</tr>
<tr>
<td>一个月的某一天</td>
<td>是的</td>
<td>1-31</td>
<td>* /， - ？</td>
</tr>
<tr>
<td>月</td>
<td>是的</td>
<td>1-12或JAN-DEC</td>
<td>* /， -</td>
</tr>
<tr>
<td>星期几</td>
<td>是的</td>
<td>0-6或SUN-SAT</td>
<td>* /， - ？</td>
</tr>
<tr>
<td>月份和星期几字段值不区分大小写。“SUN”，“Sun”和“sun”同样被接受。</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>该格式的具体解释基于Cron维基百科页面：https://en.wikipedia.org/wiki/Cron</p>
<h3 id="替代格式">替代格式</h3>
<p><strong>备用Cron表达式格式支持其他字段，如秒。您可以通过创建自定义Parser来实现，如下所示。</strong></p>
<p>cron.New（
cron.WithParser（
cron.NewParser（
cron.SecondOptional | cron.Minute | cron.Hour | cron.Dom | cron.Month | cron.Dow | cron.Descriptor）））
**由于添加Seconds是对标准cron规范的最常见修改，cron提供了一个内置函数来执行此操作，这相当于您之前看到的自定义解析器，除了它的秒字段是必需的: **</p>
<p>cron.New（cron.WithSeconds（））
这模仿Quartz，最流行的替代Cron计划格式：http://www.quartz-scheduler.org/documentation/2.4.0-SNAPSHOT/tutorials/tutorial-lesson-06.html</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span> <span style="color:#75715e"># ┌───────────── min (0 - 59)</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e"># │ ┌────────────── hour (0 - 23)</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e"># │ │ ┌─────────────── day of month (1 - 31)</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e"># │ │ │ ┌──────────────── month (1 - 12)</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e"># │ │ │ │ ┌───────────────── day of week (0 - 6) (0 to 6 are Sunday to</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e"># │ │ │ │ │                  Saturday, or use names; 7 is also Sunday)</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e"># │ │ │ │ │</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e"># │ │ │ │ │</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e"># * * * * *  command to execute</span>
</span></span></code></pre></div><h2 id="cron特定字符说明">cron特定字符说明</h2>
<p>特殊字符
星号（*）</p>
<p>星号表示cron表达式将匹配该字段的所有值; 例如，在第5个字段（月）中使用星号表示每个月。</p>
<p>斜线（/）</p>
<p>斜杠用于描述范围的增量。例如，第1场（分钟）中的3-59 / 15表示小时的第3分钟，之后每15分钟。形式“* \ / &hellip;”等同于“first-last / &hellip;”形式，即在该字段的最大可能范围内的增量。形式“N / &hellip;”被接受为“N-MAX / &hellip;”，即从N开始，使用增量直到该特定范围的结束。它没有环绕。</p>
<p>逗号（，）</p>
<p>逗号用于分隔列表的项目。例如，在第5个字段（星期几）中使用“MON，WED，FRI”将表示星期一，星期三和星期五。</p>
<p>连字符（ - ）</p>
<p>连字符用于定义范围。例如，9-17表示每天上午9点到下午5点之间的每小时。</p>
<p>问号（？）</p>
<p>可以使用问号而不是&rsquo;*&lsquo;来留下日期或星期几的空白。</p>
<h4 id="预定义的时间表">预定义的时间表</h4>
<p>您可以使用几个预定义的计划之一来代替cron表达式。</p>
<p>进入| 说明| 相当于
&mdash;&ndash; | &mdash;&mdash;&mdash;&ndash; &mdash;&mdash;&mdash;&mdash;-
@yearly（或@annually）| 每年一次，午夜，1月1日| 0 0 1 1 *
@monthly | 每月运行一次，午夜，月初| 0 0 1 * *
@weekly | 每周一次，午睡/周日午夜| 0 0 * * 0
@daily（或@midnight）| 每天运行一次，午夜| 0 0 * * *
@hourly | 每小时运行一次，小时开始| 0 * * * *</p>
<h4 id="间隔">间隔</h4>
<p>您还可以安排作业以固定的时间间隔执行，从添加或运行cron开始。这可以通过格式化cron规范来支持，如下所示:</p>
<p>@every <!-- raw HTML omitted -->
其中“duration”是time.ParseDuration（http://golang.org/pkg/time/#ParseDuration）接受的字符串。</p>
<p>例如，“@ every 1h30m10s”表示在1小时30分10秒之后激活的计划，然后是之后的每个间隔。</p>
<p>注意: 间隔不会考虑作业运行时。例如，如果作业需要3分钟才能运行，并且计划每5分钟运行一次，则每次运行之间只有2分钟的空闲时间。</p>
<h3 id="cron举例说明">cron举例说明</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">每隔1分钟执行一次</span>:  <span style="color:#f92672">*/</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">*</span> <span style="color:#f92672">*</span> <span style="color:#f92672">*</span> <span style="color:#960050;background-color:#1e0010">?</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">每天23点执行一次</span>:  <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">23</span> <span style="color:#f92672">*</span> <span style="color:#f92672">*</span> <span style="color:#960050;background-color:#1e0010">?</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">每天凌晨1点执行一次</span>:  <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">*</span> <span style="color:#f92672">*</span> <span style="color:#960050;background-color:#1e0010">?</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">每月1号凌晨1点执行一次</span>:  <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">*</span> <span style="color:#960050;background-color:#1e0010">?</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">在26分</span><span style="color:#960050;background-color:#1e0010">、</span><span style="color:#ae81ff">29</span><span style="color:#a6e22e">分</span><span style="color:#960050;background-color:#1e0010">、</span><span style="color:#ae81ff">33</span><span style="color:#a6e22e">分执行一次</span>:  <span style="color:#ae81ff">26</span>,<span style="color:#ae81ff">29</span>,<span style="color:#ae81ff">33</span> <span style="color:#f92672">*</span> <span style="color:#f92672">*</span> <span style="color:#f92672">*</span> <span style="color:#960050;background-color:#1e0010">?</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">每天的0点</span><span style="color:#960050;background-color:#1e0010">、</span><span style="color:#ae81ff">13</span><span style="color:#a6e22e">点</span><span style="color:#960050;background-color:#1e0010">、</span><span style="color:#ae81ff">18</span><span style="color:#a6e22e">点</span><span style="color:#960050;background-color:#1e0010">、</span><span style="color:#ae81ff">21</span><span style="color:#a6e22e">点都执行一次</span>:  <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">13</span>,<span style="color:#ae81ff">18</span>,<span style="color:#ae81ff">21</span> <span style="color:#f92672">*</span> <span style="color:#f92672">*</span> <span style="color:#960050;background-color:#1e0010">?</span>
</span></span></code></pre></div><h4 id="时区">时区</h4>
<p>默认情况下，所有解释和计划都在计算机的本地时区（time.Local）中完成。您可以在构造中指定不同的时区:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">New</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">WithLocation</span>(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">UTC</span>))
</span></span></code></pre></div><p>单个cron调度还可以通过在cron规范的开头提供<code>CRON_TZ=Asia/Tokyo</code>.覆盖它们将被解释的时区。</p>
<p>例如:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#a6e22e">Runs</span> <span style="color:#a6e22e">at</span> <span style="color:#ae81ff">6</span><span style="color:#a6e22e">am</span> <span style="color:#a6e22e">in</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Local</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">New</span>().<span style="color:#a6e22e">AddFunc</span>(<span style="color:#e6db74">&#34;0 6 * * ?&#34;</span>, <span style="color:#f92672">...</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#a6e22e">Runs</span> <span style="color:#a6e22e">at</span> <span style="color:#ae81ff">6</span><span style="color:#a6e22e">am</span> <span style="color:#a6e22e">in</span> <span style="color:#a6e22e">America</span><span style="color:#f92672">/</span><span style="color:#a6e22e">New_York</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">nyc</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">LoadLocation</span>(<span style="color:#e6db74">&#34;America/New_York&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">WithLocation</span>(<span style="color:#a6e22e">nyc</span>))
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">AddFunc</span>(<span style="color:#e6db74">&#34;0 6 * * ?&#34;</span>, <span style="color:#f92672">...</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#a6e22e">Runs</span> <span style="color:#a6e22e">at</span> <span style="color:#ae81ff">6</span><span style="color:#a6e22e">am</span> <span style="color:#a6e22e">in</span> <span style="color:#a6e22e">Asia</span><span style="color:#f92672">/</span><span style="color:#a6e22e">Tokyo</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">New</span>().<span style="color:#a6e22e">AddFunc</span>(<span style="color:#e6db74">&#34;CRON_TZ=Asia/Tokyo 0 6 * * ?&#34;</span>, <span style="color:#f92672">...</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#a6e22e">Runs</span> <span style="color:#a6e22e">at</span> <span style="color:#ae81ff">6</span><span style="color:#a6e22e">am</span> <span style="color:#a6e22e">in</span> <span style="color:#a6e22e">Asia</span><span style="color:#f92672">/</span><span style="color:#a6e22e">Tokyo</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">WithLocation</span>(<span style="color:#a6e22e">nyc</span>))
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">SetLocation</span>(<span style="color:#e6db74">&#34;America/New_York&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">AddFunc</span>(<span style="color:#e6db74">&#34;CRON_TZ=Asia/Tokyo 0 6 * * ?&#34;</span>, <span style="color:#f92672">...</span>)
</span></span></code></pre></div><p>传统兼容性还支持前缀“TZ =(TIME ZONE)”。</p>
<p>请注意，在夏令时跨越式过渡期间安排的作业将无法运行！</p>
<p>作业包装机/链条</p>
<p>Cron运行器可以配置一系列作业包装器，以便为所有提交的作业添加横切功能。例如，它们可用于实现以下效果:</p>
<ul>
<li>从作业中恢复任何恐慌（默认激活）</li>
<li>如果先前的运行尚未完成，则延迟作业的执行</li>
<li>如果之前的运行尚未完成，则跳过作业的执行</li>
<li>记录每个作业的调用
使用<code>cron.WithChain</code>选项为添加到cron的所有作业安装包装器:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">WithChain</span>(
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">SkipIfStillRunning</span>(<span style="color:#a6e22e">logger</span>),
</span></span><span style="display:flex;"><span>))
</span></span></code></pre></div><p>通过显式包装它们来为各个作业安装包装器:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">job</span> = <span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">NewChain</span>(
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">SkipIfStillRunning</span>(<span style="color:#a6e22e">logger</span>),
</span></span><span style="display:flex;"><span>).<span style="color:#a6e22e">Then</span>(<span style="color:#a6e22e">job</span>)
</span></span></code></pre></div><p>线程安全
由于Cron服务与调用代码同时运行，因此必须采取一些措施以确保正确同步。</p>
<p>只要调用者确保调用在它们之间进行排序之前有明确的发生，所有cron方法都被设计为正确同步。</p>
<p>记录
Cron定义了一个Logger接口，它是github.com/go-logr/logr中定义的接口的一个子集。它有两个日志记录级别（信息和错误），参数是键/值对。这使得cron日志记录可以插入结构化日志记录系统。提供了一个适配器[Verbose] PrintfLogger来包装标准库* log.Logger。</p>
<p>为了进一步了解Cron操作，可以激活详细日志记录，这将记录作业运行，调度决策以及添加或删除的作业。使用一次性记录器激活它，如下所示:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">New</span>(
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">WithLogger</span>(
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">VerbosePrintfLogger</span>(<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stdout</span>, <span style="color:#e6db74">&#34;cron: &#34;</span>, <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">LstdFlags</span>))))
</span></span></code></pre></div><p>履行
Cron条目存储在一个数组中，按其下一个激活时间排序。Cron睡着，直到下一份工作开始运行。</p>
<p>醒来后:</p>
<ul>
<li>它运行在该秒钟上处于活动状态的每个条目</li>
<li>它计算运行的作业的下一个运行时间</li>
<li>它按下一个激活时间重新排序条目数组。</li>
<li>它会一直睡到最快的工作。</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Go Crontab v3</title>
			<link>https://blog.v5u.win/posts/go/go-crontab-v3/</link>
			<pubDate>Fri, 19 Jul 2019 16:51:27 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-crontab-v3/</guid>
			<description>[TOC] 关于cron更新 Cron V3已经发布！ 要下载特定的标记版本，请运行: go get github.com/robfig/cron/v3@v3.0.0 将其导入您的程序中: import &amp;quot;github.com/robfig/cron/v3&amp;quot; 由于Go Modules的使用，它需要Go 1.1</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<hr>
<h2 id="关于cron更新">关于cron更新</h2>
<h3 id="cron-v3已经发布">Cron V3已经发布！</h3>
<p>要下载特定的标记版本，请运行:</p>
<p><code>go get github.com/robfig/cron/v3@v3.0.0</code>
将其导入您的程序中:</p>
<p><code>import &quot;github.com/robfig/cron/v3&quot;</code>
由于Go Modules的使用，它需要Go 1.11或更高版本。</p>
<p>请参阅此处的文档：http://godoc.org/github.com/robfig/cron</p>
<p>本文档的其余部分介绍了v3的进展以及希望从早期版本升级的用户的重大更改列表。</p>
<p>升级到v3(2019年6月)
cron v3是对库的重大升级，可以解决所有未解决的错误，功能请求和粗糙边缘。它基于master的合并，其中包含对多年来发现的问题的各种修复，以及v2分支，其中包含一些向后兼容的功能，例如删除cron作业的功能。此外，v3增加了对Go Modules的支持，清除了时区支持等粗糙边缘，并修复了许多错误。</p>
<h3 id="新功能">新功能:</h3>
<p><strong>支持Go模块。调用者现在必须导入此库 github.com/robfig/cron/v3，而不是gopkg.in/&hellip;</strong></p>
<p>修正了错误:</p>
<p>0f01e6b 解析器: 修复Dow和Dom的组合(＃70)
dbf3220 在向前滚动时钟时调整时间以处理不存在的午夜(＃157)
eeecf15 spec_test.go：确保在0增量处返回错误(＃144)
70971dc cron.Entries(): 更新快照请求以包含回复通道(＃97)
1cba5e6 cron：修复: 删除作业导致下一个预定作业运行得太晚(＃206)
标准cron规范默认解析(第一个字段是“分钟”)，可以轻松选择进入秒字段(石英兼容)。虽然，请注意不支持年份字段(Quartz中的可选)。</p>
<p>通过符合https://github.com/go-logr/logr项目的接口进行可扩展的键/值记录。</p>
<p>新的Chain＆JobWrapper类型允许您安装“拦截器”以添加如下所示的横切行为:</p>
<p>从工作中恢复任何恐慌
如果先前的运行尚未完成，则延迟作业的执行
如果先前的运行尚未完成，则跳过作业的执行
记录每个作业的调用
作业完成时的通知
它向后与v1和v2不兼容。这些更新是必需的:</p>
<p><strong>v1分支在cron规范的开头接受了一个可选的秒字段。这是非标准的，并导致了很多混乱。新的默认解析器符合Cron维基百科页面所描述的标准。</strong></p>
<p>更新: 要保留旧行为，请使用自定义解析器构建您的Cron：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// Seconds field, required
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">WithSeconds</span>())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Seconds field, optional
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">New</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">WithParser</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">SecondOptional</span> | <span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">Minute</span> | <span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">Hour</span> | <span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">Dom</span> | <span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">Month</span> | <span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">Dow</span> | <span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">Descriptor</span>))
</span></span></code></pre></div><p>最常见的改造是添加秒，v3为我们提供了内置的方法实现：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span>	<span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">cron</span>.<span style="color:#a6e22e">WithSeconds</span>())
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// 此处space 多了一个 seconds 的解析符
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">space</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;*/1 * * * * *&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">AddFunc</span>(<span style="color:#a6e22e">space</span>, <span style="color:#66d9ef">func</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Every seconds action&#34;</span>)
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">Start</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">select</span> {}
</span></span></code></pre></div><p>Cron类型现在接受构造上的功能选项而不是先前的特殊行为修改机制(设置字段，调用setter)。</p>
<p>更新: 必须更新设置Cron.ErrorLogger或调用Cron.SetLocation的代码以在构造时提供这些值。</p>
<p><strong>CRON_TZ现在是指定单个计划的时区的推荐方法，该计划由规范批准。遗留的“TZ =”前缀将继续得到支持，因为它是明确且易于执行的。</strong></p>
<p>更新: 无需更新。</p>
<p>**默认情况下，cron将不再恢复其运行的作业中的恐慌。**恢复可能会令人惊讶(参见问题＃192)，似乎与图书馆的典型行为不一致。相关地，该cron.WithPanicLogger选项已被删除以适应更通用的JobWrapper类型。</p>
<p>更新: 选择进行恐慌恢复并配置恐慌记录器:</p>
<p>cron.New(cron.WithChain(
cron.Recover(logger),  // or use cron.DefaultLogger
))
在添加对https://github.com/go-logr/logr的支持时，cron.WithVerboseLogger已删除，因为它与级别日志记录重复。</p>
<p>更新: 调用者应使用WithLogger并指定不丢弃Info日志的记录器。为方便起见，提供了一个包装*log.Logger：</p>
<p>cron.New(
cron.WithLogger(cron.VerbosePrintfLogger(logger)))</p>
<h3 id="背景---cron-spec格式">背景 - Cron spec格式</h3>
<p>**常用的有两种cron规范格式: **</p>
<p><strong>“标准”cron格式，在Cron维基百科页面上描述，由cron Linux系统实用程序使用。</strong> 格式为5位，没有秒级</p>
<p><strong>Quartz Scheduler使用的cron格式，通常用于Java软件中的预定作业</strong></p>
<p><code>CronExpression cexp = new CronExpression(&quot;0/5 * * * * ?&quot;);</code> Quartz格式为6位，和v1版本一样。</p>
<p>该软件包的原始版本包含一个可选的“秒”字段，这使得它与这两种格式都不兼容。现在，“标准”格式是接受的默认格式，Quartz格式是选择加入的。</p>
]]></content>
		</item>
		
		<item>
			<title>go社区拒绝了try提案</title>
			<link>https://blog.v5u.win/posts/go/go-%E6%8B%92%E7%BB%9D%E4%BA%86try%E6%8F%90%E6%A1%88/</link>
			<pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-%E6%8B%92%E7%BB%9D%E4%BA%86try%E6%8F%90%E6%A1%88/</guid>
			<description>提案：内置的Go错误检查功能， try 该提案已经结束。谢谢大家，感谢您的投入。 在评论之前，请阅读详细的设计文档，并查看截至6月6日的摘要，截至6月</description>
			<content type="html"><![CDATA[<h2 id="提案内置的go错误检查功能-try">提案：内置的Go错误检查功能， <code>try</code></h2>
<p><strong>该提案已经结束。谢谢大家，感谢您的投入。</strong></p>
<p>在评论之前，请阅读详细的<a href="https://github.com/golang/proposal/blob/master/design/32437-try-builtin.md">设计文档，</a>并查看<a href="https://github.com/golang/go/issues/32437#issuecomment-499261947">截至6月6</a>日的<a href="https://github.com/golang/go/issues/32437#issuecomment-500613160">摘要，截至6月10</a>日的<a href="https://github.com/golang/go/issues/32437#issuecomment-500613160">摘要</a>，<em>最重要的是关于保持专注<strong>的</strong>建议</em>。您的问题或建议可能已经得到解答或提出。谢谢。</p>
<p>我们提出了一个新的内置函数<code>try</code>，专门用于消除<code>if</code>通常与Go中的错误处理相关的样板语句。建议不要更改其他语言。我们提倡使用现有<code>defer</code>语句和标准库函数来帮助扩充或包装错误。这种最小化的方法可以解决大多数常见情况，同时为语言增加很少的复 该<code>try</code>内置很容易解释，直接实现的，垂直的其它语言结构，并完全向后兼容。如果我们希望将来这样做，它还为扩展机制留下了开辟的道路。</p>
<p>[以下文字已经过编辑，可以更准确地反映设计文档。]</p>
<p>的<code>try</code>内置函数采用一个单一表达式作为参数。表达式必须求值为n + 1个值（其中n可能为零），其中最后一个值必须是type <code>error</code>。如果（final）error参数为nil，则返回前n个值（如果有），否则返回带有该错误的封闭函数。例如，代码如</p>
<pre tabindex="0"><code>f，错误 ：= os。打开（文件名）
 if err！= nil {
	 return ...，err   //其他结果的零值，如果有的话 
}
</code></pre><p>可以简化为</p>
<pre tabindex="0"><code>f  ：=  try（os。打开（文件名））
</code></pre><p><code>try</code>只能在自身返回<code>error</code>结果的函数中使用，并且该结果必须是封闭函数的最后一个结果参数。</p>
<p>该提案将去年GopherCon中提出的原始<a href="https://go.googlesource.com/proposal/+/master/design/go2draft-error-handling.md">设计草案</a>简化为其本质。如果需要错误扩充或包装，有两种方法：坚持使用久经考验的<code>if</code>语句，或者，使用语句“声明”错误处理程序<code>defer</code>：</p>
<pre tabindex="0"><code>defer  func（）{
	 if err！= nil {	 //可能没有发生错误 - 检查 
		错误= ...	 // wrap / augment error 
	} 
}（）
</code></pre><p>这里 <code>err</code>是封闭函数的错误结果的名称。在实践中，合适的辅助函数将减少错误处理程序对单行程序的声明。例如</p>
<pre tabindex="0"><code>延迟 fmt。HandleErrorf（＆err，“ copy ％s  ％s ”，src，dst）
</code></pre><p>（<code>fmt.HandleErrorf</code>装饰<code>*err</code>）读得很好，可以在不需要新语言功能的情况下实现。</p>
<p>这种方法的主要缺点是需要命名错误结果参数，可能导致不太漂亮的API。最终这是一个风格问题，我们相信我们会适应期待新风格，就像我们适应没有分号一样。</p>
<p>总而言之，一开始<code>try</code>可能看起来很不寻常，但它只是针对一个特定任务量身定制的语法糖，错误处理用较少的样板，并且足够好地处理该任务。因此，它非常符合Go的哲学。<code>try</code>不是为解决<em>所有</em>错误处理情况而设计的; 它旨在很好地处理<em>最常见的</em>情况，以保持设计简单明了。</p>
<h3 id="积分">积分</h3>
<p>该提议受到我们迄今收到的反馈的强烈影响。具体来说，它借鉴了以下方面的想法</p>
<ul>
<li><a href="https://gist.github.com/PeterRK/4f59579c1162cdbc28086f6b5f7b4fa2">错误处理的关键部分</a>，</li>
<li>问题<a href="https://golang.org/issue/31442">＃31442</a></li>
<li>和，相关的，问题<a href="https://golang.org/issue/32219">＃32219</a>。</li>
</ul>
<h3 id="vojtechvitek-评论道">VojtechVitek** 评论道</h3>
<p>我觉得<code>try()</code>已经表达了反对该提案的所有重要反馈意见。但让我试着总结一下：</p>
<ol>
<li>try（）将垂直代码复杂度移动到水平</li>
<li>嵌套的try（）调用与<a href="https://golang.org/doc/faq#Does_Go_have_a_ternary_form">三元运算符</a>一样难以阅读</li>
<li>引入不可视的“返回”控制流，这种控制流在视觉上并不明显（与以<code>return</code>关键字开头的缩进块相比）</li>
<li>使错误包装实践更糟糕（函数的上下文而不是特定的操作）</li>
<li>拆分#golang社区和代码风格（反gofmt）</li>
<li>将使devs重写try（）到if-err-nil，反之亦然（tryhard与添加清理逻辑/附加日志/更好的错误上下文）</li>
</ol>
<h3 id="iand"><strong>iand</strong></h3>
<p>@VojtechVitek 我认为你提出的观点是主观的，只有在人们开始认真对待它时才能评估。</p>
<p>但是我认为有一个技术问题没有得到太多讨论。使用的模式<code>defer</code>错误包装/装饰已经超越简单的性能价格比的影响<code>defer</code>，因为使用功能本身<code>defer</code>不能被内联。</p>
<p>这意味着<code>try</code>与<code>err != nil</code>检查后直接返回包装错误相比，采用错误包装会产生两个潜在成本：</p>
<ol>
<li>通过函数的所有路径的延迟，甚至是成功的路径</li>
<li>丢失内联</li>
</ol>
<p>即使有一些令人印象深刻的即将到来的性能改进，<code>defer</code>成本仍然不为零。</p>
<p><code>try</code>具有很大的潜力所以如果Go团队可以重新考虑设计以允许在故障点进行某种包装而不是先发制人通过，这将是很好的<code>defer</code>。</p>
<h3 id="格里塞默"><strong>格里塞默</strong></h3>
<p>嗨，大家好，</p>
<p>我们与此类提案的目标是在社群范围内讨论影响，权衡和如何继续，然后使用该讨论来帮助确定前进的道路。</p>
<p>基于压倒性的社区反应和广泛的讨论，我们正在<a href="https://blog.golang.org/go2-next-steps">提前</a>宣布该提案被拒绝。</p>
<p>就技术反馈而言，本次讨论有助于确定我们错过的一些重要注意事项，尤其是添加调试打印和分析代码覆盖率的影响。</p>
<p>更重要的是，我们清楚地听到许多人认为这个提案不是针对一个有价值的问题。我们仍然认为Go中的错误处理并不完美，可以进行有意义的改进，但很明显，作为一个社区，我们需要更多地讨论错误处理的具体方面是我们应该解决的问题。</p>
<p>至于讨论要解决的问题，我们试图在去年8月的“ <a href="https://go.googlesource.com/proposal/+/master/design/go2draft-error-handling-overview.md">Go 2错误处理问题概述</a> ”中阐述我们对问题的看法，但回想起来，我们没有引起足够的注意力，并且没有足够的鼓励讨论具体问题是否正确。该<code>try</code>提案可能是解决该问题的一个很好的解决方案，但对于你们中的许多人来说，这根本不是一个需要解决的问题。在未来，我们需要更好地吸引对这些早期问题陈述的关注，并确保对需要解决的问题达成广泛共识。</p>
<p>（通过在同一天发布泛型设计草案，错误处理问题陈述也可能完全被提升。）</p>
<p>关于Go错误处理有哪些改进的更广泛的主题，我们非常高兴看到有关Go中错误处理的哪些方面在您自己的代码库和工作环境中对您来说最有问题的经验报告以及一个好的解决方案会产生多大影响有你自己的发展。如果你确实写了这样的报告，请在<a href="https://golang.org/wiki/Go2ErrorHandlingFeedback">Go2ErrorHandlingFeedback页面</a>上发布一个链接。</p>
<p>感谢参与此次讨论的所有人，无论是在这里还是其他地方。正如Russ Cox之前所指出的那样，<a href="https://twitter.com/_rsc/status/1146129906323132416">像这样的社区范围内的讨论是最好的开源</a>。我们非常感谢大家帮助我们检查这个特定的提案，更普遍的是讨论改善Go中错误处理状态的最佳方法。</p>
<p>罗伯特格里塞默，提案审查委员会。</p>
]]></content>
		</item>
		
		<item>
			<title>Go BeeGo VS Gin</title>
			<link>https://blog.v5u.win/go-beego-vs-gin/</link>
			<pubDate>Tue, 16 Jul 2019 05:36:51 +0000</pubDate>
			
			<guid>https://blog.v5u.win/go-beego-vs-gin/</guid>
			<description>[TOC] beego和gin是现在用的最多的两个go框架，所以这里选择比较这两个。 框架选择原则：永远站在大多数人这边。招人，公司，成本，问题解决时间</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<p>beego和gin是现在用的最多的两个go框架，所以这里选择比较这两个。</p>
<p>框架选择原则：永远站在大多数人这边。招人，公司，成本，问题解决时间成本都要考虑。</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>BeeGo</th>
<th>Bin</th>
</tr>
</thead>
<tbody>
<tr>
<td>MVC</td>
<td>不支持</td>
<td>不完全支持</td>
</tr>
<tr>
<td>路由</td>
<td>RESTful Controller 正则支持的非常完整</td>
<td>RESTful router.Get() 组路由</td>
</tr>
<tr>
<td>Session</td>
<td>支持,也支持session持久化</td>
<td>不支持，使用三方包 github.com/astaxie/session</td>
</tr>
</tbody>
</table>
<h4 id="性能">性能</h4>
<p>从问正确的问题开始。。。</p>
<ul>
<li>
<p>_高性能_本身是不是我们的目标？<!-- raw HTML omitted --></p>
</li>
<li>
<p>我们的目标是什么？</p>
</li>
<li>
<p>创造价值，获得竞争优势</p>
</li>
</ul>
<p>机器成本 vs 开发人员成本</p>
<h4 id="影响访问速度的因素有很多">影响访问速度的因素有很多</h4>
<p>例如系统中间层和数据层的耦合情况，数据层本身的能力，服务器所在机房的网络拓扑结构，负载均衡的配置情况，等等。</p>
<p>数据层速度，表设计不合理，网络io,图片的加载速度很慢</p>
<h4 id="正确做性能优化的姿势">正确做性能优化的姿势</h4>
<ul>
<li>确定性能目标，并保证这个目标是出于实际需要</li>
<li>建立性能环境，staging环境，并与线上环境隔离</li>
<li>性能环境和staging环境应该与线上环境类似架构</li>
<li>压测，并获得性能瓶颈的真正证据</li>
<li>最后，持续改进，永远只对瓶颈改进。</li>
</ul>
<p>只有改的是瓶颈的点才有用</p>
<h4 id="适用场景">适用场景</h4>
<h5 id="beego在业务方面比gin支持的更多">Beego在业务方面比gin支持的更多</h5>
<ul>
<li>在业务更复杂的项目中，使用beego</li>
<li>在需要快速开发的项目中，适用beego</li>
<li>在1.0项目中，适用beego。</li>
</ul>
<h5 id="gin在性能方面比beego更好">Gin在性能方面比Beego更好</h5>
<ul>
<li>当某个接口性能遭到较大的挑战的时候，考虑使用Gin重写接口</li>
<li>如果项目的规模不大，业务相对简单，使用Gin。</li>
</ul>
<p>你会发现大部分时候这两个框架差不多。</p>
<h5 id="关于mvc">关于MVC</h5>
<p>Beego是典型的MVC框架</p>
<ul>
<li>V: View，体现为模板，Beego通过处理模板和渲染模板展示视图</li>
</ul>
<p><strong>特性</strong></p>
<ul>
<li>静态文件处理</li>
<li>模板处理</li>
<li>模板分页处理<!-- raw HTML omitted --></li>
<li>C: Controller ，体现为各种功能</li>
</ul>
<p><strong>特性</strong></p>
<ul>
<li>路由功能</li>
<li>控制器函数</li>
<li>CSRF(Cross-Site request forgery) 过滤器</li>
<li>Session</li>
<li>错误处理 &amp; 日志功能</li>
</ul>
<p>项目使用MVC架构，推荐用Beego。</p>
<p>如果选择Gin的话，可以让浏览器做MVC，Gin让返回数据都是json，浏览器做ajax请求</p>
]]></content>
		</item>
		
		<item>
			<title>Goland 使用</title>
			<link>https://blog.v5u.win/posts/go/go-goland/</link>
			<pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-goland/</guid>
			<description>做 Go 开发，一般使用的IDE是 Goland 安装略，自己解决。下面说安装后的事情。 配置文件，配置开发环境 goland 会自动读取 GOROOT 和 GOPATH，所以不用自己填写。我</description>
			<content type="html"><![CDATA[<p>做 Go 开发，一般使用的IDE是 Goland</p>
<p>安装略，自己解决。下面说安装后的事情。</p>
<ol>
<li>配置文件，配置开发环境</li>
</ol>
<p>goland 会自动读取 GOROOT 和 GOPATH，所以不用自己填写。我们要做的就是配置配置文件</p>
<p>创建go build配置文件：Templates&ndash;&gt; Go Build
Run kind 选Directory
Directory 选你的main包所在文件夹
Output directory设置与go build -o 不相容，所以不用设置，我们使用-o参数来控制可执行文件的路径以及名字
Working directory保持默认就好
Go tool arguments 就是go build 的参数</p>
<ol start="2">
<li>debug</li>
</ol>
<p>goland 的 debug 功能可以看到 整个函数链条，和当下参数的值，以及 <code>·s</code> 文件(汇编文件)的内部调用</p>
<p>单文件调试：直接点击run旁边的debug按钮，左下方有细分子项：跳过执行（步过），单步调试（步入），步出</p>
<p>整项目调试：</p>
]]></content>
		</item>
		
		<item>
			<title>Go orm 对比选择</title>
			<link>https://blog.v5u.win/posts/go/go-orm/</link>
			<pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-orm/</guid>
			<description>golang 中 orm最主流的两个包，xorm和gorm。所以主要在他们之间做抉择。 name xorm gorm github-stars 5,053 14,262 github-fork 650 1,606 不管是从stars数还是fork gorm都是大比例</description>
			<content type="html"><![CDATA[<p>golang 中 orm最主流的两个包，xorm和gorm。所以主要在他们之间做抉择。</p>
<table>
<thead>
<tr>
<th>name</th>
<th>xorm</th>
<th>gorm</th>
</tr>
</thead>
<tbody>
<tr>
<td>github-stars</td>
<td>5,053</td>
<td>14,262</td>
</tr>
<tr>
<td>github-fork</td>
<td>650</td>
<td>1,606</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>不管是从stars数还是fork gorm都是大比例拉开。gorm是老牌的项目，xorm是这两年崛起来的。</p>
<p>最后我选择了xormplus 因为路径依赖，学习golang的时候的示例用的是xorm。😅</p>
<p>xorm 自动生成代码</p>
<p>xorm help reverse</p>
<p>格式：xorm reverse dirver dbname 导出模板</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>xorm reverse mysql <span style="color:#e6db74">&#34;username:pwd@tcp(127.0.0.1:3306)/dbname?charset=utf8&#34;</span> $GOPATH/src/github.com/go-xorm/cmd/xorm/templates/goxorm
</span></span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>提问的智慧</title>
			<link>https://blog.v5u.win/posts/system/system-getquestion/</link>
			<pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-getquestion/</guid>
			<description>我不怕我&amp;quot;走&amp;quot;的很慢，因为我一直在移动。 说明 本文摘自learnku社区：https://learnku.com/docs</description>
			<content type="html"><![CDATA[<p>我不怕我&quot;走&quot;的很慢，因为我一直在移动。</p>
<h2 id="说明">说明</h2>
<p>本文摘自learnku社区：https://learnku.com/docs/guide/smart-questions/2032</p>
<p>对 <a href="http://www.catb.org/~esr/faqs/smart-questions.html">原文：How To Ask Questions The Smart Way</a> 有所修改，使其更加适用于本社区。</p>
<p>恨不能早日遇到这篇文章，步入开源的世界。</p>
<h2 id="引言">引言</h2>
<p>在黑客的世界里，你技术提问的解答情况，很大程度上取决于你提问的方式与解决此问题的难度，本文将教你如何提问才更有可能得到满意的答复。</p>
<p>开源程序的应用已经很广，你通常可以从其他更有经验的用户而不是黑客那里得到解答。这是好事，他们一般更能容忍新手常有的那些毛病。然而，使用我们推荐的方法，像对待黑客那样对待这些有经验的用户，通常能最有效地得到问题的解答。</p>
<blockquote>
<p>注：可以将黑客理解为社区名人，开源作者等注意力有限但是有所专长的开发者。</p>
</blockquote>
<p>第一件需要明白的事是黑客喜欢难题和激发思考的好问题。如果不是这样，我们也不会写这篇文章了。如果你能提出一个有趣的问题来让我们咀嚼玩味，我们会感激你的。好问题是种激励与礼物，帮助我们发展认知，揭示我们没有注意或想到的问题。在黑客中，“好问题！” 是非常热烈而真挚的赞许。</p>
<p>此外，黑客还有遇到简单问题就表现出敌视或傲慢的态度。有时，我们看起来还对新手和愚蠢的家伙有条件反射式性的无礼，但事情并不真是这样。</p>
<h2 id="失败者loser">失败者（loser）</h2>
<p>我们只是毫无歉意地敌视那些提问前 <strong>不愿思考</strong>、<strong>不做好准备</strong> 的人。这种人就像时间无底洞一样 ── <strong>只知道索取</strong>，<strong>不愿意付出</strong>，他们浪费了时间，这些时间本可用于其它更有趣的问题或更值得回答的人。我们将这种人叫做 『失败者（loser）』。</p>
<p>我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，计算机只是种工具，是种达到目的的手段而已。他们有自己的生活并且更要紧的事要做，我们承认这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。不过，我们回答问题的风格是为了适应那些真正对此有兴趣并愿意主动参与与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就会在自己能做得到的最好的事情上不再那么犀利。</p>
<p>我们（大多数人）是自愿者， 从自己繁忙的生活中抽时间来回答问题，有时会力不从心。因此，我们会毫不留情地滤除问题，特别是那些看起来像是失败者提的，以便更有效地把回答问题的时间留给那些胜利者。</p>
<p>如果你认为这种态度令人反感、以施惠者自居或傲慢自大，那么请审视下你的假设，我们并未要求你屈服──事实上，假如你做了该做的努力，我们中的大多数将非常乐意平等地与你交流，并欢迎你接纳我们的文化。试图去帮助那些不愿自救的人对我们简直没有效率。不懂没有关系，但愚蠢地做事不行。</p>
<p>所以，你不需要在技术上很在行才能吸引我们的注意，但你必须表现出能引导你在行的姿态 ── 机敏、有想法、善于观察、乐于主动参与问题的解决。如果你做不到这些使你与众不同的事情，我们建议你付钱跟别人签商业服务合同，而不是要求黑客无偿帮助。</p>
<p>如果你决定向我们求助，你不会想成为一名失败者，你也不想被看成一个失败者。得到快速有效回答的最好方法是使提问者看起来像个聪明、自信和有想法的人，并且暗示只是碰巧在某一特别问题上需要帮助。</p>
<h2 id="提问前">提问前</h2>
<p>在通过论坛提技术问题以前，做以下事情：</p>
<ul>
<li>尝试在你准备提问论坛的历史文档中搜索答案；</li>
<li>尝试搜索互联网以找到答案；</li>
<li>尝试阅读官方文档以找到答案；</li>
<li>尝试阅读“常见问题文档”（FAQ）以找到答案；</li>
<li>尝试自己检查或试验以找到答案；</li>
<li>尝试请教懂行的朋友以找到答案；</li>
<li>尝试阅读源代码以找到答案。</li>
</ul>
<p>提问时，请先表明你已做了上述事情，这将有助于建立你不是寄生虫与浪费别人时间的印像。最好再表述你从中学到的东西 ，我们喜欢回答那些表现出能从答案中学习的人。</p>
<p>运用某些策略，比如用谷歌（Google）搜索你遇到的各种错误提示， 这样很可能直接就找到了解决问题的文档或线索。 即使没有结果，在寻求帮助时提一句“我在谷歌中搜过下列句子但没有找到什么有用的东西” 也是件好事，至少它表明了搜索引擎不能提供哪些帮助。将搜索关键词与你的问题及可能的解决方案联系起来，还有助于引导其他有类似问题的人。</p>
<p>别着急，不要指望几秒钟的谷歌搜索就能解决一个复杂的问题。读一下常见问题文档。在向专家提问之前，先向后靠靠放松一下，再思考一下问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑抛出，只因你的第一次搜索没有结果（或者结果太多）。</p>
<p>认真地思考，准备好你的问题。轻率的提问只能得到轻率的回答，或者压根没有。在提问时，你越是表现出在此前做过思考与努力去解决自己的问题，你越有可能得到真正的帮助。</p>
<p>注意别提错问题。如果提问基于错误的假设，某黑客多半会一边想 “愚蠢的问题……”，一边按将错就错的答案回复你，并且希望这种只是得到你自己“问的问题”而非真正所需的解答以给你一个教训。</p>
<p>永远不要假设你有资格得到解答。你没有这种资格，毕竟你没有为此服务付费。如果你能够提出有内容、有趣和激励思考的问题 ── 那种毫无疑问能够向社区贡献经验，而不仅仅是消极地要求从别人那获取知识的问题，那么你将“挣到”答案。</p>
<p>另一方面，表明你有能力也乐意参与问题的解决是个很好的开端。“有没有人能指个方向？”，我这还差点什么？”，“我应该查哪个网站？”，通常要比 “请给出我可以用的完整步骤”更容易得到回复，因为你表明了只要有人能指个方向，你就会很乐意完成剩下的过程。</p>
<h2 id="提问时">提问时</h2>
<h3 id="仔细挑选论坛">仔细挑选论坛</h3>
<p>要对在哪提问留心，如果你做了下述事情，多半会被一笔勾销或被看成“失败者”：</p>
<ul>
<li>张贴与论坛主题无关的问题</li>
<li>在面向高级技术问题的论坛上张贴肤浅的问题，或者反之。</li>
<li>在太多不同的新闻组同时张贴</li>
<li>给既非熟人也没有义务解决你问题的人发送你私人的电邮</li>
</ul>
<p>为保护通信的渠道不被无关的东西淹没，黑客会除掉那些没有找对地方的问题，你不会想让这种事落到自己头上的。</p>
<p>因此，第一步是找对论坛。谷歌和其它搜索引擎还是你的朋友，可以用它们搜索你遇到困难的软硬件问题最相关的项目网站。那里通常都有项目的常见问题（FAQ）、邮件列表及文档的链接。如果你的努力（包括 阅读 FAQ）都没有结果，这些邮件列表就是最后能取得帮助的地方。项目的网站也许还有报告 Bug 的流程或链接，如果是这样，去看看。</p>
<p>向陌生的人或论坛发送邮件极有可能是在冒险。不要假设一个内容丰富的网站作者会想充当你的免费顾问，不要对你的问题是否会受到欢迎做太乐观的估计 ── 如果你不确定，到别处发或者压根别发。</p>
<p>在选择论坛、新闻组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以明确你的问题是否切题。发贴前先翻翻已有的帖子，这样可以让你感受一下那里行事的方式。事实上，张贴前在新闻组或邮件列表的历史文档中搜索与你问题相关的关键词是个极好的主意，也许就找到答案了。即使没有，也能帮助你归纳出更好的问题。</p>
<p>别像机关枪似的一次性“扫射”所有的帮助渠道，这就像大喊大叫一样会令人不快，温柔地一个一个来。</p>
<p>弄懂主题！最典型的错误之一是在某种致立于跨平台可移植的语言、库或工具的论坛中提关于 Unix 或 Windows 操作系统程序接口的问题。如果你不明白为什么这是大错，最好在搞清楚概念前什么也别问。</p>
<p>一般来说，在仔细挑选的公共论坛中提问比在私有论坛中提同样的问题更容易得到有用的回答。有几个道理支持这点，一是看潜在的回复者有多少，二是看论坛的参与者有多少，黑客更愿回答能启发多数人的问题。</p>
<p>可以理解，老练的黑客和一些流行软件的作者正在承受过多的不当消息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 ── 已经好几次了，一些流行软件的作者退出了对自己软件的支持，因为伴随而来的涌入其私人邮箱的垃圾邮件变得无法忍受。</p>
<h3 id="使用有意义且明确的主题">使用有意义且明确的主题</h3>
<p>在邮件列表、新闻组或论坛中，主题是你在五十个或更少的字以内吸引有资格专家注意的黄金机会，不要用诸如 “请帮我” （更别提大写的 “请帮我！！！！”，这种主题的消息会被条件反射式地删掉）之类的唠叨浪费机会。不要用你痛苦的深度来打动我们，相反，要在这点空间中使用超级简明扼要的问题描述。</p>
<p>使用主题的好惯例是“对像──偏差”（式的描述），许多技术支持组织就是这样做的。在“对像”部分指明是哪一个或哪一组东西有问题，在“偏差”部分则描述与期望的行为不一致的地方。</p>
<p>愚蠢：
救命啊！我的笔记本视频工作不正常！</p>
<p>明智：
X.org 6.8.1 扭曲鼠标光标，MV1005 型号的某显卡芯片组</p>
<p>更明智：
使用 MV1005 型号的某显卡芯片组在 X.org 6.8.1 的鼠标光标被扭曲</p>
<p>编写 “对像──偏差”式描述的过程有助于你组织对问题的细致思考。是什么被影响了？仅仅是鼠标光标或者还有其它图形？只在 X.org 中出现？或只是在其 6.8.1 版中？是针对某显卡芯片组？或者只是其中的 MV1005 型号？一个黑客只需描一眼就能够立即明白什么是你遇到的问题，什么是你自己的问题。</p>
<p>更一般地，想像一下在一个只显示主题的文档索引中查找。让你的主题更好地反映问题，可以使下一个搜索类似问题的人能够在文档中直接就找到答案的线索，而不用再次发贴提问。</p>
<p>如果你想在回复中提问，确保改变主题以表明你是在问一个问题，一个主题像 “Re: 测试” 或者 “Re: 新 Bug ”的消息不太可能引起足够的注意。同时，将回复中与新主题不甚相关的引用内容尽量删除。</p>
<p>对于列表消息，不要直接点击回复（按钮）来开始一个全新的线索，这将限制你的观众。有些邮件阅读程序，比如 mutt，允许用户按线索排序并通过折叠线索来隐藏消息，这样做的人永远看不到你发的消息。</p>
<p>仅仅改变主题还不够。mutt 和其它一些邮件阅读程序还要检查邮件头主题以外的其它信息，以便为其指定线索，所以宁可发一个全新的邮件。</p>
<p>在论坛，因为消息与特定的线索紧密结合，并且通常在线索之外不可见，好的提问方式略有不同，通过回复提问并不要紧。不是所有论坛都允许在回复中出现分离的主题，而且这样做了基本上没有人会去看。不过，通过回复提问本身就是令人怀疑的做法，因为它们只会被正在查看该线索的人读到。所以，除非你只想在该线索当前活跃的人群中提问，否则还是另起炉灶比较好。</p>
<h3 id="使问题容易回复">使问题容易回复</h3>
<p>以“请向……回复”来结束问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟考虑你的问题更麻烦。如果你的邮件客户端程序不支持这样做，换个好点的；如果是操作系统不支持所有这种邮件客户端程序，也换个好点的。</p>
<p>在论坛，要求通过电子邮件回复是完全无礼的，除非你确信回复的信息也许是敏感的（而且有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复线索时得到电子邮件提醒，可以要求论坛发送。几乎所有论坛都支持诸如“留意本线索”、“有回复发送邮件”等功能。</p>
<h3 id="用清晰语法拼写正确的语句书写">用清晰、语法、拼写正确的语句书写</h3>
<p>经验告诉我们，粗心与草率的作者通常也粗心与草率地思考和编程（我敢打赌）。为这些粗心与草率的思考者回答问题没有什么好处，我们宁可将时间花在其它地方。</p>
<p>清楚、良好地表达你的问题非常重要。如果你觉得这样做麻烦，我们也觉得注意（你的问题）麻烦。花点额外的精力斟酌一下字句，用不着太僵硬与正式 ── 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它必须很准确，而且有迹像表明你是在思考和关注问题。</p>
<p>正确地拼写、使用标点和大小写，不要将“its”混淆为“it&rsquo;s”，“loose”搞成“lose”或者将“discrete”弄成 “discreet”。不要全部用大写，这会被视为无礼的大声嚷嚷 （全部小写也好不到哪去，因为不易阅读。Alan Cox [注：著名黑客，Linux 内核的重要参与者] 也许可以这样做，但你不行。）</p>
<p>一般而言，如果你写得像个半文盲似的傻子，多半得不到理睬。也不要使用即时通讯中的简写，如将“you”简化为“u”会使你看起来像一个为了节约二次击键的半文盲式的傻子。更糟的是，如果像个小孩似地鬼画桃符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p>
<p>如果在非母语论坛提问，你的拼写与语法错误会得到有限的宽容，但懒惰完全不会被容忍（是的，我们通常看得出其中的差别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在互联网上英语是工作语言，用英语书写可以将你的问题不被阅读就被直接删除的可能性降到最低。</p>
<p>如果你用英语书写但它是你的第二语言，最好提醒潜在的回复者语言上可能的困难以便绕过这个问题，比如：</p>
<p>英语不是我的母语，请谅解拼写错误。</p>
<p>如果您使用某某语言，请电邮/私聊我，也许我需要您的协助翻译我的问题。</p>
<p>对于这个技术术语本身我很熟悉，但对于它的一些俚语或习惯表达方式就不太明白了。</p>
<p>我已经同时用某某语及英语提问，如果您使用两者之一回复，我很乐意翻译。</p>
<h3 id="描述问题应准确且有内容">描述问题应准确且有内容</h3>
<p>仔细、清楚地描述问题的症状</p>
<p>描述问题发生的环境(主机、操作系统、应用程序，任何相关的)，提供销售商的发行版和版本号（如：“Fedora Core 7”、“Slackware 9.1”等）</p>
<p>描述提问前做过的研究及其理解。</p>
<p>描述提问前为确定问题而采取的诊断步骤。</p>
<p>描述最近对计算机或软件配置的任何相关改变。</p>
<p>如果可能，提供在可控环境下重现问题的方法。</p>
<p>尽最大努力预测黑客会提到的问题，并提前备好答案。</p>
<p>如果你认为是代码有问题，向黑客提供在可控环境下重现问题的方法尤其重要。当你这么做时，得到有用且及时回复的可能性将大大增加。</p>
<p>西蒙.泰瑟姆（Simon Tatham）写过一篇『如何有效报告 Bug 』的文章，我强烈推荐各位阅读。</p>
<h3 id="量不在多精炼则灵">量不在多，精炼则灵</h3>
<p>你应该（写得）精炼且有内容，简单地将一大堆代码或数据罗列在求助消息中达不到目的。如果你有一个很大且复杂的测试样例让程序崩溃，尝试将其裁剪得越小越好。</p>
<p>至少有三个理由支持这点。第一，让别人看到你在努力简化问题将使你更有可能得到回复。第二，简化问题将使你更有可能得到有用的回复。第三，在反馈 Bug 报告的过程中，你可能自己就找到了解决办法或权宜之计。</p>
<h3 id="低声下气代替不了做自己的家庭作业">低声下气代替不了做自己的家庭作业</h3>
<p>有些人明白他们不应该粗鲁或傲慢地行事并要求得到答复，但他们退到相反的低声下气的极端：“我知道我只是个可怜的新丁，一个失败者，但……”。这既使人困扰，也没有用，当伴随着对实际问题含糊的描述时还特别令人反感。</p>
<p>别用低级灵长类动物的办法浪费你我的时间，相反，尽可能清楚地描述背景情况和你的问题，这比低声下气更好地摆正了你的位置。</p>
<p>有时，论坛设有单独的初学者提问版面，如果你真的认为遇到了肤浅的问题，到那去就是了，但一样别低声下气。</p>
<h3 id="描述问题症状而不是猜测">描述问题症状而不是猜测</h3>
<p>告诉黑客是什么导致了问题是没用的（如果你的诊断理论是了不起的东西，你还会向别人咨询求助吗？）。所以，确保只是告诉他们问题的原始症状，而不是你的解释和理论，让他们来解释和诊断。如果你认为陈述自己的猜测很重要，应清楚地说明这只是你的猜测并描述为什么它们不起作用。</p>
<p>愚蠢：
我在编译内核时接连遇到 SIG11 错误，怀疑主板上的某根电路丝断了，找到它们的最好办法是什么？</p>
<p>明智：
我组装的电脑（K6/233 CPU、FIC-PA2007 主板[威盛 Apollo VP2 芯片组]、Corsair PC133 SDRAM 256Mb 内存）最近在开机 20 分钟左右、做内核编译时频繁地报 SIG11 错，但在头 20 分钟内从不出问题。重启动不会复位时钟，但整夜关机会。更换所有内存未解决问题，相关的典型编译会话日志附后。</p>
<p>由于以上这点许多人似乎难以掌握，这里有句话可以提醒你：“所有的诊断专家都来自密苏里州”。美国国务院的官方座右铭则是“让我看看”（出自国会议员威勒德.D.范迪弗［Willard D. Vandiver］在1899年时的讲话：“我来自一个出产玉米、棉花、牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。”）针对诊断者而言，这并不是怀疑，而只是一种真实而有用的需求，以便让他们看到与你看到的原始证据尽可能一致的东西，而不是你的猜测与总结。（所以，）让我们看看。</p>
<h3 id="按时间先后罗列问题症状">按时间先后罗列问题症状</h3>
<p>刚出问题之前发生的事情通常包含有解决问题最有效的线索。所以，记录中应准确地描述你、电脑和软件在崩溃前都做了什么。在命令行处理的情况下，有会话日志（如运行脚本工具生成的）并引用相关的若干（如20）行记录会非常有帮助。</p>
<p>如果崩溃的程序有诊断选项（如-v详述开关），试着选择这些能在记录中增加排错信息的选项。记住，“多”不等于“好”。试着选取适当的排错级别以便提供有用的信息而不是将阅读者淹没在垃圾中。</p>
<p>如果你的记录很长（如超过四段），在开头简述问题随后按时间先后罗列详细过程也许更有用。这样，黑客在读你的记录时就知道该注意哪些内容了。</p>
<h3 id="描述目标而不是过程">描述目标而不是过程</h3>
<p>如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述遇到问题的特定步骤。</p>
<p>经常出现这种情况，寻求技术帮助的人在脑袋里有个更高层次的目标，他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身有问题，结果要费很大的劲才能通过。</p>
<p>愚蠢：
我怎样才能让某图形程序的颜色拾取器取得十六进制的 RGB 值？</p>
<p>明智：
我正试着用自己选定数值的颜色替换一幅图片的色表，我现在知道的唯一方法是编辑每个表槽，但却无法让某图形程序的颜色拾取器取得十六进制的 RGB 值。</p>
<p>第二种提法是明智的，它使得建议采用更合适的工具以完成任务的回复成为可能。</p>
<h3 id="别要求私下回复电邮">别要求私下回复电邮</h3>
<p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有才能的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为回复者也因为能力和学识被其它同行看到而得到某种回报。</p>
<p>当你要求私下回复时，此过程和回报都被中止。别这样做，让回复者来决定是否私下回答 ── 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人毫无意义。</p>
<p>对这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么“向我发电邮，我将为论坛归纳这些回复”将是神奇的句子。试着将邮件列表或新闻组从洪水般雷同的回复中解救出来是非常有礼貌的 ── 但你必须信守诺言。</p>
<h3 id="提问应明确">提问应明确</h3>
<p>漫无边际的问题通常也被视为没有明确限制的时间无底洞。最有可能给你有用答案的人通常也是最忙的人（假如只是因为他们承担了太多工作的话），这些人对于没有止境的时间无底洞极其敏感，所以他们也倾向于讨厌那些漫无边际的问题。</p>
<p>如果你明确了想让回复者做的事（如指点方向、发送代码、检查补丁或其它），你更有可能得到有用的回复。（因为）这样可以让他们集中精力并间接地设定了他们为帮助你需要花费的时间和精力上限，这很好。</p>
<p>要想理解专家生活的世界，可以这样设想：那里有丰富的专长资源但稀缺的响应时间。你暗中要求他们奉献的时间越少，你越有可能从这些真正懂行也真正很忙的专家那里得到解答。</p>
<p>所以限定你的问题以使专家回答时需要付出的时间最少 ── 这通常与简化问题还不太一样。举个例，“请问可否指点一下哪有好一点的 X 解释？”通常要比“请解释一下 X”明智。如果你的代码不运行了，通常请别人看看哪有问题比叫他们帮你改正更明智。</p>
<h3 id="关于代码的问题">关于代码的问题</h3>
<p>别要求他人给你出问题的代码排错而不提及应该从何入手。张贴几百行的代码，然后说一声“它不能运行”会让你得不到理睬。只贴几十行代码，然后说一句“在第七行以后，本应该显示<!-- raw HTML omitted -->，但实际出现的是<!-- raw HTML omitted -->”非常有可能让你得到回复。</p>
<p>最精确描述代码问题的方法是提供一个能展示问题的最小测试样例。什么是最小测试样例？它是对问题的展现，只需要刚好能够重现非预期行为的代码即可。如何生成一个最小测试样例？如果你知道哪一行或哪一段代码会产生问题，将其复制并提供刚好够用的外围支撑代码以构成一个完整的样例（够用是指源码刚好能被编译器、解释器或任何处理它的程序所接受）。如果你不能将问题缩小到特定的段落，复制源码并去除那些与问题无关的代码段。你能提供的最小测试样例越小越好（参见 量不在多，精炼则灵 ）。</p>
<p>生成一个非常小的最小测试样例并不总是可能做到，但尽力去做是很好的锻练，这有可能帮助你找到需要自己解决的问题。即使你找不到，黑客们喜欢看到你努力过，这将使他们更合作。</p>
<p>如果你只是想让别人帮忙审一下代码，在最开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p>
<h3 id="删除无意义的要求">删除无意义的要求</h3>
<p>抵制这种诱惑，即在求助消息末尾加上诸如“有人能帮我吗？”或“有没有答案？”之类在语义上毫无意义的东西。第一，如果问题描述还不完整，这些附加的东西最多也只能是多余的。第二，因为它们是多余的，黑客们会认为这些东西烦人──就很有可能用逻辑上无误但打发人的回复，诸如“是的，你可以得到帮助”和“不，没有给你的帮助”。</p>
<p>一般来说，避免提“是或否”类型的问题，除非你想得到 “是或否”类型的回答。</p>
<h3 id="不要把问题标记为紧急-即使对你而言的确如此">不要把问题标记为“紧急”， 即使对你而言的确如此</h3>
<p>这是你的问题，不是我们的。宣称“紧急”极有可能事与愿违：大多数黑客会直接删除这种消息，他们认为这是无礼和自私地企图得到即时与特殊的关照。而且“紧急”或其它有类似含义的主题有可能触发垃圾过滤规则，潜在的回复者可能永远看不到你的问题！</p>
<p>有一点点局部的例外，如果你是在一些知名度很高、会使黑客们激动的地方使用程序，也许值得这样去做。在这种情况下，如果你有期限压力，也很有礼貌地提到这点，人们也许会有足够的兴趣快一点回答。</p>
<p>当然，这是非常冒险的，因为黑客们对什么是令人激动的标准多半与你的不同。譬如从国际空间站这样张贴没有问题，但代表感觉良好的慈善或政治原因这样做几乎肯定不行。事实上，张贴诸如“紧急：帮我救救这个毛绒绒的小海豹！”肯定会被黑客回避或光火，即使他们认为毛绒绒的小海豹很重要。</p>
<p>如果你觉得这不可思议，再把剩下的内容多读几遍，直到弄懂了再发贴也不迟。</p>
<h3 id="礼貌总是有益的">礼貌总是有益的</h3>
<p>礼貌一点，使用“请”和“谢谢你的关注”或者“谢谢你的关照”，让别人明白你感谢他们无偿花时间帮助你。</p>
<p>坦率地讲，这一点没有语法正确、文字清晰、准确、有内容和避免使用专用格式重要（同时也不能替代它们）。黑客们一般宁可读有点唐突但技术鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教我们什么来评价它的）</p>
<p>然而，如果你已经谈清楚了技术问题，客气一点肯定会增加你得到有用回复的机会。</p>
<p>（我们必须指出，本文唯一受到一些老黑客认真反对的地方是以前曾经推荐过的“提前谢了”，一些黑客认为这隐含着事后不用再感谢任何人的暗示。我们的建议是要么先说 “提前谢了”，事后再对回复者表示感谢，要么换种方式表达，譬如用“谢谢你的关注”或“谢谢你的关照”）。</p>
<h3 id="问题解决后追加一条简要说明">问题解决后追加一条简要说明</h3>
<p>问题解决后向所有帮助过的人追加一条消息，让他们知道问题是如何解决的并再次感谢。如果问题在邮件列表或新闻组中受到广泛关注，在那里追加此消息比较恰当。</p>
<p>最理想的方式是向最初提问的线索回复此消息，并在主题中包含“已解决”、“已搞定”或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见线索 “问题 X”和“问题 X-已解决”的潜在回复者就明白不用再浪费时间了（除非他个人觉得“问题 X”有趣），因此可以利用此时间去解决其它问题。</p>
<p>追加的消息用不着太长或太复杂，一句简单的“你好 ── 是网线坏了！谢谢大家”就比什么都没有要强。事实上，除非解决问题的技术真正高深，一条简短而亲切的总结比长篇大论要好。说明是什么行动解决了问题，用不着重演整个排错的故事。</p>
<p>对于有深度的问题，张贴排错历史的摘要是恰当的。描述问题的最终状态，说明是什么解决了问题，在此之后 才指明可以避免的弯路。应避免的弯路部分应放在正确的解决方案和其它总结材料之后，而不要将此消息搞成侦探推理小说。列出那些帮助过你的名字，那样你会交到朋友的。</p>
<p>除了有礼貌、有内容以外，这种类型的追帖将帮助其他人在邮件列表、新闻组或论坛文档中搜索到真正解决你问题的方案，从而也让他们受益。</p>
<p>最后，此类追帖还让每位参与协助的人因问题的解决而产生一种满足感。如果你自己不是技术专家或黑客，相信我们，这种感觉对于你寻求帮助的老手和专家是非常重要的。问题叙述到最后不知所终总是令人沮丧的，黑客们痒痒地渴望它们被解决。“挠痒痒”为你挣到的信誉将对你下次再次张贴提问非常非常的有帮助。</p>
<p>考虑一下怎样才能避免他人将来也遇到类似的问题，问问自己编一份文档或 FAQ 补丁会不会有帮助，如果是的话就将补丁发给维护者。</p>
<p>在黑客中，这种良好的后继行动实际上比传统的礼貌更重要，也是你善待他人而赢得声誉的方式，这是非常有价值的财富。</p>
<h2 id="如何解读回答">如何解读回答</h2>
<p>###“读读该死的手册”（RTFM）和“搜搜该死的网络”（STFW）：如何明白你已完全搞砸</p>
<p>有一个古老而神圣的传统：如果你收到“读读该死的手册”（RTFM） 的回复，发信人认为你应该去“读读该死的手册”。他或她多半是对的，去读一下吧。</p>
<p>“读读该死的手册”（RTFM）有个年轻一点的亲戚，如果你收到“搜搜该死的网络”（STFW）的回复，发信人认为你应该“搜搜该死的网络”。那人多半也是对的，去搜一下吧。(更温和一点的说法是“谷歌是你的朋友！”)</p>
<p>在论坛，你也可能被要求去搜索论坛的文档。事实上，有人甚至可能热心地为你提供以前解决此问题的线索。但不要依赖这种关照，提问前应该先搜索一下文档。</p>
<p>通常，叫你搜索的人已经打开了能解决你问题的手册或网页，正在一边看一边敲键盘。这些回复意味着他认为：第一，你要的信息很容易找到。第二，自已找要比别人喂到嘴里能学得更多。</p>
<p>你不应该觉得这样就被冒犯了，按黑客的标准，回复者没有不理你就是在向你表示某种尊敬，你反而应该感谢他热切地想帮助你。</p>
<h3 id="如果还不明白">如果还不明白……</h3>
<p>如果你看不懂回答，不要马上回复一个要求说明的消息，先试试那些最初提问时用过的相同工具（如手册、FAQ、网页、懂行的朋友等）试着搞懂回答。如果还是需要说明，展现你已经明白的。</p>
<p>譬如，假如我告诉你：“看起来像是某输入项有问题，你需要清除它”，接着是个不好的回帖：“什么是某输入项？”。而这是一个很好的跟帖：“是的，我读了手册，某某输入项只在 -z 和 -p 开关中被提到，但都没有涉及到如何清除它们，你指的是哪一个还是我弄错了什么？”</p>
<h3 id="对待无礼">对待无礼</h3>
<p>很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当、一针见血式的交流风格，这种风格对于更关注解决问题而不是使别人感觉舒服而混乱的人是很自然的。</p>
<p>如果你觉得被冒犯了，试着平静地反应。如果有人真的做了过格的事，邮件列表、新闻组或论坛中的前辈多半会招呼他。如果这没发生而你却火大了，虽然你发火对像的言语可能在黑客社区中看起来是正常的，但你将被视为有错的一方，这将伤害到你获取信息或帮助的机会。</p>
<p>另一方面，你会偶而真的碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击、用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外来者，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。</p>
<p>（有些人断言很多黑客都有轻度的自闭症或阿斯伯格综合症，缺少用于润滑人类社会“正常”交往所需的脑电路。这既可能是真也可能是假。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们喜欢现在这个样子，并且一般都对病号标记有站得住脚的怀疑。）</p>
<p>在下一节，我们会谈到另一个问题，当你行为不当时会受到的“冒犯”。</p>
<h3 id="别像失败者那样反应">别像失败者那样反应</h3>
<p>在黑客社区的论坛中有那么几次你可能会搞砸 ── 如本文所描述的或类似的方式。你会被示众是如何搞砸的，也许言语中还会带点颜色。</p>
<p>这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反，你该这样去做：</p>
<p>熬过去，这很正常。事实上，它是有益健康与恰当的。</p>
<p>社区的标准不会自己维持，它们是通过参与者积极而公开地执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，这不是事情运作的方式。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。</p>
<p>也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称“如果你不想帮助用户就闭嘴”。有思路的参与者纷纷离开的结果只会使它们变成了毫无意义的唠叨与无用的技术论坛。</p>
<p>是夸张的“友谊”（以上述方式）还是有用？挑一个。</p>
<p>记着：当黑客说你搞砸了，并且(无论多么刺耳地)告诉你别再这样做时，他正在为关心你和他的社区而行动。对他而言，不理你并将你从他的生活中滤除要容易得多。如果你无法做到感谢，至少要有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。</p>
<p>有时候，即使你没有搞砸（或者只是别人想像你搞砸了）， 有些人也会无缘无故地攻击你本人。在这种情况下，报怨倒是 真的会把问题搞砸。</p>
<p>这些找茬者要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些找茬者在给自己找麻烦，这点你不用操心。</p>
<p>也别让自己卷入口水战，大多数口水战最好不要理睬──当然，是在你核实它们只是口水战、没有指出你搞砸的地方，而且没有巧妙地将问题真正的答案藏于其中之后（这也是可能的）。</p>
<h3 id="提问禁忌">提问禁忌</h3>
<p>下面是些典型的愚蠢问题和黑客不回答它们时的想法。</p>
<p>问：我到哪可以找到某程序或 X 资源？
问：我怎样用 X 做 Y？
问：如何配置我的 shell 提示？
问：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文档转为 TeX 格式吗？
问：我的{程序、配置、SQL 语句}不运行了
问：我的 Windows 电脑出问题了，你能帮忙吗？
问：我的程序不运行了，我认为系统工具X有问题
问：我安装 Linux 或 X 遇到困难，你能帮忙吗？
问：我如何才能破解超级用户口令/盗取通道操作员的特权/查看某人的电子邮件？</p>
<p>问：
我到哪可以找到某程序或 X 资源？</p>
<p>答：
在我找到它的同样地方，笨蛋 ── 在网页搜索引擎上。上帝啊，难道还有人不知道如何使用谷歌吗？</p>
<p>问：
我怎样用 X 做 Y？</p>
<p>答：
如果你想解决的是 Y，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对要解决的 Y 问题糊涂，还被特定形势禁锢了思维。等他们把问题弄好再说。</p>
<p>问：
如何配置我的 shell 提示？</p>
<p>答：
如果你有足够的智慧提这个问题，你也该有足够的智慧去 “读读该死的手册”（RTFM），然后自己去找出来。</p>
<p>问：
我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文档转为 TeX 格式吗？</p>
<p>答：
试试就知道了。如果你试过，你既知道了答案，又不用浪费我的时间了。</p>
<p>问：
我的{程序、配置、SQL 语句}不运行了</p>
<p>答：
这不是一个问题，我也没有兴趣去猜你有什么问题 ── 我有更要紧的事要做。看到这种东西，我的反应一般如下：</p>
<p>你还有什么补充吗？</p>
<p>噢，太糟了，希望你能搞定。</p>
<p>这跟我究竟有什么关系？</p>
<p>问：
我的 Windows 电脑出问题了，你能帮忙吗？</p>
<p>答：
是的，把 Windows 垃圾删了，装个像 Linux 或 BSD 的开源操作系统吧。</p>
<p>注意：如果程序有官方的 Windows 版或者与 Windows 有交互(如 Samba)，你 可以 问与 Windows 相关的问题，只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶，因为 Windows 一般来说太差，这种说法一般都成立。</p>
<p>问：
我的程序不运行了，我认为系统工具 X 有问题</p>
<p>答：
你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与库文件有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文档作后盾。</p>
<p>问：
我安装 Linux 或 X 遇到困难，你能帮忙吗？</p>
<p>答：
不行，我需要亲手操作你的电脑才能帮你排错，去向当地的 Linux 用户组寻求方便的帮助</p>
<p>注意：如果安装问题与某 Linux 发行版有关，在针对它的邮件列表、论坛或本地用户组织中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 “linux”和 所有被怀疑的硬件 [作关键词] 仔细搜索。</p>
<p>问：
我如何才能破解超级用户口令/盗取通道操作员的特权/查看某人的电子邮件？</p>
<p>答：
想做这种事情说明你是个卑劣的家伙，想让黑客教你做这种事情说明你是个白痴。</p>
<h2 id="好问题与坏问题">好问题与坏问题</h2>
<p>最后，我将通过举例来演示提问的智慧。同样的问题两种提法，一种愚蠢，另一种明智。</p>
<p>愚蠢：我在哪能找到关于 Foonly Flurbamatic 设备的东西？
这个问题在乞求得到 “搜搜该死的网络”（STFW） 式的回复。</p>
<p>明智： 我用谷歌搜索过“Foonly Flurbamatic 2600”，但没有找到什么有用的，有谁知道在哪能找到这种设备的编程信息？
这个人已经搜索过网络了，而且听起来他可能真的遇到了问题。</p>
<p>愚蠢： 我不能编译某项目的源代码，它为什么这么破？
提问者假设是别人搞砸了，太自大了。</p>
<p>明智： 某项目的源代码不能在某 Linux 6.2 版下编译。我读了常见问题文档，但其中没有与某 Linux 相关的内容。这是编译时的记录，我做错了什么吗？
提问者已经指明了运行环境，读了常见问题文档（FAQ），列出了错误，也没有假设问题是别人的过错，这家伙值得注意。</p>
<p>愚蠢： 我的主板有问题，谁能帮我？
某黑客对此的反应可能是：“是的，还需要帮你拍背和换尿布吗？”，然后是敲下删除键。</p>
<p>明智： 我在 S2464 主板上试过 X、Y 和 Z，当它们都失败后，又试了 A、B 和 C。注意我试 C 时的奇怪症状，显然某某东西正在做某某事情，这不是期望的行为。通常在 Athlon MP 主板上导致某某事情的原因是什么？有谁知道我还能再试点什么以确定问题？
相反地，这个人看来值得回答。他或她展现了解决问题的能力而不是坐等天上掉馅饼。</p>
<p>在最后那个问题中，注意“给我一个回答”与“请帮我看看我还能再做点什么测试以得到启发”之间细微但重要的差别。</p>
<p>事实上，最后那个问题基本上源于 2001 年 8 月 Linux 内核邮件列表（lkml）上的真实事件，是我（Eric）当时提了那个问题，我发现 Tyan S2462 主板有神秘的死机现像，邮件列表成员给我提供了解决此问题的关键信息。</p>
<p>通过这种提问方式，我给了别人可以咀嚼玩味的东西。我设法使之对参与者既轻松又有吸引力，也表明了对同行能力的尊敬并邀请他们与我一起协商。通过告诉他们我已经走过的弯路，我还表明了对他们宝贵时间的尊重。</p>
<p>事后，当我感谢大家并评论这次良好的经历时，一个 Linux 内核邮件列表的成员谈到，他认为我得到答案并不是因为我的名字挂在列表上，而只是因为我正确的提问方式。</p>
<p>黑客们在某种方面是非常不留情面的精英分子。我想在这事上他是对的，如果我表现得像个不劳而获的寄生虫，不管我是谁都会被忽略或斥责。他建议将整个事件作为对其它人提问的指导，这直接导致了本文的编写。</p>
<h2 id="如果得不到回答">如果得不到回答</h2>
<p>如果得不到回答，请不要认为我们不想帮你，有时只是因为被问到的小组成员的确不知道答案。没有回复不等于不被理睬，当然必须承认从外面很难看出两者的差别。</p>
<p>一般而言，直接将问题再张贴一次不好，这会被视为毫无意义的骚扰。耐心一点，知道你问题答案的人可能生活在不同的时区，有可能正在睡觉，也有可能你的问题一开始就没有组织好。</p>
<p>还有其它资源可以寻求帮助，通常是在一些面向新手的资源中。</p>
<p>有许多在线与本地的用户组织，虽然它们自己不编写任何软件，但是对软件很热心。这些用户组通常因互助和帮助新手而形成。</p>
<p>还有众多大小商业公司提供签约支持服务，别因为要付点钱才有支持就感到沮丧！毕竟，如果你车子的汽缸垫烧了，你多半还得花钱找个修理店把它弄好。即使软件没花你一分钱，你总不能指望服务支持都是免费的。</p>
<p>像 Linux 这样流行的软件，每个开发者至少有一万个以上的用户，一个人不可能应付这么多用户的服务要求。记住，即使你必须付费才能得到支持，也比你还得额外花钱买软件要少得多（而且对封闭源代码软件的服务支持与开源软件相比通常还要贵一点，也要差一点）。</p>
<h2 id="如何更好地回答">如何更好地回答</h2>
<p>态度和善一点。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p>
<p>对初犯者私下回复。 对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找 FAQ 都不知道。</p>
<p>如果你不确定，一定要说出来！ 一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家好玩就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p>
<p>如果帮不了忙，别妨碍。 不要在具体步骤上开玩笑，那样也许会毁了用户的安装 ── 有些可怜的呆瓜会把它当成真的指令。</p>
<p>探索性的反问以引出更多的细节。 如果你做得好，提问者可以学到点东西──你也可以。试试将很差的问题转变成好问题，别忘了我们都曾是新手。</p>
<p>尽管对那些懒虫报怨一声“读读该死的手册”（RTFM）是正当的，指出文档的位置（即使只是建议做个谷歌关键词搜索）会更好。</p>
<p>如果你决意回答，给出好的答案。 当别人正在用错误的工具或方法时别建议笨拙的权宜之计，应推荐更好的工具，重新组织问题。</p>
<p>请回答真正的问题！如果提问者已经做了自己该做的研究，并且说明尝试过X，Y，Z，A，B与C都没有得到想要的結果，那么回复“试试A或B” 或者给出一个内容为 “试一下X，Y，Z，A，B或C”的链接将极其无益！</p>
<p>帮助你的社区从中学习。当回复一个好问题时，问问自己 “如何修改相关文件或 FAQ 文档以免再次解答同样的问题？”，接着再向文档维护者发一份补丁。</p>
<p>如果你是在研究一番后才做出的回答，展现你的技巧而不是直接端出结果。毕竟“授人以鱼，不如授人以渔”。</p>
<h2 id="相关资源">相关资源</h2>
<p>如果需要个人电脑、Unix 和互联网如何工作的基础知识，参阅 Unix 和互联网工作的基本原理。</p>
<p>当你发布软件或补丁时，试着按 软件发布实践 操作。</p>
<h2 id="鸣谢">鸣谢</h2>
<p>伊夫林.米切尔（Evelyn Mitchell）贡献了一些愚蠢问题例子并启发了编写“如何更好地回答问题”这一节，米哈伊尔.罗门迪克（Mikhail Ramendik）贡献了一些特别有价值的建议和改进。</p>
]]></content>
		</item>
		
		<item>
			<title>k8s在Mac上的安装和使用</title>
			<link>https://blog.v5u.win/posts/docker/docker-k8s/</link>
			<pubDate>Mon, 08 Jul 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/docker/docker-k8s/</guid>
			<description>安装 在Mac下安装前提条件，已经安装好了docker desktop，并修改了代理源 https://registry.docker-cn.co</description>
			<content type="html"><![CDATA[<h1 id="安装">安装</h1>
<p>在Mac下安装前提条件，已经安装好了docker desktop，并修改了代理源 <a href="https://registry.docker-cn.com">https://registry.docker-cn.com</a>。</p>
<p>直接在docker桌面端开启k8s是没用的，一直提示 kubernetes is starting… 😢 我竟然不知道，这样子持续了n天。​</p>
<h2 id="自己手动编译安装-k8s">自己手动编译安装 k8s</h2>
<ul>
<li>
<p>git clone <a href="https://github.com/maguowei/k8s-docker-for-mac.git">https://github.com/maguowei/k8s-docker-for-mac.git</a></p>
</li>
<li>
<p>cd k8s-docker-for-mac/</p>
</li>
<li>
<p>./load_images.sh</p>
</li>
</ul>
<h2 id="安装minikube">安装minikube</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e"># install minikube</span>
</span></span><span style="display:flex;"><span>$ brew cask install minikube
</span></span><span style="display:flex;"><span>$ brew install docker-machine-driver-xhyve
</span></span><span style="display:flex;"><span><span style="color:#75715e"># docker-machine-driver-xhyve need root owner and uid</span>
</span></span><span style="display:flex;"><span>$ sudo chown root:wheel <span style="color:#66d9ef">$(</span>brew --prefix<span style="color:#66d9ef">)</span>/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve
</span></span><span style="display:flex;"><span>$ sudo chmod u+s <span style="color:#66d9ef">$(</span>brew --prefix<span style="color:#66d9ef">)</span>/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve
</span></span></code></pre></div><p>最后启动minikube</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e"># start minikube.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># http proxy is required in China</span>
</span></span><span style="display:flex;"><span>$ minikube start --docker-env HTTP_PROXY<span style="color:#f92672">=</span>http://proxy-ip:port --docker-env HTTPS_PROXY<span style="color:#f92672">=</span>http://proxy-ip:port --vm-driver<span style="color:#f92672">=</span>xhyve
</span></span></code></pre></div><h2 id="ubuntu">Ubuntu</h2>
<p>安装 kubeadm kubectl kubelet 三个包</p>
]]></content>
		</item>
		
		<item>
			<title>Nginx 动态生成缩略图</title>
			<link>https://blog.v5u.win/posts/system/system-nginx/</link>
			<pubDate>Mon, 01 Jul 2019 15:05:09 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-nginx/</guid>
			<description>[TOC] 有的时候要生成大量尺寸的缩图，事先不知道有哪些尺寸，所以可以用php动态生成； 1.在nginx中配置 location ~ ..(gif|jpg|jpeg|png|bmp)$ { if ( !-f $request_filename) { rewrite ^(.)/(.*)(\d+)(\d+).(gif|jpg|jpeg|png|bmp) /ImageTransferController.php?s=1/2_3_4.5; } expires 30d; } 完善 ImageTransferController.php</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<p>有的时候要生成大量尺寸的缩图，事先不知道有哪些尺寸，所以可以用php动态生成；</p>
<p>1.在nginx中配置</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nginx" data-lang="nginx"><span style="display:flex;"><span><span style="color:#66d9ef">location</span> ~ <span style="color:#e6db74">..(gif|jpg|jpeg|png|bmp)$</span>
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">if</span> <span style="color:#e6db74">(</span> <span style="color:#e6db74">!-f</span> $request_filename<span style="color:#e6db74">)</span> {
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">rewrite</span> <span style="color:#e6db74">^(.)/(.*)(\d+)(\d+).(gif|jpg|jpeg|png|bmp)</span> <span style="color:#e6db74">/ImageTransferController.php?s=1/2_3_4.5</span>;
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">expires</span>      <span style="color:#e6db74">30d</span>;
</span></span><span style="display:flex;"><span>        }
</span></span></code></pre></div><ol start="2">
<li>完善 ImageTransferController.php 文件</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>免费-读书笔记</title>
			<link>https://blog.v5u.win/posts/read/read-%E5%85%8D%E8%B4%B9%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
			<pubDate>Fri, 28 Jun 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/read/read-%E5%85%8D%E8%B4%B9%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
			<description>免费 读书笔记 之前我们所学习的营销学，财会学，都是建立在收费理论之上的，因为资源是稀缺的，所以就必然有选择，有选择机会有机会成本，价格的下限是</description>
			<content type="html"><![CDATA[<p>免费 读书笔记</p>
<p>之前我们所学习的营销学，财会学，都是建立在收费理论之上的，因为资源是稀缺的，所以就必然有选择，有选择机会有机会成本，价格的下限是生产者的平均成本，而上限是消费者的意愿，同行如果激烈竞争，那么价格就会趋近于平均成本。而垄断或者供不应求，就会接近于意愿价格。而互联网世界的出现，让免费成为了一种新的模式，这种做法完全是违背之前所有商业原则的，但他就这么出现了，而且越来越广泛的存在。已经让很多商业活动被彻底颠覆，一些企业被免费的浪潮完全淘汰出局了。</p>
<p>免费这本书，是继长尾理论后，安德森对于互联网经济的延伸思考，是一脉相承，长尾理论是互联网1.0的话，那么免费就是互联网范围经济的2.0版本，前者是从品类角度的颠覆，后者是从价格上的总结。</p>
<p>免费到底是什么意思，也许并不是大家理解的那样，不要钱，经济学家把它叫做交叉补贴，交叉补贴可以有很多不同的方式，比如用付费产品来补贴免费产品，用日后的付费来补贴当前免费，由付费人群来给不付费人群补贴。世界就是一个交叉补贴的大舞台，你在浏览免费的内容的时候，其实也帮别人刷了流量和信誉。而流量和信誉会变成别人的收入。</p>
<p>如果要把交叉补贴分类，主要有4类免费。</p>
<p>第一种，直接交叉补贴，用一款免费的东西吸引你的注意，然后把成本摊到别的商品上。</p>
<p>第二种，三方市场，也就是我们常说的，羊毛出在猪身上，让狗来买单，你提供免费的内容，服务，软件，然后让广告商来交费。在这个模式中，广告商就是一个第三方的身份。</p>
<p>第三种，免费加收费模式，就是刚才我们讲的游戏模式酒吧模式，当然这也不止于游戏，很多软件也是如此，免费版只提供基础数据，而收费版则提供专业服务。免费加收费模式的精髓就是提供差别化服务，一方面赚人气，另一方面赚钱，一般这个模式遵循5%定律，也就是5%的付费用户，形成了一个网站全部的收入来源。20个人中，只有1个人是付费的，其他19个是免费的，由于免费，所以这部分用户也没啥需求，所以对免费用户的服务成本其实非常低，趋近于0，而只要服务好那个付费用户就可以了。</p>
<p>第四种，非货币市场，也就是纯粹不为赚钱而存在的产品，比如维基百科，他就没有利益驱动，就是一些人在进行知识共享。纯粹的利他主义。</p>
<p>政府提供的服务也是一种交叉补贴，政府的钱来自于集体纳税人，但他的一些公共设施，只能惠及一部分人民生，所以他并不是直接的，一对一的，而是间接的，错配的。看似政府提供了很多免费的东西，但背后都有其他人买单。</p>
<p>昨天我们从世界经济供给的角度分析了，世界随着技术的进步，商品已经变得越来越充裕，资源的价格正在逐渐降低。未来这种趋势只能更快，而不会逆转。那么今天我们再来从需求的角度来分析下免费，免费会让你忽略成本，从而减少纠结和犹豫。</p>
<p>免费是一种心态，但是花一分钱订阅，其实又是另外一种心态，一分钱肯定是无足重轻，但是他却产生了一层新的意思，那就是在脑海中引入了成本的概念，也就是说无论多少钱，你会马上想到，这钱花的是不是值，但如果是完全免费的话，你就不会再考虑这个问题。</p>
<p>所以免费是一个终极策略，一旦你免费了，别人就不会再超越你，顶多跟你比肩。如果你是市场中唯一一个免费的人，那么你很快就会获取大量的市场份额，当年周鸿祎就是这么干死杀毒软件的。</p>
<p>其实，商业之中，只有两个市场， 一个是免费市场，另一个是非免费市场，他们有着天壤之别，如果你收费，都会有一条营收曲线，收费越低，销量越高。而你的利益会有一个平衡点，所以企业家经常思考的问题就是如何在销量与收费之间取舍，达到利益最大化的目的。但是一旦你免费，那么销量就会趋近于无穷大。甚至要比只卖1分钱，大的多的多。</p>
<p>所以便宜和免费之间是有区别的，在收费的世界里你需要苦心经营去抓住每一个顾客的体验，但免费会开创另一个市场，免费的生意很好做，而收费的生意很难做下去。</p>
<p>有一家网站叫做扎珀斯，是卖鞋的电商，他的做法也是免运费，而且一次会给你带好几个号码的鞋子，你试穿合不合脚，留下最合适的，把不合适的退回去即可。但他们家的鞋子比同类电商略贵一点，显然这种服务的价格已经包含在了商品之中。但对于很多用户来说，买鞋最大的风险就是不合脚，而他们的做法，刚好规避了这个风险，而且还让你有一种更好的体验。</p>
<p>时间和金钱，往往是人生的两个极端的维度，如果一个年轻人，他可能很穷，但他却有很多的时间，而岁数大了，你可能会有很多钱是你人生财富的巅峰，但留给你的时间却不多了。商业社会也是如此，像乔布斯说，有些人可能会花很多时间去找盗版音乐，从而省钱，但也有人会选择花钱下载音质更好的正版音乐。</p>
<p>信息对我们来说，既贵又便宜，说他贵是因为他很宝贵，而说他便宜是他在网络中的传输成本持续下降已经接近于0，所以最后的结论就是充裕的信息将变得免费，而稀缺的信息将变得昂贵。或者说，人人都能得到的大众版信息将变得免费，而客户定制化的，对你有独特意义的信息将变得十分昂贵。</p>
<p>价格等于边际成本</p>
<p>现在美国人还有一种玩法，把教科书也可以免费，而且把它变成开源模式，也就是先把教科书放在线上，然后任何人都可以对教科书进行再加工，形成自己的新内容，你也可以销售你重新编辑后的教科书，估计很多学渣是愿意买学霸笔记版教科书的。这就形成了一个良性的循环，有利于教科书的不断优化。学霸们还可以通过这种优化教科书的方式，赚点外快。</p>
<p>免费经济已经对经济学造成了冲击，信息替代了货币，个体注意力替代了一般等价物，信息市场替代了股票市场。钞票不再是市场上最重要的交易信号。相反两个非货币因素，开始被大家重视，也就是注意力经济和声誉经济。</p>
<p>其实这也很好理解，现在信息大爆炸，他消耗了我们太多的注意力，所以让我们的注意力开始变得稀缺起来，稀缺的东西通常就会很贵。</p>
<p>而在游戏中，也发生着金钱与时间的转换，年轻的玩家时间充裕，所以他们会选择多做任务多练级，然后打出好装备，交换给那些没有时间练级的中年玩家，他们会选择用金钱，来交换其他人的时间。游戏的设计者就是要促进这种交换，力求免费用户和付费用户的平衡。</p>
<p>昨天我们说到了浪费有时候也是一种美德。作者说了一句很关键的话，匮乏让大规模更具价值，而充裕让多样化更具价值，在上个世纪，我们擅长匮乏思维，而这个世纪，我们要慢慢的适应充裕思维，也就是多样化思维。</p>
<p>总结一下，匮乏经济，规则是准入制，而且是主观自大的，比如官媒永远就是自说自话，决策过程是自上而下的，管理风格也是命令加控制，充裕经济则刚好相反，他是只要不禁止，所有人都可以参与，是一种平等模式，有需要的才是最好的，他的决策过程是从下往上的，智慧来自民间，而他的管理是不受控制的。从趋势上来讲，充裕经济代表未来，正在杀死匮乏经济。</p>
<p>作者说，免费经济的前沿阵地在中国和巴西，而理由就是，我们这里盗版横行</p>
<p>世界依然在往前发展，作者说很可能未来会出现后匮乏时代，也即是我们走的太远，以至于忘记了来时的路，</p>
<p>所以充裕带来了免费，但后匮乏可能又会让以前的一些东西变得昂贵起来，比如现在大家又讲究吃有机蔬菜，吃人工散养的有机肉类，穿手工制作的布鞋，和衣服。</p>
<p>21世纪已经滚滚而来，商业模式也已经发生了全方位的变化，很多人到现在都不知道为什么自己的生意每况愈下，因为你落伍了，人家玩的东西你已经看不懂了。别人都在免费吸引用户，而你还在做单品销售，这就整整差了一个时代。所以各位企业家，各位职场精英，是时候给自己洗洗脑了，看未来的生意该怎么做，你们公司的产品能够免费吗？能够付费补贴免费吗？能够引入第三方付费吗？能够转移付费吗？</p>
<p><img src="https://i.loli.net/2019/06/28/5d1579336c20168760.jpeg" alt="需求曲线.jpeg"></p>
<p><img src="https://i.loli.net/2019/06/28/5d1579605c0a744552.jpeg" alt="复合学习曲线.jpeg"></p>
]]></content>
		</item>
		
		<item>
			<title>Go Toml</title>
			<link>https://blog.v5u.win/posts/go/go-toml/</link>
			<pubDate>Wed, 26 Jun 2019 15:33:44 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-toml/</guid>
			<description>[TOC] 常用的配置文件有：ini, ymal, json, toml 说一下为什么要选择 toml。toml 格式是最新公布的配置文件格式，由GitHub创始人 Tom Preston-Werner 发明。TOML 的</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<p>常用的配置文件有：ini, ymal, json, toml</p>
<p>说一下为什么要选择 toml。toml 格式是最新公布的配置文件格式，由GitHub创始人 Tom Preston-Werner 发明。TOML 的目标是成为一个极简的配置文件格式。TOML 被设计成可以无歧义地被映射为哈希表，从而被多种语言解析。</p>
<h3 id="toml的优势">TOML的优势</h3>
<ul>
<li>可以添加注释</li>
<li>没有缩进要求</li>
<li>表达简洁，丰富。</li>
<li>大小写敏感</li>
</ul>
<h3 id="写法-configtoml">写法 config.toml</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span>[<span style="color:#a6e22e">app</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">#app名称</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;project-web&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;http://localhost&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">port</span> = <span style="color:#e6db74">&#34;:8080&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">debug</span> = <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">database</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">dirver</span> = <span style="color:#e6db74">&#34;mysql&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">mysql</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">dbname</span> = <span style="color:#e6db74">&#34;@tcp(127.0.0.1:3306)/superstar?charset=utf8&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">username</span> = <span style="color:#e6db74">&#34;root&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">password</span> = <span style="color:#e6db74">&#34;333&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">website</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">static_uri</span> = <span style="color:#e6db74">&#34;/static&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">site_title</span> = <span style="color:#e6db74">&#34;后台管理&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">copy_right</span> = <span style="color:#e6db74">&#34;&lt;small&gt;&amp;copy;2019&lt;/small&gt;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">image</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">image_lib</span> = <span style="color:#e6db74">&#34;Imagick&#34;</span> <span style="color:#75715e"># GD || Imagick</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">image_path</span>   = <span style="color:#e6db74">&#34;../app_images/&#34;</span> <span style="color:#75715e">#// 目录可读写</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">image_url</span>    = <span style="color:#e6db74">&#34;image/&#34;</span> <span style="color:#75715e">#// http://static.xxx.com/image/car_photo/150x150/19/sdddddd</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">image_org</span>    = <span style="color:#e6db74">&#39;org&#39;</span> <span style="color:#75715e">#// 原图路径名</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">image_tmp</span>    = <span style="color:#e6db74">&#34;tmp&#34;</span> <span style="color:#75715e">#// 临时路径名</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">image_types</span>  = [<span style="color:#e6db74">&#34;jpg&#34;</span>,<span style="color:#e6db74">&#34;jpeg&#34;</span>,<span style="color:#e6db74">&#34;png&#34;</span>,<span style="color:#e6db74">&#34;gif&#34;</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">water_mark</span>   = <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">#// 汽车品牌LOGO</span>
</span></span><span style="display:flex;"><span>  [[<span style="color:#a6e22e">image</span>.<span style="color:#a6e22e">image_categroy</span>]]
</span></span><span style="display:flex;"><span>    [[<span style="color:#a6e22e">image_categroy</span>.<span style="color:#a6e22e">car_logo</span>]]
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">#// 哈希路径</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">paths</span> = <span style="color:#e6db74">&#34;/car_logo/org/&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">#// 支持的尺寸</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sizes</span> = [<span style="color:#e6db74">&#34;100x100&#34;</span>,<span style="color:#e6db74">&#34;200x200&#34;</span>]
</span></span><span style="display:flex;"><span>	
</span></span></code></pre></div><h3 id="解析">解析</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">config</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;github.com/BurntSushi/toml&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Config</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">App</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Name</span>  <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">URL</span>   <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Port</span>  <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Debug</span> <span style="color:#66d9ef">bool</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Database</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Dirver</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>	} <span style="color:#e6db74">`toml:&#34;database&#34;`</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Mysql</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Dbname</span>   <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Username</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Password</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>	} <span style="color:#e6db74">`toml:&#34;mysql&#34;`</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Website</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">static_uri</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">site_title</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">copy_right</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Image</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">ImageLib</span>   <span style="color:#66d9ef">string</span>   <span style="color:#e6db74">`toml:&#34;image_lib&#34;`</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">ImagePath</span>  <span style="color:#66d9ef">string</span>   <span style="color:#e6db74">`toml:&#34;image_path&#34;`</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">ImageURL</span>   <span style="color:#66d9ef">string</span>   <span style="color:#e6db74">`toml:&#34;image_ur&#34;`</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">ImageOrg</span>   <span style="color:#66d9ef">string</span>   <span style="color:#e6db74">`toml:&#34;image_org&#34;`</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">ImageTmp</span>   <span style="color:#66d9ef">string</span>   <span style="color:#e6db74">`toml:&#34;image_tmp&#34;`</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">ImageTypes</span> []<span style="color:#66d9ef">string</span> <span style="color:#e6db74">`toml:&#34;image_types&#34;`</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">WaterMark</span>  <span style="color:#66d9ef">string</span>   <span style="color:#e6db74">`toml:&#34;water_mark&#34;`</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ImageCategory</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">CarLogo</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>				<span style="color:#a6e22e">Paths</span> <span style="color:#66d9ef">string</span>   <span style="color:#e6db74">`toml:&#34;paths&#34;`</span>
</span></span><span style="display:flex;"><span>				<span style="color:#a6e22e">Sizes</span> []<span style="color:#66d9ef">string</span> <span style="color:#e6db74">`toml:&#34;sizes&#34;`</span>
</span></span><span style="display:flex;"><span>			} <span style="color:#e6db74">`toml:&#34;carLogo&#34;`</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">ImgLogo</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>				<span style="color:#a6e22e">Paths</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`toml:&#34;paths&#34;`</span>
</span></span><span style="display:flex;"><span>			} <span style="color:#e6db74">`toml:&#34;imgLogo&#34;`</span>
</span></span><span style="display:flex;"><span>		} <span style="color:#e6db74">`toml:&#34;imageCategory&#34;`</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 解析类初始化
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">conf</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Config</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">AppConfig</span>() <span style="color:#f92672">*</span><span style="color:#a6e22e">Config</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">conf</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">conf</span> = new(<span style="color:#a6e22e">Config</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">file</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;../config/config.toml&#34;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">toml</span>.<span style="color:#a6e22e">DecodeFile</span>(<span style="color:#a6e22e">file</span>, <span style="color:#a6e22e">conf</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Toml Error!&#34;</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">conf</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>开源贡献者盟约</title>
			<link>https://blog.v5u.win/posts/system/system-%E5%BC%80%E6%BA%90%E8%B4%A1%E7%8C%AE%E8%80%85%E7%9B%9F%E7%BA%A6/</link>
			<pubDate>Tue, 25 Jun 2019 15:38:20 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-%E5%BC%80%E6%BA%90%E8%B4%A1%E7%8C%AE%E8%80%85%E7%9B%9F%E7%BA%A6/</guid>
			<description>[TOC] 参与者公约 我们的保证 为了促进一个开放透明且友好的环境，我们作为贡献者和维护者保证：无论年龄、种族、民族、性别认同和表达（方式）、体型、身体</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="参与者公约">参与者公约</h1>
<h2 id="我们的保证">我们的保证</h2>
<p>为了促进一个开放透明且友好的环境，我们作为贡献者和维护者保证：无论年龄、种族、民族、性别认同和表达（方式）、体型、身体健全与否、经验水平、国籍、个人表现、宗教或性别取向，参与者在我们项目和社区中都免于骚扰。</p>
<h2 id="我们的标准">我们的标准</h2>
<p>有助于创造正面环境的行为包括但不限于：</p>
<ul>
<li>使用友好和包容性语言</li>
<li>尊重不同的观点和经历</li>
<li>耐心地接受建设性批评</li>
<li>关注对社区最有利的事情</li>
<li>友善对待其他社区成员</li>
</ul>
<p>身为参与者不能接受的行为包括但不限于：</p>
<ul>
<li>使用与性有关的言语或是图像，以及不受欢迎的性骚扰</li>
<li>捣乱/煽动/造谣的行为或进行侮辱/贬损的评论，人身攻击及政治攻击</li>
<li>公开或私下的骚扰</li>
<li>未经许可地发布他人的个人资料，例如住址或是电子地址</li>
<li>其他可以被合理地认定为不恰当或者违反职业操守的行为</li>
</ul>
<h2 id="我们的责任">我们的责任</h2>
<p>项目维护者有责任为「可接受的行为」标准做出诠释，以及对已发生的不被接受的行为采取恰当且公平的纠正措施。</p>
<p>项目维护者有权利及责任去删除、编辑、拒绝与本行为标准有所违背的评论 (comments)、提交 (commits)、代码、wiki 编辑、问题 (issues) 和其他贡献，以及项目维护者可暂时或永久性的禁止任何他们认为有不适当、威胁、冒犯、有害行为的贡献者。</p>
<h2 id="使用范围">使用范围</h2>
<p>当一个人代表该项目或是其社区时，本行为标准适用于其项目平台和公共平台。</p>
<p>代表项目或是社区的情况，举例来说包括使用官方项目的电子邮件地址、通过官方的社区媒体账号发布或线上或线下事件中担任指定代表。</p>
<p>该项目的呈现方式可由其项目维护者进行进一步的定义及解释。</p>
<h2 id="强制执行">强制执行</h2>
<p>可以通过[在此放入EMAIL]，来联系项目团队来举报滥用、骚扰或其他不被接受的行为。</p>
<p>任何维护团队认为有必要且适合的所有投诉都将进行审查及调查，并做出相对应的回应。项目小组有对事件回报者有保密的义务。具体执行的方针近一步细节可能会单独公布。</p>
<p>没有切实地遵守或是执行本行为标准的项目维护人员，可能会因项目领导人或是其他成员的决定，暂时或是永久地取消其参与资格。</p>
<h2 id="来源">来源</h2>
<p>本行为标准改编自<a href="https://www.contributor-covenant.org">贡献者公约</a>，版本 1.4
可在此观看https://www.contributor-covenant.org/zh-cn/version/1/4/code-of-conduct.html</p>
]]></content>
		</item>
		
		<item>
			<title>Go Iris Redis</title>
			<link>https://blog.v5u.win/posts/go/go-iris-redis/</link>
			<pubDate>Tue, 11 Jun 2019 10:15:20 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-iris-redis/</guid>
			<description>[TOC] iris 中使用 Redis iris 内置对 Redis 的支持，但是她和 session 结合的比较紧密，比如每一个方法传参都大部分都有 sid，在当前文件 database.go 找了半天没找到在哪里定义了 sid，</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="iris-中使用-redis">iris 中使用 Redis</h1>
<p>iris 内置对 Redis 的支持，但是她和 session 结合的比较紧密，比如每一个方法传参都大部分都有 sid，在当前文件 database.go 找了半天没找到在哪里定义了 sid，<code>func (db *Database) Get(sid string, key string) (value interface{})</code></p>
<p>只能推断是 sessionId，果然在 Session struct 中发现了 sid。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>所以可以下结论，iris中必须使用内置的 Redis 是只对 session 的配合支持，如果需要单独操作 Redis 数据库，则需要使用其他的第三方库来操作，比如：redigo 和 go-redis/redis</p>
]]></content>
		</item>
		
		<item>
			<title>docker 安装并使用Redis</title>
			<link>https://blog.v5u.win/posts/docker/docker-redis/</link>
			<pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/docker/docker-redis/</guid>
			<description>docker 安装并使用Redis docker search redis docker pull redis #获得的是lasted版本 redis:3.2 配置redis mkdir -p /root/redis/data mkdir -p /root/redis/conf vi redis.conf # redis.conf bind 127.0.0.1 protected-mode yes appendonly no//持久化 # requirepass foobared p.s. protected-mode 是在没有显</description>
			<content type="html"><![CDATA[<p>docker 安装并使用Redis</p>
<ol>
<li>
<p>docker search redis</p>
</li>
<li>
<p>docker pull redis #获得的是lasted版本 redis:3.2</p>
</li>
<li>
<p>配置redis</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>   mkdir -p /root/redis/data
</span></span><span style="display:flex;"><span>   mkdir -p /root/redis/conf
</span></span><span style="display:flex;"><span>   vi redis.conf
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>   <span style="color:#75715e"># redis.conf</span>
</span></span><span style="display:flex;"><span>   bind 127.0.0.1
</span></span><span style="display:flex;"><span>   protected-mode yes
</span></span><span style="display:flex;"><span>   appendonly no//持久化
</span></span><span style="display:flex;"><span>   <span style="color:#75715e"># requirepass foobared</span>
</span></span></code></pre></div><p>p.s.
protected-mode 是在没有显示定义 bind 地址（即监听全网断），又没有设置密码 requirepass
时，只允许本地回环 127.0.0.1 访问。 也就是说当开启了 protected-mode 时，如果你既没有显示的定义了 bind
监听的地址，同时又没有设置 auth 密码。那你只能通过 127.0.0.1 来访问 redis 服务</p>
<ol start="4">
<li>启动redis</li>
</ol>
<p>命令行启动 <code>docker run -p 6379:6379 --name myredis  -d redis</code></p>
<ol start="5">
<li>测试或debug</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e"># 查看活跃的容器</span>
</span></span><span style="display:flex;"><span>docker ps
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 如果没有 myredis 说明启动失败 查看错误日志</span>
</span></span><span style="display:flex;"><span>docker logs myredis
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 查看 myredis 的 ip 挂载 端口映射等信息</span>
</span></span><span style="display:flex;"><span>docker inspect myredis
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 查看 myredis 的端口映射</span>
</span></span><span style="display:flex;"><span>docker port myredis	
</span></span></code></pre></div><p>redis 简单使用
进入后台操作系统：redis-cli</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$redis-cli
</span></span><span style="display:flex;"><span>redis 127.0.0.1:6379&gt;
</span></span><span style="display:flex;"><span>redis 127.0.0.1:6379&gt; PING
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>PONG
</span></span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>iOS SwiftUI</title>
			<link>https://blog.v5u.win/posts/swift/swift-%E4%BB%80%E4%B9%88%E6%98%AFswiftui/</link>
			<pubDate>Wed, 05 Jun 2019 10:37:16 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/swift/swift-%E4%BB%80%E4%B9%88%E6%98%AFswiftui/</guid>
			<description>[TOC] 什么是swiftUI？ Apple的解释： 更好的应用。更少的代码。 SwiftUI是一种创新的，非常简单的方法，可以通过Swift的强大功能在</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="什么是swiftui">什么是swiftUI？</h1>
<p>Apple的解释：</p>
<blockquote>
<p>更好的应用。更少的代码。</p>
</blockquote>
<p>SwiftUI是一种创新的，非常简单的方法，可以通过Swift的强大功能在所有Apple平台上构建用户界面。仅使用一组工具和API为任何Apple设备构建用户界面。SwiftUI具有易于阅读和自然编写的声明式Swift语法，可与新的Xcode设计工具无缝协作，使您的代码和设计完美同步。自动支持动态类型，暗模式，本地化和可访问性意味着您的第一行SwiftUI代码已经是您编写过的最强大的UI代码。</p>
<h2 id="声明性语法">声明性语法</h2>
<p>SwiftUI使用声明性语法，因此您可以简单地说明您的用户界面应该做什么。例如，您可以编写需要包含文本字段的项目列表，然后描述每个字段的对齐方式，字体和颜色。您的代码比以前更简单，更易于阅读，从而节省您的时间和维护。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>这种声明式风格甚至适用于复杂的概念，如动画。轻松地将动画添加到几乎任何控件中，并选择只有几行代码的即用型效果集合。在运行时，系统会处理创建平滑移动所需的所有步骤，甚至可以处理中断以保持应用稳定。通过动画这么简单，您将寻找新的方法来让您的应用程序活跃起来。</p>
<h2 id="设计工具">设计工具</h2>
<p>Xcode 11包含直观的新设计工具，使得使用SwiftUI构建界面就像拖放一样简单。当您在设计画布中工作时，您编辑的所有内容都与相邻编辑器中的代码完全同步。在您键入时，代码会立即显示为预览，您对该预览所做的任何更改都会立即显示在您的代码中。Xcode会立即重新编译您的更改，并将其插入到应用程序的运行版本中，始终可见且可编辑。</p>
<p>**拖放。**只需拖动画布上的控件即可在用户界面中排列组件。单击以打开检查器以选择字体，颜色，对齐方式和其他设计选项，并使用光标轻松重新排列控件。许多这些可视化编辑器也可以在代码编辑器中使用，因此您可以使用检查器为每个控件发现新的修改器，即使您更喜欢手动编码界面部分。您还可以从库中拖动控件并将其拖放到设计画布上或直接放在代码上。</p>
<p>**动态更换。**Swift编译器和运行时完全嵌入到Xcode中，因此您的应用程序将不断构建和运行。您看到的设计画布不仅仅是您的用户界面的近似 – 它是您的实时应用程序。Xcode可以直接在您的实时应用程序中使用“动态替换”交换已编辑的代码，这是Swift中的一项新功能。</p>
<p>**预览。**您现在可以创建任何SwiftUI视图的一个或多个预览以获取示例数据，并配置用户可能看到的几乎任何内容，例如大字体，本地化或暗模式。预览还可以在任何设备和任何方向上显示您的UI。</p>
<h2 id="所有apple平台都是原生的">所有Apple平台都是原生的</h2>
<p>SwiftUI建立在数十年创建世界上最具创新性和直观的用户界面的经验之上。用户喜欢Apple生态系统的所有内容，例如控件和特定于平台的体验，都会在您的代码中呈现出来。SwiftUI是真正的原生，因此您的应用程序可以通过少量代码和交互式设计画布直接访问每个平台的成熟技术。</p>
<h2 id="对开发者和公司的影响">对开发者和公司的影响</h2>
<p>通过swiftUI的发布可以看到，Apple 在逐步拜托对 Objective-C &amp; Cocoa 的依赖，将精力和资源倾斜到swift语言上，这一次是对UIKit的摆脱。以 Apple 一贯的强势政策，很有可能后期会逐步放弃对 Objective-C 的持续优化(事实上有证据表明已经开始了)和App Store 上的政策制裁。以到达逐步引导开发者加入到新的平台上，这是在之前有过先例的：比如Mac OS从 power-pc 架构转到 x86架构.这将会是一个逐步渐进的过程，但是不会太长最多一两年，并且改变不可逆。</p>
<p>对于公司和开发者来说，最好的莫过于全面拥抱 swift，但是考虑到很多旧项目使用 OC ，已经形成了强大的路径依赖，越大的项目组转身会越困难。但是大项目组人力不缺，资源不缺，有强大的容错能力，我认为反而是大项目组会最早探索，转身稳中有快。而对于新项目和创业公司来说则没有任何技术债务，技术选型会更轻松一些，完全受开发人员的控制。而最尴尬的莫过于中型项目和团队。人手紧缺，业务变动剧烈，最关键的是技术leader如果没有技术前瞻性的话，担心在技术转型中影响业务发展，反而是最保守的。处在这个位置的开发人员是最痛苦的。</p>
<p>解决办法就是：开发自己的项目，拥有完全独立自主的决定权。代价就是每年$99≈￥688。</p>
<p>公司的解决方案就是：在新的项目中使用swift。不建议使用混合开发，编译速度慢，有想想不到的问题</p>
<h2 id="版本要求">版本要求</h2>
<p>SwiftUI 支持的设备要求版本较高，将在7月份开启公测，官方介绍如下：</p>
<p>只支持</p>
<p>Xcode 11+ Bata</p>
<p>iOS 13.0+ Beta</p>
<p>macOS 10.15+ Beta</p>
<p>UIKit for Mac 13.0+ Beta</p>
<p>tvOS 13.0+ Beta</p>
<p>watchOS 6.0+ Beta</p>
]]></content>
		</item>
		
		<item>
			<title>Go DI LoC 依赖注入研究</title>
			<link>https://blog.v5u.win/go-di-loc-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%A0%94%E7%A9%B6/</link>
			<pubDate>Wed, 29 May 2019 03:18:11 +0000</pubDate>
			
			<guid>https://blog.v5u.win/go-di-loc-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%A0%94%E7%A9%B6/</guid>
			<description>依赖注入，控制反转 设计模式 目的：实现模块与项目的解耦 实现流程 首先模块有指针，其次DI拿到指针，再次DI将指针赋给调用者 共调研了三个框架：ir</description>
			<content type="html"><![CDATA[<p>依赖注入，控制反转 设计模式</p>
<p>目的：实现模块与项目的解耦</p>
<p>实现流程</p>
<p>首先模块有指针，其次DI拿到指针，再次DI将指针赋给调用者</p>
<p>共调研了三个框架：iris内置的di&amp;mvc，uber-dig，google/wire</p>
<p>最终决定使用 wire</p>
<p>google DI 框架 wire</p>
<p>它通过使用代码生成构建容器来避免运行时反射。</p>
<p>用法：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<pre><code>$ go get github.com/google/wire/cmd/wire
$ wire
</code></pre>
<p>执行 wire 解析 container.go ——&gt; wire_gen.go</p>
<p>解析完毕后删除 container.go 文件, 使用 wire_gen.go 中的方法就行</p>
]]></content>
		</item>
		
		<item>
			<title>Go 单例</title>
			<link>https://blog.v5u.win/posts/go/go-%E5%8D%95%E4%BE%8B/</link>
			<pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-%E5%8D%95%E4%BE%8B/</guid>
			<description>为什么使用单例？ 由于Go的多协程机制，当只是单核的时候，变量还不会出现问题，但是当设置成多核之后，就会涉及到变量的作用域问题，只用普通方式常</description>
			<content type="html"><![CDATA[<p>为什么使用单例？</p>
<p>由于Go的多协程机制，当只是单核的时候，变量还不会出现问题，但是当设置成多核之后，就会涉及到变量的作用域问题，只用普通方式常见的变量在其他线程上会得到错误的方法</p>
<hr>
<p>单例的作用不用我多说，大家都知道，那么在go中如何构造单例呢，下面是我的总结。</p>
<p>一、 sync.Once用法</p>
<p>在Go中有一个简洁的方法就是使用sync.Once，它可以在多协程中起到控制作用。实现起来也非常简单。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>二、使用加锁机制</p>
<p>在Go语言中有个基础对象sync.Mutex，可以实现协程之间的同步逻辑。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>三、简单粗暴模式.</p>
<p>这种方式实现起来特别简单，直接判断一个实力是不是为nil， 如果是，则新生成；否则返回已有的。但它和多数语言一样，只适合用在单线程。这个就很鸡肋，几乎没有什么应用场景，倒是bug经常出在这里。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>测试代码如下，从运行结果来看，都是一致的。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<blockquote>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>Go语言 imagick 使用总结</title>
			<link>https://blog.v5u.win/posts/go/go-imagick-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link>
			<pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-imagick-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid>
			<description>Go语言imagick 使用总结 imagick 是一个开源的 c语言图片处理库，所以需要本地安装，并且配置 CGO Mac 安装imagic brew install imagemagick &amp;laquo;&amp;laquo;&amp;laquo;&amp;lt; HEAD:posts/2</description>
			<content type="html"><![CDATA[<h1 id="go语言imagick-使用总结">Go语言imagick 使用总结</h1>
<p>imagick 是一个开源的 c语言图片处理库，所以需要本地安装，并且配置 CGO</p>
<p>Mac 安装imagic</p>
<p><code>brew install imagemagick</code>
&laquo;&laquo;&laquo;&lt; HEAD:posts/2019-07-16-go语言-imagick-使用总结.md</p>
<p>有的可能需要安装 <code>brew install pkg-config</code></p>
<p>=======</p>
<p>有的可能需要安装 	<code> brew install pkg-config</code></p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>9b93207d813e2b213031f967612e37c68194cf37:post/Go-imagick.md
CGO配置</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h2 id="initialize-和-terminate"><code>Initialize()</code> 和 <code>Terminate</code></h2>
<p>根据ImageMagick C API，<code>Initialize()</code>应该只调用一次来设置使用ImageMagick的资源。这通常在您<code>main()</code>或<code>init()</code>整个应用程序或库中完成。应用程序可以推迟调用以<code>Terminate()</code>拆除ImageMagick资源。</p>
<p>多次调用特殊方法，导致常见的问题，这是一个错误对于<code>Initialize</code>，和<code>Terminate</code>来说，如死机或丢失代理。除了在程序中对ImageMagick的绝对需求外，不要使用Terminate。</p>
<h2 id="内存管理">内存管理</h2>
<p>由于这是一个CGO绑定，并且Go GC不管理由C API分配的内存，因此必须使用Terminate（）和Destroy（）方法。</p>
<p>通过<code>New*</code>构造函数（MagickWand，DrawingWand，PixelIterator，PixelWand，…）创建的类型由Go GC通过使用终结器进行管理。</p>
<p>如果使用struct literals，则应手动释放资源：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<blockquote>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>Mac OS X 背后的故事读后感</title>
			<link>https://blog.v5u.win/mac-os-x-%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%85%E4%BA%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</link>
			<pubDate>Thu, 16 May 2019 07:11:51 +0000</pubDate>
			
			<guid>https://blog.v5u.win/mac-os-x-%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%85%E4%BA%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</guid>
			<description>早上在“知识小集”发现了一篇《Mac OS X 背后的故事二》，非常喜欢非常感兴趣，于是往前找第一篇，发现了全文的链接，从地铁上开始，到下午共计4个</description>
			<content type="html"><![CDATA[<p>早上在“知识小集”发现了一篇《Mac OS X 背后的故事二》，非常喜欢非常感兴趣，于是往前找第一篇，发现了全文的链接，从地铁上开始，到下午共计4个多小时，一口气读完《Mac OS X 背后的故事》。真是酣畅淋漓，大呼过瘾。</p>
<p>作为一名多年的iOS开发人员，对Apple和乔布斯是有感情的。然而我又是一个不务正业的iOS开发者。在工作之余，最感兴趣的是看其他非iOS的技术，Web 前端，PHP，Python，服务器，安卓，Go等等等。说实话我对于iOS平台是爱恨交织的，喜欢的的开发理念，设计驱动；厌恶于其绝对的控制性，闭源。我当然知道 Apple 公司为开源世界贡献过很多很好的东西，比如 Web Kit,runtime 等等，但是鉴于他的软硬件一体化，鉴于他的Mac &amp; iOS 系统从不允许安装在其他的硬件上，我一直以为 Apple 只是一个另类的科技公司，和 Windows 并没有什么区别。比之于 Linux 更是不得人心。人人都爱自由。</p>
<p>所以我一度鄙视 iOS 系统，欣赏 Android 的开放性。</p>
<p>让我没想到的是 Apple 比我想象的做的更多。。。</p>
<p>GCD，OpenCL，WebKit，LLVM 这些可以说是提升了整个开源界的基石。我又想到了这个月自己在一台12年的笔记本上对 Linux 4种发行版的装机。各种蛋疼的事！比如，centos的开关机缓慢，deepin的卡顿，Debian的自由软件洁癖，还有Ubuntu19.04的不稳定。</p>
<p>我对自己的生活策略有一条是：先解决有没有，再解决好不好。我没想到的是Linux圈解决了有没有，也止步于此。而这里才是提现了 Apple 的优秀之处，如作者所说，Apple非常善于拿来别人的技术，并且把它做得更好。我们的世界正是因为这两种人群，才变得更美好。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>MAC OS X 背后的故事-读书笔记</title>
			<link>https://blog.v5u.win/mac-os-x-%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%85%E4%BA%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
			<pubDate>Thu, 16 May 2019 06:39:13 +0000</pubDate>
			
			<guid>https://blog.v5u.win/mac-os-x-%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%85%E4%BA%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
			<description>[TOC] 可视化编程 Xcode 3 以前，Interface Builder 使用一种名为 nib 格式的二进制文件格式。不过由于 nib 不能用肉眼读，也不方便使用版本管理工具来管理，所以 Xcode</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h3 id="可视化编程">可视化编程</h3>
<p>Xcode 3 以前，Interface Builder 使用一种名为 nib 格式的二进制文件格式。不过由于 nib 不能用肉眼读，也不方便使用版本管理工具来管理，所以 Xcode 3 开始新加入一种名为 xib 的文本文件格式，最后再在项目编译阶段输出为 nib 格式。和产生静态界面布局代码的工具（如 MSVC、QtDesigner、 Delphi 等类似的软件）很不同，nib 是不被转译成相应 Objective-C 代码的。用户程序执行时，nib 文件被读入，解包，并且唤醒【注：awake，即载入 nib 会自动调用程序中 awakeFromNib 方法】，所以 nib 文件是在运行时动态加载的。</p>
<hr>
<h3 id="objective-c-内存管理">Objective-C 内存管理</h3>
<p>在 2011 年 WWDC（苹果全球开发者大会）的一场与 Objective-C 相关的讲座上，开发者的人生观被颠覆了。</p>
<p>作为一个开发者，管理好自己程序所使用的内存是天经地义的事，好比人们在溜狗时必须清理狗的排泄物一样（美国随处可见“Clean up after your dogs”的标志）。在本科阶段上 C 语言的课程时，教授们会向学生反复强调：如果使用 malloc 函数申请了一块内存，使用完后必须再使用 free 函数把申请的内存还给系统——如果不还，会造成“内存泄漏”的结果。这对于 Hello World 可能还不算严重，但对于庞大的程序或是长时间运行的服务器程序，泄内存是致命的。如果没记住，自己还清理了两次，造成的结果则严重得多——直接导致程序崩溃。</p>
<p>Objective-C 有类似 malloc/free 的对子，叫 alloc/dealloc，这种原始的方式如同管理C内存一样困难。所以 Objective-C 中的内存管理又增加了“引用计数”的方法，也就是如果一个物件被别的物件引用一次，则引用计数加一；如果不再被该物件引用，则引用计数减一；当引用计数减至零时，则系统自动清掉该物件所占的内存。具体来说，如果我们有一个字符串，当建立时，需要使用 alloc 方法来申请内存，引用计数则变成了一；然后被其他物件引用时，需要用 retain 方法去增加它的引用计数，变成二。当它和刚才引用的物件脱离关联时，需使 release 方法减少引用计数，又变回了一；最后，使用完这个字符串时，再用 release 方法减少其引用计数，这时，运行库发现其引用计数变为零了，则回收走它的内存。这是手动的方式。</p>
<p>这种方式自然很麻烦，所以又设计出一种叫做 autorelease 的机制（不是类似 Java 的自动垃圾回收）。在 Objective-C 中，设计了一个叫做 NSAutoReleasePool 的池，当开发者需要完成一个任务时（比如每开启一个线程，或者开始一个函数），可以手动创立一个这样的池子， 然后通过显式声明把物件扔进自动回收池中。NSAutoReleasePool 内有一个数组来保存声明为 autorelease 的所有对象。如果一个对象声明为 autorelease，则会自动加到池子里。如果完成了一个任务（结束线程了，或者退出那个函数），则开发者需对这个池子发送一个 drain 消息。这时，NSAutoReleasePool 会对池子中所有的物件发送 release 消息，把它们的引用计数都减一 ——这就好比游泳池关门时通知所有客人都“滚蛋”一样。所以开发者无需显式声明 release，所有的物件也会在池子清空时自动呼叫 release 函数，如果引用计数变成零了，系统才回收那块内存。所以这是个半自动、半手动的方式。</p>
<p>———《Mac OS X 背后的故事》</p>
<hr>
<h3 id="objective-c-20及llvm">Objective-C 2.0及LLVM</h3>
<p>在 2007 年 10.5 发布时，Objective-C 做出了有史以来最大的更新，最大的亮点是它的运行库 libobjc 2.0 正式支持自动垃圾回收，也就是由运行库在运行时随时侦测哪些物件需要被释放。听上去很不错，可惜使用这个技术的项目却少之又少。原因很简单，使用这个特性，会有很大的性能损失，使 Objective-C 的内存管理效率低得和 Java 一样，而且一旦有一个模块启用了这个特性，这个进程中所有的地方都要启用这个特性——因此如果你写了一个使用垃圾回收的库，那所有引用你库的程序就都得被迫使用垃圾回收。所以 Apple 自己也不使用这项技术，大量的第三方库也不使用它。</p>
<p>这个问题随 Apple 在移动市场的一炮走红而变得更加严峻。不过这次，Apple 和与会的开发者讲，他们找到了一个解决问题的终极方法，这个方法把从世界各地专程赶来聆听圣谕的开发者惊得目瞪口呆——你不用写任何内存管理代码，也不需要使用自动垃圾回收。因为我们的编译器已经学会了上面所介绍的内存管理规则，会自动在编译程序时把这些代码插进去。</p>
<p>这个编译器，一直是 Apple 公开的秘密——LLVM。说它公开，是因为它自始至终都是一个开源项目；而秘密，则是因为它从来没公开在 WWDC 的 Keynote 演讲上亮相过 。</p>
<hr>
<h3 id="优异的答卷clang">优异的答卷——Clang</h3>
<p>前文提到，Apple 吸收 Chris Lattner 的目的要比改进 GCC 代码优化宏大得多——GCC 系统庞大而笨重，而 Apple 大量使用的 Objective-C 在 GCC 中优先级很低。此外 GCC 作为一个纯粹的编译系统，与 IDE 配合得很差。加之许可证方面的要求，Apple 无法使用 LLVM 继续改进 GCC 的代码质量。于是，Apple 决定从零开始写 C、C++、Objective-C 语言的前端 Clang，完全替代掉 GCC。</p>
<p>正像名字所写的那样，Clang 只支持 C，C++和 Objective-C 三种C家族语言。<a href="http://lists.cs.uiuc.edu/pipermail/cfe-dev/2007-July/000000.html">2007年开始开发</a>，C 编译器最早完成，而由于 Objective-C 相对简单，只是 C 语言的一个简单扩展，很多情况下甚至可以等价地改写为C语言对 Objective-C 运行库的函数调用，因此在 2009 年时，已经完全可以用于生产环境。C++ 的支持也热火朝天地进行着。</p>
<p>Clang 的加入代表着 LLVM 真正走向成熟和全能，Chris Lattner 以影响他最大的<a href="http://en.wikipedia.org/wiki/Dragon_Book_%28computer_science%29">“龙书”封面</a>【注：见 <a href="http://en.wikipedia.org/wiki/Dragon">http://en.wikipedia.org/wiki/Dragon</a>_Book_(computer_science)】为灵感，为项目选定了图标——<a href="https://llvm.org/img/DragonMedium.png">一条张牙舞爪的飞龙</a></p>
<p>而 Clang 的一个重要衍生项目，则是<a href="http://clang-analyzer.llvm.org/images/analyzer_html.png">静态分析工具</a>，能够通过自动分折程序的逻辑，在编译时就找出程序可能的 bug。在 Mac OS X 10.6 时，静态分析被集成进 Xcode 3.2，帮助用户查找自己犯下的错误。其中一个功能，就是告诉用户内存管理的 Bug，比如 alloc 了一个物件却忘记使用 <a href="http://clang-analyzer.llvm.org/images/analyzer_xcode.png">release 回收</a>。这已经是一项很可怕的技术，而 Apple 自己一定使用它来发现并改正 Mac OS X 整个系统各层面的问题。但许多开发者还不满足——既然你能发现我漏写了 release，你为什么不能帮我自动加上呢？于是 ARC 被<a href="http://www.programmer.com.cn/9436/Automatic%20Reference%20Counting%20http://clang.llvm.org/docs/AutomaticReferenceCounting.html">集成进 Clang</a>，发生了文章开头开发者们的惊愕——从来没有人觉得这件事是可以做成的。</p>
<hr>
<h3 id="cocoa">Cocoa</h3>
<p>Cocoa 经过很长时间的发展，自然也保留了很多过时的 API 以保证和原先的产品兼容，而这次机会(全面支持64位架构)给苹果足够的理由彻底推翻原先的设计。在 Mac OS X 10.5 中， Objective-C 的运行库 libobjc 更新到 2.0，提供了全新的并发、异常处理、自动内存回收、属性（property）等新机制，其中很多新特性只供<a href="http://theocacao.com/document.page/510">64位享用</a>。同时，所有 int 都被改为 NSInteger，Core Graphics 中的 float 都改为 CGFloat，以保持 API 统一，这些都是 64 位架构上的改动。因此 64 位迁移给苹果一个很好的清理门户的机会。</p>
<p>作为相反的例子，这次清理也有不彻底的地方。比如从老版 Mac OS 中混进来的 <a href="http://developer.apple.com/library/mac/#documentation/Security/Conceptual/keychainServConcepts/01introduction/introduction.html">Keychain 库</a>，甚至具有 Pascal 风格的 API，由于没有替代品，它也得到了 64 位的更新。所以类似 keychain 这样的库成了现在 Mac OS X 程序员的噩梦。我每次用到 Keychain 都有痛不欲生的感觉。</p>
<ul>
<li>
<ul>
<li>*经过 6 年时间，4 个发行版，苹果终于完成了向 64 位的迁移，并随着 Snow Leopard 的发布推出了解决并行编程问题的 Grand Central Dispatch（简称 GCD）技术，释放了多核系统的潜力。<!-- raw HTML omitted --></li>
</ul>
</li>
</ul>
<hr>
<h3 id="内核-64位化">内核 64位化</h3>
<p>读者应该发现，经过这 4 个发行版，Mac OS X 自下而上地对整个系统向 64 位迁移。10.3 内核空间提供了 64 位整数运算的支持。10.4 允许程序以 64 位模式运行在用户空间，并且提供了 64 位的 libSystem 使得开发者可以开发 64 位的 Unix 程序，而 10.5 中系统所有未废弃的函数库、框架都提供 64 位版本，到了 10.6，所有用户空间的程序，包括 Unix 层和图型界面层，基本都更新到 64 位。细心的读者不禁会问—那内核是 64 位的吗？是的，自下而上支持 64 位后，10.6 又从上往下，迁移了整个系统中最后一个也是最重要的部分—内核。</p>
<p><strong>内核 64 位化的意义</strong></p>
<p>对于 Windows、Linux，以及 FreeBSD 等操作系统，64位实现的第一步是实现 64 位的内核。然而 Mac OS X 却反其道而行。主要原因是，反正 32 位的内核也能以非模拟、非兼容的方式原生地运行 64 位用户空间程序，而内核和与内核动态链接的驱动，很少需要用到 64 位的寻址空间（你什么时候见过内核本身使用 4GB 内存？），所以该问题可以暂缓。</p>
<p>但要记住，用户空间的内存是由内核管理的，虚拟内存、内存分页等机制，都是由内核一一实现的。一旦在不久的将来，随着用户空间的内存占用越来越多，虚拟内存的分页比也会不断膨胀。比方说，一个用户程序使用 4GB 的空间，每个分页包含 4KB 的页面，那么总共有 1M 个页面。因此，假设一个页面<a href="http://en.wikipedia.org/wiki/Page_table">需要 64B 的 PTE</a> 来记录该页的位置，那总共也就需要 64MB 的内核空间来记录这个用户空间程序的虚拟内存，不算太多。而在不久的将来，如果一个 64 位用户程序使用 128GB 的空间，则需要 32M 个页面，每个页面 64B 的 PTE 会导致 2GB 的内核地址空间来寻址（暂不考虑大分页）。32 位的内核就显得非常紧张。</p>
<p>另外，上一期我们也提到 64 位的 Intel 架构提供了比 32 位多一倍的寄存器，因此，用户空间程序对 64 位内核的系统调用也会更快。根据苹果的数据，系统调用的响应速度比原先快了 250%，而用户空间和内核空间的数据交换也快了 70%，因此，64位内核要比 32 位内核更快。</p>
<ul>
<li>
<ul>
<li>*苹果追求适当投资换取高回报的理想。<!-- raw HTML omitted --></li>
</ul>
</li>
</ul>
<hr>
<h3 id="gcdgrand-central-dispatch-来临">GCD(Grand Central Dispatch) 来临</h3>
<p>很长一段时间以来，处理器靠更快的运行时钟来获得更高的效率。软件开发者无需改动或重新编译他们的代码，就能得到摩尔定律许诺他们的好处，因为<strong>处理器顺序地执行计算机指令</strong>，新一代的处理器就自动会跑得比原先更快。后来每每达到一个技术极限时，总有一些聪明的方法绕过这些极限，比如超纯量、指令管线化、快取等，不是悄无声息地把多条互相独立的指令同时运行，就是隐藏掉数据读写的延时</p>
<p>传统的并发编程模式，就是学习使用线程和锁。这听起来很简单，几句话能说明白：</p>
<blockquote>
<p>● 把每个任务独立成一个线程；</p>
</blockquote>
<blockquote>
<p>●不允许两个线程同时改动某个变量，因此得把变量“锁”起来；</p>
</blockquote>
<blockquote>
<p>●手动管理线程的先后并发顺序和并发数量，让它们均匀地占满系统资源；</p>
</blockquote>
<blockquote>
<p>●最好系统中只有这个程序在运行，否则你精心设计好的线程管理算法往往不能达到原来该有的效果；</p>
</blockquote>
<blockquote>
<p>●最后祈祷程序在用户那儿不出问题。</p>
</blockquote>
<p>但是实际操作起来，多线程程序的编写要比单线程难上不止一个数量级。一方面，调用大量内存和数据反复的加解锁本身效率就非常低下；另一个重要原因在于，由于多线程程序可能以任意的次序交错执行，程序再也无法像顺序执行时那样产生确定的结果。**多线程程序看似容易编写，但难分析、难调试，更容易出错。**即使是最熟练的开发者，在茫茫线程和锁之间，也会迷失方向。且程序的错误在很多时候甚至是不可重现的。所以，程序员使用线程和锁机制编写并行程序的代价是很高的。</p>
<p>GCD 就是在这种背景下被苹果提出来的。2008年最初提出但未公布细节时，很多人怀疑它是 FreeBSD 的 ULE 调度器在 Mac OS X 上的实现。GCD 的实现，实际上是依赖于 FreeBSD 的另一项技术 <a href="http://people.freebsd.org/~jlemon/papers/kqueue.pdf">kqueue</a>。kqueue 是一个由 FreeBSD 4 时代引入的新功能，内核级别地支持消息通信管理。GCD 的队列，其实就是用 kqueue 实现的。</p>
<p><strong>GCD 出现的意义</strong></p>
<p>在 GCD 中，开发者不再管理和创建线程，而是将要实现的运算抽象成一个个任务，一起扔给操作系统，转而让操作系统管理，这在计算机科学中，被称为<a href="http://en.wikipedia.org/wiki/Thread_pool_pattern">线程池管理模式</a>。</p>
<p>在 GCD 中，开发者使用很简单的方式就能描述清应用程序所需执行的任务，以及任务之间的相互关联。每一个任务在代码中被描述成块（block），然后开发者把一个一个块显式地按顺序扔到队列（queue）中。使用块和队列两个抽象的表述，开发者无须创建线程，也无须管理线程，更无须考虑数据的加解锁。换之而来的，是更简短可读的代码。剩下的事，全都扔给操作系统去完成。</p>
<p>在操作系统那边，GCD 在程序运行时，管理着一定数量的线程，线程的数量是自动分配的，取决于用户计算机的配置和用户程序运行时的负载。多核工作站每个程序配到的线程，自然就会比单核手机或双核笔记本来得多。而且这个线程的数量是会动态变化的。当程序非常忙时，线程数会相应增多，而当程序闲置时，系统会自动减少其线程数量。然后，GCD 会一一从队列中读入需要执行的块，然后扔到线程上并发执行。</p>
<p>相信读者已经看出 GCD 和传统线程-锁机制的区别来了。传统的方式按劳分配，强调程序自由独立地管理，妄想通过“无形的手”把系统资源平均分配，走的是资本主义市场经济的道路。而 GCD 按需分配，真正实现了社会主义计划经济管理模式。因此在政治上 GCD 就是一个代表先进生产力的计算机技术（我被自己雷了，但事实就是这样）。</p>
<blockquote>
<p>GCD 是一个自底向上的技术，它实际上由以下 6 个部分组成。</p>
<ol>
<li>编译器层面，LLVM 为 C、Objective-C 和 C++ 提供了块语法，这个内容等下会介绍。</li>
<li>运行库方面，有一个高效分配管理线程的运行库 libdispatch。</li>
<li>内核方面，主要基于 XNU 内核 Mach 部分提供的 Mach semaphores 和 BSD 部分提供的 kqueue () 机制。</li>
<li>dispatch/dispatch.h 提供了丰富的底层编程接口。</li>
<li>在 Cocoa 层面，NSOperation 被重写，因为使用 libdispatch，所以先前使用 NSOperation 的程序不需改动，就自动享受 Grand Central Dispatch 的最新特性。</li>
<li>Instruments 和 GDB 提供了非常完整的分析和调试工具。</li>
</ol>
</blockquote>
<p>GCD 还有一些工程上的优势。</p>
<p>首先，程序的响应速度会更快。比传统线程轻量的多，可以开成百上千个。</p>
<p>其次，线程模式是一种静态的模式，一旦程序被执行，其运行模式就被固定下来了。但用户的计算机配置各不相同，运行时别的程序有可能耗用大量的计算资源。这些都会影响该程序的运行效率。而动态分配系统资源则能很好地解决这个问题。</p>
<p>而最重要的，还是 GCD 采用的线程池模式极大简化了多线程编程，也降低了出错的可能性。</p>
<p><strong>如何应用 GCD</strong></p>
<p>首先是块状语法，是一个对 C、C++ 和 Objective-C 语言的扩展。用来描述一个任务，用^引导的大括号括起来。比如最简单的：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>则 x 就变成了一个块。如果执行：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>很多开发者亲切地称呼块语法的 C 扩展为“带 lambda 的C”。</p>
<p>有了闭包功能的 C 顿时牛起来——你可以把函数和数据包装在一起——这就是块的真正功能。因为只要一个闭包包含了代码和数据，它的数据就不会被别的闭包轻易改动，所以在它执行时，你根本不用为数据上锁解锁。</p>
<p><strong>一旦队列不是空的，GCD 就开始分配任务到线程中</strong>。拿上面的例子来说，“老婆”、“城”等变量可是封在闭包里的，所以在运行时，不用考虑它们被某个别的闭包改掉（当然也有方法来实现这个功能）。总体而言，这个模式比线程-锁模型简单太多——<strong>它的执行是并行的，但思维却是传统的异步思维</strong>，对没有学习过系统多线程编程的开发者来说，依然能很容易地掌握。</p>
<p>GCD 在 Mac OS X 10.6 发布后，又以 libdispatch 为名，作为一个独立的开源项目发布。 所需的外围代码，如编译器的块支持、运行库的块支持、内核的支持，也都能在 LLVM 和 XNU 等开源项目代码中找到，所以很快被别的操作系统采用。作为 Mac OS X 的近亲， FreeBSD 在一个月后即完整移植了整套 GCD 技术，并最终在 FreeBSD 9.0 和 8.1 中出现。诸多 Linux 发行版也提供 libdispatch 的包，使用 Linux 内核的 epoll 来模拟 FreeBSD 的 kqueue。2011年 5 月 5 日， <a href="http://lists.macosforge.org/pipermail/libdispatch-dev/2011-May/000515.html">Windows 的移植工作也宣告完成</a>。</p>
<p>另外，GCD 也成为拯救动态语言的重要法宝。由于受 GIL（全局解释锁）的限制，动态语言虽然有操作系统原生线程，但不能在多核处理器上并行执行。而 GCD 成功绕开了这个限制，如加入 GCD 支持的 Ruby <a href="http://www.macruby.org/documentation/gcd.html">实现 MacRuby 就能在多核处理器上高效执行</a>。 因此，在苹果生态圈以外，GCD 也会得到越来越多的应用。</p>
<hr>
<p><strong>OpenCL 诞生</strong></p>
<p>OpenCL 则是苹果为这个新局面画下的蓝图。这项技术初期全称为 Open Computing Library（如果留意苹果早期宣传广告的话），后改名为 Open Computing Language。这项技术从本质上来说，和 CUDA 并没有太多的两样，但由于苹果在借鉴他人技术并把他人技术改得更棒这一点上是出了名的，所以 OpenCL 很好地解决了以上所有问题。</p>
<p>下面简单介绍一下这个框架。OpenCL 技术的结构十分清晰，对程序员来说，它是一个 Mac OS X 的 Framework，定义了两套标准，一套是一个 C 语言的编程界面（API），使得开发者创建、拷贝、回收 GPU 使用的对象，同时也包含检测处理器、为该处理器编译并调用核心程序（kernel）相关的接口；另一套是 OpenCL 核心程序语言的定义，是一套基于 C99 发展而来的语言。</p>
<p>Mac OS X 许多的底层库也使用 OpenCL 重写，如 Core Image，本身也是一个 GPU 加速库，使用 OpenCL 后相比原来，依然获得了<a href="http://arstechnica.com/apple/reviews/2009/08/mac-os-x-10-6.ars/15">可观的性能提升</a>。</p>
<p>Snow Leopard 的发布标志着第一个 OpenCL 框架的完整实现，OpenCL 成为业界标准后，AMD 和NVIDIA 抛弃了原先的策略，投入开放标准的怀抱.</p>
<p><strong>开发者的瓶颈</strong></p>
<p>而且由于硬件的限制（显卡不支持指针运算），很多 C 的标准并未在 OpenCL 中出现，写链表还需要用整数去模拟地址。程序员需要手动管理内存，处理底层的核心调用以及数据读写。而显卡厂商也大多不愿公开 GPU 的技术细节.只能凭经验操作.</p>
<p>显卡作为系统最为重要的共享资源之一，不像现代操作系统那样提供内存保护机制，因此一个用户 OpenCL 程序的错误很容易导致整个计算机崩溃<!-- raw HTML omitted --></p>
<h3 id="apfs-文件系统">APFS 文件系统</h3>
<p>昙花一现的ZFS系统，面向的是大企业用户和机械磁盘优化，不在符合Apple的商业模式</p>
<p>干脆自己搞一个专为闪存，固态存储优化的文件管理系统APFS。</p>
]]></content>
		</item>
		
		<item>
			<title>Objective-C 内存管理</title>
			<link>https://blog.v5u.win/objective-c-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
			<pubDate>Thu, 16 May 2019 01:45:17 +0000</pubDate>
			
			<guid>https://blog.v5u.win/objective-c-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
			<description>在 2011 年 WWDC（苹果全球开发者大会）的一场与 Objective-C 相关的讲座上，开发者的人生观被颠覆了。 作为一个开发者，管理好自己程序所使用的内存是天经地义的事</description>
			<content type="html"><![CDATA[<p>在 2011 年 WWDC（苹果全球开发者大会）的一场与 Objective-C 相关的讲座上，开发者的人生观被颠覆了。</p>
<p>作为一个开发者，管理好自己程序所使用的内存是天经地义的事，好比人们在溜狗时必须清理狗的排泄物一样（美国随处可见“Clean up after your dogs”的标志）。在本科阶段上 C 语言的课程时，教授们会向学生反复强调：如果使用 malloc 函数申请了一块内存，使用完后必须再使用 free 函数把申请的内存还给系统——如果不还，会造成“内存泄漏”的结果。这对于 Hello World 可能还不算严重，但对于庞大的程序或是长时间运行的服务器程序，泄内存是致命的。如果没记住，自己还清理了两次，造成的结果则严重得多——直接导致程序崩溃。</p>
<p>Objective-C 有类似 malloc/free 的对子，叫 alloc/dealloc，这种原始的方式如同管理C内存一样困难。所以 Objective-C 中的内存管理又增加了“引用计数”的方法，也就是如果一个物件被别的物件引用一次，则引用计数加一；如果不再被该物件引用，则引用计数减一；当引用计数减至零时，则系统自动清掉该物件所占的内存。具体来说，如果我们有一个字符串，当建立时，需要使用 alloc 方法来申请内存，引用计数则变成了一；然后被其他物件引用时，需要用 retain 方法去增加它的引用计数，变成二。当它和刚才引用的物件脱离关联时，需使 release 方法减少引用计数，又变回了一；最后，使用完这个字符串时，再用 release 方法减少其引用计数，这时，运行库发现其引用计数变为零了，则回收走它的内存。这是手动的方式。</p>
<p>这种方式自然很麻烦，所以又设计出一种叫做 autorelease 的机制（不是类似 Java 的自动垃圾回收）。在 Objective-C 中，设计了一个叫做 NSAutoReleasePool 的池，当开发者需要完成一个任务时（比如每开启一个线程，或者开始一个函数），可以手动创立一个这样的池子， 然后通过显式声明把物件扔进自动回收池中。NSAutoReleasePool 内有一个数组来保存声明为 autorelease 的所有对象。如果一个对象声明为 autorelease，则会自动加到池子里。如果完成了一个任务（结束线程了，或者退出那个函数），则开发者需对这个池子发送一个 drain 消息。这时，NSAutoReleasePool 会对池子中所有的物件发送 release 消息，把它们的引用计数都减一 ——这就好比游泳池关门时通知所有客人都“滚蛋”一样。所以开发者无需显式声明 release，所有的物件也会在池子清空时自动呼叫 release 函数，如果引用计数变成零了，系统才回收那块内存。所以这是个半自动、半手动的方式。</p>
<p>—《Mac OS X 背后的故事》</p>
]]></content>
		</item>
		
		<item>
			<title>Go 自定义包模板引用 moudle</title>
			<link>https://blog.v5u.win/posts/go/go-%E6%A8%A1%E6%9D%BF%E6%A1%86%E6%9E%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%85%E7%9A%84%E5%BC%95%E7%94%A8/</link>
			<pubDate>Mon, 13 May 2019 13:17:53 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-%E6%A8%A1%E6%9D%BF%E6%A1%86%E6%9E%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%85%E7%9A%84%E5%BC%95%E7%94%A8/</guid>
			<description>源起：最近在调研Go，需要使用Go搭建一套通用式的模板框架，用以当新开其他项目的时候直接基于模板框架开发。 固定化引入自定义包的路径，解决——</description>
			<content type="html"><![CDATA[<p>源起：最近在调研Go，需要使用Go搭建一套通用式的模板框架，用以当新开其他项目的时候直接基于模板框架开发。</p>
<p>固定化引入自定义包的路径，解决——开启新的分支需要更改引入路径</p>
<p>方案一：go mod 支持 <code>go build -mod=vendor</code> ，问题是 vendor 里的文件都是 gopath/pkg/mod 的拷贝，是不能基于自己公司的需求做修改的。</p>
<p>方案二：使用 相对路径，相对路径 相对的是 gopath 的路径，使用此方案就需要 将项目必须放在 gopath 目录下，不能使用 go mod。</p>
<p>目前(2019年)生产环境用 <code>go mod</code> 还不太现实， 我还是先推荐定义 <code>GOPATH</code> 和 <code>vendor</code> 用法。</p>
]]></content>
		</item>
		
		<item>
			<title>Go Nginx反向代理</title>
			<link>https://blog.v5u.win/posts/go/go-nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</link>
			<pubDate>Fri, 10 May 2019 16:08:55 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</guid>
			<description>当我们启动一个go 程序的时候，通常监听的是本地端口如 IP:port 。但是实际的线上环境，解析路径是：通过 DNS 解析 ——&amp;gt; nginx vhost ——&amp;gt; IP:port 这个。单纯的</description>
			<content type="html"><![CDATA[<p>当我们启动一个go 程序的时候，通常监听的是本地端口如 IP:port 。但是实际的线上环境，解析路径是：通过 DNS 解析 ——&gt; nginx vhost ——&gt; IP:port 这个。单纯的使用 go 是不能处理 域名解析工作的。
所以通常是NGINX 和 Go 搭配着使用。</p>
<p>nginx 可以帮我做很多工作，例如访问日志，cc 攻击，静态服务等，nginx 已经做的很成熟了。
Go 只要专注于业务逻辑和功能就好。
NGINX作为反向代理的配置如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nginx" data-lang="nginx"><span style="display:flex;"><span><span style="color:#75715e">#列出所有服务器地址，nginx 自动均衡分发请求到各个服务器。 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">upstream</span> <span style="color:#e6db74">frontends</span> {   
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ip_hash</span>; 
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">server</span> 192.168.199.1:<span style="color:#ae81ff">8088</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">server</span> 192.168.199.2:<span style="color:#ae81ff">8089</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">server</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">listen</span> <span style="color:#ae81ff">80</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">server_name</span> <span style="color:#e6db74">nav.v5u.win</span> ;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">#静态资源交由nginx管理
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>   	 <span style="color:#f92672">location</span> <span style="color:#e6db74">/static</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">root</span>        <span style="color:#e6db74">/var/www/mydomain/web</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">expires</span>     <span style="color:#e6db74">1d</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">add_header</span>  <span style="color:#e6db74">Cache-Control</span> <span style="color:#e6db74">public</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">access_log</span>  <span style="color:#66d9ef">off</span>;
</span></span><span style="display:flex;"><span>    	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># 反向代理设置
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#f92672">location</span> ~ <span style="color:#e6db74">/</span>
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				<span style="color:#f92672">proxy_set_header</span> <span style="color:#e6db74">X-Forwarded-For</span> $proxy_add_x_forwarded_for;
</span></span><span style="display:flex;"><span>				<span style="color:#f92672">proxy_set_header</span> <span style="color:#e6db74">Host</span> $http_host;
</span></span><span style="display:flex;"><span>				<span style="color:#f92672">proxy_redirect</span> <span style="color:#66d9ef">off</span>;
</span></span><span style="display:flex;"><span>				<span style="color:#f92672">proxy_pass</span> <span style="color:#e6db74">http://localhost:7070</span>;
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>	}
</span></span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>markdown 常用语法整理</title>
			<link>https://blog.v5u.win/posts/system/system-markdown%E5%8E%9F%E7%90%86/</link>
			<pubDate>Fri, 10 May 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-markdown%E5%8E%9F%E7%90%86/</guid>
			<description>Text 1级标题 Text 2级标题 Text 3级标题 Text 4级标题 Text 5级标题 Text 6级标题 有序列表 ul&amp;gt;li 有 序 无序列表 ol&amp;gt;li 无 序 任务列表 ul&amp;gt;li&amp;gt;input 任务 列表 代码修饰 短代码 &amp;lt;code&amp;gt; var name = 代码块 div&amp;gt;pre&amp;gt;span &amp;lt;div&amp;gt; &amp;lt;pre&amp;gt;</description>
			<content type="html"><![CDATA[<h1 id="text-h1-1级标题h1">Text 	<!-- raw HTML omitted --> 1级标题<!-- raw HTML omitted --></h1>
<h2 id="text-h2-2级标题h2">Text 	<!-- raw HTML omitted --> 2级标题<!-- raw HTML omitted --></h2>
<h3 id="text-h3-3级标题h3">Text 	<!-- raw HTML omitted --> 3级标题<!-- raw HTML omitted --></h3>
<h4 id="text-h4-4级标题h4">Text 	<!-- raw HTML omitted --> 4级标题<!-- raw HTML omitted --></h4>
<h5 id="text-h5-5级标题h5">Text 	<!-- raw HTML omitted --> 5级标题<!-- raw HTML omitted --></h5>
<h6 id="text-h6-6级标题h6">Text 	<!-- raw HTML omitted --> 6级标题<!-- raw HTML omitted --></h6>
<h3 id="有序列表-ulli">有序列表 ul&gt;li</h3>
<ol>
<li>有</li>
<li>序</li>
</ol>
<h3 id="无序列表-olli">无序列表 ol&gt;li</h3>
<ul>
<li>无</li>
<li>序</li>
</ul>
<h3 id="任务列表-ulliinput">任务列表 ul&gt;li&gt;input</h3>
<ul>
<li><input disabled="" type="checkbox"> 任务</li>
<li><input checked="" disabled="" type="checkbox"> 列表</li>
</ul>
<h3 id="代码修饰">代码修饰</h3>
<p><code>短代码 &lt;code&gt;</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>var name = 代码块
</span></span><span style="display:flex;"><span>div&gt;pre&gt;span
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">pre</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">span</span>&gt;var&lt;/<span style="color:#f92672">span</span>&gt; name = 代码块
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">pre</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span></code></pre></div><blockquote>
<p><code>&lt;blockquote&gt;&lt;p&gt;块级引用&lt;/p&gt;&lt;/blockquote&gt;</code></p>
</blockquote>
<h3 id="段落">段落</h3>
<p>中间没有空行的连续不断的几行文字被视为一个段落。空一行 作为段落间的分割符</p>
<h3 id="行内格式">行内格式</h3>
<p><del>删除线 del 标签</del>
<strong>加粗 strong 标签</strong>
<em>斜体 em 标签</em></p>
<h3 id="表格">表格</h3>
<table>
<thead>
<tr>
<th>表格头</th>
<th>thead&gt;tr&gt;td</th>
</tr>
</thead>
<tbody>
<tr>
<td>单元格</td>
<td>tbody&gt;tr&gt;td</td>
</tr>
</tbody>
</table>
<h3 id="超链接">超链接</h3>
<p><a href="http://www.v5u.win">URL超链接</a></p>
<h3 id="插入图片">插入图片</h3>
<p><img src="/Users/fanjinlong/Documents/myData/WorkData/markdownsheet.png" alt="markdown"></p>
]]></content>
		</item>
		
		<item>
			<title>Go 快速入门</title>
			<link>https://blog.v5u.win/posts/go/go-%E6%9C%89%E7%BB%8F%E9%AA%8C%E5%BC%80%E5%8F%91%E8%80%85%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-go-%E8%AF%AD%E8%A8%80/</link>
			<pubDate>Wed, 08 May 2019 15:39:15 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-%E6%9C%89%E7%BB%8F%E9%AA%8C%E5%BC%80%E5%8F%91%E8%80%85%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-go-%E8%AF%AD%E8%A8%80/</guid>
			<description>有经验开发者，快速入门 Go 语言 发明Go语言是出于更好地完成工作的需要。Go不是计算机科学的最新发展潮流，但它却提供了解决现实问题的最新最快的方</description>
			<content type="html"><![CDATA[<h2 id="有经验开发者快速入门-go-语言">有经验开发者，快速入门 Go 语言</h2>
<p>发明Go语言是出于更好地完成工作的需要。Go不是计算机科学的最新发展潮流，但它却提供了解决现实问题的最新最快的方法。</p>
<p>Go拥有命令式语言的静态类型，编译很快，执行也很快，同时加入了对于目前多核CPU的并发计算支持，也有相应的特性来实现大规模编程。</p>
<p>Go语言有非常棒的标准库，还有一个充满热情的社区。</p>
<p>有编程经验的小伙伴，朗诵以下代码块，完成Go语言快速入门。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>转载自 <a href="https://mp.weixin.qq.com/s/k5CpO6vVSMP4tOYAcAXcqg">https://mp.weixin.qq.com/s/k5CpO6vVSMP4tOYAcAXcqg</a></p>
<p>翻译自：https://learnxinyminutes.com/docs/go/</p>
]]></content>
		</item>
		
		<item>
			<title>nginx try_files</title>
			<link>https://blog.v5u.win/nginx-try_files/</link>
			<pubDate>Wed, 08 May 2019 02:10:48 +0000</pubDate>
			
			<guid>https://blog.v5u.win/nginx-try_files/</guid>
			<description>源起： WordPress http 升级成 https 之后，只有 首页可以正常访问，其他链接均失效，改固定链接为 ?p=id可以正常显示，但是以前的 Google 收录页面面临失效的风险。遂着手</description>
			<content type="html"><![CDATA[<h2 id="源起">源起：</h2>
<p>WordPress http 升级成 https 之后，只有 首页可以正常访问，其他链接均失效，改固定链接为 <code>?p=id</code>可以正常显示，但是以前的 Google 收录页面面临失效的风险。遂着手解决。</p>
<h3 id="发现解决方案修改-nginxconf-配置">发现解决方案，修改 nginx.conf 配置</h3>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h3 id="探求原理">探求原理</h3>
<p>try_files指令说明</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>nginx 在0.7以后的版本中加入了一个 try_files 指令，配合命名 location，可以部分替代原本常用的 rewrite 配置方式，提高解析效率。</p>
<p>其作用是按顺序检查文件是否存在，<strong>返回第一个找到的文件或文件夹</strong>(结尾加斜线表示为文件夹)，如果所有的文件或文件夹都找不到，会进行一个内部重定向到最后一个参数。</p>
<p>参考文章 <a href="https://www.hi-linux.com/posts/53878.html">https://www.hi-linux.com/posts/53878.html</a></p>
]]></content>
		</item>
		
		<item>
			<title>Blog Wordpress Http Https</title>
			<link>https://blog.v5u.win/posts/blog/blog-wordpress-http-https/</link>
			<pubDate>Tue, 07 May 2019 17:58:56 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/blog/blog-wordpress-http-https/</guid>
			<description>wordpress http 升级HTTPS lnmp 添加ssl：lnmp ssl add wordpress 后台修改：主域名改为https:// ,固定链接改为id格式 (postname的URL格式无法找</description>
			<content type="html"><![CDATA[<h1 id="wordpress-http-升级https">wordpress http 升级HTTPS</h1>
<ol>
<li>lnmp 添加ssl：lnmp ssl add</li>
<li>wordpress 后台修改：主域名改为https:// ,固定链接改为id格式 (postname的URL格式无法找到，未解决)</li>
<li>修改数据库,搜索数据库中的http的链接，修改为https
<code>update wp_posts set post_content = replace(post_content, ‘http://www.v5u.win/’,‘https://www.v5u.win/’)</code></li>
<li>访问网站查找跨域引用(js,css)，更改代码或者数据库文本。改为https</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Dockerfile最佳实践</title>
			<link>https://blog.v5u.win/posts/docker/docker-dockerfile%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
			<pubDate>Sun, 05 May 2019 13:44:44 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/docker/docker-dockerfile%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
			<description>Dockerfile入门之后面临一个问题：如何在实际的开发过程中正确配置 Dockerfile？ Dockerfile 有两个方向上的使用方式： 只用 Dockerfile 管理镜像 使用d</description>
			<content type="html"><![CDATA[<p>Dockerfile入门之后面临一个问题：如何在实际的开发过程中正确配置 Dockerfile？</p>
<p>Dockerfile 有两个方向上的使用方式：</p>
<ol>
<li>只用 Dockerfile 管理镜像</li>
<li>使用docker-compose 容器编排技术 共同管理镜像的 build。
下面是我对Dockerfile最佳实践的总结：
共同遵守的原则:</li>
</ol>
<p>一个容器只负责做一件事情。</p>
<p>保持常见的指令像 MAINTAINER 以及从上至下更新 Dockerfile 命令。</p>
<p>当构建镜像时使用可理解的标签，以便更好地管理镜像。</p>
<p>避免在 Dockerfile 中映射公有端口。</p>
<p>CMD 与 ENTRYPOINT 命令请使用数组语法。</p>
<p>针对一：只用 Dockerfile 管理镜像的 build</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dockerfile" data-lang="dockerfile"><span style="display:flex;"><span><span style="color:#75715e"># 依赖最小Linux环境 alpine 只用5M大小</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> alpine</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>&lt;pre&gt;&lt;code class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;language-dockerfile line-numbers&#34;</span>&gt;# 依赖最小Linux环境 alpine 只用5M大小<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> alpine</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># MAINTAINER：设置该镜像的作者。</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">MAINTAINER</span><span style="color:#e6db74"> jinlong</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># 将当前目录下的所有文件都拷贝进入 image 文件的/app目录</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> ./bin/ /app<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># 指定接下来的工作路径为/app</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># WORKDIR：指定RUN、CMD与ENTRYPOINT命令的工作目录。</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># 所有下面的 RUN 命令都在 WORKDIR 目录下面执行</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /app</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># RUN：在shell或者exec的环境下执行的命令。RUN指令会在新创建的镜像上添加新的层面，接下来提交的结果用在Dockerfile的下一条指令中。</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">#RUN cd bin/</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># ADD：复制文件指令。它有两个参数&lt;source&gt;和&lt;destination&gt;。</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># destination是容器内的路径。</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># source可以是URL或者是启动配置上下文中的一个文件。</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># ADD 《src》 《destination》</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># CMD：提供了容器默认的执行命令。 Dockerfile只允许使用一次CMD指令。 使用多个CMD会抵消之前所有的指令，只有最后一个指令生效。 </span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># CMD有三种形式：</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">#CMD [&#34;executable&#34;,&#34;param1&#34;,&#34;param2&#34;]</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">#CMD [&#34;param1&#34;,&#34;param2&#34;]</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">#CMD command param1 param2</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">#CMD ./gin</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span> [<span style="color:#e6db74">&#34;./gin&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">#-------------</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># 开放端口 永远都不要在这里使用端口映射，这违反了可移植性</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># EXPOSE：指定容器在运行时监听的端口。</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># private and public mapping</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># EXPOSE 80:8080</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># ENTRYPOINT：配置给容器一个可执行的命令</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># 这意味着在每次使用镜像创建容器时一个特定的应用程序可以被设置为默认程序。同时也意味着该镜像每次被调用时仅能运行指定的应用。类似于CMD</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># ENTRYPOINT [&#34;executable&#34;, &#34;param1&#34;,&#34;param2&#34;]</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># ENV：设置环境变量。它们使用键值对，增加运行程序的灵活性。</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># ENV &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># USER：镜像正在运行时设置一个UID。语法如下</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># USER &amp;lt;uid&amp;gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># VOLUME：授权访问从容器内到主机上的目录。</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># VOLUME [&#34;/data&#34;]</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><h2 id="有ui界面portainer用什么命令行sb">有UI界面portainer，用什么命令行，SB</h2>
<p>好了安装portainer 镜像管理镜像吧。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ docker volume create portainer_data
</span></span><span style="display:flex;"><span>$ docker run -d -p 9000:9000 -p 8000:8000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer
</span></span></code></pre></div><p>over.</p>
]]></content>
		</item>
		
		<item>
			<title>Go 代码规范</title>
			<link>https://blog.v5u.win/posts/go/go-%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</link>
			<pubDate>Mon, 29 Apr 2019 11:37:14 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</guid>
			<description>Golang代码规范 参考 https://golang.org/doc/effective_go.html [本文参考blog][1] [TOC] 项目目录结构规范 PROJECT_NAME ├── README.md 介绍软件及文档入口 ├── bin 编译好的二进制文件,执行./bui</description>
			<content type="html"><![CDATA[<h2 id="golang代码规范">Golang代码规范</h2>
<p>参考 <a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a></p>
<p>[本文参考blog][1]</p>
<p>[TOC]</p>
<h3 id="项目目录结构规范">项目目录结构规范</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>PROJECT_NAME
</span></span><span style="display:flex;"><span>├── README.md 介绍软件及文档入口
</span></span><span style="display:flex;"><span>├── bin 编译好的二进制文件,执行./build.sh自动生成，该目录也用于程序打包
</span></span><span style="display:flex;"><span>├── build.sh 自动编译的脚本
</span></span><span style="display:flex;"><span>├── doc 该项目的文档
</span></span><span style="display:flex;"><span>├── pack 打包后的程序放在此处
</span></span><span style="display:flex;"><span>├── pack.sh 自动打包的脚本，生成类似xxxx.20170713_14:45:35.tar.gz的文件，放在pack文件下
</span></span><span style="display:flex;"><span>├── public 公共文件/静态文件
</span></span><span style="display:flex;"><span>└── src 该项目的源代码
</span></span><span style="display:flex;"><span>    ├── main 项目主函数
</span></span><span style="display:flex;"><span>    ├── test 测试
</span></span><span style="display:flex;"><span>    ├── app 项目代码
</span></span><span style="display:flex;"><span>    ├── research 在实现该项目中探究的一些程序
</span></span><span style="display:flex;"><span>    └── vendor 存放go的库
</span></span><span style="display:flex;"><span>        ├── github.com/xxx 第三方库
</span></span><span style="display:flex;"><span>        └── xxx.com/abc 公司内部的公共库
</span></span><span style="display:flex;"><span>&lt;/code&gt;&lt;/pre&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>项目的目录结构尽量做到简明、层次清楚。
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">```</span>sh
</span></span><span style="display:flex;"><span>./app
</span></span><span style="display:flex;"><span>├── bootstrap	//入口引导文件
</span></span><span style="display:flex;"><span>├── cache
</span></span><span style="display:flex;"><span>├── config  //项目配置 项目配置文件简单，配置项少。大部分配置公司要用配置中心统一配置。
</span></span><span style="display:flex;"><span>├── controller  //request请求处理中心 ——&amp;gt; controller ——&amp;gt; Response / view
</span></span><span style="display:flex;"><span>├── library //项目工具库
</span></span><span style="display:flex;"><span>├── log         //日志
</span></span><span style="display:flex;"><span>├── middleware  //中间件
</span></span><span style="display:flex;"><span>├── model       //data model.xorm -——&amp;gt; 数据库表映射模型
</span></span><span style="display:flex;"><span>├── plugin  //插件--自己开发/自己找的 --delete
</span></span><span style="display:flex;"><span>├── route       //路由管理
</span></span><span style="display:flex;"><span>├── service //前端数据获取操作 service
</span></span><span style="display:flex;"><span>&lt;/code&gt;&lt;/pre&gt;
</span></span><span style="display:flex;"><span>* * *
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#### 文件名命名规范</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>用小写，尽量见名思义，看见文件名就可以知道这个文件下的大概内容，对于源代码里的文件，文件名要很好的代表了一个模块实现的功能。
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">### 命名规范</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#### 包名</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>包名用小写,使用短命名,尽量和标准库不要冲突
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#### 接口名</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>单个函数的接口名以”er”作为后缀，如Reader,Writer
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>接口的实现则去掉“er”
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">```</span>go
</span></span><span style="display:flex;"><span>type Reader interface <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>&lt;/code&gt;&lt;/pre&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>两个函数的接口名综合两个函数名
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">```</span>go
</span></span><span style="display:flex;"><span>type WriteFlusher interface <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    Write<span style="color:#f92672">([]</span>byte<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>int, error<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    Flush<span style="color:#f92672">()</span> error
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>&lt;/code&gt;&lt;/pre&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>三个以上函数的接口名，类似于结构体名
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">```</span>go
</span></span><span style="display:flex;"><span>type Car interface <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    Start<span style="color:#f92672">([]</span>byte<span style="color:#f92672">)</span> 
</span></span><span style="display:flex;"><span>    Stop<span style="color:#f92672">()</span> error
</span></span><span style="display:flex;"><span>    Recover<span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>&lt;/code&gt;&lt;/pre&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#### 变量</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>全局变量：采用驼峰命名法，仅限在包内的全局变量，包外引用需要写接口，提供调用 局部变量：驼峰式，小写字母开头
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#### 常量</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>常量：大写，采用下划线
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">### import 规范</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>import在多行的情况下，goimports会自动帮你格式化，在一个文件里面引入了一个package，建议采用如下格式：
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">```</span>go
</span></span><span style="display:flex;"><span>import <span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>&lt;/code&gt;&lt;/pre&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>如果你的包引入了三种类型的包，标准库包，程序内部包，第三方包，建议采用如下方式进行组织你的包：
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">```</span>go
</span></span><span style="display:flex;"><span>import <span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;encoding/json&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;strings&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;myproject/model&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;myproject/controller&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;git.obc.im/obc/utils&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;git.obc.im/dep/beego&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;git.obc.im/dep/mysql&#34;</span>
</span></span><span style="display:flex;"><span>    // 空白引入需要添加注释
</span></span><span style="display:flex;"><span>		// 空白导入应该只在主包或测试包中，或者有一个注释证明它是正确的
</span></span><span style="display:flex;"><span>		_ <span style="color:#e6db74">&#34;github.com/jinzhu/gorm/dialects/mysql&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">)</span>  
</span></span></code></pre></div><p>在项目中不要使用相对路径引入包：</p>
<p>// 这是不好的导入</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">import</span> <span style="color:#960050;background-color:#1e0010">“</span>..<span style="color:#f92672">/</span><span style="color:#a6e22e">net</span><span style="color:#960050;background-color:#1e0010">”</span>
</span></span></code></pre></div><p>// 这是正确的做法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">import</span> <span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">xxxx</span>.<span style="color:#a6e22e">com</span><span style="color:#f92672">/</span><span style="color:#a6e22e">proj</span><span style="color:#f92672">/</span><span style="color:#a6e22e">net</span><span style="color:#960050;background-color:#1e0010">”</span>
</span></span></code></pre></div><h4 id="函数名">函数名</h4>
<p>函数名采用驼峰命名法，尽量不要使用下划线</p>
<h3 id="错误处理">错误处理</h3>
<p>error作为函数的值返回,必须尽快对error进行处理</p>
<p>采用独立的错误流进行处理</p>
<p>不要采用这种方式</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// error handling
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// normal code
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">code</span>&gt;&lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">pre</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">而要采用下面的方式</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">```go
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    if err != nil {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        // error handling
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        return // or continue, etc.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    // normal code
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&lt;/code&gt;&lt;/pre&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">如果返回值需要初始化，则采用下面的方式
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">```</span><span style="color:#66d9ef">go</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">f</span>()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// error handling
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">// use x
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>&lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">code</span>&gt;&lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">pre</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">####</span> <span style="color:#a6e22e">Panic</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">在逻辑处理中禁用panic</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">在main包中只有当实在不可运行的情况采用panic</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">例如文件无法打开</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">数据库无法连接导致程序无法</span> <span style="color:#a6e22e">正常运行</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">但是对于其他的package对外的接口不能有panic</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">只能在包内采用</span><span style="color:#960050;background-color:#1e0010">。</span> <span style="color:#a6e22e">建议在main包中使用log</span>.<span style="color:#a6e22e">Fatal来记录错误</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">这样就可以由log来结束程序</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">####</span> <span style="color:#a6e22e">Recover</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">recover用于捕获runtime的异常</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">禁止滥用recover</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">在开发测试阶段尽量不要用recover</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">recover一般放在你认为会有不可预期的异常的地方</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">```go
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">func server(workChan &lt;-chan *Work) {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    for work := range workChan {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        go safelyDo(work)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">func safelyDo(work *Work) {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    defer func() {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        if err := recover(); err != nil {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            log.Println(&#34;work failed:&#34;, err)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    }()
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    // do 函数可能会有不可预期的异常
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    do(work)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&lt;/code&gt;&lt;/pre&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">#### Defer
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">defer在函数return之前执行，对于一些资源的回收用defer是好的，但也禁止滥用defer，defer是需要消耗性能的,所以频繁调用的函数尽量不要使用defer。
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">```</span><span style="color:#66d9ef">go</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Contents returns the file&#39;s contents as a string.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Contents</span>(<span style="color:#a6e22e">filename</span> <span style="color:#66d9ef">string</span>) (<span style="color:#66d9ef">string</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">f</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">filename</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">Close</span>()  <span style="color:#75715e">// f.Close will run when we&#39;re finished.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">result</span> []<span style="color:#66d9ef">byte</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">buf</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">byte</span>, <span style="color:#ae81ff">100</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">n</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">Read</span>(<span style="color:#a6e22e">buf</span>[<span style="color:#ae81ff">0</span>:])
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">result</span> = append(<span style="color:#a6e22e">result</span>, <span style="color:#a6e22e">buf</span>[<span style="color:#ae81ff">0</span>:<span style="color:#a6e22e">n</span>]<span style="color:#f92672">...</span>) <span style="color:#75715e">// append is discussed later.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">EOF</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#a6e22e">err</span>  <span style="color:#75715e">// f will be closed if we return here.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> string(<span style="color:#a6e22e">result</span>), <span style="color:#66d9ef">nil</span> <span style="color:#75715e">// f will be closed if we return here.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">code</span>&gt;&lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">pre</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">###</span> <span style="color:#a6e22e">控制结构</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">####</span> <span style="color:#66d9ef">if</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">if接受初始化语句</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">约定如下方式建立局部变量</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">```go
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">if err := file.Chmod(0664); err != nil {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    return err
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&lt;/code&gt;&lt;/pre&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">#### for
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">采用短声明建立局部变量
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">```</span><span style="color:#66d9ef">go</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#ae81ff">10</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">i</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">code</span>&gt;&lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">pre</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">####</span> <span style="color:#66d9ef">range</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">如果只需要第一项</span><span style="color:#960050;background-color:#1e0010">（</span><span style="color:#a6e22e">key</span><span style="color:#960050;background-color:#1e0010">），</span><span style="color:#a6e22e">就丢弃第二个</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">```go
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">for key := range m {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    if key.expired() {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        delete(m, key)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&lt;/code&gt;&lt;/pre&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">如果只需要第二项，则把第一项置为下划线
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">```</span><span style="color:#66d9ef">go</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">value</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">array</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">value</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">code</span>&gt;&lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">pre</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">####</span> <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">尽早return</span><span style="color:#960050;background-color:#1e0010">：</span><span style="color:#a6e22e">一旦有错误发生</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">马上返回</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">```go
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">f, err := os.Open(name)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">if err != nil {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    return err
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">d, err := f.Stat()
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">if err != nil {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    f.Close()
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    return err
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">codeUsing(f, d)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&lt;/code&gt;&lt;/pre&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">### 方法的接收器
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">名称 一般采用strcut的第一个字母且为小写，而不是this，me或者self
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">```</span><span style="color:#66d9ef">go</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">type</span> <span style="color:#a6e22e">T</span> <span style="color:#66d9ef">struct</span>{} 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">T</span>)<span style="color:#a6e22e">Get</span>(){}
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">code</span>&gt;&lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">pre</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">如果接收者是map</span>,<span style="color:#a6e22e">slice或者chan</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">不要用指针传递</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">```go
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">//Map
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">package main
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">import (
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;fmt&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">type mp map[string]string
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">func (m mp) Set(k, v string) {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    m[k] = v
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">func main() {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    m := make(mp)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    m.Set(&#34;k&#34;, &#34;v&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    fmt.Println(m)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">//Channel
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">package main
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">import (
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;fmt&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">type ch chan interface{}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">func (c ch) Push(i interface{}) {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    c &amp;lt;- i
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">func (c ch) Pop() interface{} {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    return &amp;lt;-c
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">func main() {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    c := make(ch, 1)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    c.Push(&#34;i&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    fmt.Println(c.Pop())
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&lt;/code&gt;&lt;/pre&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">如果需要对slice进行修改，通过返回值的方式重新赋值
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">```</span><span style="color:#66d9ef">go</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//Slice
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">slice</span> []<span style="color:#66d9ef">byte</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">s</span> <span style="color:#f92672">:=</span> make(<span style="color:#a6e22e">slice</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">addOne</span>(<span style="color:#ae81ff">42</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">s</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#a6e22e">slice</span>) <span style="color:#a6e22e">addOne</span>(<span style="color:#a6e22e">b</span> <span style="color:#66d9ef">byte</span>) []<span style="color:#66d9ef">byte</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> append(<span style="color:#a6e22e">s</span>, <span style="color:#a6e22e">b</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">code</span>&gt;&lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">pre</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">如果接收者是含有sync</span>.<span style="color:#a6e22e">Mutex或者类似同步字段的结构体</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">必须使用指针传递避免复制</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">```go
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">package main
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">import (
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;sync&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">type T struct {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    m sync.Mutex
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">func (t *T) lock() {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    t.m.Lock()
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">/*
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Wrong !!!
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">func (t T) lock() {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    t.m.Lock()
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">*/
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">func main() {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    t := new(T)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    t.lock()
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&lt;/code&gt;&lt;/pre&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">如果接收者是大的结构体或者数组，使用指针传递会更有效率。
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">```</span><span style="color:#66d9ef">go</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">T</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">data</span> [<span style="color:#ae81ff">1024</span>]<span style="color:#66d9ef">byte</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">t</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">T</span>) <span style="color:#a6e22e">Get</span>() <span style="color:#66d9ef">byte</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">data</span>[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">t</span> <span style="color:#f92672">:=</span> new(<span style="color:#a6e22e">T</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Get</span>())
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">code</span>&gt;&lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">pre</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">###</span> <span style="color:#a6e22e">注释</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">1.</span> <span style="color:#a6e22e">所有的</span> <span style="color:#a6e22e">public</span> <span style="color:#a6e22e">方法和变量都要添加注释</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">2.</span> <span style="color:#a6e22e">注释格式为</span><span style="color:#960050;background-color:#1e0010">：</span><span style="color:#a6e22e">name</span> <span style="color:#a6e22e">describeContent</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#a6e22e">pre</span>&gt;&lt;<span style="color:#a6e22e">code</span> <span style="color:#a6e22e">class</span>=<span style="color:#e6db74">&#34;language-go line-numbers&#34;</span>&gt;    <span style="color:#75715e">// TubeName1 channel 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">TubeName1</span> = <span style="color:#e6db74">&#34;通道一&#34;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">code</span>&gt;&lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">pre</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#ae81ff">1</span>]: <span style="color:#a6e22e">https</span>:<span style="color:#75715e">//sheepbao.github.io/post/golang_code_specification/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io
</span></span></span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>System 最小堆</title>
			<link>https://blog.v5u.win/posts/system/system-%E6%9C%80%E5%B0%8F%E5%A0%86/</link>
			<pubDate>Thu, 25 Apr 2019 17:38:44 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-%E6%9C%80%E5%B0%8F%E5%A0%86/</guid>
			<description>最大—最小堆是最大层和最小层交替出现的二叉树，即最大层结点的子节点属于最小层，最小层结点的子节点属于最大层。 以最大（小）层结n点为根结点的子</description>
			<content type="html"><![CDATA[<p><strong>最大—最小堆</strong>是最大层和最小层交替出现的<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91">二叉树</a>，即最大层结点的子节点属于最小层，最小层结点的子节点属于最大层。 以最大（小）层结n点为根结点的子树保有最大（小）堆性质：根结点的键值为该子树结点键值中最大（小）项。</p>
<p><img src="https://wiki.jikexueyuan.com/project/easy-learn-algorithm/images/11.3.png" alt="最大堆"></p>
<p><img src="https://wiki.jikexueyuan.com/project/easy-learn-algorithm/images/11.1.png" alt="最小堆"></p>
<p><a href="https://zh.wikipedia.org/w/index.php?title=%E6%9C%80%E5%A4%A7%E5%A0%86&amp;action=edit&amp;redlink=1">最大堆</a>和<a href="https://zh.wikipedia.org/w/index.php?title=%E6%9C%80%E5%B0%8F%E5%A0%86&amp;action=edit&amp;redlink=1">最小堆</a>是<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86">二叉堆</a>的两种形式。</p>
<ul>
<li>最大堆：根结点的键值是所有堆结点键值中最大者的堆。</li>
<li>最小堆：根结点的键值是所有堆结点键值中最小者的堆。</li>
</ul>
<p>而最大—最小堆集结了最大堆和最小堆的优点，这也是其名字的由来。</p>
<h2 id="主要操作">主要操作</h2>
<h3 id="插入">插入</h3>
<p>将节点插在二叉树的最后一个叶子结点位置，然后比较它与它父亲节点的大小：如果大则停止；如果小则交换位置，然后对父亲节点递归该过程直至根节点。复杂度为{\displaystyle O(log(n))}<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/c0bedb281b1771b1dad14e5916d4979f3b57c6b8" alt="{\displaystyle O(log(n))}">。</p>
<p>一般来说，插入的位置可以不是最后一个叶子节点，可以作为任意中间节点的孩子节点插入，将这个叶子节点变为中间节点后，按上文所说的方法调整节点顺序以保证维持堆特性不变。</p>
<h3 id="删除">删除</h3>
<p>要从堆中删除一个节点，用最后一个节点替换掉要删除的节点，然后调整节点顺序以维持堆特性。</p>
<h2 id="应用">应用</h2>
<ul>
<li><a href="https://zh.wikipedia.org/w/index.php?title=%E5%8F%8C%E7%AB%AF%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97&amp;action=edit&amp;redlink=1">双端优先队列</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Go web技术栈</title>
			<link>https://blog.v5u.win/posts/go/go-web%E6%8A%80%E6%9C%AF%E6%A0%88/</link>
			<pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-web%E6%8A%80%E6%9C%AF%E6%A0%88/</guid>
			<description>iris 框架 go-beanstalkd 消息队列 gRPC go module 包管理 gin+gorm / singo</description>
			<content type="html"><![CDATA[<ul>
<li>
<p>iris 框架</p>
</li>
<li>
<p>go-beanstalkd 消息队列 gRPC</p>
</li>
<li>
<p>go module 包管理</p>
</li>
<li>
<p>gin+gorm / singo</p>
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Go交叉编译</title>
			<link>https://blog.v5u.win/go%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</link>
			<pubDate>Thu, 18 Apr 2019 09:25:29 +0000</pubDate>
			
			<guid>https://blog.v5u.win/go%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</guid>
			<description>查看操作系统平台和内核版本：uname -a Mac 下编译 Linux 和 Windows 64位可执行程序 Linux 下编译 Mac 和 Windows 64位可执行程序 Windows 下编译 Mac 和 Linux 64位可执行程序 Mac 编译 Linux 3</description>
			<content type="html"><![CDATA[<p>查看操作系统平台和内核版本：<code>uname -a</code></p>
<p>Mac 下编译 Linux 和 Windows 64位可执行程序</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Linux 下编译 Mac 和 Windows 64位可执行程序</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Windows 下编译 Mac 和 Linux 64位可执行程序</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Mac 编译 Linux 32位可执行程序</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>CGO_ENABLED = 0 交叉编译不支持 CGO 所以要禁用它。</p>
<p>GOOS：目标平台的操作系统（darwin、freebsd、linux、windows）</p>
<p>GOARCH：目标平台的体系架构（386、amd64、arm）</p>
<p>CGO是一个令人惊异的技术，它允许Go与C的类库交互操作，让Go能够使用 C语言 积累的各种资源。</p>
<p>对于使用CGO的程序，大部分情况可以通过配置$CC参数使用自行准备的交叉编译工具进行编译。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>其中$CC参数指定的是ARM工具链位置。</p>
<p>目前解决CGO跨平台编译问题的思路有：</p>
<p>– 用目标平台的工具链进行交叉编译</p>
<p>– 用原生代码重写CGO实现的功能，当然这是一句废话:small:</p>
]]></content>
		</item>
		
		<item>
			<title>Go 交叉编译</title>
			<link>https://blog.v5u.win/posts/go/go-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</link>
			<pubDate>Thu, 18 Apr 2019 17:22:29 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</guid>
			<description>查看操作系统平台和内核版本：uname -a Mac 下编译 Linux 和 Windows 64位可执行程序 CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go Linux 下编译 Mac 和 Windows 64位可执行程序 CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build main.go CGO_ENABLED=0 GOOS=windows</description>
			<content type="html"><![CDATA[<p>查看操作系统平台和内核版本：<code>uname -a</code></p>
<p>Mac 下编译 Linux 和 Windows 64位可执行程序</p>
<pre tabindex="0"><code>CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go
CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go
</code></pre><p>Linux 下编译 Mac 和 Windows 64位可执行程序</p>
<pre tabindex="0"><code>CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build main.go
CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go
</code></pre><p>Windows 下编译 Mac 和 Linux 64位可执行程序</p>
<pre tabindex="0"><code>SET CGO_ENABLED=0
SET GOOS=darwin
SET GOARCH=amd64
go build main.go

SET CGO_ENABLED=0
SET GOOS=linux
SET GOARCH=amd64
go build main.go
</code></pre><p>GOOS：目标平台的操作系统（darwin、freebsd、linux、windows）
GOARCH：目标平台的体系架构（386、amd64、arm）
交叉编译不支持 CGO 所以要禁用它,不要使用c代码库</p>
]]></content>
		</item>
		
		<item>
			<title>Hugo 开箱体验</title>
			<link>https://blog.v5u.win/posts/blog/blog-hugo/</link>
			<pubDate>Tue, 16 Apr 2019 14:09:31 +0800</pubDate>
			
			<guid>https://blog.v5u.win/posts/blog/blog-hugo/</guid>
			<description>Hugo是Go写的静态网站生成器，生成速度快，性能开销小，正好也在学习Golang。我决定从 Hexo 切换到 Hugo。 以下是试用总结，基本可以实现从</description>
			<content type="html"><![CDATA[<p>Hugo是Go写的静态网站生成器，生成速度快，性能开销小，正好也在学习Golang。我决定从 Hexo 切换到 Hugo。</p>
<p>以下是试用总结，基本可以实现从0到1。至于从1到n，同学们加油！</p>
<h3 id="安装">安装</h3>
<p><code>brew install hugo</code></p>
<h3 id="创建站点">创建站点</h3>
<p><code>hugo new site path/blogname</code></p>
<h3 id="创建页面">创建页面</h3>
<p><code>hugo new post/first.md </code> 默认文章创建位置为content目录</p>
<h3 id="预览">预览</h3>
<p><code>hugo server --theme=maupassant --buildDrafts</code></p>
<h3 id="生成静态页">生成静态页</h3>
<p>直接运行<code>hugo</code> 单命令就可以生成 public 目录，内放生成的静态页面</p>
<h3 id="发布">发布</h3>
<p>使用 git或其他方式 将public目录下的文件发布到目标地址</p>
<h3 id="其他">其他</h3>
<p><code>hugo new theme themename</code> 创建 theme</p>
]]></content>
		</item>
		
		<item>
			<title>Go-Authorization</title>
			<link>https://blog.v5u.win/posts/go/go-authorization/</link>
			<pubDate>Mon, 15 Apr 2019 14:52:48 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-authorization/</guid>
			<description>接口认证 一般接口开发中有以下常用的几种安全机制： 用户认证 数字签名 接口加密 用户认证 一般的接口测试工具都会提供一个User Auth/Author</description>
			<content type="html"><![CDATA[<h1 id="接口认证">接口认证</h1>
<p>一般接口开发中有以下常用的几种安全机制：</p>
<ul>
<li>用户认证</li>
<li>数字签名</li>
<li>接口加密</li>
</ul>
<h3 id="用户认证">用户认证</h3>
<p>一般的接口测试工具都会提供一个User Auth/Authorization的选项</p>
<ul>
<li>基本认证（Basic Auth）</li>
<li>摘要认证（Digest Auth）</li>
<li>OAuth 2.0（最常见，现在的网站接口多数提供此用户认证方式）授权认证方式</li>
</ul>
<p>接口需要认证：auth=(“username”,”password”)</p>
<h3 id="数字签名">数字签名</h3>
<p>在使用 HTTP/SOAP 协议传输数据的时候，签名作为其中一个参数，可以起到关键作用：通过客户的密钥，服务端的密钥匹配；当服务器接收到请求后，同样需要对“signpassword”进行 MD5 加密，然后，比对与调用者传来的 sign 加密串是否一致，从而来鉴别调用者是否有权限使用该接口。</p>
<p><code>http://127.0.0.1:8000/sign/?a=1&amp;b=2&amp;sign=6648e929329e53e7a91c50ae685a88b5</code></p>
<h3 id="接口加密">接口加密</h3>
<p>通常接口会使用更复杂一点的方式来进行加密的操作，常见的是AES的使用</p>
<p>AES加密里面有两个关键，一个是key（必须为16,24,32位），一个是VI（必须为16位）</p>
<p>解密：解密者必须要同时知道key和VI才可以解密</p>
<p>参考: <a href="https://www.jianshu.com/p/add7518a3fbe">https://www.jianshu.com/p/add7518a3fbe</a></p>
]]></content>
		</item>
		
		<item>
			<title>markdown 流程图</title>
			<link>https://blog.v5u.win/posts/system/system-markdown-%E6%B5%81%E7%A8%8B%E5%9B%BE/</link>
			<pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-markdown-%E6%B5%81%E7%A8%8B%E5%9B%BE/</guid>
			<description>Sequence Alice-&amp;gt;Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob--&amp;gt;Alice: I am good thanks! flow st=&amp;gt;start: Start op=&amp;gt;operation: Your Operation cond=&amp;gt;condition: Yes or No? e=&amp;gt;end st-&amp;gt;op-&amp;gt;cond cond(yes)-&amp;gt;e cond(no)-&amp;gt;op mermaid graph LR A[Hard edge] --&amp;gt;B(Round edge) B --&amp;gt; C{Decision} C --&amp;gt;|One| D[Result one] C --&amp;gt;|Two| E[Result two] Gantt %% Example with selection of syntaxes gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section</description>
			<content type="html"><![CDATA[<h1 id="sequence">Sequence</h1>
<pre tabindex="0"><code class="language-sequence" data-lang="sequence">Alice-&gt;Bob: Hello Bob, how are you?
Note right of Bob: Bob thinks
Bob--&gt;Alice: I am good thanks!
</code></pre><h1 id="flow">flow</h1>
<pre tabindex="0"><code class="language-flow" data-lang="flow">st=&gt;start: Start
op=&gt;operation: Your Operation
cond=&gt;condition: Yes or No?
e=&gt;end

st-&gt;op-&gt;cond
cond(yes)-&gt;e
cond(no)-&gt;op
</code></pre><h1 id="mermaid">mermaid</h1>
<pre tabindex="0"><code class="language-mermaid" data-lang="mermaid">graph LR
A[Hard edge] --&gt;B(Round edge)
    B --&gt; C{Decision}
    C --&gt;|One| D[Result one]
    C --&gt;|Two| E[Result two]
</code></pre><h1 id="gantt">Gantt</h1>
<pre tabindex="0"><code class="language-mermaid" data-lang="mermaid">%% Example with selection of syntaxes
        gantt
        dateFormat  YYYY-MM-DD
        title Adding GANTT diagram functionality to mermaid

        section A section
        Completed task            :done,    des1, 2014-01-06,2014-01-08
        Active task               :active,  des2, 2014-01-09, 3d
        Future task               :         des3, after des2, 5d
        Future task2               :         des4, after des3, 5d

        section Critical tasks
        Completed task in the critical line :crit, done, 2014-01-06,24h
        Implement parser and jison          :crit, done, after des1, 2d
        Create tests for parser             :crit, active, 3d
        Future task in critical line        :crit, 5d
        Create tests for renderer           :2d
        Add to mermaid                      :1d

        section Documentation
        Describe gantt syntax               :active, a1, after des1, 3d
        Add gantt diagram to demo page      :after a1  , 20h
        Add another diagram to demo page    :doc1, after a1  , 48h

        section Last section
        Describe gantt syntax               :after doc1, 3d
        Add gantt diagram to demo page      : 20h
        Add another diagram to demo page    : 48h
</code></pre>]]></content>
		</item>
		
		<item>
			<title>如何选购鼠标</title>
			<link>https://blog.v5u.win/%E5%A6%82%E4%BD%95%E9%80%89%E8%B4%AD%E9%BC%A0%E6%A0%87/</link>
			<pubDate>Sun, 14 Apr 2019 12:57:54 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E5%A6%82%E4%BD%95%E9%80%89%E8%B4%AD%E9%BC%A0%E6%A0%87/</guid>
			<description>&lt;h3 id=&#34;三种握姿&#34;&gt;三种握姿&lt;/h3&gt;
&lt;p&gt;趴式握鼠 =掌握&lt;/p&gt;
&lt;p&gt;姿势特点：手掌掌心全部与鼠标背部贴合，大拇指、无名指与小拇指自然伸直共同操作鼠标。食中二指自然平放在鼠标按键上。点击按键时，指腹与按键接触。移动时，手腕随鼠标移动。此姿势由于鼠标活动范围大，手常自然放在鼠标上不易疲劳，适合于低SENS的FPS玩家长时间练习。&lt;/p&gt;
&lt;p&gt;趴式握鼠依靠手腕做支点，整个手自然落在鼠标上，如果在右手型鼠标上第一感觉就是舒适，这也是大部分人采用的握姿。手部疲劳度低，依靠手腕运动，所以长时间操作及右手型鼠标用户推荐此种握法。&lt;/p&gt;</description>
			<content type="html"><![CDATA[<h3 id="三种握姿">三种握姿</h3>
<p>趴式握鼠 =掌握</p>
<p>姿势特点：手掌掌心全部与鼠标背部贴合，大拇指、无名指与小拇指自然伸直共同操作鼠标。食中二指自然平放在鼠标按键上。点击按键时，指腹与按键接触。移动时，手腕随鼠标移动。此姿势由于鼠标活动范围大，手常自然放在鼠标上不易疲劳，适合于低SENS的FPS玩家长时间练习。</p>
<p>趴式握鼠依靠手腕做支点，整个手自然落在鼠标上，如果在右手型鼠标上第一感觉就是舒适，这也是大部分人采用的握姿。手部疲劳度低，依靠手腕运动，所以长时间操作及右手型鼠标用户推荐此种握法。</p>
<p>后位式捏鼠=抓握</p>
<p>姿势特点：大拇指，无名指和小拇指握在鼠标侧面偏后位置。食中二指微曲搭在左右键上。鼠标背部与尾部不与手掌发生接触。鼠标左右移动时，以手腕为支点左右摆动。 上下移动时，手腕不动，靠大拇指和无名指的弯曲，使鼠标在掌心内滑动。</p>
<p>后位式捏鼠依靠手指控制凭借手指的灵活，所以移动起来非常快速。短时间频繁操作严重推荐此姿势。同时我们也要注意因为依靠手指驱动，所以体积不大且轻便的笔记本鼠标十分适合此姿势。</p>
<p>前位式捏鼠 =指握</p>
<p>姿势特点：大拇指，无名指和小拇指握在鼠标侧面中间的位置，鼠标尾部同手掌下部相接触，食中二指弯曲放在鼠标左右键上。食中二指可对左右键进行快速的点击，左右移动时以小臂为支点左右摆动。上下移动时，小臂随鼠标在鼠标垫上同时做垂直运动。</p>
<p>前位式捏鼠依靠手臂做支点，指尖落在鼠标左右按键最中心位置，并且手指弯曲状，可在需要时最迅速按下按键。</p>
<p>此外大家注意，前位式捏鼠掌心与鼠标尾部重合，手腕悬空状，支点移至小臂，可谓力度最大，相比前两种握法移动准确度最高。</p>
<p>前位式捏鼠-鼠标握法同时满足快速按键与精准移动，故此握法通常游戏玩家采用较多，体积大对称型鼠标用此握法最标准。</p>
<p><img src="https://f2cdn.wstx.com/data/attachment/forum/201602/29/204800ec5ueyrx9zzfezcq.png" alt="握姿"></p>]]></content>
		</item>
		
		<item>
			<title>免费字体可商用</title>
			<link>https://blog.v5u.win/%E5%85%8D%E8%B4%B9%E5%AD%97%E4%BD%93%E5%8F%AF%E5%95%86%E7%94%A8/</link>
			<pubDate>Sun, 14 Apr 2019 11:51:08 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E5%85%8D%E8%B4%B9%E5%AD%97%E4%BD%93%E5%8F%AF%E5%95%86%E7%94%A8/</guid>
			<description>免费字体 宋体、黑体、仿宋、隶属、楷体、幼圆 这些属于通用字体，没有著作权，是可以用来商用的。 思源字体 是adobe和Google合作开发的开源字</description>
			<content type="html"><![CDATA[<h1 id="免费字体">免费字体</h1>
<ol>
<li>宋体、黑体、仿宋、隶属、楷体、幼圆 这些属于通用字体，没有著作权，是可以用来商用的。</li>
<li>思源字体 是adobe和Google合作开发的开源字体可以免费商用</li>
<li>站酷字体 不是所有站酷开头的都是免费的哦注意。这几款才是免费的，站酷酷黑体、站酷意大利体、站酷快乐体、站酷高端黑体</li>
<li>庞门正道标题体</li>
<li>濑户字体</li>
<li>手书体中文简体</li>
<li>苹方 苹果公司出的字体，iOS系统默认字体</li>
<li>汉仪也出了一款免费商用的字体贤二体</li>
<li>MacOS自带字体全部可以免费商用，github有开源的字体库可以免费商用</li>
<li>华康有十几款免费商用的……平时我用的最多的大概是华康圆🌚因为有五种还是四种粗细不一样的。老好用了。</li>
<li>淘宝买了版权的，可以用华康的字。在其他地方用还是要小心点</li>
</ol>
<p><em>注意：</em></p>
<ol>
<li>
<p>辣鸡方正也有一款幼圆字体 小心被告 而且方正的字体很多都故意不带前缀 等你们用了 就去告</p>
</li>
<li>
<p>字体版权会不断变更，多了解这方面的情况为好</p>
</li>
<li>
<p>微软雅黑字体不是微软家的，是方正的，不能免费商用。极具迷惑性的名字坑了很多人。</p>
</li>
<li>
<p>在淘宝购买字体需要版权方认可</p>
</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Go gRPC研究总结</title>
			<link>https://blog.v5u.win/posts/go/go-grpc%E7%A0%94%E7%A9%B6%E6%80%BB%E7%BB%93/</link>
			<pubDate>Thu, 11 Apr 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-grpc%E7%A0%94%E7%A9%B6%E6%80%BB%E7%BB%93/</guid>
			<description>什么是RPC RPC（Remote Procedure Call）—远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RP</description>
			<content type="html"><![CDATA[<h3 id="什么是rpc">什么是RPC</h3>
<p>RPC（Remote Procedure Call）—远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。——百度百科</p>
<p>支持环境配置(Mac)</p>
<p>安装protobuf 这是 Google 开源的一套成熟的结构数据序列化机制<a href="https://juejin.im/post/5b852d476fb9a019e4505873">protocol buffer</a>
安装protobuf 这是 Google 开源的一套成熟的结构数据序列化机制<a href="https://juejin.im/post/5b852d476fb9a019e4505873">Protocol Buffers 3 简明教程</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-protobuf" data-lang="protobuf"><span style="display:flex;"><span>brew info protobuf<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>brew install protobuf<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>&lt;<span style="color:#f92672">/</span>code&gt;&lt;<span style="color:#f92672">/</span>pre&gt;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">检验</span>protobuf安装结果<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>&lt;pre&gt;&lt;code class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;language-shell line-numbers&#34;</span>&gt;protoc <span style="color:#f92672">--</span>version<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>libprotoc <span style="color:#ae81ff">3.5.1</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>&lt;<span style="color:#f92672">/</span>code&gt;&lt;<span style="color:#f92672">/</span>pre&gt;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">安装第三方包
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>&lt;pre&gt;&lt;code class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;language-go line-numbers&#34;</span>&gt;go mod download github.com<span style="color:#f92672">/</span>golang<span style="color:#f92672">/</span>protobuf<span style="color:#f92672">/</span>proto<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>go mod download github.com<span style="color:#f92672">/</span>golang<span style="color:#f92672">/</span>protobuf<span style="color:#f92672">/</span>protoc<span style="color:#f92672">-</span>gen<span style="color:#f92672">-</span>go<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>go mod download google.golang.org<span style="color:#f92672">/</span>grpc<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>go install github.com<span style="color:#f92672">/</span>golang<span style="color:#f92672">/</span>protobuf<span style="color:#f92672">/</span>protoc<span style="color:#f92672">-</span>gen<span style="color:#f92672">-</span>go <span style="color:#75715e">//编译 protoc-gen-go 可执行文件
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>&lt;<span style="color:#f92672">/</span>code&gt;&lt;<span style="color:#f92672">/</span>pre&gt;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">创建</span> protobuf <span style="color:#960050;background-color:#1e0010">文件
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>&lt;pre&gt;&lt;code class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;language-shell line-numbers&#34;</span>&gt;vi add.proto<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>add some date<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>&lt;<span style="color:#f92672">/</span>code&gt;&lt;<span style="color:#f92672">/</span>pre&gt;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">生成</span> gRPC <span style="color:#960050;background-color:#1e0010">代码
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>&lt;pre&gt;&lt;code class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;language-shell line-numbers&#34;</span>&gt;protoc <span style="color:#f92672">-</span>I <span style="color:#f92672">./</span>protos <span style="color:#f92672">./</span>protos<span style="color:#f92672">/</span>helloworld.proto <span style="color:#f92672">--</span>go_out<span style="color:#f92672">=</span>plugins<span style="color:#f92672">=</span>grpc<span style="color:#f92672">:</span>helloworld<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">或
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>protoc <span style="color:#f92672">-</span>I <span style="color:#f92672">.</span> add.proto <span style="color:#f92672">--</span>go_out<span style="color:#f92672">=</span>plugins<span style="color:#f92672">=</span>grpc<span style="color:#f92672">:.</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>&lt;<span style="color:#f92672">/</span>code&gt;&lt;<span style="color:#f92672">/</span>pre&gt;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">这生成了</span> <span style="color:#960050;background-color:#1e0010">`</span>helloworld.pb.go<span style="color:#960050;background-color:#1e0010">`</span> <span style="color:#960050;background-color:#1e0010">，包含了我们生成的客户端和服务端类，此外还有用于填充、序列化、提取</span> <span style="color:#960050;background-color:#1e0010">`</span>HelloRequest<span style="color:#960050;background-color:#1e0010">`</span> <span style="color:#960050;background-color:#1e0010">和</span> <span style="color:#960050;background-color:#1e0010">`</span>HelloResponse<span style="color:#960050;background-color:#1e0010">`</span> <span style="color:#960050;background-color:#1e0010">消息类型的类。
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">在</span>server.go <span style="color:#960050;background-color:#1e0010">实现</span>AddServiceServer <span style="color:#960050;background-color:#1e0010">的接口方法
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">```</span>go<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>type HelloServer struct {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>}<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>func (h HelloServer) SayHello(c context.Context, in <span style="color:#960050;background-color:#1e0010">*</span>pb.HelloRequest) (<span style="color:#960050;background-color:#1e0010">*</span>pb.HelloReply, error) {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>	return <span style="color:#960050;background-color:#1e0010">&amp;</span>pb.HelloReply{Message<span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;hello &#34;</span> <span style="color:#f92672">+</span> in.Name}, nil<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>}	<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>打开两个终端，分别启动 serve &amp; client</p>
<p>浏览器访问输出返回结果。</p>
]]></content>
		</item>
		
		<item>
			<title>Go Web框架选型</title>
			<link>https://blog.v5u.win/go-web%E6%A1%86%E6%9E%B6%E9%80%89%E5%9E%8B/</link>
			<pubDate>Mon, 08 Apr 2019 03:34:20 +0000</pubDate>
			
			<guid>https://blog.v5u.win/go-web%E6%A1%86%E6%9E%B6%E9%80%89%E5%9E%8B/</guid>
			<description>[TOC] Beego 在某些方面，Beego会让人联想到Python中包罗万象的Django Web框架。它具备各种Web应用程序的通用功能，总共有八个模块，你</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h3 id="beego">Beego</h3>
<p>在某些方面，Beego会让人联想到Python中包罗万象的Django Web框架。它具备各种Web应用程序的通用功能，总共有八个模块，你可以根据需要选择使用。除了大多数Web框架中常见的模型-视图-控制器（model-view-controller，MVC）组件外，它还包括访问数据库的对象关系映射（object-relationship map，ORM）、内置缓存处理程序、会话处理工具、日志记录机制和常用的操作HTTP对象的库。</p>
<p>Beego还有一个与Django很相似的地方是它的命令行工具。例如，你可以使用bee从头创建Beego应用或管理现有的应用。</p>
<h3 id="gin">Gin</h3>
<p>Go的第一个Web开发框架是Martini，但这个项目已经停止了维护。然而，其他Go框架如雨后春笋般纷纷涌现，它们使用Martini的基本思想，但是具有更好的性能和更多的功能。</p>
<p>Gin就是其中的一个项目。它使用修改过的的httprouter软件包来提高速度，并为很多常见的场景提供处理程序，包括中间件、文件上传、日志、将前端HTML组件绑定到后台的数据结构等等。其稳定版API是1.x版本，所以未来的变更应该不会破坏现有的Gin应用。</p>
<h3 id="gorilla">Gorilla</h3>
<p>Gorilla的定位是“Web工具箱”，而并非MVC风格的框架。它提供的库可以帮忙解决Web服务编程中各种底层的问题，包括context（在请求期间保存状态）、mux（路由和调度），以及实现HTTP上的安全cookie、会话、websocket和RPC等功能。</p>
<p>Gorilla没有提供模板、表单和其他前端部分。你需要自己准备这些部分，你可以在其他框架中使用Gorilla的各个组件，或是在独立组件中集成用Gorilla编写的东西。</p>
<h3 id="echo">Echo</h3>
<p>Echo是另一个小框架，主要面向API。例如，它并没有提供模板系统，所以你可以根据需要使用Go自己的html/template。但是，Echo提供了几种常常用于API的中间件模块，例如基本的认证和密钥身份验证、压缩、代理和日志记录。</p>
<p>Echo还提供了大量实用的recipe，其中很多无需大费周折就能实现。例如，如果你想使用Let’s Encrypt来管理HTTPS证书，那么可以设置一种recipe来自动安装这些证书。</p>
<h3 id="iris">Iris</h3>
<p>Iris的创建者称其为“真正属于Go的Express.js”，也就是说，它是JavaScript / Node.js的Web框架的Go语言版，它使用最小设计，绝大部分功能都由插件提供。Iris提供基本的MVC功能，自带对中间件、会话、路由和缓存的支持。</p>
<p>以下文档包含很多Iris的示例，包括与React前端的交互，或在Docker / Kubernetes环境中运行的项目：https://iris-go.com/v10/recipe</p>
<h3 id="revel">Revel</h3>
<p>Ruby on Rails为MVC风格的Web框架提供了一个通用模式，许多其他语言都仿照Ruby on Rails实现了自己的框架。Revel的创建者将其视作Rails的灵魂。</p>
<p>除了提供基本的MVC，Revel还允许你自由使用其他组件来满足其他需求。你可以使用Go自己的原生html/template包，或自己提供。同样，对于HTTP引擎，你也可以使用Go自己的或第三方提供的。缓存可以在本地的内容中完成，也可以通过Memcached或Redis在后台完成。但是，该框架没有数据库的原生ORM。Revel文档的一个例子（https://revel.github.io/examples/booking.html）中使用了Gorp库，但理论上来说你可以使用任何Go ORM。</p>
]]></content>
		</item>
		
		<item>
			<title>Go modules</title>
			<link>https://blog.v5u.win/posts/go/go-modules/</link>
			<pubDate>Wed, 03 Apr 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-modules/</guid>
			<description>go modules [TOC] go 1.13 的环境配置 删除.zshrc 中的大部分配置，只配置goroot其余配置用下列命令： go env -w GOSUMDB=&amp;#34;sum.golang.google.cn&amp;#34; # 更换为国内的校验源，默认sum.gola</description>
			<content type="html"><![CDATA[<h3 id="go-modules">go modules</h3>
<p>[TOC]</p>
<h2 id="go-113-的环境配置">go 1.13 的环境配置</h2>
<p>删除.zshrc 中的大部分配置，只配置goroot其余配置用下列命令：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>go env -w GOSUMDB<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sum.golang.google.cn&#34;</span> <span style="color:#75715e"># 更换为国内的校验源，默认sum.golang.org</span>
</span></span><span style="display:flex;"><span>go env -w GOPROXY<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://goproxy.io,direct&#34;</span> <span style="color:#75715e"># 解决代理</span>
</span></span><span style="display:flex;"><span>go env -w GO111MODULE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;on&#34;</span>
</span></span><span style="display:flex;"><span>go env -w GOPRIVATE<span style="color:#f92672">=</span>*.gitlab.com,*.gitee.com <span style="color:#75715e"># 代理跳过私有库设置</span>
</span></span></code></pre></div><hr>
<h4 id="环境配置">环境配置</h4>
<ol>
<li>
<p>正确配置 GOROOT</p>
</li>
<li>
<p><code>export GOPROXY=&quot;https://goproxy.cn,direct&quot; # 七牛提供的公共代理，解决golang/x/tools 下载失败</code></p>
</li>
</ol>
<h4 id="初始化-同时-确定了项目的绝对目录路径">初始化 同时 确定了项目的绝对目录路径</h4>
<p>go mod init v5u.win/projectapi
生成 go.mod
导入包：<code>import &quot;v5u.win/projectapi/src/app/service&quot;</code></p>
<h4 id="添加依赖">添加依赖</h4>
<p>go mod tidy</p>
<h4 id="生成-gosum-自动添加依赖关系到-gomod">生成 go.sum 自动添加依赖关系到 go.mod</h4>
<p><code>go run main.go</code></p>
<h4 id="下载依赖包">下载依赖包</h4>
<p><code>go mod download github.com/pelletier/go-toml</code></p>
<h4 id="tips">Tips:</h4>
<ol>
<li>不能在 golib/src 下创建项目</li>
<li>在 Go1.11 版本下，GOPATH 目录中的项目默认是禁用 Go Module 的，需要手动开启</li>
<li>export GOPROXY=&ldquo;<a href="https://goproxy.cn">https://goproxy.cn</a>,direct&rdquo; // 微软提供的公共代理,也可以以此技术建立自己的公共库</li>
<li>export export GO111MODULE=on // 必须使用module依赖，在src/ 目录下可以使用module。 go1.13已经全面支持</li>
</ol>
<p>一条 <code>go env-w GOPROXY=https://goproxy.cn,direct</code>即可。之所以在后面拼接一个 <code>,direct</code>，是因为通过这样做我们可以在一定程度上解决私有库的问题（当然， goproxy.cn 无法访问你的私有库）</p>
<h4 id="常用命令">常用命令</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>go mod tidy //拉取缺少的模块，移除不用的模块。
</span></span><span style="display:flex;"><span>go mod download //下载依赖包
</span></span><span style="display:flex;"><span>go mod graph //打印模块依赖图
</span></span><span style="display:flex;"><span>go mod vendor //将依赖复制到 vendor 下
</span></span><span style="display:flex;"><span>go mod verify //校验依赖
</span></span><span style="display:flex;"><span>go mod why //解释为什么需要依赖
</span></span><span style="display:flex;"><span>go list -m -json all //依赖详情
</span></span></code></pre></div><h3 id="注">注：</h3>
<p>module vgo 默认使用本地缓存的代码版本，如果想指定版本的话，最好显示声明一下，不要使用自动解析的方式。</p>
<p>file go.mod</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">module</span> <span style="color:#a6e22e">giligili</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">go</span> <span style="color:#ae81ff">1.13</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">require</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">github</span>.<span style="color:#a6e22e">com</span><span style="color:#f92672">/</span><span style="color:#a6e22e">gin</span><span style="color:#f92672">-</span><span style="color:#a6e22e">gonic</span><span style="color:#f92672">/</span><span style="color:#a6e22e">gin</span> <span style="color:#a6e22e">v1</span><span style="color:#ae81ff">.4.0</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">github</span>.<span style="color:#a6e22e">com</span><span style="color:#f92672">/</span><span style="color:#66d9ef">go</span><span style="color:#f92672">-</span><span style="color:#a6e22e">redis</span><span style="color:#f92672">/</span><span style="color:#a6e22e">redis</span> <span style="color:#a6e22e">v6</span><span style="color:#ae81ff">.15.5</span><span style="color:#f92672">+</span><span style="color:#a6e22e">incompatible</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">github</span>.<span style="color:#a6e22e">com</span><span style="color:#f92672">/</span><span style="color:#a6e22e">jinzhu</span><span style="color:#f92672">/</span><span style="color:#a6e22e">gorm</span> <span style="color:#a6e22e">v1</span><span style="color:#ae81ff">.9.10</span>
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><h3 id="引入本地依赖包">引入本地依赖包</h3>
<p>前面铺垫了这么多，接下来回到我们的主题，我该怎样使用我们自己开发的工具包呢？ 假设我们有一个新的项目 <code>testmod-demo</code>，现在想要在新的项目中使用 testmod 中的工具包，那么首先我们需要使用 <code>go mod</code> 初始化该项目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>cd testmod-demo
</span></span><span style="display:flex;"><span>go mod init gitee.com/rockyang/testmod-demo
</span></span></code></pre></div><p>初始化之后会在当前项目根目录生成一个 <code>go.mod</code>，接下来我们有两种方式去引入 testmod 包，一种是直接修改 <code>go.mod</code> 文件，在 require 配置中添加上</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gitee.com/rockyang/testmod v0.0.0-20190610103414-4c55783279db
</span></span></code></pre></div><p>或者使用 <code>go mod edit</code> 命令修改依赖</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>go mod edit -require<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;gitee.com/rockyang/testmod@v0.0.0-20190610103414-4c55783279db&#34;</span>
</span></span><span style="display:flex;"><span>go mod tidy <span style="color:#75715e"># 整理依赖包</span>
</span></span></code></pre></div><h3 id="使用-replace-将远程包替换为本地包服务">使用 replace 将远程包替换为本地包服务</h3>
<p>这时如果你执行 <code>go build</code> 的时候会报错，提示找不到 <code>gitee.com/rockyang/testmod</code>，是因为你没有把仓库推送到远程，所以无法下载。 go module 提供了另外一个方案, 使用 replace, 编辑 go.mod 文件，在最后面添加： <code>replace gitee.com/rockyang/testmod =&gt; /gopath/src/gitee.com/rockyang/testmod</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>module gitee.com/rockyang/testmod-demo
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>go 1.12
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>require <span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>    github.com/gin-gonic/gin v1.3.0
</span></span><span style="display:flex;"><span>	gitee.com/rockyang/testmod@v0.0.0-20190610103414-4c55783279db
</span></span><span style="display:flex;"><span>    golang.org/x/net v0.0.0-20190320064053-1272bf9dcd53 // indirect
</span></span><span style="display:flex;"><span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>replace gitee.com/rockyang/testmod <span style="color:#f92672">=</span>&gt; /gopath/src/gitee.com/rockyang/testmod
</span></span></code></pre></div><blockquote>
<p>这里的 /gopath/src/gitee.com/rockyang/testmod 是本地的包路径</p>
</blockquote>
<p>然后再执行 <code>go build</code> 你会看到你想要的结果。</p>
<h2 id="私有库相关设置">私有库相关设置</h2>
<p>首先私有服务器必须有一个域名，不能使用ip。</p>
<p>这里使用 gitee 和 GitHub 作为测试服务器</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>GOSUMDB<span style="color:#f92672">=</span>off <span style="color:#75715e">#解决私有库校验不过，放弃校验，大心脏者适用</span>
</span></span><span style="display:flex;"><span>GOSUMDB<span style="color:#f92672">=</span>sum.golang.google.cn <span style="color:#75715e">#或者 更换校验源</span>
</span></span><span style="display:flex;"><span>go env -w GOSUMDB<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sum.golang.google.cn&#34;</span> <span style="color:#75715e"># google 为我们提供了国内的校验源</span>
</span></span></code></pre></div><p>配置 .gitconfig 将 http 改为 ssh 获取。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#f92672">[</span>http<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>	extraheader <span style="color:#f92672">=</span> PRIVATE-TOKEN: token
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>url <span style="color:#e6db74">&#34;git@gitee.com:fan.jinlong/go_module_lib.git&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>	insteadOf <span style="color:#f92672">=</span> https://gitee.com/fan.jinlong/go_module_lib.git
</span></span></code></pre></div><p>坑4:拉取私有模块</p>
<p><img src="https://image.eddycjy.com/075bdc3d3552c000981c9d4fdd8d0f3f.jpg" alt="image"></p>
<p>这里主要想涉及两块知识点，如下：</p>
<p>- GOPROXY 是无权访问到任何人的私有模块的，所以你放心，安全性没问题。
- GOPROXY 除了设置模块代理的地址以外，还需要增加 “direct” 特殊标识才可以成功拉取私有库。</p>
]]></content>
		</item>
		
		<item>
			<title>Go-API 项目模板文档</title>
			<link>https://blog.v5u.win/posts/go/go-api-%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF%E6%96%87%E6%A1%A3/</link>
			<pubDate>Wed, 03 Apr 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-api-%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF%E6%96%87%E6%A1%A3/</guid>
			<description>项目目录结构规范 PROJECT_NAME ├── README.md //介绍软件及文档入口 ├── bin //编译好的二进制文件,执行./build.sh自动生成，该目录也用于程序打包 ├──</description>
			<content type="html"><![CDATA[<h3 id="项目目录结构规范">项目目录结构规范</h3>
<pre tabindex="0"><code>PROJECT_NAME
├── README.md 	//介绍软件及文档入口
├── bin 				//编译好的二进制文件,执行./build.sh自动生成，该目录也用于程序打包
├── build.sh 		//自动编译的脚本
├── doc 				//该项目的文档
├── pack 				//打包后的程序放在此处
├── pack.sh 		//自动打包的脚本，生成类似xxxx.20170713_14:45:35.tar.gz的文件，放在pack文件下
└── src 				//该项目的源代码
    ├── main 		//项目主函数
    ├── test 		//测试
    ├── app 		//项目代码
    ├── public 	//公共文件/静态文件
    └── vendor 	//存放go的库
        ├── github.com/xxx 	//第三方库
        └── xxx.com/abc 		//公司内部的公共库
</code></pre><p>项目的目录结构尽量做到简明、层次清楚。</p>
<pre tabindex="0"><code>./app
├── bootstrap		//入口引导文件
├── cache
├── config			//项目配置
├── controller	//request请求处理中心 ——&gt; controller ——&gt; Response / view
├── library			//项目工具库
├── log					//日志 —— 考虑发布目录
├── middleware	//中间件
├── model				//data model.xorm -——&gt; 数据库表映射模型
├── route				//路由管理
├── service			//业务数据获取 service
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Linux学习记录-查找</title>
			<link>https://blog.v5u.win/linux%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E6%9F%A5%E6%89%BE/</link>
			<pubDate>Mon, 01 Apr 2019 13:58:16 +0000</pubDate>
			
			<guid>https://blog.v5u.win/linux%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E6%9F%A5%E6%89%BE/</guid>
			<description>whereis 和 locate 利用文件数据库查找，速度比较快。推荐常用。find 功能强大。 whereis 寻找特定文件whereis ifconfig locate 可以文件名部分查找，locate passw</description>
			<content type="html"><![CDATA[<p>whereis 和 locate 利用文件数据库查找，速度比较快。推荐常用。find 功能强大。</p>
<h3 id="whereis">whereis</h3>
<p>寻找特定文件<code>whereis ifconfig</code></p>
<h3 id="locate">locate</h3>
<p>可以文件名部分查找，<code>locate passwd</code>,查找迅速，文件数据库更新不及时，centOS 5.x 每天更新数据库一次。</p>
<p>依据 /var/lib/mlocate 内的数据库记载，找出用户输入的 key 文件名。</p>
<h3 id="find">find</h3>
<p>直接查找硬盘。<code>find /etc -mtime 0</code> 按时间查找。<code>find / -name passwd</code> 查找文件名。</p>
]]></content>
		</item>
		
		<item>
			<title>为什么需要go语言</title>
			<link>https://blog.v5u.win/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81go%E8%AF%AD%E8%A8%80/</link>
			<pubDate>Thu, 28 Mar 2019 08:40:14 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81go%E8%AF%AD%E8%A8%80/</guid>
			<description>为什么需要go语言 计算机硬件技术更新频繁，多核CPU不能充分发挥性能 目前的语言不够简洁高效（现有语言：1.风格不统一 2.计算能力不够 3.处理</description>
			<content type="html"><![CDATA[<h3 id="为什么需要go语言">为什么需要go语言</h3>
<ol>
<li>计算机硬件技术更新频繁，多核CPU不能充分发挥性能</li>
<li>目前的语言不够简洁高效（现有语言：1.风格不统一 2.计算能力不够 3.处理大并发不够好）</li>
<li>运行速度快的语言，编译速度慢，有内存泄露问题。比如：c,c++</li>
</ol>
<p><strong>Go就是为了解决上面的那些问题，而创造的.</strong></p>
<h3 id="go的特点">Go的特点</h3>
<ol>
<li>静态编译，高性能。动态语言的开发维护的高效率</li>
<li>代码组织方式：package 包</li>
<li>垃圾回收机制</li>
<li>天然高并发，语言层面支持 goruntine,基于CPS 并发模式</li>
<li>管道通讯机制 channel</li>
<li>返回多值，slice 切片，defer 延时执行</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>MySQL8</title>
			<link>https://blog.v5u.win/mysql8/</link>
			<pubDate>Wed, 20 Mar 2019 05:58:16 +0000</pubDate>
			
			<guid>https://blog.v5u.win/mysql8/</guid>
			<description>mysql5.7 —&amp;gt;mysql8 的升级 MySQL8的加密方式有变化 命令行查看MySQL8 账户的加密方式 在mysql8之前的版本使用的密码加密规则是m</description>
			<content type="html"><![CDATA[<p>mysql5.7 —&gt;mysql8 的升级</p>
<p>MySQL8的加密方式有变化</p>
<p>命令行查看MySQL8 账户的加密方式</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>在mysql8之前的版本使用的密码加密规则是<code>mysql_native_password</code>，但是在mysql8则是<code>caching_sha2_password</code>。</p>
<p>Navicat不支持 caching_sha2_password 这种加密方式，所以升级后 Navicat 不能连接 MySQL8</p>
<h4 id="navicat-连接-mysql8-的解决方案有三">Navicat 连接 mysql8 的解决方案有三：</h4>
<h5 id="方案一-重新创建一个账号设此账号的加密方式为-mysql_native_password使用这个账号">方案一 重新创建一个账号，设此账号的加密方式为 mysql_native_password，使用这个账号</h5>
<p>create user ‘fanjinlong’@’%’ identified with mysql_native_password by ‘333’;</p>
<p>create user ‘your username’@’%’ identified with caching_sha2_password by ‘your password’;</p>
<p>ps. 此路不通，该账号无法创建 database 和 table</p>
<h5 id="方案二-修改root-的密码加密方式刷新">方案二 修改root 的密码加密方式，刷新</h5>
<p>ALTER USER ‘root’@’localhost’ IDENTIFIED BY ‘password’ PASSWORD EXPIRE NEVER; # 更改root 的加密方式</p>
<p>ALTER USER ‘root’@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘password’;# 重置密码</p>
<p>FLUSH PRIVILEGES; #刷新数据库</p>
<h5 id="方案三-更换mysql8-客户端">方案三 更换MySQL8 客户端</h5>
<p>关于 caching_sha2_password</p>
<p>MySQL提供了两个身份验证插件，可以为用户帐户密码实现SHA-256哈希：</p>
<p>sha256_password：实现基本的SHA-256身份验证。</p>
<p>caching_sha2_password：实现SHA-256身份验证（如sha256_password），但在服务器端使用缓存以获得更好的性能，并具有更广泛的适用性的附加功能。</p>
<blockquote>
<p>在MySQL 8.0中，caching_sha2_password是默认的身份验证插件而不是 mysql_native_password。</p>
</blockquote>
<blockquote>
<p>要使用通过caching_sha2_password插件进行身份验证的帐户连接到服务器，您必须使用安全连接或支持使用RSA密钥对进行密码交换的未加密连接，如本节后面所述。无论哪种方式， caching_sha2_password插件都使用MySQL的加密功能。</p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>mac中如何卸载pkg包</title>
			<link>https://blog.v5u.win/mac%E4%B8%AD%E5%A6%82%E4%BD%95%E5%8D%B8%E8%BD%BDpkg%E5%8C%85/</link>
			<pubDate>Tue, 19 Mar 2019 07:00:08 +0000</pubDate>
			
			<guid>https://blog.v5u.win/mac%E4%B8%AD%E5%A6%82%E4%BD%95%E5%8D%B8%E8%BD%BDpkg%E5%8C%85/</guid>
			<description>mac中如何卸载pkg包 “` pkgutil –pkgs cd /private/var/db/receipts ls lsbom com.apple.pkg.JavaForMacOSX107.bom //查看所有关联文件。</description>
			<content type="html"><![CDATA[<h1 id="mac中如何卸载pkg包">mac中如何卸载pkg包</h1>
<p>“`</p>
<p>pkgutil –pkgs</p>
<p>cd /private/var/db/receipts</p>
<p>ls</p>
<p>lsbom com.apple.pkg.JavaForMacOSX107.bom //查看所有关联文件。</p>
]]></content>
		</item>
		
		<item>
			<title>mac中如何卸载pkg包</title>
			<link>https://blog.v5u.win/posts/mac/mac-mac%E4%B8%AD%E5%A6%82%E4%BD%95%E5%8D%B8%E8%BD%BDpkg%E5%8C%85/</link>
			<pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/mac/mac-mac%E4%B8%AD%E5%A6%82%E4%BD%95%E5%8D%B8%E8%BD%BDpkg%E5%8C%85/</guid>
			<description>mac中如何卸载pkg包 pkgutil &amp;ndash;pkgs cd /private/var/db/receipts ls lsbom com.apple.pkg.JavaForMacOSX107.bom //查看所有关联文件。</description>
			<content type="html"><![CDATA[<h1 id="mac中如何卸载pkg包">mac中如何卸载pkg包</h1>
<p>pkgutil &ndash;pkgs</p>
<p>cd /private/var/db/receipts</p>
<p>ls</p>
<p>lsbom com.apple.pkg.JavaForMacOSX107.bom //查看所有关联文件。</p>
]]></content>
		</item>
		
		<item>
			<title>LNMP 跨目录访问权限设置</title>
			<link>https://blog.v5u.win/lnmp-%E8%B7%A8%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE/</link>
			<pubDate>Fri, 15 Mar 2019 01:53:05 +0000</pubDate>
			
			<guid>https://blog.v5u.win/lnmp-%E8%B7%A8%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE/</guid>
			<description>LNMP 跨目录访问权限设置 在 ThinkPHP Laravel Typecho 等框架中网站目录一般是在public下，但是public下的程序要跨目录调用public上级目录下的文件，因为L</description>
			<content type="html"><![CDATA[<h5 id="lnmp-跨目录访问权限设置">LNMP 跨目录访问权限设置</h5>
<p>在 ThinkPHP Laravel Typecho 等框架中网站目录一般是在public下，但是public下的程序要跨目录调用public上级目录下的文件，因为LNMP默认是不允许跨目录访问的，所以都是必须要将防跨目录访问的设置去掉，有时候这些框架类的程序提示500错误也可能是这个问题引起的。</p>
<p>那么这个问题怎么解决呢？</p>
<p>1.2,1.3,1.4,1.5及以上版本，修改对应虚拟主机的配置文件(/usr/local/nginx/conf/vhost/域名.conf)</p>
<p>将include enable-php.conf;替换为include enable-php-pathinfo.conf;</p>
<p>lnmp v1.1上，修改对应虚拟主机的配置文件(/usr/local/nginx/conf/vhost/域名.conf)</p>
<p>去掉#include pathinfo.conf前面的#，把try_files $uri =404; 前面加上# 注释掉。</p>
]]></content>
		</item>
		
		<item>
			<title>iris-mvc架构的目录拆解</title>
			<link>https://blog.v5u.win/iris-mvc%E6%9E%B6%E6%9E%84%E7%9A%84%E7%9B%AE%E5%BD%95%E6%8B%86%E8%A7%A3/</link>
			<pubDate>Wed, 13 Mar 2019 07:52:15 +0000</pubDate>
			
			<guid>https://blog.v5u.win/iris-mvc%E6%9E%B6%E6%9E%84%E7%9A%84%E7%9B%AE%E5%BD%95%E6%8B%86%E8%A7%A3/</guid>
			<description></description>
			<content type="html"><![CDATA[<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<blockquote>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>go iris 服务器 性能优化与性能对比</title>
			<link>https://blog.v5u.win/go-iris-%E6%9C%8D%E5%8A%A1%E5%99%A8-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%8E%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/</link>
			<pubDate>Wed, 13 Mar 2019 07:32:08 +0000</pubDate>
			
			<guid>https://blog.v5u.win/go-iris-%E6%9C%8D%E5%8A%A1%E5%99%A8-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%8E%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/</guid>
			<description>性能优化与性能对比 对比1，模板是否支持每次更新检查 对比2，开启xorm数据缓存 对比3，不用模板，不查数据 *优化方向： 尽量减少模板更新 善用数据</description>
			<content type="html"><![CDATA[<h4 id="性能优化与性能对比">性能优化与性能对比</h4>
<ul>
<li>
<p>对比1，模板是否支持每次更新检查</p>
</li>
<li>
<p>对比2，开启xorm数据缓存</p>
</li>
<li>
<p>对比3，不用模板，不查数据</p>
</li>
<li>
<ul>
<li>
<p>*优化方向：<!-- raw HTML omitted --></p>
</li>
<li>
<p>尽量减少模板更新</p>
</li>
<li>
<p>善用数据缓存，数据库缓存</p>
</li>
<li>
<p>页面静态化，减少页面动态性（少查数据库，少动态生成页面）</p>
</li>
</ul>
</li>
</ul>
<p>参考 imooc 球星库 课程</p>
]]></content>
		</item>
		
		<item>
			<title>压力测试 ab wrk</title>
			<link>https://blog.v5u.win/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95-ab-wrk/</link>
			<pubDate>Tue, 12 Mar 2019 08:37:12 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95-ab-wrk/</guid>
			<description>压力测试 ab wrk ab为Apache内置 ab -n1000 -c10 http://localhost:8080/ 1000次请求 10个并发,分析 Requests per second 字段 Server Software: Iris: Server Hostname: localhost Server Port: 8080 Document Path: / Document Length: 5368 bytes Concurrency Level: 10 Time taken for tests: 0.758 seconds Complete requests: 1000 Failed</description>
			<content type="html"><![CDATA[<p>压力测试 ab wrk</p>
<h4 id="ab为apache内置">ab为Apache内置</h4>
<p>ab -n1000 -c10 http://localhost:8080/</p>
<p>1000次请求 10个并发,分析 Requests per second 字段</p>
<pre><code>Server Software:        Iris:
Server Hostname:        localhost
Server Port:            8080
Document Path:          /
Document Length:        5368 bytes
Concurrency Level:      10
Time taken for tests:   0.758 seconds
Complete requests:      1000
Failed requests:        0
Total transferred:      5580884 bytes
HTML transferred:       5368000 bytes
Requests per second:    1318.86 [#/sec] (mean)
Time per request:       7.582 [ms] (mean)
Time per request:       0.758 [ms] (mean, across all concurrent requests)
Transfer rate:          7187.91 [Kbytes/sec] received
Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.2      0       2
Processing:     1    7  11.5      4     124
Waiting:        1    7  11.4      3     123
Total:          1    7  11.5      4     125
Percentage of the requests served within a certain time (ms)
  50%      4
  66%      6
  75%      8
  80%      9
  90%     14
  95%     22
  98%     43
  99%     57
 100%    125 (longest request)
</code></pre>
<h4 id="wrkbrew-install-wrk">wrk：brew install wrk</h4>
<p>wrk -c10 -t10 -d5 http://localhost:8080/</p>
<p>10个连接 10个线程，持续5秒，分析 Requests/sec 请求次数/秒</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>简单高效，ab默认短连接(http1.0)，wrk默认长连接</p>
<p>分析结果：</p>
<p>– 减少数据库依赖</p>
<p>– 模板尽量少使用动态数据</p>
]]></content>
		</item>
		
		<item>
			<title>xorm cmd 墙内安装</title>
			<link>https://blog.v5u.win/xorm-%E5%A2%99%E5%86%85%E5%AE%89%E8%A3%85/</link>
			<pubDate>Mon, 11 Mar 2019 07:12:34 +0000</pubDate>
			
			<guid>https://blog.v5u.win/xorm-%E5%A2%99%E5%86%85%E5%AE%89%E8%A3%85/</guid>
			<description>xorm cmd 墙内安装 有两个库不能墙内访问 civil crypto.所以我们需要迂回一下安装。 可以直接用 git clone github.com 上的库。这两个库都可以在GitHub上找到。 使用 先</description>
			<content type="html"><![CDATA[<h5 id="xorm-cmd-墙内安装">xorm cmd 墙内安装</h5>
<p>有两个库不能墙内访问 civil crypto.所以我们需要迂回一下安装。</p>
<p>可以直接用 git clone github.com 上的库。这两个库都可以在GitHub上找到。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h5 id="使用">使用</h5>
<p>先设计MySQL数据表，在执行命令，生成 models</p>
<p>生成代码直接使用</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>格式：xorm reverse dirver dbname 导出模板</p>
]]></content>
		</item>
		
		<item>
			<title>Go-iris-template</title>
			<link>https://blog.v5u.win/posts/go/go-iris-template/</link>
			<pubDate>Fri, 08 Mar 2019 17:25:10 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-iris-template/</guid>
			<description>Iris 支持五个开箱即用的模板引擎，所有这五个模板引擎都具有通用API的共同特征，如布局，模板功能，特定于派对的布局，部分渲染等。 标准的html,</description>
			<content type="html"><![CDATA[<p>Iris 支持五个开箱即用的模板引擎，所有这五个模板引擎都具有通用API的共同特征，如布局，模板功能，特定于派对的布局，部分渲染等。</p>
<blockquote>
<p>标准的html,它的模板解析器就是 <a href="https://golang.org/pkg/html/template/">golang.org/pkg/html/template/</a></p>
</blockquote>
<blockquote>
<p>Django,它的模板解析器就是 <a href="https://github.com/flosch/pongo2">github.com/flosch/pongo2</a></p>
</blockquote>
<blockquote>
<p>Pug(Jade),它的模板解析器就是 <a href="https://github.com/Joker/jade">github.com/Joker/jade</a></p>
</blockquote>
<blockquote>
<p>Handlebars, 它的模板解析器 <a href="https://github.com/aymerick/raymond">github.com/aymerick/raymond</a></p>
</blockquote>
<blockquote>
<p>Amber, 它的模板解析器 <a href="https://github.com/eknkc/amber">github.com/eknkc/amber</a></p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>Go Iris 路由</title>
			<link>https://blog.v5u.win/posts/go/go-iris-%E8%B7%AF%E7%94%B1/</link>
			<pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-iris-%E8%B7%AF%E7%94%B1/</guid>
			<description>路由配置规则 直接通过 function 绑定 controller，function name 映射到 路由的地址 function named rule： func(*Controller) GetLoginBy(id int64) 绑定的controller HTTP-method+routePath map to - GET:/user/login/{param:long} 通</description>
			<content type="html"><![CDATA[<h5 id="路由配置规则">路由配置规则</h5>
<p>直接通过 function 绑定 controller，function name 映射到 路由的地址</p>
<p>function named rule：</p>
<pre tabindex="0"><code>func(*Controller) GetLoginBy(id int64)
绑定的controller HTTP-method+routePath
map to - GET:/user/login/{param:long}
</code></pre><p>通过控制器方法的输入参数访问动态路径参数，不需要绑定。当您使用Iris的默认语法来解析来自控制器的处理程序时，您需要使用By字来为方法添加后缀，大写是一个新的子路径。例： 如这种形式 mvc.New(app.Party(&quot;/user&quot;)).Handle(new(user.Controller)) 则:</p>
<ul>
<li>func(*Controller) Get() - GET:/user</li>
<li>func(*Controller) Post() - POST:/user</li>
<li>func(*Controller) GetLogin() - GET:/user/login</li>
<li>func(*Controller) PostLogin() - POST:/user/login</li>
<li>func(*Controller) GetProfileFollowers() - GET:/user/profile/followers</li>
<li>func(*Controller) PostProfileFollowers() - POST:/user/profile/followers</li>
<li>func(*Controller) GetBy(id int64) - GET:/user/{param:long}</li>
<li>func(*Controller) PostBy(id int64) - POST:/user/{param:long}</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Go Error 错误处理</title>
			<link>https://blog.v5u.win/posts/go/go-error-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
			<pubDate>Wed, 06 Mar 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-error-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
			<description>常用的有五种方式 第一种策略 首先，也是最常用的方式是传播错误。这意味着函数中某个子程序的失败，会变成该函数的失败。我们使用该函数前缀添加额外的</description>
			<content type="html"><![CDATA[<p>常用的有五种方式</p>
<h4 id="第一种策略">第一种策略</h4>
<p>首先，也是最常用的方式是传播错误。这意味着函数中某个子程序的失败，会变成该函数的失败。我们使用该函数前缀添加额外的上下文信息到原始错误信息。当错误最终由main函数处理时，错误信息应提供清晰的从原因到后果的因果链，就像美国宇航局事故调查时做的那样：</p>
<blockquote>
<p>genesis: crashed: no parachute: G-switch failed: bad relay orientation</p>
</blockquote>
<p>编写错误信息时，我们要确保错误信息对问题细节的描述是详尽的。尤其是要注意错误信息表达的一致性，即相同的函数或同包内的同一组函数返回的错误在构成和处理方式上是相似的。</p>
<hr>
<h4 id="第二种策略">第二种策略</h4>
<p>第二种策略。如果错误的发生是偶然性的，或由不可预知的问题导致的。一个明智的选择是重新尝试失败的操作。在重试时，我们需要限制重试的时间间隔或重试的次数，防止无限制的重试。</p>
<h4 id="第三种策略">第三种策略</h4>
<p>如果错误发生后，程序无法继续运行，我们就可以采用第三种策略：输出错误信息并结束程序。需要注意的是，这种策略只应在main中执行。对库函数而言，应仅向上传播错误，除非该错误意味着程序内部包含不一致性，即遇到了bug，才能在库函数中结束程序。</p>
<p>调用log.Fatalf可以更简洁的代码达到与上文相同的效果。log中的所有函数，都默认会在错误信息之前输出时间信息。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Go" data-lang="Go"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">WaitForServer</span>(<span style="color:#a6e22e">url</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;Site is down: %v\n&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 我们可以设置log的前缀信息屏蔽时间信息，一般而言，前缀信息会被设置成命令名。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">SetPrefix</span>(<span style="color:#e6db74">&#34;wait: &#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">SetFlags</span>(<span style="color:#ae81ff">0</span>)
</span></span></code></pre></div><h4 id="第四种策略">第四种策略</h4>
<p>第四种策略：有时，我们只需要输出错误信息就足够了，不需要中断程序的运行。</p>
<p>我们可以通过log包提供函数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Go" data-lang="Go"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Ping</span>(); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;ping failed: %v; networking disabled&#34;</span>,<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">//log包中的所有函数会为没有换行符的字符串增加换行符。
</span></span></span></code></pre></div><p>或者标准错误流输出错误信息。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Go" data-lang="Go"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Ping</span>(); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Fprintf</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stderr</span>, <span style="color:#e6db74">&#34;ping failed: %v; networking disabled\n&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="第五种策略">第五种策略</h4>
<p>第五种，也是最后一种策略：我们可以直接忽略掉错误。</p>
<h3 id="文件结尾错误eof">文件结尾错误（EOF）</h3>
<p>io包保证任何由文件结束引起的读取失败都返回同一个错误——io.EOF</p>
]]></content>
		</item>
		
		<item>
			<title>Go HTML template</title>
			<link>https://blog.v5u.win/posts/go/go-html-template/</link>
			<pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-html-template/</guid>
			<description>文档 go doc text/template $ go doc html/template 应用 func main() { // 定义模板显示格式 const templ = `&amp;lt;p&amp;gt;A: {{.A}}&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;B: {{.B}}&amp;lt;/p&amp;gt;` // 模板配置函数 t := template.Must(template.New(&amp;#34;escape&amp;#34;).Parse(templ)) var data struct { A string // untrusted plain text B template.HTML // trusted HTML } // A是一个普通字符串，B是一个</description>
			<content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">文档</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">go</span> <span style="color:#a6e22e">doc</span> <span style="color:#a6e22e">text</span><span style="color:#f92672">/</span><span style="color:#a6e22e">template</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span> <span style="color:#66d9ef">go</span> <span style="color:#a6e22e">doc</span> <span style="color:#a6e22e">html</span><span style="color:#f92672">/</span><span style="color:#a6e22e">template</span>
</span></span></code></pre></div><h3 id="应用">应用</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 定义模板显示格式
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">templ</span> = <span style="color:#e6db74">`&lt;p&gt;A: </span><span style="color:#75715e">{{</span><span style="color:#a6e22e">.A</span><span style="color:#75715e">}}</span><span style="color:#e6db74">&lt;/p&gt;&lt;p&gt;B: </span><span style="color:#75715e">{{</span><span style="color:#a6e22e">.B</span><span style="color:#75715e">}}</span><span style="color:#e6db74">&lt;/p&gt;`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 模板配置函数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">t</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">template</span>.<span style="color:#a6e22e">Must</span>(<span style="color:#a6e22e">template</span>.<span style="color:#a6e22e">New</span>(<span style="color:#e6db74">&#34;escape&#34;</span>).<span style="color:#a6e22e">Parse</span>(<span style="color:#a6e22e">templ</span>))
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">data</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">A</span> <span style="color:#66d9ef">string</span>        <span style="color:#75715e">// untrusted plain text
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">B</span> <span style="color:#a6e22e">template</span>.<span style="color:#a6e22e">HTML</span> <span style="color:#75715e">// trusted HTML
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	}
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// A是一个普通字符串，B是一个信任的template.HTML字符串类型。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">A</span> = <span style="color:#e6db74">&#34;&lt;b&gt;Hello!&lt;/b&gt;&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">B</span> = <span style="color:#e6db74">&#34;&lt;b&gt;Hello!&lt;/b&gt;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 使用定义好的 模板 输出到 控制台
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Execute</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stdout</span>, <span style="color:#a6e22e">data</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">/*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">autoescape.html 结果
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">A:&lt;b&gt;Hello!&lt;/b&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">B:Hello!
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">*/</span>
</span></span></code></pre></div><h3 id="语法">语法</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">//取值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>&lt;<span style="color:#a6e22e">p</span>&gt;{{.<span style="color:#a6e22e">ArticleContent</span>}}&lt;<span style="color:#a6e22e">span</span>&gt;{{.<span style="color:#a6e22e">ArticleId</span>}}&lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">span</span>&gt;&lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">p</span>&gt;
</span></span><span style="display:flex;"><span><span style="color:#75715e">// if 语句
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>{{<span style="color:#66d9ef">if</span> .<span style="color:#a6e22e">condition</span>}}
</span></span><span style="display:flex;"><span>{{<span style="color:#a6e22e">end</span>}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{{<span style="color:#66d9ef">if</span> .<span style="color:#a6e22e">condition1</span>}}
</span></span><span style="display:flex;"><span>{{<span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> .<span style="color:#a6e22e">contition2</span>}}
</span></span><span style="display:flex;"><span>{{<span style="color:#a6e22e">end</span>}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// go 方法调用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>{{<span style="color:#a6e22e">funcname</span> .<span style="color:#a6e22e">arg1</span> .<span style="color:#a6e22e">arg2</span>}}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">add</span>(<span style="color:#a6e22e">left</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">right</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span>
</span></span><span style="display:flex;"><span>{{<span style="color:#a6e22e">add</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span>}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 逻辑判断
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">not</span> <span style="color:#a6e22e">非</span>
</span></span><span style="display:flex;"><span>{{<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">not</span> .<span style="color:#a6e22e">condition</span>}}
</span></span><span style="display:flex;"><span>{{<span style="color:#a6e22e">end</span>}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">and</span> <span style="color:#a6e22e">与</span>
</span></span><span style="display:flex;"><span>{{<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">and</span> .<span style="color:#a6e22e">condition1</span> .<span style="color:#a6e22e">condition2</span>}}
</span></span><span style="display:flex;"><span>{{<span style="color:#a6e22e">end</span>}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">or</span> <span style="color:#a6e22e">或</span>
</span></span><span style="display:flex;"><span>{{<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">or</span> .<span style="color:#a6e22e">condition1</span> .<span style="color:#a6e22e">condition2</span>}}
</span></span><span style="display:flex;"><span>{{<span style="color:#a6e22e">end</span>}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">eq</span> <span style="color:#a6e22e">等于</span>
</span></span><span style="display:flex;"><span>{{<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">eq</span> .<span style="color:#a6e22e">var1</span> .<span style="color:#a6e22e">var2</span>}}
</span></span><span style="display:flex;"><span>{{<span style="color:#a6e22e">end</span>}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ne</span> <span style="color:#a6e22e">不等于</span>
</span></span><span style="display:flex;"><span>{{<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">ne</span> .<span style="color:#a6e22e">var1</span> .<span style="color:#a6e22e">var2</span>}}
</span></span><span style="display:flex;"><span>{{<span style="color:#a6e22e">end</span>}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">lt</span> <span style="color:#a6e22e">小于</span> (<span style="color:#a6e22e">less</span> <span style="color:#a6e22e">than</span>)
</span></span><span style="display:flex;"><span>{{<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">lt</span> .<span style="color:#a6e22e">var1</span> .<span style="color:#a6e22e">var2</span>}}
</span></span><span style="display:flex;"><span>{{<span style="color:#a6e22e">end</span>}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">le</span> <span style="color:#a6e22e">小于等于</span>
</span></span><span style="display:flex;"><span>{{<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">le</span> .<span style="color:#a6e22e">var1</span> .<span style="color:#a6e22e">var2</span>}}
</span></span><span style="display:flex;"><span>{{<span style="color:#a6e22e">end</span>}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">gt</span> <span style="color:#a6e22e">大于</span>
</span></span><span style="display:flex;"><span>{{<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">gt</span> .<span style="color:#a6e22e">var1</span> .<span style="color:#a6e22e">var2</span>}}
</span></span><span style="display:flex;"><span>{{<span style="color:#a6e22e">end</span>}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ge</span> <span style="color:#a6e22e">大于等于</span>
</span></span><span style="display:flex;"><span>{{<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">ge</span> .<span style="color:#a6e22e">var1</span> .<span style="color:#a6e22e">var2</span>}}
</span></span><span style="display:flex;"><span>{{<span style="color:#a6e22e">end</span>}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">循环</span>
</span></span><span style="display:flex;"><span>{{<span style="color:#66d9ef">range</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#a6e22e">i</span>, <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#a6e22e">v</span> <span style="color:#f92672">:=</span> .<span style="color:#a6e22e">slice</span>}}
</span></span><span style="display:flex;"><span>{{<span style="color:#a6e22e">end</span>}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{{<span style="color:#66d9ef">range</span> .<span style="color:#a6e22e">slice</span>}}
</span></span><span style="display:flex;"><span>{{.<span style="color:#a6e22e">field</span>}}
</span></span><span style="display:flex;"><span>{{<span style="color:#a6e22e">end</span>}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">模板嵌套</span>
</span></span><span style="display:flex;"><span>{{<span style="color:#a6e22e">template</span> <span style="color:#e6db74">&#34;navbar&#34;</span>}}<span style="color:#75715e">// 使用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>{{<span style="color:#a6e22e">define</span> <span style="color:#e6db74">&#34;navbar&#34;</span>}}<span style="color:#75715e">// 定义
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>{{<span style="color:#a6e22e">end</span>}}
</span></span><span style="display:flex;"><span>{{<span style="color:#a6e22e">template</span> <span style="color:#e6db74">&#34;navbar&#34;</span> .}}<span style="color:#75715e">// 获取父模板的变量
</span></span></span></code></pre></div><p>参考https://www.kancloud.cn/cserli/golang/531904</p>
]]></content>
		</item>
		
		<item>
			<title>Go JSON</title>
			<link>https://blog.v5u.win/posts/go/go-json/</link>
			<pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-json/</guid>
			<description>标准库 encoding/json、encoding/xml、encoding/asn1 Model type Movie struct { Title string Year int `json:&amp;#34;released&amp;#34;` Color bool `json:&amp;#34;color,omitempty&amp;#34;` Actors []string } // 赋值 var movies = []Movie{ {Title: &amp;#34;Casablanca&amp;#34;, Year: 1942,</description>
			<content type="html"><![CDATA[<p>标准库</p>
<pre tabindex="0"><code>encoding/json、encoding/xml、encoding/asn1
</code></pre><p>Model</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Movie</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Title</span>  <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Year</span>   <span style="color:#66d9ef">int</span>  <span style="color:#e6db74">`json:&#34;released&#34;`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Color</span>  <span style="color:#66d9ef">bool</span> <span style="color:#e6db74">`json:&#34;color,omitempty&#34;`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Actors</span> []<span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 赋值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">movies</span> = []<span style="color:#a6e22e">Movie</span>{
</span></span><span style="display:flex;"><span>    {<span style="color:#a6e22e">Title</span>: <span style="color:#e6db74">&#34;Casablanca&#34;</span>, <span style="color:#a6e22e">Year</span>: <span style="color:#ae81ff">1942</span>, <span style="color:#a6e22e">Color</span>: <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">Actors</span>: []<span style="color:#66d9ef">string</span>{<span style="color:#e6db74">&#34;Humphrey Bogart&#34;</span>, <span style="color:#e6db74">&#34;Ingrid Bergman&#34;</span>}},
</span></span><span style="display:flex;"><span>    {<span style="color:#a6e22e">Title</span>: <span style="color:#e6db74">&#34;Cool Hand Luke&#34;</span>, <span style="color:#a6e22e">Year</span>: <span style="color:#ae81ff">1967</span>, <span style="color:#a6e22e">Color</span>: <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">Actors</span>: []<span style="color:#66d9ef">string</span>{<span style="color:#e6db74">&#34;Paul Newman&#34;</span>}},
</span></span><span style="display:flex;"><span>    {<span style="color:#a6e22e">Title</span>: <span style="color:#e6db74">&#34;Bullitt&#34;</span>, <span style="color:#a6e22e">Year</span>: <span style="color:#ae81ff">1968</span>, <span style="color:#a6e22e">Color</span>: <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">Actors</span>: []<span style="color:#66d9ef">string</span>{<span style="color:#e6db74">&#34;Steve McQueen&#34;</span>, <span style="color:#e6db74">&#34;Jacqueline Bisset&#34;</span>}},
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>在编码时，默认使用Go语言结构体的成员名字作为JSON的对象（通过reflect反射技术，我们将在12.6节讨论）。只有导出的结构体成员才会被编码，这也就是我们为什么选择用大写字母开头的成员名称。</p>
<p>即使对应的JSON对象名是小写字母，每个结构体的成员名也是<strong>声明为大写字母开头的</strong>。因为有些JSON成员名字和Go结构体成员名字并不相同，因此需要Go语言结构体成员<strong>Tag来指定对应的JSON名字</strong>。同样，在解码的时候也需要做同样的处理，</p>
]]></content>
		</item>
		
		<item>
			<title>图书保存六忌</title>
			<link>https://blog.v5u.win/%E5%9B%BE%E4%B9%A6%E4%BF%9D%E5%AD%98%E5%85%AD%E5%BF%8C/</link>
			<pubDate>Thu, 28 Feb 2019 09:21:44 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E5%9B%BE%E4%B9%A6%E4%BF%9D%E5%AD%98%E5%85%AD%E5%BF%8C/</guid>
			<description>图书保存六忌 作为一个现代化家庭，很重要的一点就是要讲求知识品位。常言说得好，“酒香花香不如书香，藏金藏银不如藏书。”家庭藏书及藏书多少并不是</description>
			<content type="html"><![CDATA[<p>图书保存六忌</p>
<p>作为一个现代化家庭，很重要的一点就是要讲求知识品位。常言说得好，“酒香花香不如书香，藏金藏银不如藏书。”家庭藏书及藏书多少并不是常人所说的为了装潢门面，附庸风雅，而是一个家庭知识品位的标志和象征。对于这方面感兴趣的朋友，笔者倒很愿意谈一谈家庭藏书的忌讳。家庭藏书有以下六忌：</p>
<p><strong>一忌尘</strong>。书籍上堆积了灰尘，不但玷污图书，而且灰尘本身还是昆虫、霉菌藏身和繁殖的地方。所以要经常用手轻轻拍弹掉图书表面的灰尘，然后再用专用于擦拭图书的柔软的毛巾，定期对图书表面进行擦拭，以保证图书处于常新的状态。</p>
<p><strong>二忌潮</strong>。潮湿是生虫发霉的有利环境，对书的危害较大。所以，至少每半年要在阴凉、干燥、通风处对图书进行晾晒。书柜的柜脚一般要高出地面20厘米，以防家庭积水可能带来的侵害。</p>
<p><strong>三忌虫</strong>。破坏图书的害虫很多，常见的有书虱、白蚁、蛾蝶、蟑螂等，还有鼠类和微生物，其中危害最大的是微生物中的细菌和真菌（又叫霉菌）。所以每层图书最好都要置放两粒香樟球或萘丸，以防图书虫蛀。</p>
<p><strong>四忌光</strong>。书籍不仅怕阳光，而且还怕荧光灯之类的灯光。主要是光里的紫外线会使纸张老化，纸张的泛黄多半是由紫外线造成的。绝不能让图书直接在阳光下曝晒，那样不仅起不到防潮作用，还会因曝晒图书而直接减少图书的寿命。</p>
<p><strong>五忌热</strong>。单是热，书并不怕，但一定的温度加上潮湿，就造成生虫发霉的有利条件。因此，一般藏书的场所总要求低温或空调，对珍贵的图书尤其如此。柜门要定期打开通风、散气，确保图书“肺部”正常地“呼吸”。每年的夏天都要对图书在阴凉、干燥、通风处进行一次晾晒，是最好的防热措施。</p>
<p><strong>六忌压</strong>。一本书受压过大，书页间空气无法流通，页与页之间就易粘连。解决这一问题的的办法是常翻动，不要使一本书长年累月地处在最低层。书与书之间不可挤压过紧，上下左右以能随时随处取出该书为宜。否则会出现书脊泛黄，与书籍封面内容颜色不一致的“难看”情形。这些对于爱书如命的人，是最痛心疾首的啦。</p>
]]></content>
		</item>
		
		<item>
			<title>如何学习一门新的编程语言</title>
			<link>https://blog.v5u.win/posts/system/system-%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E4%B8%80%E9%97%A8%E6%96%B0%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link>
			<pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E4%B8%80%E9%97%A8%E6%96%B0%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</guid>
			<description>安装开发环境 熟悉数据类型和函数声明 查看内置标准库，了解该语言的基础方法/标准功能 学习一个框架，实现一个具有完整功能的Demo</description>
			<content type="html"><![CDATA[<ol>
<li>安装开发环境</li>
<li>熟悉数据类型和函数声明</li>
<li>查看内置标准库，了解该语言的基础方法/标准功能</li>
<li>学习一个框架，实现一个具有完整功能的Demo</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Go 编译报错 expected &#39;IDENT&#39;, found &#39;go&#39;</title>
			<link>https://blog.v5u.win/expected-ident-found-go/</link>
			<pubDate>Wed, 27 Feb 2019 09:10:11 +0000</pubDate>
			
			<guid>https://blog.v5u.win/expected-ident-found-go/</guid>
			<description>报错 expected ‘IDENT’, found ‘go’ 运行go run 文件目录为 ./go-demo/main.go 由于package 命名为go-demo，命名格式不规范，导致的这个问题。 解决办法：将g</description>
			<content type="html"><![CDATA[<h4 id="报错-expected-8216ident8217-found-8216go8217">报错 expected ‘IDENT’, found ‘go’</h4>
<p>运行go run</p>
<p>文件目录为</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>./go-demo/main.go</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>由于package 命名为go-demo，命名格式不规范，导致的这个问题。</p>
<p>解决办法：将go-demo 统一改为 gostart ，去掉 <code>-</code> 字符 报错解决。</p>
<p>反思：包的名字应只用小写。不要用下划线式，也不要用驼峰式。使用单数</p>
<p>参考: <a href="https://studygolang.com/articles/11823">https://studygolang.com/articles/11823</a></p>
]]></content>
		</item>
		
		<item>
			<title>Go-语言要点</title>
			<link>https://blog.v5u.win/posts/go/go-%E8%AF%AD%E8%A8%80%E8%A6%81%E7%82%B9/</link>
			<pubDate>Wed, 27 Feb 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-%E8%AF%AD%E8%A8%80%E8%A6%81%E7%82%B9/</guid>
			<description>[TOC] 要点 本章对Go语言做了一些介绍，Go语言很多方面在有限的篇幅中无法覆盖到。本节会把没有讲到的内容也做一些简单的介绍，这样读者在读到完整的内</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="要点">要点</h2>
<p>本章对Go语言做了一些介绍，Go语言很多方面在有限的篇幅中无法覆盖到。本节会把没有讲到的内容也做一些简单的介绍，这样读者在读到完整的内容之前，可以有个简单的印象。</p>
<h3 id="控制流">控制流</h3>
<hr>
<p><strong>控制流：</strong> 在本章我们只介绍了if控制和for，但是没有提到switch多路选择。这里是一个简单的switch的例子：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>在翻转硬币的时候，例子里的coinflip函数返回几种不同的结果，每一个case都会对应一个返回结果，这里需要注意，Go语言并不需要显式地在每一个case后写break，语言默认执行完case后的逻辑语句会自动退出。当然了，如果你想要相邻的几个case都执行同一逻辑的话，需要自己显式地写上一个fallthrough语句来覆盖这种默认行为。不过fallthrough语句在一般的程序中很少用到。</p>
<p>Go语言里的switch还可以不带操作对象（译注：switch不带操作对象时默认用true值代替，然后将每个case的表达式和true值进行比较）；可以直接罗列多种条件，像其它语言里面的多个if else一样，下面是一个例子：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>这种形式叫做无tag switch(tagless switch)；这和switch true是等价的。</p>
<p>像for和if控制语句一样，switch也可以紧跟一个简短的变量声明，一个自增表达式、赋值语句，或者一个函数调用(译注：比其它语言丰富)。</p>
<p>break和continue语句会改变控制流。和其它语言中的break和continue一样，break会中断当前的循环，并开始执行循环之后的内容，而continue会跳过当前循环，并开始执行下一次循环。这两个语句除了可以控制for循环，还可以用来控制switch和select语句(之后会讲到)，在1.3节中我们看到，continue会跳过内层的循环，如果我们想跳过的是更外层的循环的话，我们可以在相应的位置加上label，这样break和continue就可以根据我们的想法来continue和break任意循环。这看起来甚至有点像goto语句的作用了。当然，一般程序员也不会用到这种操作。这两种行为更多地被用到机器生成的代码中。</p>
<p><strong>命名类型：</strong> 类型声明使得我们可以很方便地给一个特殊类型一个名字。因为struct类型声明通常非常地长，所以我们总要给这种struct取一个名字。本章中就有这样一个例子，二维点类型：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>类型声明和命名类型会在第二章中介绍。</p>
<p><strong>指针：</strong> Go语言提供了指针。指针是一种直接存储了变量的内存地址的数据类型。在其它语言中，比如C语言，指针操作是完全不受约束的。在另外一些语言中，指针一般被处理为“引用”，除了到处传递这些指针之外，并不能对这些指针做太多事情。Go语言在这两种范围中取了一种平衡。指针是可见的内存地址，&amp;操作符可以返回一个变量的内存地址，并且*操作符可以获取指针指向的变量内容，但是在Go语言里没有指针运算，也就是不能像c语言里可以对指针进行加或减操作。我们会在2.3.2中进行详细介绍。</p>
<p><strong>方法和接口：</strong> 方法是和命名类型关联的一类函数。Go语言里比较特殊的是方法可以被关联到任意一种命名类型。在第六章我们会详细地讲方法。接口是一种抽象类型，这种类型可以让我们以同样的方式来处理不同的固有类型，不用关心它们的具体实现，而只需要关注它们提供的方法。第七章中会详细说明这些内容。</p>
<p><strong>包（packages）：</strong> Go语言提供了一些很好用的package，并且这些package是可以扩展的。Go语言社区已经创造并且分享了很多很多。所以Go语言编程大多数情况下就是用已有的package来写我们自己的代码。通过这本书，我们会讲解一些重要的标准库内的package，但是还是有很多限于篇幅没有去说明，因为我们没法在这样的厚度的书里去做一部代码大全。</p>
<p>在你开始写一个新程序之前，最好先去检查一下是不是已经有了现成的库可以帮助你更高效地完成这件事情。你可以在 <a href="https://golang.org/pkg">https://golang.org/pkg</a> 和 <a href="https://godoc.org/">https://godoc.org</a>中找到标准库和社区写的package。godoc这个工具可以让你直接在本地命令行阅读标准库的文档。比如下面这个例子。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>注释：</strong> 我们之前已经提到过了在源文件的开头写的注释是这个源文件的文档。在每一个函数之前写一个说明函数行为的注释也是一个好习惯。这些惯例很重要，因为这些内容会被像godoc这样的工具检测到，并且在执行命令时显示这些注释。具体可以参考10.7.4。</p>
<p>多行注释可以用 <code>/* ... */</code> 来包裹，和其它大多数语言一样。在文件一开头的注释一般都是这种形式，或者一大段的解释性的注释文字也会被这符号包住，来避免每一行都需要加//。在注释中//和/*是没什么意义的，所以不要在注释中再嵌入注释。</p>
]]></content>
		</item>
		
		<item>
			<title>Centos7 添加 桌面运行环境</title>
			<link>https://blog.v5u.win/posts/system/system-centos7-%E6%B7%BB%E5%8A%A0-%E6%A1%8C%E9%9D%A2%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/</link>
			<pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-centos7-%E6%B7%BB%E5%8A%A0-%E6%A1%8C%E9%9D%A2%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/</guid>
			<description>Centos7 添加 桌面运行环境 root 权限执行 yum groupinstall &amp;quot;X Window System&amp;quot; 检查安装情况 yum grouplist</description>
			<content type="html"><![CDATA[<p>Centos7 添加 桌面运行环境</p>
<ol>
<li>root 权限执行 <code>yum groupinstall &quot;X Window System&quot;</code></li>
<li>检查安装情况 <code>yum grouplist</code></li>
<li></li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>为什么PHP中的变量前边要加&#39;$&#39;符号</title>
			<link>https://blog.v5u.win/%E4%B8%BA%E4%BB%80%E4%B9%88php%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F%E5%89%8D%E8%BE%B9%E8%A6%81%E5%8A%A0%E7%AC%A6%E5%8F%B7/</link>
			<pubDate>Sat, 23 Feb 2019 06:24:55 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E4%B8%BA%E4%BB%80%E4%B9%88php%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F%E5%89%8D%E8%BE%B9%E8%A6%81%E5%8A%A0%E7%AC%A6%E5%8F%B7/</guid>
			<description>为什么PHP中的变量前边要加’$’符号 一直都特别好奇 PHP 中的变量前边都加 $ 符号。别的大众编程语言从没见过这种设定，比如：java,c#,c,c</description>
			<content type="html"><![CDATA[<h4 id="为什么php中的变量前边要加82178217符号">为什么PHP中的变量前边要加’$’符号</h4>
<p>一直都特别好奇 PHP 中的变量前边都加 $ 符号。别的大众编程语言从没见过这种设定，比如：java,c#,c,c++,go,Ruby,python 甚至连写法被吐槽最多的 Objective-c 都没有。那么这种设定是怎么来的？为什么要这样做呢。</p>
<p>OK,我的第一篇 IT考古文章就来研究探寻一下这个问题。</p>
<p>下面是我人肉过滤掉噪音信息后得到的回答：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>最后奉上一种貌似靠谱，但是最扯最迷惑人的解释</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="php的产生历史">PHP的产生历史</h4>
<p>PHP 最初是1994年Rasmus Lerdorf创建的，刚刚开始只是一个简单的用Perl语言编写的程序，用来统计他自己网站的访问者。后来又用C语言重新编写，包括可以访问数据库。在1995年以Personal Home Page Tools (PHP Tools) 开始对外发表第一个版本，Lerdorf写了一些介绍此程序的文档，并且发布了PHP1.0。在这早期的版本中，提供了访客留言本、访客计数器等简单的功能。以后越来越多的网站使用了PHP，并且强烈要且增加一些特性，比如循环语句和数组变量等等，在新的成员加入开发行列之后，在1995年中，PHP2.0发布了。第二版定名为PHP/FI(Form Interpreter)。PHP/FI加入了对mSQL的支持，从此建立了PHP在动态网页开发上的地位。</p>
<p><strong>注意</strong> 这里明确指出，PHP最开始是用 Perl 编写的程序。这就是 PHP 天生的基因。而 Perl 语言里面的变量就是用 <code>$</code> 表明的。</p>
<p>参考<a href="http://developer.51cto.com/art/200806/93892.htm">PHP的历史</a></p>
<h4 id="所以总结">所以总结</h4>
<p>PHP 是由 Perl 进化而来的。而那个年代，所有的 类Unix 脚本语言都是前边添加$这样定义变量的,为的是区分字符和变量。</p>
<p>至于后边的便于解释器优化，容易使程序员一眼看到那些是变量，变量起名更自由，等等解释。都是以后的事儿了。大家做阅读理解嘛，请解释一下作者写这段话的心理活动，类似这种的。</p>
]]></content>
		</item>
		
		<item>
			<title>Go 语言简介</title>
			<link>https://blog.v5u.win/posts/go/go-%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/</link>
			<pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/</guid>
			<description>[TOC] C/C++ 与 Go语言的“价值观”对照 之前看过 白明老师 在GopherChina2017的一篇演讲文章《Go coding in go way》，里面提到C/C++/Go三</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h3 id="cc-与-go语言的价值观对照">C/C++ 与 Go语言的“价值观”对照</h3>
<p>之前看过 白明老师 在GopherChina2017的一篇演讲文章<a href="http://tonybai.com/2017/04/20/go-coding-in-go-way/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io">《Go coding in go way》</a>，里面提到C/C++/Go三门语言价值观，感觉很有意思，分享给大家感受一下：</p>
<p>C的价值观摘录</p>
<ul>
<li>相信程序员：提供指针和指针运算，让C程序员天马行空的发挥</li>
<li>自己动手，丰衣足食：提供一个很小的标准库，其余的让程序员自造</li>
<li>保持语言的短小和简单</li>
<li>性能优先</li>
</ul>
<p>C++价值观摘录</p>
<ul>
<li>支持多范式，不强迫程序员使用某个特定的范式</li>
<li>不求完美，但求实用（并且立即可用）</li>
</ul>
<p>Go价值观</p>
<ul>
<li>Overall Simplicity 全面的简单</li>
<li>Orthogonal Composition 正交组合</li>
<li>Preference in Concurrency 偏好并发</li>
</ul>
<p>用一句话概括Go的价值观： Go is about orthogonal composition of simple concepts with preference in concurrency(Go是在偏好并发的环境下的简单概念/事物的正交组合).</p>
<h5 id="go-的底层语言是什么">Go 的底层语言是什么</h5>
<p>借用大神的话来说</p>
<blockquote>
<p>编译器就是输入源代码输出其他语言源代码的程序</p>
</blockquote>
<p>所以这个程序用什么语言实现无所谓</p>
<p>然而，一开始没有go，所以用c实现了一版go编译器，后来go语言存在了，那就可以用go再重写一遍编译器，用c写的编译器来编译这个新的编译器的源代码</p>
<p>然后就成了现在这个样子</p>
<p>你可以找找老版本看看c实现</p>
<blockquote>
<p>2015年8月19日，Go语言Go 1.5版发布，本次更新中移除了”最后残余的C代码”</p>
</blockquote>
<p>从此 Go 实现了自举</p>
<h5 id="go-的市场定位">Go 的市场定位</h5>
<p>Go语言尤其适合编写网络服务相关基础设施，同时也适合开发一些工具软件和系统软件。</p>
<p>——《The Go Programming Language》</p>
<p>Go 语言能吞食的一定是 PaaS 上的项目，比如一些消息缓存中间件、服务发现、服务代理、控制系统、Agent、日志收集等等，没有复杂的业务场景，也到不了特别底层（如操作系统）的中间平台层的软件项目或工具。而 C 和 C++ 会被打到更底层，Java 会被打到更上层的业务层。这是<strong>左耳朵耗子</strong>的一个判断。</p>
<p>用上面的标尺来量一下 Go 语言的杀手级应用 Docker，你会发现基本是一样的。</p>
<p><a href="https://books.studygolang.com/gopl-zh/ch0/ch0-01.html">学习文档</a></p>
]]></content>
		</item>
		
		<item>
			<title>词法作用域</title>
			<link>https://blog.v5u.win/posts/design/design-%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
			<pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/design/design-%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
			<description>首先你得明白程序设计中作用域这个概念：通常来说，一段程序代码中所用到的名字并不总是有效／可用的，而限定这个名字的可用性的代码范围就是这个名字</description>
			<content type="html"><![CDATA[<p>首先你得明白程序设计中<strong>作用域</strong>这个概念：<strong>通常来说，一段程序代码中所用到的名字并不总是有效／可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域</strong>。</p>
<h5 id="词法作用域-vs-动态作用域">词法作用域 VS 动态作用域</h5>
<p><strong>词法作用域</strong>，也叫<strong>静态作用域</strong>，它的作用域是指在词法分析阶段就确定了，不会改变。<strong>动态作用域</strong>是在运行时根据程序的流程信息来动态确定的，而不是在写代码时进行静态确定的。</p>
<p>主要区别：<strong>词法作用域是在写代码或者定义时确定的，而动态作用域是在运行时确定的（this也是！）。词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用</strong>。</p>
]]></content>
		</item>
		
		<item>
			<title>Go-源码组织方式</title>
			<link>https://blog.v5u.win/go-%E6%BA%90%E7%A0%81%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F/</link>
			<pubDate>Tue, 19 Feb 2019 05:13:48 +0000</pubDate>
			
			<guid>https://blog.v5u.win/go-%E6%BA%90%E7%A0%81%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F/</guid>
			<description>Go源码文件以 .go 为后缀。 // path 的相对路径 target 是 go 的 build or run 目录 例： var cpath string = “./config/config.toml” 配置文件使用 github.com/BurntSushi/toml 所有的stru</description>
			<content type="html"><![CDATA[<p>Go源码文件以 .go 为后缀。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>// path 的相对路径 target 是 go 的 build or run 目录 例：</p>
<p>var cpath string = “./config/config.toml”</p>
<p>配置文件使用</p>
<p>github.com/BurntSushi/toml</p>
<p>所有的struct都定义了才能使用。不好用，推荐 github.com/pelletier/go-toml</p>
<p>多个源码文件需要用源码包组织起来。</p>
<h5 id="同一-package-下多文件代码管理">同一 package 下多文件代码管理</h5>
<p>实现：在同一目录下，创建多个 go 文件， 文件的 package 都设置为同一个 package 名。例：package main</p>
<p>无需导入文件，直接调用其他文件里的方法。</p>
<p>举例：</p>
<p>在 mutifiles-package/ 目录下创建两个文件：main.go util.go</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>命令行执行 <code>go build</code>,生成一个 mutifiles-package 可执行文件。</p>
<p><code>./mutifiles-package</code> 打印 foo() 。</p>
<p>直接运行 <code>go run main.go util.go</code> 也可以打印 foo()</p>
<hr>
<h4 id="源码文件分三类">源码文件分三类：</h4>
<p>命令源码文件，库源码文件</p>
<p>测试源码文件</p>
<h5 id="命令源码文件">命令源码文件</h5>
<p>声明自己属于 main 代码包、包含无参声明和结果声明的 main 函数。</p>
<p>被安装后，相应的可执行文件会被存放到GOBIN 指向的目录或 &lt;当前工作区目录&gt;/bin 下</p>
<h5 id="库源码文件">库源码文件</h5>
<p>不具备命令源码文件的那两个特征的源码文件。</p>
<p>被安装后，相应的归档文件会被存放到 &lt;当前工作区目录&gt;/pkg&lt;平台相关目录&gt; 下</p>
<h5 id="测试源码文件">测试源码文件</h5>
<p>不具备命令源码文件的那两个特征的源码文件。</p>
<p>文件名称以 _test.go 为后缀</p>
<p>测试函数：其中至少有一个函数名以 Test 或 Benchmark 为前缀，并且，该函数接受一个类型为 *testing.T 或 *testing.B 的参数</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h5 id="代码包的作用">代码包的作用</h5>
<p>编译和归档Go程序的基本单位。代码划分、集结和依赖的组织形式，也是权限控制的辅助手段。</p>
<p>代码包的规则：一个代码包实际上就是一个由导入路径代表的目录。</p>
<p>导入路径即 &lt;工作区目录&gt;/src 或 &lt;工作区目录&gt;/pkg/&lt;平台相关路径&gt; 之下的某段子路径</p>
<h5 id="代码包的声明">代码包的声明</h5>
<p>每个源码文件必须声明其所属的的代码包</p>
<p>同一个代码包中的所有源码文件声明的代码包是相同的</p>
<h5 id="代码包声明与代码包导入路径的区别">代码包声明与代码包导入路径的区别</h5>
<p>代码包声明语句中的包名称应该是该代码包的导入路径的最有子路径。</p>
<p>例：hypermind.cn/pkgtool &lt;——&gt; package pkgtool</p>
<h5 id="代码包的导入">代码包的导入</h5>
<p>太多，略。</p>
]]></content>
		</item>
		
		<item>
			<title>Go-工作区和GOPATH</title>
			<link>https://blog.v5u.win/go-%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8Cgopath/</link>
			<pubDate>Tue, 19 Feb 2019 05:12:26 +0000</pubDate>
			
			<guid>https://blog.v5u.win/go-%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8Cgopath/</guid>
			<description>工作区和GOPATH 工作区是放置Go源码文件的目录，一般情况下，Go源码文件都需要放在工作区，但是对于命令源码文件来说，这不是必须的。 工作区</description>
			<content type="html"><![CDATA[<h3 id="工作区和gopath">工作区和GOPATH</h3>
<p>工作区是放置Go源码文件的目录，一般情况下，Go源码文件都需要放在工作区，但是对于<strong>命令源码文件</strong>来说，这不是必须的。</p>
<p>工作区目录结构：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>src/ #放源码的</p>
<p>pkg/ #存放归档文件(.a文件)所有归档文件都会存放到该目录下的平台相关目录中，同样以代码包为组织形式</p>
<p>bin/ #存放当前工作区中的Go程序的可执行文件</p>
<h5 id="平台相关目录">平台相关目录</h5>
<p>用两个隐含的Go语言环境变量：GOOS和GOARCH</p>
<p>以<code>$GOOS_$GOARCH</code>为命名方式，例：linux_amd64和darwin_amd64</p>
<h5 id="bin目录">bin目录</h5>
<ol>
<li>当环境变量GOBIN已有效设置时，该目录会变得无意义</li>
<li>当GOPATH的值中包含多个工作区的路径时，必须设置GOBIN，否则无法成功安装Go程序的可执行文件</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Go异常处理</title>
			<link>https://blog.v5u.win/posts/go/go-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
			<pubDate>Mon, 18 Feb 2019 15:48:37 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
			<description>error的声明 创建一个error error的使用 异常处理——panic 译为运行时恐慌 内建函数panic和recover是天生的一对。前者用</description>
			<content type="html"><![CDATA[<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>error的声明</p>
<p>创建一个error</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>error的使用</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h2 id="异常处理panic">异常处理——panic</h2>
<p>译为运行时恐慌</p>
<p>内建函数<code>panic</code>和<code>recover</code>是天生的一对。前者用于产生运行时恐慌，而后者用于“恢复”它。</p>
<p>不过要注意，<code>recover</code>函数必须要在<code>defer</code>语句中调用才有效。因为一旦有运行时恐慌发生，当前函数以及在调用栈上的所有代码都是失去对流程的控制权。只有<code>defer</code>语句携带的函数中的代码才可能在运行时恐慌迅速向调用栈上层蔓延时“拦截到”它。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><code>panic</code>函数。该函数可接受一个<code>interface{}</code>类型的值作为其参数。也就是说，我们可以在调用<code>panic</code>函数的时候可以传入任何类型的值。不过，我建议大家在这里只传入<code>error</code>类型的值。这样它表达的语义才是精确的。更重要的是，当我们调用<code>recover</code>函数来“恢复”由于调用<code>panic</code>函数而引发的运行时恐慌的时候，得到的值正是调用后者时传给它的那个参数。因此，有这样一个约定是很有必要的。</p>
<p>用法</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h2 id="go语句">go语句</h2>
<p><code>go</code>语句的执行会很快结束，并不会对当前流程的进行造成阻塞或明显的延迟。</p>
<p>在<code>go</code>语句被执行时，其携带的函数（也被称为<code>go</code>函数）以及要传给它的若干参数（如果有的话）会被封装成一个实体（即Goroutine），并被放入到相应的待运行队列中。Go语言的运行时系统会适时的从队列中取出待运行的Goroutine并执行相应的函数调用操作。注意，对传递给这里的函数的那些参数的求值会在<code>go</code>语句被执行时进行。这一点也是与<code>defer</code>语句类似的。</p>
<p>由于<code>go</code>函数的执行时间的不确定性，所以Go语言提供了很多方法来帮助我们协调它们的执行。其中最简单粗暴的方法就是调用<code>time.Sleep</code>函数。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>另一个比较绅士的做法是在<code>main</code>函数的最后调用<code>runtime.Gosched</code>函数。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><code>runtime.Gosched</code>函数的作用是让当前正在运行的Goroutine（这里是运行<code>main</code>函数的那个Goroutine）暂时“休息”一下，而让Go运行时系统转去运行其它的Goroutine（这里是与<code>go fmt.Println(&quot;Go!&quot;)</code>对应并会封装<code>fmt.Println(&quot;Go!&quot;)</code>的那个Goroutine）。如此一来，我们就更加精细地控制了对几个Goroutine的运行的调度。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><code>sync.WaitGroup</code>类型有三个方法可用——<code>Add</code>、<code>Done</code>和<code>Wait</code>。<code>Add</code>会使其所属值的一个内置整数得到相应增加，<code>Done</code>会使那个整数减<code>1</code>，而<code>Wait</code>方法会使当前Goroutine（这里是运行<code>main</code>函数的那个Goroutine）阻塞直到那个整数为``。这下你应该明白上面这个示例所采用的方法了。我们在<code>main</code>函数中启用了三个Goroutine来封装三个<code>go</code>函数。每个匿名函数的最后都调用了<code>wg.Done</code>方法，并以此表达当前的<code>go</code>函数会立即执行结束的情况。当这三个<code>go</code>函数都调用过<code>wg.Done</code>函数之后，处于<code>main</code>函数最后的那条<code>wg.Wait()</code>语句的阻塞作用将会消失，<code>main</code>函数的执行将立即结束。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<blockquote>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>Go-流程控制</title>
			<link>https://blog.v5u.win/posts/go/go-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
			<pubDate>Mon, 18 Feb 2019 11:38:16 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
			<description>[TOC] if 标识符的重声明和标识符的遮蔽 上述代码被执行完毕之后，第二次声明的number变量的值会是7，而第一次声明的number变量的值仍会是``</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="if">if</h2>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>标识符的重声明和标识符的遮蔽</strong></p>
<p>上述代码被执行完毕之后，第二次声明的<code>number</code>变量的值会是<code>7</code>，而第一次声明的<code>number</code>变量的值仍会是``。</p>
<p>switch</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h2 id="for语句">for语句</h2>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>最后，我们来说一下<code>break</code>语句和<code>continue</code>语句。它们都可以被放置在<code>for</code>语句的代码块中。break被执行时会使其所属的<code>for</code>语句的执行立即结束，continue被执行时会使当次迭代被中止（当次迭代的后续语句会被忽略）而直接进入到下一次迭代。</p>
<h2 id="select语句">select语句</h2>
<p><code>select</code>语句属于条件分支流程控制方法，不过它只能用于通道。它可以包含若干条<code>case</code>语句，并根据条件选择其中的一个执行。进一步说，<code>select</code>语句中的<code>case</code>关键字只能后跟用于通道的发送操作的表达式以及接收操作的表达式或语句。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>如果该<code>select</code>语句被执行时通道<code>ch1</code>和<code>ch2</code>中都没有任何数据，那么肯定只有<code>default case</code>会被执行。但是，只要有一个通道在当时有数据就不会轮到<code>default case</code>执行了。显然，对于包含通道接收操作的<code>case</code>来讲，其执行条件就是通道中存在数据（或者说通道未空）。如果在当时有数据的通道多于一个，那么Go语言会通过一种伪随机的算法来决定哪一个<code>case</code>将被执行。</p>
<p>我们一直在说<code>case</code>执行条件的满足与否取决于其操作的通道在当时的状态。这里特别强调一点，即：未被初始化的通道会使操作它的<code>case</code>永远满足不了执行条件。对于针对它的发送操作和接收操作来说都是如此。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h2 id="defer语句-dɪˈfɚ-推迟">defer语句 [dɪˈfɚ] 推迟</h2>
<p><code>defer</code>语句仅能被放置在函数或方法中。它由关键字<code>defer</code>和一个调用表达式组成。注意，这里的调用表达式所表示的既不能是对Go语言内建函数的调用也不能是对Go语言标准库代码包<code>unsafe</code>中的那些函数的调用。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>注意，当这条<code>defer</code>语句被执行的时候，其中的这条表达式语句并不会被立即执行。它的确切的执行时机是在其所属的函数（这里是<code>readFile</code>）的执行即将结束的那个时刻。也就是说，在<code>readFile</code>函数真正结束执行的前一刻，<code>file.Close()</code>才会被执行。</p>
<p>注意，当一个函数中存在多个<code>defer</code>语句时，它们携带的表达式语句的执行顺序一定是它们的出现顺序的倒序。</p>
<p>最后，对于<code>defer</code>语句，我还有两个特别提示：</p>
<ol>
<li><code>defer</code>携带的表达式语句代表的是对某个函数或方法的调用。这个调用可能会有参数传入，比如：<code>fmt.Print(i + 1)</code>。如果代表传入参数的是一个表达式，那么在<code>defer</code>语句被执行的时候该表达式就会被求值了。注意，这与被携带的表达式语句的执行时机是不同的。</li>
<li>如果defer携带的表达式语句代表的是对匿名函数的调用，那么我们就一定要非常警惕。正确的用法是：把要使用的外部变量作为参数传入到匿名函数中。</li>
</ol>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<blockquote>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>Go的数据结构</title>
			<link>https://blog.v5u.win/posts/go/go-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
			<pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
			<description>[TOC] 先来看看Golang关于类型设计的一些原则 变量包括（type, value）两部分，理解这一点就知道为什么nil != nil了 type 包括 static type和</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<p>先来看看Golang关于类型设计的一些原则</p>
<ul>
<li>变量包括（type, value）两部分，理解这一点就知道为什么nil != nil了</li>
<li>type 包括 static type和concrete type. 简单来说 static type是你在编码是看见的类型(如int、string)，concrete type是runtime系统看见的类型</li>
<li>类型断言能否成功，取决于变量的concrete type，而不是static type. 因此，一个 reader变量如果它的concrete type也实现了write方法的话，它也可以被类型断言为writer.</li>
</ul>
<h4 id="变量声明">变量声明</h4>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>**注意变量作用域：**在Go语言中，我们对程序实体的访问权限控制只能通过它们的名字来实现。名字首字母为大写的程序实体可以被任何代码包中的代码访问到。而名字首字母为小写的程序实体则只能被同一个代码包中的代码所访问。</p>
<h2 id="数据类型">数据类型</h2>
<h3 id="基本数据类型">基本数据类型</h3>
<h4 id="整型">整型</h4>
<p>int8 int16 int32 int64, uint8 uint16 uint32 uint64</p>
<p>byte 是 uint8 的别名</p>
<p>rune 是 int32 的别名，用来表示Unicode。’A’: U+0041</p>
<h4 id="浮点型">浮点型</h4>
<p>float32,float64</p>
<p>复数 complex64(3.7E+1+5.98E-2i),由两个浮点型组成分别表示实部和虚部</p>
<h4 id="字符型-byte">字符型 byte</h4>
<p>没有专门的字符型，使用byte 来保存单个字母字符</p>
<h4 id="布尔型-bool">布尔型 bool</h4>
<h4 id="字符串-string">字符串 string</h4>
<p>从表象上来说是字符序列，但是在底层，一个字符串值却是由若干个字节来表现和存储的。一个字符串（也可以说字符序列）会被Go语言用Unicode编码规范中的UTF-8编码格式编码为字节数组。</p>
<p><strong>注意</strong>，我们在一个字符串值或者一个字符串类型的变量之上应用Go语言的内置函数len将会得到代表它的那个字节数组的长度。这可能与我们看到的表象是不同的。字符串的表示法有两种，即：原生表示法和解释型表示法。若用原生表示法，需用反引号“`”把字符序列包裹起来。若用解释型表示法，则需用双引号“””包裹字符序列。</p>
<p>二者的区别是，前者表示的值是所见即所得的（除了回车符）。在那对反引号之间的内容就是该字符串值本身。而后者所表示的值中的转义符会起作用并在程序编译期间被转义。所以，如此表示的字符串值的实际值可能会与我们看到的表象不相同。</p>
<p>最后要注意，字符串值是不可变的。也就是说，我们一旦创建了一个此类型的值，就不可能再对它本身做任何修改。</p>
<p><strong>字符串判空</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Russ Cox 的观点就是哪种使得代码更清晰就用哪种。 就字符串是否为空这个语义而言，第一种语义更直接了当，应该是更推荐的。</p>
<hr>
<h3 id="复杂数据类型">复杂数据类型</h3>
<h4 id="指针-pointer">指针 Pointer</h4>
<h4 id="数组">数组</h4>
<p>声明：type MyNumbers [3]int</p>
<p>表示数组长度为 3 存储元素类型为 int 的容器，MyNumbers 为 [3]int 的别名类型</p>
<p>声明并赋值：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>最后，要注意，如果我们只声明一个数组类型的变量而不为它赋值，那么该变量的值将会是指定长度的、其中各元素均为元素类型的零值（或称默认值）的数组值。例如，若有这样一个变量：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>则它的值会是</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>判空</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="slice-切片">Slice 切片</h4>
<p>字面量表示：[]int 或 []string</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>注意，被“切下”的部分<strong>不包含</strong>元素上界索引指向的元素。</p>
<p>如图所示，一个切片值的容量即为它的第一个元素值在其底层数组中的索引值与该数组长度的差值的绝对值。为了获取数组、切片或通道类型的值的容量，我们可以使用内建函数<code>cap</code>，如：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>最后，要注意，切片类型属于引用类型。它的零值即为<code>nil</code>，即空值。如果我们只声明一个切片类型的变量而不为它赋值，那么该变量的值将会是<code>nil</code>。例如，若有这样一个变量：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>则它的值会是 <code>nil</code></p>
<hr>
<h4 id="字典-map">字典 map</h4>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>然后运用索引表达式取出字典中的值，就像这样：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>在Go语言中有这样一项规定，即：对于字典值来说，如果其中不存在索引表达式欲取出的键值对，那么就以它的值类型的空值（或称默认值）作为该索引表达式的求值结果。</p>
<p>引用类型，零值是nil</p>
<hr>
<h4 id="通道类型-channel">通道类型 channel</h4>
<p>goroutine是一种函数的并发执行方式，而channel是用来在goroutine之间进行参数传递。main函数本身也运行在一个goroutine中，而go function则表示创建一个新的goroutine，并在这个新的goroutine中执行这个函数。</p>
<p>通道（Channel）是Go语言中一种非常独特的数据结构。它可用于在不同Goroutine之间传递类型化的数据，并且是并发安全的。相比之下，我们之前介绍的那些数据类型都不是并发安全的。这一点需要特别注意。</p>
<p>Goroutine（也称为Go程序）可以被看做是承载可被并发执行的代码块的载体。它们由Go语言的运行时系统调度，并依托操作系统线程（又称内核线程）来并发地执行其中的代码块。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>请注意，对通道值的重复关闭会引发运行时恐慌。这会使程序崩溃。所以一定要避免这种情况的发生。另外，在通道值有效的前提下，针对它的发送操作会在通道值已满（其中缓存的数据的个数已等于它的长度）时被阻塞。而向一个已被关闭的通道值发送数据会引发运行时恐慌。另一方面，针对有效通道值的接收操作会在它已空（其中没有缓存任何数据）时被阻塞。除此之外，还有几条与通道的发送和接收操作有关的规则。不过在这里我们记住上面这三条就可以了。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="struct-继承">struct 继承</h4>
<p>一个结构体嵌到另一个结构体，称作组合</p>
<p>匿名和组合的区别</p>
<p>如果一个struct嵌套了另一个匿名结构体，那么这个结构可以直接访问匿名结构体的方法，从而实现<strong>继承</strong></p>
<p>如果一个struct嵌套了另一个【有名】的结构体，那么这个模式叫做<strong>组合</strong></p>
<p>如果一个struct嵌套了多个匿名结构体，那么这个结构可以直接访问多个匿名结构体的方法，从而实现<strong>多重继承</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="interface-接口">interface 接口</h4>
<p>接口</p>
<h4 id="fanction-函数">fanction 函数</h4>
<p>函数也是一种数据类型，可以作为参数传递</p>
<h3 id="数据类型转换">数据类型转换</h3>
<p>//string到int</p>
<p>int,err:=strconv.Atoi(string)</p>
<p>//string到int64</p>
<p>int64, err := strconv.ParseInt(string, 10, 64)</p>
<p>//int到string</p>
<p>string:=strconv.Itoa(int)</p>
<p>//int64到string
&laquo;&laquo;&laquo;&lt; HEAD:posts/2019-02-17-go的数据结构.md</p>
<p>string:=strconv.FormatInt(int64,10)</p>
<p>// int64 to time</p>
<p>nextTime := time.Now()</p>
<p>=======
string:=strconv.FormatInt(int64,10)
// int64 to time
nextTime := time.Now()</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>9b93207d813e2b213031f967612e37c68194cf37:post/Go-数据结构.md
time.Unix(nextTime,0)</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>go 常用命令</title>
			<link>https://blog.v5u.win/posts/go/go-%E5%91%BD%E4%BB%A4/</link>
			<pubDate>Fri, 15 Feb 2019 15:50:32 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-%E5%91%BD%E4%BB%A4/</guid>
			<description>[TOC] go run 编译并运行Go源码文件，编译的可执行文件在tmp目录下，这会影响相对路径 go build 编译源码文件，代码包，依赖包 go get / go mod download xxx 动态获取远程代码</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h3 id="go-run">go run</h3>
<p>编译并运行Go源码文件，编译的可执行文件在tmp目录下，这会影响相对路径</p>
<h3 id="go-build">go build</h3>
<p>编译源码文件，代码包，依赖包</p>
<h3 id="go-get--go-mod-download-xxx">go get / go mod download xxx</h3>
<p>动态获取远程代码包</p>
<p>go get 简介（1)
用于从远程代码仓库（如著名Github )上下载并安装代码包</p>
<p>受支持的代码版本控制系统有：Git、Mercurial ( hg )、SVN、Bazaar</p>
<p>指定的代码包会被下载到$G〇PATH中包含的第一个工作区的src目录中</p>
<pre tabindex="0"><code>常用命令参数
-d 只下载 不安装
-x 查看执行过程
-u 更新已下载的代码包
-fix 将旧版本的代码包转换成新版规则
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">mac</span><span style="color:#960050;background-color:#1e0010">@</span><span style="color:#a6e22e">name</span>:<span style="color:#960050;background-color:#1e0010">~</span><span style="color:#f92672">/</span><span style="color:#66d9ef">go</span><span style="color:#f92672">/</span><span style="color:#a6e22e">golib</span><span style="color:#f92672">/</span><span style="color:#a6e22e">src</span><span style="color:#f92672">/</span><span style="color:#a6e22e">pkgtool</span><span style="color:#960050;background-color:#1e0010">$</span> <span style="color:#66d9ef">go</span> <span style="color:#a6e22e">install</span> <span style="color:#f92672">-</span><span style="color:#a6e22e">v</span> <span style="color:#f92672">-</span><span style="color:#a6e22e">work</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">在源码目录下</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">执行</span> <span style="color:#66d9ef">go</span> <span style="color:#a6e22e">install</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">会编译</span> <span style="color:#a6e22e">a</span> <span style="color:#a6e22e">文件到</span> 
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span><span style="color:#a6e22e">HOME</span><span style="color:#f92672">/</span><span style="color:#a6e22e">golang</span><span style="color:#f92672">/</span><span style="color:#a6e22e">goc2p</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">bin</span><span style="color:#f92672">/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">pkg</span><span style="color:#f92672">/</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">linux_386</span><span style="color:#f92672">/</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">pkgtool</span>.<span style="color:#a6e22e">a</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">src</span><span style="color:#f92672">/</span>
</span></span></code></pre></div><p>例：go get github.com/hyper-carrot/go_lib/logging</p>
<h3 id="go-install">go install</h3>
<p>go install简介( 1 )</p>
<p>​	用于编译并安装代码包或源码文件</p>
<p>​	安装代码包会在当前工作区的pkg/&lt;平台相关目录&gt;下生成归档文件</p>
<p>​	安装命令源码文件会在当前工作区的bin目录或$GOBIN目录下生成可执行文件</p>
<p>go install 简介(2 )</p>
<p>​	执行该命令且不追加任何参数时，它会试图把当前目录作为代码包并安装</p>
<p>​	执行该命令且以代码包的导入路径作为参数时,该代码包及其依赖会被安装</p>
<p>​	执行该命令且以命令源码文件及相关库源码文件作为参数时，只有这些文件会被编译并安装</p>
<p>在源文件目录下，执行<code>go install</code> ,编译源码，可执行文件放在 $GOBIN 目录下。文件以当前目录的 name 为 name。例：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">cd</span> <span style="color:#a6e22e">webserver</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">go</span> <span style="color:#a6e22e">install</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">生成</span> <span style="color:#a6e22e">bin</span><span style="color:#f92672">/</span><span style="color:#a6e22e">webserver</span>
</span></span></code></pre></div><h4 id="交叉编译">交叉编译</h4>
<p>CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go</p>
<p>没有使用 cgo 库，操作系统是Linux，CPU架构为amd64</p>
]]></content>
		</item>
		
		<item>
			<title>vscode安装golang.org的golint</title>
			<link>https://blog.v5u.win/posts/go/go-vscode%E5%AE%89%E8%A3%85golang-org%E7%9A%84golint/</link>
			<pubDate>Fri, 15 Feb 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-vscode%E5%AE%89%E8%A3%85golang-org%E7%9A%84golint/</guid>
			<description>vscode 安装了 go 插件后，一些 Extensions 无法通过 vscode 自动安装，此时可以手动从控制台安装。下面是一些基础标准库 其中 golint guru gorename 需要手动编译。 因为GitHub中的gol</description>
			<content type="html"><![CDATA[<p>vscode 安装了 go 插件后，一些 Extensions 无法通过 vscode 自动安装，此时可以手动从控制台安装。下面是一些基础标准库</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>其中 golint guru gorename 需要手动编译。</p>
<p>因为GitHub中的golint需要拉取golang.org中的资源，但是golang.org资源无法获取。所以需要手动编译安装。</p>
<h5 id="安装golint">安装golint：</h5>
<ol>
<li>
<p><code>cd $GOPATH/src</code> 进入 GOPATH 目录下<!-- raw HTML omitted --></p>
</li>
<li>
<p><code>mkdir golang.org/x</code> 创建 golang.org/x 目录</p>
</li>
<li>
<p><code>cd golang.org/x</code></p>
</li>
<li>
<p><code>git clone https://github.com/golang/tools.git tools</code> 下载 golang tools</p>
</li>
<li>
<p><code>git clone https://github.com/golang/lint</code> git clone golang/lint (如果github.com/golang 目录下已经有了 lint 也可以 copy 过来)</p>
</li>
<li>
<p><code>go install github.com/golang/lint/golint</code> 编译 golint</p>
</li>
<li>
<p>查看 gobin 目录下是否有了golint</p>
</li>
</ol>
<p>解释：</p>
<p>解决方法是</p>
<p>使用终端切换到$GOPATH</p>
<p>按照下面目录结构来新建缺失的文件夹</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>通过 <code>$ git clone git@github.com:golang/tools.git</code> 命令手动下载tools包</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>要能debug需要安装另外一个工具delve 。</p>
<p>安装方法见<a href="https://github.com/derekparker/delve/blob/master/Documentation/installation/README.md">链接</a>中找到对应的系统来安装delve工具。</p>
]]></content>
		</item>
		
		<item>
			<title>vscode配置go开发环境</title>
			<link>https://blog.v5u.win/posts/go/go-vscode%E9%85%8D%E7%BD%AEgo%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
			<pubDate>Fri, 15 Feb 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-vscode%E9%85%8D%E7%BD%AEgo%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
			<description>下载安装 vscode，安装Go插件。在商店中搜索安装。 配置 settings.json cmd+, ——&amp;gt; 用户设置/扩展 ——&amp;gt; Go configuration / 在 setting.json 中编辑。 参考 Sublime Text 中的 preferences.sublime-setting 很像。 在</description>
			<content type="html"><![CDATA[<p>下载安装 vscode，安装Go插件。在商店中搜索安装。</p>
<h4 id="配置-settingsjson">配置 settings.json</h4>
<p>cmd+, ——&gt; 用户设置/扩展 ——&gt; Go configuration / 在 setting.json 中编辑。</p>
<p>参考 Sublime Text 中的 preferences.sublime-setting 很像。</p>
<p>在 .vscode 目录下 新建 settings.json 文件</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="配置-tesksjson-支持-go-run-命令">配置 tesks.json 支持 go run 命令</h4>
<p>在 .vscode 目录下 新建 tesks.json 文件</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h5 id="vscode安装golangorg的golint1"><a href="https://www.v5u.win/vscode%E5%AE%89%E8%A3%85golang-org%E7%9A%84golint/">vscode安装golang.org的golint</a></h5>
]]></content>
		</item>
		
		<item>
			<title>go-代码组织方式</title>
			<link>https://blog.v5u.win/posts/go/go-%E4%BB%A3%E7%A0%81%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F/</link>
			<pubDate>Thu, 14 Feb 2019 15:48:05 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-%E4%BB%A3%E7%A0%81%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F/</guid>
			<description>[TOC] 创建规则 引用Go常见问题解答： 供公众使用的软件包应尽量保持向后兼容性。 如果需要不同的功能，请添加新名称，而不是更改旧名称。 如果需要完全中断</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h3 id="创建规则">创建规则</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">引用</span><span style="color:#a6e22e">Go</span><span style="color:#960050;background-color:#1e0010">常见问题解答：</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">供公众使用的软件包应尽量保持向后兼容性。</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">如果需要不同的功能，请添加新名称，而不是更改旧名称。</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">如果需要完全中断，请使用新的导入路径创建一个新包。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">该约定通过限制作者可以做的事情简化了使用包的整体体验：</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">避免破坏对</span><span style="color:#a6e22e">API</span><span style="color:#960050;background-color:#1e0010">的更改;</span> <span style="color:#960050;background-color:#1e0010">为新功能赋予新名称;</span> <span style="color:#960050;background-color:#1e0010">并为全新的包装设计提供新的进口途径。</span>
</span></span></code></pre></div><h3 id="导入兼容性规则">导入兼容性规则：</h3>
<p><strong>“如果旧软件包和新软件包具有相同的导入路径，则新软件包必须向后兼容旧软件包。”</strong></p>
<hr>
<h4 id="取代gopath">取代GOPATH</h4>
<p>使用Go模块将GOPATH作为全局名称空间结束。 从远离GOPATH开始，将现有的Go用法和工具转换为模块的几乎所有艰苦工作都是由于这种变化造成的。</p>
<p><strong>GOPATH的基本思想是GOPATH目录树是正在使用的版本的全局真实来源，并且当您在目录之间移动时，所使用的版本不会改变。</strong> 但是，全局GOPATH模式与每个项目可重现构建的生产要求直接冲突，这本身就以许多重要方式简化了Go开发和部署体验。</p>
<p>每个项目可重现的构建意味着当您在项目A的检出工作时，您将获得与项目A的其他开发人员在该提交中获得的相同的依赖项版本集，如go.mod文件所定义。 当您切换到项目B的结帐时，现在您可以获得该项目选择的依赖版本，与项目B的其他开发人员获得的版本相同。 但是那些可能与项目A不同。当你从项目A转移到项目B时，依赖版本的变化是必要的，以使你的开发与A和B上的其他开发人员的开发保持同步。不可能有 单一的全局GOPATH了。</p>
<p>采用模块的大多数复杂性直接源于一个全局GOPATH的丢失。 包的源代码在哪里？ 之前，答案仅取决于您的GOPATH环境变量，大多数人很少更改。 现在，答案取决于您正在进行的项目，这可能经常发生变化。 一切都需要更新这个新的约定。</p>
<p>大多数开发工具使用该 <a href="https://godoc.org/go/build"><code>go/build</code></a>包来查找和加载Go源代码。我们保持该程序包正常运行，但API没有预期模块，我们为避免API更改而添加的变通方法比我们想要的慢。我们已经发布了一个替代品<a href="https://godoc.org/golang.org/x/tools/go/packages"><code>golang.org/x/tools/go/packages</code></a>。开发人员工具现在应该使用它。它支持GOPATH和Go Module，使用起来更快更容易。在一两个版本中，我们可以将其移动到标准库中，但是现在<a href="https://godoc.org/golang.org/x/tools/go/packages"><code>golang.org/x/tools/go/packages</code></a> 是稳定的并且可以使用。</p>
<hr>
<p>Go源码文件以 .go 为后缀。</p>
<p>Go语言的代码通过<strong>包</strong>（package）组织，包类似于其它语言里的库（libraries）或者模块（modules）。一个包由位于单个目录下的一个或多个.go源代码文件组成, 目录定义包的作用。每个源文件都以一条<code>package</code>声明语句开始，这个例子里就是<code>package main</code>, 表示该文件属于哪个包，紧跟着一系列导入（import）的包，之后是存储在这个文件里的程序语句。</p>
<p><code>main</code>包比较特殊。它定义了一个独立可执行的程序，而不是一个库。在<code>main</code>里的<code>main</code> <em>函数</em> 也很特殊，它是整个程序执行时的入口</p>
<p>多个源码文件需要用源码包组织起来。</p>
<h5 id="同一-package-下多文件代码管理">同一 package 下多文件代码管理</h5>
<p>实现：在同一目录下，创建多个 go 文件， 文件的 package 都设置为同一个 package 名。但是同一个目录下只能声明一个package name。</p>
<p>例：package main</p>
<p>无需导入文件，直接调用其他文件里的方法。</p>
<p>举例：</p>
<p>在 mutifiles-package/ 目录下创建两个文件：main.go util.go</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>(){
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">foo</span>()
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">// main.go
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">foo</span>(){
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;foo()&#34;</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span><span style="color:#75715e">// util.go	
</span></span></span></code></pre></div><p>命令行执行 <code>go build</code>,生成一个 mutifiles-package 可执行文件。</p>
<p><code>./mutifiles-package</code> 打印 foo() 。</p>
<p>**注意：**直接运行 <code>go run main.go util.go</code> 也可以打印 foo()，必须将两个文件都引入。</p>
<hr>
<h5 id="代码包的导入">代码包的导入</h5>
<h3 id="import用法">import用法</h3>
<pre tabindex="0"><code>import(
    &#34;fmt&#34;
)
</code></pre><p>上面这个fmt是Go语言的标准库，他其实是去GOROOT下去加载该模块（先找GOROOT，如果GOROOT找不到在去GOPATH找），当然Go的import还支持如下两种方式来加载自己写的模块：</p>
<h4 id="相对路径">相对路径</h4>
<pre tabindex="0"><code>import &#34;./model&#34;
</code></pre><p>当前文件同一目录的model目录，但是不建议这种方式来import</p>
<h4 id="绝对路径">绝对路径</h4>
<pre tabindex="0"><code>import &#34;shorturl/model&#34;
</code></pre><p>加载gopath/src/shorturl/model模块</p>
<h4 id="点操作">点操作</h4>
<pre tabindex="0"><code>import( . &#34;fmt&#34; )
</code></pre><p>这个点操作的含义就是这个包导入之后在你调用这个包的函数时，你可以省略前缀的包名，
也就是前面你调用的fmt.Println(“hello world”)可以省略的写成Println(“hello world”)</p>
<h4 id="别名操作">别名操作</h4>
<p>别名操作顾名思义我们可以把包命名成另一个我们用起来容易记忆的名字</p>
<pre tabindex="0"><code>import( f &#34;fmt&#34; )
</code></pre><p>别名操作的话调用包函数时前缀变成了我们的前缀，即f.Println(“hello world”)</p>
<h4 id="_-操作">_ 操作</h4>
<p>这个操作经常是让很多人费解的一个操作符，请看下面这个import</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">import</span> ( 
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;database/sql&#34;</span> 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// 空白导入应该只在主包或测试包中，或者有一个注释证明它是正确的
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">_</span> <span style="color:#e6db74">&#34;github.com/ziutek/mymysql/godrv&#34;</span> 
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>_ 操作其实是引入该包，而不直接使用包里面的函数，而是调用了该包里面的init函数。</p>
<p><strong>main() ,init()方法是go中默认的两个方法，两个保留的关键字。</strong></p>
<p>init（）方法 是在任何package中都可以出现，但是建议 每个package中只包含一个init()函数比较好，容易理解。</p>
<p>但是main() 方法只能用在package main 中。Go程序会自动调用init()和main()，所以你不需要在任何地方调用这两个函数。</p>
<p>每个package中的init函数都是可选的，但package main就必须包含一个main函数。程序的初始化和执行都起始于main包。如果main包还导入了其它的包，那么就会在编译时将它们依次导入。有时一个包会被多个包同时导入，那么它只会被导入一次（例如很多包可能都会用到fmt包，但它只会被导入一次，因为没有必要导入多次）。当一个包被导入时，如果该包还导入了其它的包，那么会先将其它包导入进来，然后再对这些包中的包级常量和变量进行初始化，接着执行init函数（如果有的话），依次类推。等所有被导入的包都加载完毕了，就会开始对main包中的包级常量和变量进行初始化，然后执行main包中的init函数（如果存在的话），最后执行main函数</p>
<p>下图详细地解释了整个 import 执行过程：</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20131113/20131113222223_265.png" alt="import 规则"></p>
<p>通过上面的介绍我们了解了import的时候其实是执行了该包里面的init函数，初始化了里面的变量，_ 操作只是说该包引入了，我只初始化里面的 init函数和一些变量，但是往往这些init函数里面是注册自己包里面的引擎，让外部可以方便的使用，就很多实现database/sql的引起，在 init函数里面都是调用了sql.Register(name string, driver driver.Driver)注册自己，然后外部就可以使用了。</p>
<h4 id="命令安装第三方包">命令安装第三方包</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>go get github.com/golang/glog
</span></span></code></pre></div><p>在代码中导入下载的那个第三方包</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;github.com/golang/glog&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><h4 id="如何让函数供包外使用">如何让函数供包外使用</h4>
<p>Add() 函数以大写 A 开头，表示将 Add() 函数导出供包外使用。当首字母小写时，为包内使用，包外无法引用到。</p>
<h4 id="源码文件分三类">源码文件分三类：</h4>
<p>命令源码文件，库源码文件</p>
<p>测试源码文件</p>
<h5 id="命令源码文件">命令源码文件</h5>
<p>声明自己属于 main 代码包、包含无参声明和结果声明的 main 函数。</p>
<p>被安装后，相应的可执行文件会被存放到GOBIN 指向的目录或 &lt;当前工作区目录&gt;/bin 下</p>
<h5 id="库源码文件">库源码文件</h5>
<p>不具备命令源码文件的那两个特征的源码文件。</p>
<p>被安装后，相应的归档文件会被存放到 &lt;当前工作区目录&gt;/pkg&lt;平台相关目录&gt; 下</p>
<h5 id="测试源码文件">测试源码文件</h5>
<p>不具备命令源码文件的那两个特征的源码文件。</p>
<p>文件名称以 _test.go 为后缀</p>
<p>测试函数：其中至少有一个函数名以 Test 或 Benchmark 为前缀，并且，该函数接受一个类型为 *testing.T 或 *testing.B 的参数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">TestFind</span>(<span style="color:#a6e22e">t</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">T</span>){
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//功能测试函数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">BechmarkFind</span>(<span style="color:#a6e22e">t</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">B</span>){
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//基准测试函数，性能测试函数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><h5 id="代码包的作用">代码包的作用</h5>
<p>编译和归档Go程序的基本单位。代码划分、集结和依赖的组织形式，也是权限控制的辅助手段。</p>
<p>代码包的规则：一个代码包实际上就是一个由导入路径代表的目录。</p>
<p>导入路径即 &lt;工作区目录&gt;/src 或 &lt;工作区目录&gt;/pkg/&lt;平台相关路径&gt; 之下的某段子路径</p>
<h5 id="代码包的声明">代码包的声明</h5>
<p>每个源码文件必须声明其所属的的代码包</p>
<p>同一个代码包中的所有源码文件声明的代码包是相同的</p>
<h5 id="代码包声明与代码包导入路径的区别">代码包声明与代码包导入路径的区别</h5>
<p>代码包声明语句中的包名称应该是该代码包的导入路径的最有子路径。</p>
<p>例：hypermind.cn/pkgtool &lt;——&gt; package pkgtool</p>
<h5 id="包的初始化">包的初始化</h5>
<p>go语言中init函数用于包(package)的初始化，该函数是go语言的一个重要特性，</p>
<p>有下面的特征：</p>
<p>1 init函数是用于程序执行前做包的初始化的函数，比如初始化包里的变量等</p>
<p>2 每个包可以拥有多个init函数</p>
<p>3 包的每个源文件也可以拥有多个init函数</p>
<p>4 同一个包中多个init函数的执行顺序go语言没有明确的定义(说明)</p>
<p>5 不同包的init函数按照包导入的依赖关系决定该初始化函数的执行顺序</p>
<p>6 init函数不能被其他函数调用，而是在main函数执行之前，自动被调用</p>
]]></content>
		</item>
		
		<item>
			<title>工作区和GOPATH</title>
			<link>https://blog.v5u.win/posts/go/go-workspace-gopath/</link>
			<pubDate>Thu, 14 Feb 2019 15:34:03 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-workspace-gopath/</guid>
			<description>工作区和GOPATH 工作区是放置Go源码文件的目录，一般情况下，Go源码文件都需要放在工作区，但是对于命令源码文件来说，这不是必须的。 工作区</description>
			<content type="html"><![CDATA[<h3 id="工作区和gopath">工作区和GOPATH</h3>
<p>工作区是放置Go源码文件的目录，一般情况下，Go源码文件都需要放在工作区，但是对于<strong>命令源码文件</strong>来说，这不是必须的。</p>
<p>工作区目录结构：</p>
<pre tabindex="0"><code>/
	src/ 
	pkg/
	bin/
</code></pre><p>src/ 	#放源码的
pkg/	#存放归档文件(.a文件)所有归档文件都会存放到该目录下的平台相关目录中，同样以代码包为组织形式
bin/		#存放当前工作区中的Go程序的可执行文件</p>
<h5 id="平台相关目录">平台相关目录</h5>
<p>用两个隐含的Go语言环境变量：GOOS和GOARCH</p>
<p>以<code>$GOOS_$GOARCH</code>为命名方式，例：linux_amd64和darwin_amd64</p>
<h5 id="bin目录">bin目录</h5>
<ol>
<li>当环境变量GOBIN已有效设置时，该目录会变得无意义</li>
<li>当GOPATH的值中包含多个工作区的路径时，必须设置GOBIN，否则无法成功安装Go程序的可执行文件</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>go Mac环境配置</title>
			<link>https://blog.v5u.win/posts/go/go-mac%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
			<pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/go/go-mac%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
			<description>在官网下载pkg安装包,点击安装，安装完成后，资源被写入/usr/local/go 目录下 设置profile文件，我用的zsh，修改~/.zs</description>
			<content type="html"><![CDATA[<ol>
<li>
<p>在官网下载pkg安装包,点击安装，安装完成后，资源被写入/usr/local/go 目录下</p>
</li>
<li>
<p>设置profile文件，我用的zsh，修改~/.zshrc。用bash的同理，修改~/.bash_profile</p>
<pre tabindex="0"><code># go
export GOROOT=/usr/local/go
export GOPATH=~/dev/go/golib:~/dev/go/project #工作区，存放go源码文件的目录
export GOBIN=~/dev/go/gobin #存放编译后可执行文件的目录
export PATH=$PATH:$GOROOT/bin/:$GOBIN
</code></pre></li>
</ol>
<p>3.验证，命令行执行<code>go version</code>返回go version go1.11.5 darwin/amd64。go语言环境配置完毕。</p>
]]></content>
		</item>
		
		<item>
			<title>node-gyp是什么</title>
			<link>https://blog.v5u.win/node-gyp%E6%98%AF%E4%BB%80%E4%B9%88/</link>
			<pubDate>Thu, 31 Jan 2019 02:57:56 +0000</pubDate>
			
			<guid>https://blog.v5u.win/node-gyp%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
			<description>GYP GYP是一种构建自动化工具。 GYP由Google创建，用于生成用于构建Chromium Web浏览器的本机IDE项目文件，并使用BSD软件许</description>
			<content type="html"><![CDATA[<h4 id="gyp">GYP</h4>
<p>GYP是一种构建自动化工具。 GYP由Google创建，用于生成用于构建Chromium Web浏览器的本机IDE项目文件，并使用BSD软件许可证作为开源软件获得许可。 GYP的功能类似于CMake构建工具。 GYP处理包含JSON字典的文件，以生成一个或多个目标项目make文件。</p>
<p>操作系统： macOS, Linux, Solaris, FreeBSD, OpenBSD, Windows</p>
<p>编写时间： Python</p>
<p>许可协议： BSD license</p>
<p>原著者： Mark Mentovai</p>
<p>长久以来 linux 的二进制分发一直是巨坑，npm 为了方便干脆就直接源码分发，用户装的时候再现场编译。</p>
<p>Google使用过很多处理平台无关的项目构建系统，比如Scons，CMake。在实际使用中这些并不能满足需求。开发复杂的应用程序时，在Mac上Xcode更加适合，而Windows上Visual Studio更是无二之选。gyp是为Chromium项目创建的项目生成工具，生成项目文件后就可以调用GCC, vsbuild, xcode等编译平台来编译。从平台无关的配置生成平台相关的Visual Studio、Xcode、Makefile的项目文件。这样一来我们就不需要花额外的时间处理每个平台不同的项目配置以及项目之间的依赖关系。</p>
<h4 id="node下的gyp">node下的gyp</h4>
<p>至于为什么要有node-gyp，是由于node程序中需要调用一些其他语言编写的工具甚至是dll，需要先编译一下，否则就会有跨平台的问题，例如在windows上运行的软件copy到mac上就不能用了，但是如果源码支持，编译一下，在mac上还是可以用的。node-gyp在较新的Node版本中都是自带的（平台相关），用来编译原生C++模块。</p>
]]></content>
		</item>
		
		<item>
			<title>读 如何和这个世界相处</title>
			<link>https://blog.v5u.win/%E8%AF%BB-%E5%A6%82%E4%BD%95%E5%92%8C%E8%BF%99%E4%B8%AA%E4%B8%96%E7%95%8C%E7%9B%B8%E5%A4%84/</link>
			<pubDate>Mon, 28 Jan 2019 08:39:04 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E8%AF%BB-%E5%A6%82%E4%BD%95%E5%92%8C%E8%BF%99%E4%B8%AA%E4%B8%96%E7%95%8C%E7%9B%B8%E5%A4%84/</guid>
			<description>读 如何和这个世界相处 研究领域：个体心理学 研究成果和结论：我们的处事方式和决策行为是由于我们对这个世界的解释决定的，也就是说是由于我们如何解释</description>
			<content type="html"><![CDATA[<p>读 如何和这个世界相处</p>
<p>研究领域：个体心理学</p>
<p>研究成果和结论：我们的处事方式和决策行为是由于我们对这个世界的解释决定的，也就是说是由于我们如何解释我们所遇到的情况。</p>
<p>所有的人生问题，都可以归类为三个主要问题：生活区生活、工作、爱情。</p>
<p>我们的生活风格决定我们的困境</p>
<p>而这种对世界的解释的形成是我们出生后受周围环境的影响形成的反应，</p>
<p>灵魂，作为生命过程的一部分，一定在基本特性上和母体上的活细胞相似。这一基本特性可以在完成下列任务的不停努力中见到：</p>
<p>（一）适应外在世界的要求，做出利人及利己的最佳排；</p>
<p>（二）克服死亡的恐惧；</p>
<p>（三）在不忘克服死亡的情形下，努力奋斗，实现自我的最高理想；</p>
<p>（四）为了进化，并让自己可以适应各种困境及挑战，开始懂得寻求他人或社会的力量及资源，共同解决各种难题，并借着与他人的相互影响与合作，达到优越、完美与安全的目的。</p>
<p>人类都有自卑感，因为每个人都在追求完美的过程中，只有不断的完善自己才会感到幸福</p>
<p>人类的生存有三个基本原则：生存的权利，社会化合作，爱情</p>
]]></content>
		</item>
		
		<item>
			<title>撞车之后，报保险不要傻里傻气的！</title>
			<link>https://blog.v5u.win/%E6%92%9E%E8%BD%A6%E4%B9%8B%E5%90%8E%EF%BC%8C%E6%8A%A5%E4%BF%9D%E9%99%A9%E4%B8%8D%E8%A6%81%E5%82%BB%E9%87%8C%E5%82%BB%E6%B0%94%E7%9A%84%EF%BC%81/</link>
			<pubDate>Wed, 16 Jan 2019 07:04:23 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E6%92%9E%E8%BD%A6%E4%B9%8B%E5%90%8E%EF%BC%8C%E6%8A%A5%E4%BF%9D%E9%99%A9%E4%B8%8D%E8%A6%81%E5%82%BB%E9%87%8C%E5%82%BB%E6%B0%94%E7%9A%84%EF%BC%81/</guid>
			<description>来自: 四闹铃先生 豆瓣 1，对方全责提出私了1500，你死活不干，要求走保险，又是吵又是闹又是折腾，定损2200，修理厂要求2400，自掏200</description>
			<content type="html"><![CDATA[<p>来自: 四闹铃先生 豆瓣</p>
<p>1，对方全责提出私了1500，你死活不干，要求走保险，又是吵又是闹又是折腾，定损2200，修理厂要求2400，自掏200.</p>
<p>如果你同意私了，拿1500，报保险自己全责，车照样修好一文不掏白赚1500，第二年保费增加800，赚了700</p>
<p>2.撞伤一人，送医院，被家属打骂，垫医药费8000。回家洗洗脸上的血痕。回头家属要求加10000私了，否则不给你医药发票，保险公司说没发票不给你报销，哦或。悲剧。其实你可以不去医院，现场等待交警出具处理意见。垫医药费就说炒股亏了，现在还欠起外债，等家属告你，告完保险公司全赔，皆大欢喜，你甚至不用出现。</p>
<p>3.撞车了，后面堵起一排车狂按喇叭，对方说我全责，我们退到路边处理，于是停到路边，结果对方马上变脸，说你丫的全责，这时候才想起应该先手机照相。</p>
<p>4.老公指挥倒车，自己一激动，油门当刹车，把老公双腿撞断，打电话给保险公司老老实实的上报，保险公司告诉你，老公不陪。。。。。其实你可以换个朋友的车撞。。你懂</p>
<p>5.车子在4s保养，保养完了，高高兴兴去取车，哦或，倒车时油门又当刹车（为什么是又=。=！），撞的稀里哗啦，造成损失4000+，你郁闷的找保险公司，人家礼貌的告诉你，在修理厂发生的事故，俺们不陪。。。。其实你可以换个地方发生事故，比如小区内和某小树发生亲密接触，你懂。</p>
<p>6.大雨天，早上去happy的去车库取车，发现车库被淹了，顿时泪流满面，赶快上车发动，让自己的车车逃离苦海，一点火，哦或，发动机打不燃。车没逃离苦海，你也进了苦海，4s店告知，发动机进水，报销，损失5w，你兴冲冲的去找保险公司，别个怜悯的看着你，小姐，驾驶员强行打火导致发动机进水，俺们不陪。————你不点火，发动机是不会进水的哦亲。</p>
<p>7，在车上放了好多好多玩具，什么宝塔啊，香水瓶啊，小熊啊小猪啊。有一天差点撞到一个老太，一脚急刹车，香水瓶飞起来干到玻璃又弹到俺额头上。缝8针，玻璃费误工费医药费精神损失费共计3800，保险公司的接线员笑眯眯的告诉你，被车上物品撞坏不赔：如果车辆被车厢内或车顶装载的物品击伤，俺们还是不陪。</p>
<p>8,周末天气好爽，正在happy的飙车，左方一大货车突然一盘子甩到你道上和你kiss了一下，你只有一盘子打到花坛上，你小心肝扑通扑通的隔了5分钟才安静下来，一看大货车早没影了，马上打电话给保险员把大货车狂决一顿，并表示想要修车，保险员遗憾的告诉你把负全责的肇事人放跑了不赔：当与其他车辆发生碰撞时，责任在对方，如果放弃向第三方追偿的权利，也就放弃了向保险公司要求赔偿的权利哦亲。——————其实你可以说，太阳晃花了我的眼，让我上了花坛，什么大货车？没看到~没注意。。。</p>
<p>9，路上爆胎，左转右转稳住方向，不用打电话给保险公司了，别个不陪。</p>
<p>10，停在楼下，上楼看了一集康熙来了，下楼一看，4个轮子没了，几块板砖给俺垫着，不用打电话给保险了，别个不陪。</p>
<p>教你榨干保险公司最后一滴血</p>
<p>前言：相信还有许多车主对汽车保险了解不深，只有出了事故才会和汽车保险打交道，而作为外行的车主们根本不能摸清楚汽车保险的水究竟有多深，该如何处理才能成为最大程度的受益人呢？别着急，已经有许多身经百战、经验丰富的车主们为我们总结了他们的心得，我们只要阅读收藏以备不时之需就可以了，况且这是一份普通车主们就能读懂的汽车保险条文，保证能让你更深入地了解汽车保险和理赔，“榨干”保险公司的最后一滴血！谁说不是呢？买保险就图的省钱和省心！</p>
<p>保险条款精解（一）车损险 VS 第三者责任险</p>
<p>咱们先说说最主要的车损险和三责险。车损险和三责险是车辆保险的基本险，主要赔偿被保险车辆的损失以及由被保险车辆在使用中给第三者带来的损失！</p>
<p>您大概觉得即使是自然灾害造成的车辆损失，保险公司也照赔不误！这话对了一半，大部分的自然灾害造成的损失都赔，惟独一样除外——地震！</p>
<p>案例1：如果您的车有幸在地震中被建筑物砸到的话，哈哈……</p>
<p>应对方法：不要在地震一结束就急于申请赔偿，等地震过后几天再申请赔偿。</p>
<p>出险陈述：大概由于地震造成墙体松动，终于在某一天倒下了，砸坏了您的爱车，切记：千万不要提及地震时出险。</p>
<p>案例2：如果您的爱车在一次急刹车中，车里的东西飞到了风挡上造成玻璃破裂，您该怎么说呢？</p>
<p>假如您老老实实的对保险公司说：“我的纸巾盒飞起来打中了玻璃……”（哗！内功够高啊，呵呵，本人只是以纸巾盒举个例子开个玩笑。）”那么你惨了！那个理赔员会指着自己的嘴对您说：“请看我的口型——NO！”</p>
<p>应对方法：小小的改变一下事实……</p>
<p>出险陈述：我的一个练过铁头功的朋友在刹车时撞碎了风挡，OK！记住：受车内“物品”的撞击所受损失，保险公司不赔的！但是人撞坏的就另当别论。</p>
<p>案例3：如果您的车在拖车时与别的车发生了碰撞，怎么办？</p>
<p>应对方法：忽略一些事实存在的东西……</p>
<p>出险陈述：别提你在拖带车辆或者被别人拖带，否则不管你有没有事故责任，保险公司一律不赔。</p>
<p>案例4：如果你在事故时，打破了自己的玻璃又没有上玻璃险时，你会向保险公司索赔吗？</p>
<p>没上玻璃险找人家索赔能行吗？行，绝对行！玻璃险的全称是：玻璃单独破碎险，是指停车和使用时造成的玻璃损坏，而事故造成的玻璃损坏应由车损险来负责赔付。</p>
<p>如果您没上玻璃险，当您早上起来发现自己的汽车玻璃不知道被哪个混蛋打破了，怎么办呢？？呵呵，老招法：开车时急刹车造成的，又是脑袋惹的祸！（记得找一个身高差不多的朋友来当挡箭牌啊），如果是侧面的玻璃破了，就说侧滑时脑袋撞的好了，呵呵！</p>
<p>案例5：如果您的车在撞车时，打破了一个小灯，您该怎么办呢？</p>
<p>找保险公司，他绝对不敢不赔您，那么您以为是赚到了吗？不是的，实际上您大概要赔了，亏本了。</p>
<p>没听明白？告诉您，每辆车的全险大概在2500-5000之间（更高档的车会更贵），如果您在一年的保险期内没有索赔，那么您将在下一年投保时获得10%的无赔款优待，这笔帐您自己算算，如果索赔数额太小，哎，就这样算了吧，不如10%的折扣来的实在。</p>
<p>——————————华丽分割——————————–</p>
<p>保险条款精解(二) 丢车——如何将损失降到最低点？</p>
<p>车辆在停放和使用的过程中难免会让人有烦心的事，其中，丢车是最倒霉的事了，不过，如果你按照我说的去做，您的损失会降到最低点。</p>
<p>记得啊，一旦丢车，要做的第一件事情是什么？报警？错！车已经丢了，哪那么容易立刻找到啊，您也未免太高估中国警察的能力了，还是想想怎么减少损失吧！</p>
<p>减少损失？哪那么容易啊，车都丢了，怎么减啊？别忘了，有我呢！！！！</p>
<p>首先记得先看看自己的保险单里有没有上车辆盗抢险。什么，没有？那你认倒霉吧，找我也没用了，再买一辆吧！</p>
<p>如果你上了盗抢险，首先，我要恭喜你，你的损失可以降到最低了，不过，也要小心啊！这时你要做的是闭紧你的嘴，踏踏实实的看完我的帖子，否则你一定会后悔的！</p>
<p>案例1：盗抢险中规定，被保险人丢失行驶证、购车原始发票、车辆购置附加费凭证每一项增加0.5%的绝对免赔。丢失车钥匙增加5%的绝对免赔。这些规定在保险单中用颜色最浅的字体印刷，不信，您可以拿出单子仔细看看，肯定在某个不显眼的角落里能发现这段话。</p>
<p>所以不管你是否有一把备用钥匙曾经丢失过，或者是在您被开跑了的车里有一把钥匙，请您记住一定要忘记这件事，否则……5%的损失您自己扛定了！</p>
<p>案例2：如果您的车在收费停车场或营业性修理厂中被盗，保险公司负责赔偿吗？</p>
<p>答案是：不赔！！因为上述场所对车辆有保管的责任，在保管期间，因保管人保管不善造成车辆损毁、丢失的，保管人应承担责任。保险公司不负责赔偿。</p>
<p>所以正确的方式是找停车场去索赔，所以，每次停车时记得收好停车费收据啊，虽然上面印着丢失不管，但根据我国合同法中关于格式合同的规定，这属于单方面推卸自己应负的责任！你尽管放心大胆的告他好了，呵呵，给您一个好消息，已经有人打赢了这样的官司，所以根据案件推溯的原则，以后的案件审判可以依照这个案例来判决，哈哈！</p>
<p>案例3：如果，停车场是您的朋友开的，或者您从侧面打听到这个停车场根本无力赔付您的爱车，您是否可以考虑改变一下丢车的地点呢？哈哈，我可什么都没说啊！您自己琢磨去吧。</p>
<p>案例4：再有，如果您是一位老板，因为一些账目上的问题和朋友闹翻，而您的朋友又是一位小人，他偷偷把您的车偷走了，您猜到会是他干的，您会找保险公司赔偿吗？</p>
<p>告诉您，保险公司可不负责赔偿。因为条款规定：被保险人因与他人的民事、经济纠纷而致车辆被抢、被盗为责任免除。</p>
<p>所以，您大可忘记您的经济纠纷，直接到公安局和法院报案，记住，千万别说出您的怀疑对象，否则就会把经济问题扯进来了，以中国法院的工作效率，您大概半年之内得打车出门了！</p>
<p>案例5：如果您刚买了一辆新车，上了全险，但没有来得及领牌照（现在的交管规定：验车后的15个工作日后方可领牌证），出险后保险公司负责赔偿吗？</p>
<p>不负责赔偿。因为在出险时，保险车辆必须具备两个条件，一是保险车辆须有公安交通管理部门核发的行驶证或号牌，二是在规定期间内经公安交通管理部门检验合格。但一般经特别约定对公安部门规定需先保险后检验核发号牌的新入户车辆可负责车损险和三责险。所以负责丢车赔偿的盗抢险并没有生效，自然，您也得不到赔偿。</p>
<p>看来如果您不是仗着胆子改一下丢失的时间，新买的车就算送人了！我可又什么都没说啊！</p>
<p>案例6：如果您的车失而复得，保险公司如何处理赔款？</p>
<p>被盗抢的保险车辆找回后，如果保险公司尚未赔款的，应将该车辆归还给您，但是全车被盗抢期间，车辆受到的损坏或车上零部件、附属设备丢失需要修复的合理费用，保险公司负责赔偿。如果保险公司已经赔偿，应将车辆归还您，同时收回相应赔款。若您不愿收回原车，则车辆的所有权益归保险公司。</p>
<p>————————–华丽分割——————————</p>
<p>保险条款精解（三） 撞车</p>
<p>只要是撞车，保险公司全赔吗？当然不是你只要认真看看手里的保单赔偿免责条款就知道了，保险公司有一大堆不赔的东西呢，想把损失降到最低，还是来找我吧，哈哈！</p>
<p>案例1：假设你是一个新手，刚借了一辆车（当然也没准是租的车），在路上练车的时候，把你弟弟给撞了，你知道这辆车有三责险，你会找保险公司索赔吗？</p>
<p>答案：如果你去了，你就是神经病，保险公司会一脚把你踢出去，为什么？？</p>
<p>首先，你要知道什么是三责险，全称：第三者责任险。</p>
<p>那什么是第三者呢？</p>
<p>第三者指除保险人与被保险人之外的，因保险车辆的意外事故致使保险车辆下的人员或财产遭受损害的在车下的受害人。通俗的讲第三者就是排除四种人：即保险人、被保险人、本车发生事故时的驾驶员及其家庭成员、被保险人的家庭成员。</p>
<p>现在明白了，你作为当时的驾驶员，撞伤你的家人，保险公司是不赔的，好了，你知道该怎么办了！什么？还不知道？气死我了，换个驾驶员撞的不就完了嘛，真是的，害我什么都说出来了。</p>
<p>案例2：如果您有幸开车撞人了，而且全是您的责任，法院判您赔偿您包赔对方的经济损失、精神损失费、伤残损失费……你该如何处理呢？？还能怎么样，给钱就是了！</p>
<p>错！大错特错！</p>
<p>你应该和对方家人商量，加大经济损失赔偿和伤残损失赔偿，尽量把精神赔偿降到最低，没有当然就更好了。</p>
<p>为什么？你问我为什么？这不是五马换六羊嘛。</p>
<p>老兄，你又错了，保险公司不是无条件地完全承担“被保险人依法应当支付的赔偿金额”，而是依照《道路交通事故处理办法》及保险合同的规定给予赔偿。而条款明确规定，因保险事故引起的任何有关精神损害赔偿为责任免除。所以无论法院判决被保险人是否应赔偿精神损失，保险公司均不负责赔偿。</p>
<p>明白了？？别的保险公司都替你赔，精神损失可不管，所以，宁可多给对方点钱，也别答应精神赔偿，总之，慷保险公司之慨呗，呵呵！</p>
<p>案例3：如果你又有幸撞车了，这回不是您的责任，而对方又不想赔钱，您可以找保险公司索赔吗？</p>
<p>答案：可以，不过您必须先向第三方索赔，才有可能获得保险公司的赔偿。如果您放弃了向第三方索赔的权利，而直接向保险公司索赔，保险公司不赔。因为您放弃了向第三方追偿的权利，同时也就放弃了向保险公司要求赔偿的权利。</p>
<p>所以，切记，切记，一定要先找对方赔，最好是有法庭的强制执行未果的证明，然后您就可以理直气壮的找保险公司了，剩下的烂摊子尽管让它们收拾去吧，谁让它们每年收了您那么多的保险费呢！</p>
<p>案例4：记得以前有个倒霉的司机在警察的指挥下，帮助警察拦截正在逃窜的罪犯，撞向了罪犯，结果两车相撞，那叫一个惨啊，保险公司会赔他吗？</p>
<p>当然不会啦，保险条款写的明明白白，驾驶员的“故意行为”不在赔偿之列，所以只能自己修车了：</p>
<p>所以，如果您没有足够的经济能力，在当英雄之前要考虑一下噢！！！</p>
<p>—————————华丽分割—————————-</p>
<p>保险条款精解（四）索赔——不可不看，因为您以前可能没听说过</p>
<p>★保险案例一：一位朋友丢失爱车，已上全险，找保险公司索赔，未果，保险公司拒赔理由：到车管所查询，此车未年检。</p>
<p>案例分析：保险公司所做所为，十分合理，于保险合同条文也有根据：保险只对合格车辆生效，对于未年检的车辆只能视为不合格车辆，就算您保养的再好也没用，结果只能是丢了白丢，保险也上了白上，顶多退回保险现金价值。</p>
<p>案例结论：您的爱车，千万要按时年检，切不可后延，否则，罚款事小，拒赔事大，此时即使发生交通事故造成第三者损失，也将由您自己承担，保险白买了！</p>
<p>案例解决办法：按时年检，即使是一天，也不要晚；如果真的发生不幸，也要记住千万不要立即报案，尽快花银子把验车手续补齐后再办理报案索赔手续！</p>
<p>不好意思，刚才一阵头晕，我什么也没说吧？说了也是胡话。</p>
<p>★保险案例二：与上类似，驾驶员年审未做的请注意了，您在驾驶中发生的一切问题，保险公司不负责赔偿，理由与上例相似，恕不赘述。</p>
<p>★保险案例三：这是一个经常被问到的问题：我的车刚买，还没有上牌照，保险是否生效？</p>
<p>解释：车辆在出险时，保险车辆必须具备两个条件，一是保险车辆须有公安交通管理部门核发的行驶证或号牌，二是在规定期间内经公安交通管理部门检验合格。</p>
<p>但一般经特别约定对规定需先保险后检验核发号牌的新车辆可负责车损险和三责险，所以，这时您的车丢了就算倒霉了，撞了人啥的还算凑合有保险公司给您顶着，现在清楚了吧！</p>
<p>★保险索赔证明材料原则：（因为这个问题有N人问起，所以在此一并解答）</p>
<p>保险索赔时分几种情况：</p>
<p>1，事故经交通队出面解决的：</p>
<p>由交通队出具处罚单或调解书，经法院判决的，用判决书即可。这些材料绝对好使，在保险公司肯定一路绿灯。放心索赔好了</p>
<p>2，在小区内发生事故的：</p>
<p>重大事故：即车损严重的，还是要到交通队开证明，很麻烦；</p>
<p>一般剐蹭：到小区物业开证明，因为经常受怀疑，一般也很麻烦；</p>
<p>所以，最好报案时报在城市道路上，否则……累死你！</p>
<p>3，在道路上发生小事故的，包括停车时的剐蹭</p>
<p>此类需要证明的原则是：是否涉及第三方？如涉及第三方赔付的，还是需要交通队证明。</p>
<p>如事故双方自行了断的，可以在索赔时注明：事故第三方自修，然后按车损险中的自责索赔，保险公司要是让您到交通队开证明，您一定得咬住了别松口，就说没地儿开去，保险公司一般也不会太较真。您要答应去开证明，别怪我没提醒您，您就跑去吧，赔的钱不定够不够油钱呢！</p>
<p>4，最背的人：</p>
<p>如果被别的车撞到后，肇事车逃逸，无法查找。情况严重的就比较麻烦，要通过交通队解决，可以由保险公司代为追偿。</p>
<p>不严重的话，最好也是以自责来解决索赔问题，而且要在索赔时注意到车身是否粘有对方车油漆，以及撞的方向，一定得自圆其说，否则你惨了！</p>
]]></content>
		</item>
		
		<item>
			<title>PHP 命名空间 namespace</title>
			<link>https://blog.v5u.win/php-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4-namespace/</link>
			<pubDate>Wed, 16 Jan 2019 06:06:12 +0000</pubDate>
			
			<guid>https://blog.v5u.win/php-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4-namespace/</guid>
			<description>PHP 命名空间 namespace 声明： &amp;lt;?php // file1.php namespace MyProject; namespace MyProject\Sub\Level; //声明分层次的单个命名空间 namespace MyProject { const CONNECT_OK = 1; class Connection { /* &amp;hellip; / } function connect() { / &amp;hellip; */ } namespace Foo\Bar\subnamespace; const FOO = 1; function foo() {} class foo { static function staticmethod() {} } } ?&amp;gt;</description>
			<content type="html"><![CDATA[<p>PHP 命名空间 namespace</p>
<ol>
<li>
<p>声明：
<!-- raw HTML omitted --><!-- raw HTML omitted -->&lt;?php
//     file1.php
namespace MyProject;
namespace MyProject\Sub\Level;  //声明分层次的单个命名空间
namespace MyProject {
const CONNECT_OK = 1;
class Connection { /* &hellip; <em>/ }
function connect() { /</em> &hellip; */  }
namespace Foo\Bar\subnamespace;
const FOO = 1;
function foo() {}
class foo
{
static function staticmethod() {}
}
}
?&gt;
<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
</li>
<li>
<p>使用</p>
</li>
</ol>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<blockquote>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>Socket</title>
			<link>https://blog.v5u.win/socket/</link>
			<pubDate>Wed, 16 Jan 2019 05:57:22 +0000</pubDate>
			
			<guid>https://blog.v5u.win/socket/</guid>
			<description>======= tags: [socket, HTTP] categories: [HTTP] &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 9b93207d813e2b213031f967612e37c68194cf37:post/iOS-Scoket.md iOS socket能做什么? socket是TCP UDP IP HTTP 协议簇，封装为socket API 可以用来写 客户端，服务端模型，在两者之间进行数</description>
			<content type="html"><![CDATA[<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>=======
tags: [socket, HTTP]
categories: [HTTP]</p>
<pre tabindex="0"><code>

&gt;&gt;&gt;&gt;&gt;&gt;&gt; 9b93207d813e2b213031f967612e37c68194cf37:post/iOS-Scoket.md

iOS socket能做什么?
  
socket是TCP UDP IP HTTP 协议簇，封装为socket API
  
可以用来写 客户端，服务端模型，在两者之间进行数据交流
  
换句话说，socket API是用来进行数据交换的一簇协议，它包括TCP, UDP, IP, HTTP等协议。
  
那么socket在iOS中的应用场景有哪些呢？
  
蓝牙交互，WiFi传输，一般是将移动设备作为一个服务器来使用。
  
如果作为客户端使用，那就没什么可说的了，因为本来移动设备就是作为客户端的。
</code></pre>]]></content>
		</item>
		
		<item>
			<title>为什么析构函数要翻译成析构？</title>
			<link>https://blog.v5u.win/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E8%A6%81%E7%BF%BB%E8%AF%91%E6%88%90%E6%9E%90%E6%9E%84%EF%BC%9F/</link>
			<pubDate>Wed, 16 Jan 2019 05:45:39 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E8%A6%81%E7%BF%BB%E8%AF%91%E6%88%90%E6%9E%90%E6%9E%84%EF%BC%9F/</guid>
			<description>为什么析构函数要翻译成析构？ Destructuring assignment （解构赋值） 这个是JavaScript 1.7引入的新名词.至于用途,用过Matlab、Lua等编程脚本的人都</description>
			<content type="html"><![CDATA[<h4 id="为什么析构函数要翻译成析构">为什么析构函数要翻译成析构？</h4>
<p>Destructuring assignment （解构赋值）</p>
<p>这个是JavaScript 1.7引入的新名词.至于用途,用过Matlab、Lua等编程脚本的人都再熟悉不过了.</p>
<p>var a = 1;</p>
<p>var b = 3;</p>
<p>[a, b] = [b, a];</p>
<p>用白话说,就是多个复制写在一行.其最主要的用途也就是返回多个返回值了,因为这类脚本既没有指针也没有引用参数.当然,也可以用来交换变量的值(如上例),循环旋转变量序列的值等.</p>
<p>JavaScript给它起了这么个怪名字,应该是由于使用了其本来的数组的形式.将一个数组赋给另一个数组,本来是引用赋值,但左边如果是右值常量,则不能赋值.于是改变语义为将每个元素的值赋到左边对应的元素.所以,才叫做解构赋值,就是解了数组的构.</p>
<p>扯得远一点,destructuring咋一看挺眼熟,象C++的destructor.既然destructor翻译成析构,为什么destructure要翻译成解构呢?查一下专业词典,便会发现destruct和destructure是不同的.destruct是破坏、粉碎;而destructure是解构.明显destructor是destruct的派生词.那么疑问就变成为什么destructor翻译成析构函数,而不是破坏函数、销毁函数什么的.析字的解释有一条分开、分散,即是分崩离析的析.这么一想,也有些道理,而且与构造共享一个构字,也便于将构造和析构联系到一起. loading…</p>
<p>引用自天涯 <a href="http://wenda.tianya.cn/question/521b090115127d96">http://wenda.tianya.cn/question/521b090115127d96</a></p>
<p>单词翻译</p>
<p>destruct 自毁，为可自毁而设计的</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>destructor 爆炸者，破坏装置，垃圾焚毁炉</p>
<p>destructure 析构，拆解</p>
]]></content>
		</item>
		
		<item>
			<title>code review</title>
			<link>https://blog.v5u.win/code-review/</link>
			<pubDate>Wed, 16 Jan 2019 03:47:27 +0000</pubDate>
			
			<guid>https://blog.v5u.win/code-review/</guid>
			<description>*title: code review date: 2018-09-10categories: 操作系统 Code Review的好处我觉得不用多说了，主要是让你的代码可以更好的组织起来，有更易读，有更高的维护性，同时可以达到知识共享，</description>
			<content type="html"><![CDATA[<ul>
<li>
<ul>
<li>*title: code review</li>
</ul>
</li>
</ul>
<p>date: 2018-09-10<!-- raw HTML omitted --></p>
<h2 id="categories-操作系统">categories: 操作系统</h2>
<p><strong>Code Review的好处我觉得不用多说了，主要是让你的代码可以更好的组织起来，有更易读，有更高的维护性，同时可以达到知识共享，找到bug只是其中的副产品</strong>。</p>
<p>**我个人认为代码有这几种级别：**1）可编译，2）可运行，3）可测试，4）可读，5）可维护，6）可重用。通过自动化测试的代码只能达到第3）级，而通过Code Review的代码少会在第4）级甚至更高。</p>
<p>在Amazon，开发工程师都会被教育拿到需求后一定要问——“为什么要做？业务影响度有多大？有多少用户受益？”，</p>
<h4 id="review实施思路">review实施思路</h4>
<p>先Review设计实现思路，然后Review设计模式，接着Review成形的骨干代码，最后Review完成的代码，如果程序复杂的话，需要拆成几个单元或模块分别Review。当然，最佳的practice是，每次Review的代码应该在1000行以内，时间不能超过一部电影的时间——1.5小时（因为据说那个一个正常人的膀胱可以容纳尿液的最长限度）</p>
<h4 id="1--经常进行code-review">1.- 经常进行Code Review</h4>
<h4 id="2--code-review不要太正式而且要短">2.- Code Review不要太正式，而且要短</h4>
<h4 id="3--尽可能的让不同的人reivew你的代码">3.- 尽可能的让不同的人Reivew你的代码</h4>
<h4 id="4--保持积极的正面的态度">4.- 保持积极的正面的态度</h4>
<p>5.- 学会享受Code Reivew</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>review工具</p>
<p><strong>1. Review board:</strong></p>
<p><strong>Codestriker:</strong></p>
<p><strong>Groogle:</strong>：</p>
<ul>
<li>各式各样语言的语法高亮。</li>
<li>支持整个版本树的比较。</li>
<li>支持当个文件不同版本的diff功能，并有一个图形的版本树。</li>
<li>邮件通知所有的Reivew的人当前的状态。</li>
<li>认证机制。</li>
</ul>
<p><strong>4. Rietveld:</strong></p>
<p><a href="http://www.review-board.org/">Review board</a> 很像。它也是一个基于Web的应用，并在<a href="http://code.google.com/appengine/">Google App Engine</a> 上。</p>
<p><strong>5. JCR</strong></p>
<p>基于WEB界面的最初设计给Reivew Java 语言的</p>
<p><a href="http://jcodereview.sourceforge.net/">JCR</a> 主要想协助：</p>
<ul>
<li><strong>审查者</strong>。所有的代码更改都会被高亮，以及大多数语言的语法高亮。Code extracts 可以显示代码评审意见。如果你正在Review Java的代码，你可以点击代码中的类名来查看相关的类的声明。</li>
<li><strong>项目所有者</strong>。可以 轻松创建并配置需要Review的项目，并不需要集成任何的软件配置管理系统（SCM）。</li>
<li><strong>流程信仰者</strong>。 所有的评语都会被记录在数据库中，并且会有状态报告，以及各种各样的统计。</li>
<li><strong>架构师和开发者</strong>。 这个系统也可以让我们查看属于单个文件的评语，这样有利于我们重构代码。</li>
</ul>
<p><a href="http://jcodereview.sourceforge.net/">JCR</a> 主要面对的是大型的项目，或是非常正式的代码评审，从这方面看来，他并不像上面的那些工具。</p>
<p><strong>Jupiter</strong></p>
<p>它是一个Eclipse IDE 的插件。</p>
<p>Gerrit</p>
<p>使用 <a href="https://www.oschina.net/p/git">Git</a> 作为底层版本控制系统。它分支自<a href="http://www.oschina.net/p/rietveld">Rietveld</a>，作者为Google公司的Shawn Pearce，原先是为了管理Android计划而产生。</p>
<p>Gerrit实际上一个Git服务器，它为在其服务器上托管的Git仓库提供一系列权限控制，以及一个用来做Code Review是Web前台页面。当然，其主要功能就是用来做Code Review。</p>
]]></content>
		</item>
		
		<item>
			<title>CocoaPods</title>
			<link>https://blog.v5u.win/cocoapods/</link>
			<pubDate>Wed, 16 Jan 2019 03:46:29 +0000</pubDate>
			
			<guid>https://blog.v5u.win/cocoapods/</guid>
			<description>podspec文件是做什么的 Podfile 文件的自述 readme文件如何添加 这种说明 打开网站https://shields.io/#/examples/</description>
			<content type="html"><![CDATA[<h3 id="podspec文件是做什么的">podspec文件是做什么的</h3>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<ul>
<li>Podfile 文件的自述</li>
</ul>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h3 id="readme文件如何添加">readme文件如何添加</h3>
<p><a href="http://img.shields.io/cocoapods/v/FFKit.svg"><img src="http://img.shields.io/cocoapods/v/FFKit.svg" alt="Liberapay patrons"></a>这种说明</p>
<ol>
<li>打开网站https://shields.io/#/examples/funding</li>
<li>选择flat Style</li>
<li>在Link和Image中输入http://img.shields.io/cocoapods/v/库名称.svg，网站会自动解析库的版本，生成img</li>
<li>copy下面的Markdown，paste到要显示说明的地方</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>程序员成长书录</title>
			<link>https://blog.v5u.win/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%88%90%E9%95%BF%E4%B9%A6%E5%BD%95/</link>
			<pubDate>Wed, 16 Jan 2019 03:42:16 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%88%90%E9%95%BF%E4%B9%A6%E5%BD%95/</guid>
			<description>《程序员修炼之道》1 《人月神话》2</description>
			<content type="html"><![CDATA[<ul>
<li>《程序员修炼之道》<!-- raw HTML omitted --><!-- raw HTML omitted -->1<!-- raw HTML omitted --><!-- raw HTML omitted --></li>
<li>《人月神话》<!-- raw HTML omitted --><!-- raw HTML omitted -->2<!-- raw HTML omitted --><!-- raw HTML omitted --></li>
</ul>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>写代码原则整理之王垠</title>
			<link>https://blog.v5u.win/%E5%86%99%E4%BB%A3%E7%A0%81%E5%8E%9F%E5%88%99%E6%95%B4%E7%90%86%E4%B9%8B%E7%8E%8B%E5%9E%A0/</link>
			<pubDate>Wed, 16 Jan 2019 03:34:22 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E5%86%99%E4%BB%A3%E7%A0%81%E5%8E%9F%E5%88%99%E6%95%B4%E7%90%86%E4%B9%8B%E7%8E%8B%E5%9E%A0/</guid>
			<description>作为一名编译语法解析的研究生，王垠整理了一些写代码的原则，范子收集于此，作为对自己码代码的judge参考。 写直观的代码 我写代码有一条重要的原</description>
			<content type="html"><![CDATA[<p>作为一名编译语法解析的研究生，王垠整理了一些写代码的原则，范子收集于此，作为对自己码代码的judge参考。</p>
<h5 id="写直观的代码">写直观的代码</h5>
<p>我写代码有一条重要的原则：如果有更加直接，更加清晰的写法，就选择它，即使它看起来更长，更笨，也一样选择它。</p>
<ul>
<li>防止过度工程的原则</li>
</ul>
<p>王垠根据这些，我总结出来的防止过度工程的原则如下：</p>
<ol>
<li>先把眼前的问题解决掉，解决好，再考虑将来的扩展问题。</li>
<li>先写出可用的代码，反复推敲，再考虑是否需要重用的问题。</li>
<li>先写出可用，简单，明显没有bug的代码，再考虑测试的问题。</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>英语前缀后缀</title>
			<link>https://blog.v5u.win/%E8%8B%B1%E8%AF%AD%E5%89%8D%E7%BC%80%E5%90%8E%E7%BC%80/</link>
			<pubDate>Wed, 16 Jan 2019 03:31:33 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E8%8B%B1%E8%AF%AD%E5%89%8D%E7%BC%80%E5%90%8E%E7%BC%80/</guid>
			<description>前缀 30个 e-向外 col-在一起，强度 un-否定 se-分 self-自己 neg-否定 anti-反对 de-加强 com-共同 后缀 40个 -or 名词或形容</description>
			<content type="html"><![CDATA[<p>前缀 30个</p>
<p>e-向外 col-在一起，强度</p>
<p>un-否定 se-分</p>
<p>self-自己 neg-否定</p>
<p>anti-反对 de-加强</p>
<p>com-共同</p>
<p>后缀 40个</p>
<p>-or 名词或形容词 -ic 形容词或名词后缀</p>
<p>-ion 名词后缀 -ism 名词后缀，表—主义</p>
<p>-ive 形容词或名词后缀 -ity ty 名词后缀</p>
<p>-ed 形容词，过去分词，过去式 -ly副词后缀</p>
<p>-al 形容词或名词后缀 -ful 形容词后缀</p>
<p>-ist 形容词或名词后缀</p>
]]></content>
		</item>
		
		<item>
			<title>thinkphp5之SQL</title>
			<link>https://blog.v5u.win/thinkphp5%E4%B9%8Bsql/</link>
			<pubDate>Wed, 16 Jan 2019 03:27:54 +0000</pubDate>
			
			<guid>https://blog.v5u.win/thinkphp5%E4%B9%8Bsql/</guid>
			<description>*title: tp5 date: 2018-12-18 $sql = $db-&amp;gt;where(&#39;id&#39;,&#39;between&#39;,&amp;quot;1,5&amp;quot;)-&amp;gt;buildSql();</description>
			<content type="html"><![CDATA[<ul>
<li>
<ul>
<li>*title: tp5<!-- raw HTML omitted --></li>
</ul>
</li>
</ul>
<h2 id="date-2018-12-18">date: 2018-12-18</h2>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><code>$sql = $db-&gt;where('id','between',&quot;1,5&quot;)-&gt;buildSql();</code></p>
]]></content>
		</item>
		
		<item>
			<title>食-家庭</title>
			<link>https://blog.v5u.win/%E9%A3%9F-%E5%AE%B6%E5%BA%AD/</link>
			<pubDate>Wed, 16 Jan 2019 03:15:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E9%A3%9F-%E5%AE%B6%E5%BA%AD/</guid>
			<description>*title: 食-家庭 layout: defaultdate: 2018-10-18 [ 剩菜](#### 剩菜) 腌菜 腊肠熏肉 盐 酒 明确的致癌物 [TOC] ####剩菜 叶类蔬菜的硝酸盐比较高，特别是深绿色的叶菜。剩饭菜中，一般</description>
			<content type="html"><![CDATA[<ul>
<li>
<ul>
<li>*title: 食-家庭</li>
</ul>
</li>
</ul>
<p>layout: default<!-- raw HTML omitted --></p>
<h2 id="date-2018-10-18">date: 2018-10-18</h2>
<p>[ 剩菜](#### 剩菜) <a href="####%E8%85%8C%E8%8F%9C">腌菜</a> <a href="####%E8%85%8A%E8%82%A0%E7%86%8F%E8%82%89">腊肠熏肉</a> <a href="####%E7%9B%90">盐</a> <a href="####%E9%85%92">酒</a> <a href="####%E6%98%8E%E7%A1%AE%E7%9A%84%E8%87%B4%E7%99%8C%E7%89%A9">明确的致癌物</a></p>
<p>[TOC]</p>
<p>####剩菜</p>
<p>叶类蔬菜的硝酸盐比较高，特别是深绿色的叶菜。剩饭菜中，一般只有高硝酸盐的蔬菜，长时间存放才可能产生高的亚硝酸盐。</p>
<p><strong>所以建议大家：宁剩荤菜，不剩蔬菜。</strong></p>
<ul>
<li>荤菜，可以保存 1～2 天，在吃之前一定要彻底加热；</li>
<li>蔬菜，不建议剩 24 小时以上，凉拌菜就更要小心。</li>
</ul>
<p>####腌菜</p>
<p>一般来说，腌菜在腌制几天到十几天之内时，亚硝酸盐的含量达到高峰；但在 2～3 周的时间之内，又会慢慢地下降减少，到了 20 天之后，就基本达到安全水平，可以放心食用了。</p>
<p>另有研究早就证实，用纯醋酸细菌发酵的酸菜，或者用纯乳酸细菌发酵的泡菜，都不会导致亚硝酸盐过量，因为这些「好细菌」是不产生亚硝酸盐的。</p>
<p><strong>但是，要特别当心农家自制腌菜、泡菜，腌制时间不够就比较危险。</strong></p>
<h4 id="腊肠熏肉">腊肠熏肉</h4>
<p>肉类食品加工中，亚硝酸盐允许在法定范围内、按照许可安全剂量使用，以防止病原微生物生长、保持肉类色泽，会有利于肉类的保存和运输。</p>
<p>比如常吃的火腿肠、腊肠、熏肉等，只要是正规产品，就不用担心安全问题。</p>
<p><strong>不过，这些加工肉制品中可能会产生一些亚硝胺类物质，所以建议大家还是要少吃，别常吃。</strong></p>
<h4 id="盐">盐</h4>
<p>盐过量造成的危害：<strong>缺钙、骨质疏松、高血压、心脏病、中风、胃癌……</strong></p>
<p><strong>1. 吃得越咸，损失的钙越多。</strong></p>
<p>盐里的钠，和尿里排出的钙有很大关系，肾脏每排出 2300 毫克钠（相当于 6 克盐），就会丢失 40～60 毫克的钙。</p>
<p>2012 年中国居民营养与健康状况监测显示：</p>
<ul>
<li><strong>我国居民食盐摄入量每天为 10.5 克，远远超过世界卫生组织推荐的每天 5 克；</strong></li>
<li><strong>而我国人均钙的摄入量只是接近 400 毫克，仅达到推荐值 800 毫克的一半。</strong></li>
</ul>
<p>**2.已有大量研究证实，长期的高钠（盐）饮食与血压升高关系密切。 **</p>
<p><strong>长期高血压造成的损害，没有一个器官能逃得掉。像心脏、肾脏与血管功能关系最密切的器官，往往首当其冲。</strong></p>
<p><strong>高盐饮食是的胃癌推手</strong></p>
<p>胃癌高发国家都有这样的特点：吃得咸，口味重。</p>
<p><strong>中式咸鱼甚至成了著名的致癌物，上了国际癌症研究机构（IARC）的「黑名单」。</strong></p>
<p>据统计，65% 的成年居民食盐摄入超过了 6 克的每日限定量。</p>
<p>2015 版的美国膳食指南推荐中，人均每天摄入钠含量不要超过 1500 毫克。</p>
<p><strong>1500 毫克是什么概念？举几个例子大家就能感受到了。</strong></p>
<blockquote>
<p>100 克椒盐饼干约含 1715 毫克钠。</p>
</blockquote>
<blockquote>
<p>104 克薯片，钠含量 636 毫克，这还是最小包的。</p>
</blockquote>
<blockquote>
<p>80 克牛肉干含钠量约为 1600 毫克。</p>
</blockquote>
<p>普通的二两鸡蛋面中有 3 克盐，约合 1200 毫克钠，占全天用盐量的 60%。</p>
<p><strong>意思就是说，没加任何调料的一碗鸡蛋面，已经相当于两顿饭的用盐量了。</strong></p>
<p>####酒</p>
<p>美国临床肿瘤学会（American Society of Clinical Oncology，ASCO）明确指出：<strong>酒精是重要的致癌因素</strong></p>
<p><strong>事实上酒本身不会引起基因突变，不会直接致癌，真正危险的是酒精在人体内的代谢产物：乙醛。</strong></p>
<p>中国人喝酒更容易致癌——<strong>因为中国人有酒精代谢基因的缺陷。</strong></p>
<p>**喝酒脸红的根本原因是中国人多携带有突变的乙醛脱氢酶基因，导致人体无法有效降解乙醛。**乙醛在体内积累后能导致血管舒张，看起来就是脸红筋涨，形成「喝酒上脸」的现象。</p>
<p><strong>也就是说，在喝酒致癌这件事上，中国人从一出生就吃亏了，就算适量饮酒也吃亏。</strong></p>
<h4 id="明确的致癌物">明确的致癌物</h4>
<p><strong>火腿</strong>、<strong>培根</strong>、<strong>咸菜</strong>、<strong>槟榔</strong>、<strong>霉变的花生玉米(含黄曲霉毒素)</strong></p>
]]></content>
		</item>
		
		<item>
			<title>还信用卡时钱存多了怎么免费取出来？</title>
			<link>https://blog.v5u.win/%E8%BF%98%E4%BF%A1%E7%94%A8%E5%8D%A1%E6%97%B6%E9%92%B1%E5%AD%98%E5%A4%9A%E4%BA%86%E6%80%8E%E4%B9%88%E5%85%8D%E8%B4%B9%E5%8F%96%E5%87%BA%E6%9D%A5%EF%BC%9F/</link>
			<pubDate>Wed, 16 Jan 2019 03:14:17 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E8%BF%98%E4%BF%A1%E7%94%A8%E5%8D%A1%E6%97%B6%E9%92%B1%E5%AD%98%E5%A4%9A%E4%BA%86%E6%80%8E%E4%B9%88%E5%85%8D%E8%B4%B9%E5%8F%96%E5%87%BA%E6%9D%A5%EF%BC%9F/</guid>
			<description>我一直有个良好的习惯就是每个月定期在某一天会把所有的信用卡账单在支付宝上还了，一来可以增加自己的芝麻信用分，二来很方便，可以避免忘记还款又还</description>
			<content type="html"><![CDATA[<p>我一直有个良好的习惯就是每个月定期在某一天会把所有的信用卡账单在支付宝上还了，一来可以增加自己的芝麻信用分，二来很方便，可以避免忘记还款又还能检查多一遍。</p>
<p>　　但是这个月还款后第二天竟然还收到交行发来的催款短信，吓得我赶紧看看出了什么差错，结果发现是我误把还交行的钱又打到了招行上面去。</p>
<p>　　吓死宝宝了，我赶紧先把交行的钱给还上，免得出现逾期还款的污点。</p>
<p>　　本来我已经还了招行信用卡的钱了，但我不小心把应该存到工行信用卡的钱存到招行的信用卡了，这些钱就成了我招行信用卡的“溢缴款”，其实这就相当于我还招行信用卡的时候钱还多了。</p>
<p>　　很多人跟我一样一开始认为既然钱是我自己的又存在我自己的卡里，就算是信用卡取出来也应该不需要费用吧。</p>
<p>　　事实并非如此，我把钱误存到信用卡不仅没有利息可收，换作以前大部分银行取现的时候还需要按照信用卡透支取现一样的收取手续费。</p>
<p>　　只是由于这部分溢缴款的体量和金额都比较小，对于银行来说并不是很好的利润点，渐渐地有些银行就取消了这部分的取现手续费用。</p>
<p>　　虽然大部分银行可以免费提现溢缴款了，但如果不想消费掉的话，应该怎么提现出来也是一个问题。</p>
<p>　　后来我直接打电话给招行客服，客服提醒我直接在掌上生活APP上对溢缴款进行提现即可，还是相当方便。</p>
<p>　　如下图，而且每日还有3次免费可以对溢缴款进行领回的优惠，妈妈再也不用担心我把钱误存进信用卡了。</p>
<p><img src="https://static.rong360.com/gl/uploads/allimg/170531/170-1F531105502951.jpg" alt="img"></p>
<p><img src="https://static.rong360.com/gl/uploads/allimg/170531/170-1F531105556138.jpg" alt="img"></p>
<p>　　<strong>01、多数银行支持免费提现溢缴款</strong></p>
<p>　　经历此事，菜导也顺便对部分银行进行了了解，我发现一般来讲银行都可以免费让客户对溢缴款进行提现，一般有三种方式。</p>
<p>　　第一，直接到柜台取现；第二，提现到该行的储蓄卡，这种方式就像我通过招行的APP直接提现到我招行的储蓄卡里面。</p>
<p>　　第三，只有极少银行可以支持本地甚至异地ATM取现，比如广发还能够到其他行的ATM进行异地取款，免收任何手续费。</p>
<p>　　不过提醒，即便个别银行可以支持异地提现溢缴款，但是记住提现的时候不要超出溢缴款的总金额，要不然也会被当成“透支取现”处理进行收费，费用包括手续费和利息。</p>
<p>　　不过也有的国有银行比如农行，只能靠消费“提现”，而不支持任何其他方式的提现。</p>
<p>　　<strong>02、溢缴款不多的话直接消费也行</strong></p>
<p>　　如果大家在对溢缴款的提现上出现任何疑问，记住最直接的办法就是致电客服询问，这事情不难。</p>
<p>　　如果溢缴款的数额不大，我觉得不用拿出来也可以，直接拿来消费，反正到时信用卡每月还款会优先先把账户中的溢缴款部分进行扣除。</p>
<p>　　<strong>03、妙用溢缴款免费提现支付宝和微信的钱</strong></p>
<p>　　其实，虽然不小心把钱误存进了信用卡里面，存多了会变成溢缴款，但溢缴款其也可以妙用的。</p>
<p>　　现在支付宝、微信取现不是开始要付费了嘛，我发现通过溢缴款也能实现0费用提取支付宝或者微信里面的钱。</p>
<p>　　方法很简单：只要把微信或者支付宝中多出来的钱直接还到信用卡中成为溢缴款，再把溢缴款按照我上面讲的三种方式（不同的银行具体操作可能不同，记住致电银行客服确认）提现，就可以成功避开收费啦。</p>
<p>源文：www.rong360.com/gl/2017/05/31/136287.html</p>
]]></content>
		</item>
		
		<item>
			<title>信用卡刷卡原则推荐</title>
			<link>https://blog.v5u.win/%E4%BF%A1%E7%94%A8%E5%8D%A1%E5%88%B7%E5%8D%A1%E5%8E%9F%E5%88%99%E6%8E%A8%E8%8D%90/</link>
			<pubDate>Wed, 16 Jan 2019 03:13:39 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E4%BF%A1%E7%94%A8%E5%8D%A1%E5%88%B7%E5%8D%A1%E5%8E%9F%E5%88%99%E6%8E%A8%E8%8D%90/</guid>
			<description>1、每执行25+2+1原则，最少一月执行一轮，真实消费最好。25次十元以上，2次大额，1次刷爆（额度一万以下刷爆，一万以上建议到五分之一），</description>
			<content type="html"><![CDATA[<p>1、每执行25+2+1原则，最少一月执行一轮，真实消费最好。25次十元以上，2次大额，1次刷爆（额度一万以下刷爆，一万以上建议到五分之一），月刷卡额最少要超过卡额度三分之一。</p>
<p>2、只刷积分机（多刷0.78或以上的积分机）大超市，名牌商店企业，连锁店，大商场，记住积分是持卡人交给银行的保护费</p>
<p>3、刷超六个行业，不要常在同一台机子上刷太多次数。刷卡金额最好不要整数。</p>
<p>4、网络用卡，网络POS机，手机POS机每月不超过二次。</p>
<p>5、二个月做一笔中等金额分期，分6-9期，三个月一次最低还款，最低还款要在帐单日第二天还。提额客户和新卡前6个月不可分期，最低还款。</p>
<p>6、注意刷卡时间不要超出商户正常营业时间。</p>
<p>7、每周还款一次，前三周还小额，刷爆后要还款至额度的三分之二以内，帐单日前还清所有应还款，征信不显示负债，若不在帐单日前还清欠款，需要还款额度的百分之五十至百分之七赶不上，保持信用卡可用额度在30%-50%之间。</p>
<p>8、多参加银行活动。</p>
<p>9、多买银行产品。</p>
]]></content>
		</item>
		
		<item>
			<title>公司股权设置规则</title>
			<link>https://blog.v5u.win/%E5%85%AC%E5%8F%B8%E8%82%A1%E6%9D%83%E8%AE%BE%E7%BD%AE%E8%A7%84%E5%88%99/</link>
			<pubDate>Wed, 16 Jan 2019 03:12:46 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E5%85%AC%E5%8F%B8%E8%82%A1%E6%9D%83%E8%AE%BE%E7%BD%AE%E8%A7%84%E5%88%99/</guid>
			<description>公司股权设置规则通用的是有四条线， 第一：10%，公司累计持有10%股东，有权申请公司解散； 第二：1/3以上，否决性控股，对公司重大事项具有一</description>
			<content type="html"><![CDATA[<p>公司股权设置规则通用的是有四条线，</p>
<p>第一：10%，公司累计持有10%股东，有权申请公司解散；</p>
<p>第二：1/3以上，否决性控股，对公司重大事项具有一票否决权；</p>
<p>第三：1/2以上，绝对控股权，除重大事项外具有表决权；</p>
<p>第四：2/3以上，完全控股权，可修改公司章程，公司任何事项均具有表决权。</p>
]]></content>
		</item>
		
		<item>
			<title>在文章中  用PS标注 PS什么意思？</title>
			<link>https://blog.v5u.win/%E5%9C%A8%E6%96%87%E7%AB%A0%E4%B8%AD-%E7%94%A8ps%E6%A0%87%E6%B3%A8-ps%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F/</link>
			<pubDate>Wed, 16 Jan 2019 03:09:49 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E5%9C%A8%E6%96%87%E7%AB%A0%E4%B8%AD-%E7%94%A8ps%E6%A0%87%E6%B3%A8-ps%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F/</guid>
			<description>在文章中 用PS标注 PS什么意思？</description>
			<content type="html"><![CDATA[<h1 id="在文章中-用ps标注-ps什么意思">在文章中 用PS标注 PS什么意思？</h1>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<blockquote>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>雨伞布为什么不漏水？</title>
			<link>https://blog.v5u.win/%E9%9B%A8%E4%BC%9E%E5%B8%83%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%BC%8F%E6%B0%B4%EF%BC%9F/</link>
			<pubDate>Wed, 16 Jan 2019 03:09:17 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E9%9B%A8%E4%BC%9E%E5%B8%83%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%BC%8F%E6%B0%B4%EF%BC%9F/</guid>
			<description>雨伞布为什么不漏水？ ​ 一个是布料的因素：伞布的材质有棉、涤纶、碰击布、加涂银胶（用于防晒）等。 现在市场上通常用的是碰击布。碰击布是尼龙与棉纱</description>
			<content type="html"><![CDATA[<p>雨伞布为什么不漏水？</p>
<p>​ 一个是布料的因素：伞布的材质有棉、涤纶、碰击布、加涂银胶（用于防晒）等。</p>
<p>现在市场上通常用的是碰击布。碰击布是尼龙与棉纱混纺或交织的一种织物，其经纬密度较大，并且重量轻，防水性好，可以实现比较轻的伞面确有很好的防雨性。市场上普遍的碰击布是190T，T数可以理解为经纬密度，T数越高，密度越大，相对重量也就越大，防御性就越好。</p>
<p>​ 另一个是外形设计的因素：用物理学的知识来解释一下,雨伞的布不漏水,主要靠的是雨伞整体的物理结构,当整个伞面张开的时候,起物理张力是很大的,就是说伞的面料被很强的拉力拉开,布料每根结构绳之间的间距变的很小,雨滴落在上面,由于雨滴表面的张力,很难透过这样小的孔隙,而伞的大部分地区都有一个斜度,而由于雨滴的重力的斜向分力大于摩擦力,就使得雨滴沿着斜向分力的方向划落,这就是为什么雨伞不漏水的原因.</p>
]]></content>
		</item>
		
		<item>
			<title>一天有24个小时，为什么钟表上只有12个刻度</title>
			<link>https://blog.v5u.win/%E4%B8%80%E5%A4%A9%E6%9C%8924%E4%B8%AA%E5%B0%8F%E6%97%B6%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E9%92%9F%E8%A1%A8%E4%B8%8A%E5%8F%AA%E6%9C%8912%E4%B8%AA%E5%88%BB%E5%BA%A6/</link>
			<pubDate>Wed, 16 Jan 2019 03:08:42 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E4%B8%80%E5%A4%A9%E6%9C%8924%E4%B8%AA%E5%B0%8F%E6%97%B6%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E9%92%9F%E8%A1%A8%E4%B8%8A%E5%8F%AA%E6%9C%8912%E4%B8%AA%E5%88%BB%E5%BA%A6/</guid>
			<description>title: 一天有24个小时，为什么钟表上只有12个刻度 小时和钟表是怎么来的？ 作者：百度知道网友 京虎子 （科普作家） 在人类的绝大部分历史中，一直只有三种</description>
			<content type="html"><![CDATA[<hr>
<h2 id="title-一天有24个小时为什么钟表上只有12个刻度">title: 一天有24个小时，为什么钟表上只有12个刻度</h2>
<h2 id="小时和钟表是怎么来的">小时和钟表是怎么来的？</h2>
<p>作者：百度知道网友 京虎子 （科普作家）</p>
<p>在人类的绝大部分历史中，一直只有三种划分，也就是日、月和年。到将近公元前四千年时，进入文明阶段的古埃及人因为在温饱之外总会干点什么，才觉得现有的即时方法太不精确了。</p>
<p>古埃及的科学家们因此发明了小时。他们把一日划分为24小时，这种划分被一直沿用到今天。他们又将24小时平分，白天12小时，黑夜12小时。</p>
<p>为什么会出现12进位制？莫非是一位双手六指的奇人发明的？</p>
<p>是因为有凌晨和傍晚这两段不属于白天和黑夜的时段。古埃及人一样根据手指头的数目把一天分成十份，每份俩小时，再给凌晨一份傍晚一份，就这样成了不伦不类的24小时制。</p>
<p>小时平分法有个问题，随着季节的变化，白天和黑夜的长短也会变化，古埃及人的解决办法是将小时弹性化，夏天，白天的小时就比黑夜的小时长，冬天过来，各自的12小时不变。由于古埃及人坚持平等分配，使得小时这个新的时间最基本单位使用起来非常不方便，人们不得不发明另外一样东西：计时器。</p>
<p>这就是sundial，也就是中文的日晷。真正的日晷要过了将近三千年才成型，早期的sundial是很简单的根据太阳的影子来确定时间的工具，大致就是在地上插个棍来看看影子的长短。</p>
<p>经过漫长的模糊岁月，到公元前六世纪，像样的日晷出现了，据说是希腊人米利都的阿那克西米尼西发明的。但此时其他地区例如埃及和中国也有了类似的计时工具。中国在周朝时出现了最早的计时工具圭表，分两部分，立在地上测日影的叫表，也就是华表的来历，平放着测表影长度的刻板叫圭，因为时间和太阳的影子有关，才有了光阴这个名称。</p>
<p>中国自古用百刻计时法，把一昼夜均分为一百刻。到了汉代的时候，把一昼夜分为十二个时辰，这是吸收了传入的古埃及的计时法。像圆盘那样的日晷在此之前代替了圭表，成为主要的计时工具，也是舶来品。后来西学东渐，24小时制传入中国，为了相对应，把原来的时辰称为时或者大时，新来的hour就这样被称为小时。也为了相对应，一百刻被减了四刻变成九十六刻，每个时辰八刻，每小时四刻，才有了一刻之说。</p>
<p>日晷读起来就不易，制作起来也不易，要根据所在的纬度进行调整，还得随着季节的变化进行调整。日晷无法精确的一个主要原因是小时本身就不是个固定概念，而是随着季节变长或变短。公元前127年左右，亚历山大城的尼西亚的希帕霍斯提出把24小时固定住，后来亚历山大城的克罗狄斯•托勒密进一步把一小时分为60分钟，一天从正午开始，直到1925年才改为从子夜开始。</p>
<p>但是约定成俗，各地的人们还是习惯沿用旧的不固定小时制，两种计时方法并用了上千年，直到机械钟表出现后，固定小时制才取代了不固定小时制，中国直到西方机械钟表传入之前，时辰一直是不固定的。</p>
]]></content>
		</item>
		
		<item>
			<title>斜杠青年</title>
			<link>https://blog.v5u.win/%E6%96%9C%E6%9D%A0%E9%9D%92%E5%B9%B4/</link>
			<pubDate>Wed, 16 Jan 2019 03:07:56 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E6%96%9C%E6%9D%A0%E9%9D%92%E5%B9%B4/</guid>
			<description>斜杠青年 副业： 园林专业—绿化养护 自己学习—-退休瑜伽老师 出口工艺品销售，参加展会—-代购，保险，影评员 学生—lis主播，滴滴司机 不是每个人都</description>
			<content type="html"><![CDATA[<p>斜杠青年</p>
<p>副业：</p>
<p>园林专业—绿化养护</p>
<p>自己学习—-退休瑜伽老师</p>
<p>出口工艺品销售，参加展会—-代购，保险，影评员</p>
<p>学生—lis主播，滴滴司机</p>
<p>不是每个人都可以成为一个斜杠</p>
<p>成活成本高了，不得不做副业</p>
]]></content>
		</item>
		
		<item>
			<title>思考快与慢</title>
			<link>https://blog.v5u.win/%E6%80%9D%E8%80%83%E5%BF%AB%E4%B8%8E%E6%85%A2/</link>
			<pubDate>Wed, 16 Jan 2019 03:06:53 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E6%80%9D%E8%80%83%E5%BF%AB%E4%B8%8E%E6%85%A2/</guid>
			<description>title: 思考快与慢 思考快与慢 还有我们在创业的时候，总会想到发财上市，但其实中小企业生存率非常低，美国能活5年以上的企业只有35%，而在中国能活5年</description>
			<content type="html"><![CDATA[<hr>
<h2 id="title-思考快与慢">title: 思考快与慢</h2>
<p>思考快与慢</p>
<p>还有我们在创业的时候，总会想到发财上市，但其实中小企业生存率非常低，美国能活5年以上的企业只有35%，而在中国能活5年以上的中小企业不到7%，这才是现实。</p>
<p>创业者们仍然在前赴后继的跳入火坑，把自己一生的积蓄扔到创业的市场中，只因为他们有一个坚定地信念，我会和其他人不一样。这就是过度乐观所带来的损失。</p>
]]></content>
		</item>
		
		<item>
			<title>如何赚钱</title>
			<link>https://blog.v5u.win/%E5%A6%82%E4%BD%95%E8%B5%9A%E9%92%B1/</link>
			<pubDate>Wed, 16 Jan 2019 03:06:24 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E5%A6%82%E4%BD%95%E8%B5%9A%E9%92%B1/</guid>
			<description>title: 如何赚钱 如何赚钱： 从消费者转换为生产者，创造自己的产品，多简单都行，只要开始了，后边水到渠成。 来源：[不投简历，如何获得月薪2万的工作][</description>
			<content type="html"><![CDATA[<hr>
<h2 id="title-如何赚钱">title: 如何赚钱</h2>
<p>如何赚钱：</p>
<ol>
<li>从消费者转换为生产者，创造自己的产品，多简单都行，只要开始了，后边水到渠成。</li>
</ol>
<pre><code>来源：[不投简历，如何获得月薪2万的工作][1]
</code></pre>
]]></content>
		</item>
		
		<item>
			<title>汉乡摘录</title>
			<link>https://blog.v5u.win/%E6%B1%89%E4%B9%A1%E6%91%98%E5%BD%95/</link>
			<pubDate>Wed, 16 Jan 2019 03:05:38 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E6%B1%89%E4%B9%A1%E6%91%98%E5%BD%95/</guid>
			<description>title: 汉乡摘录 论高贵——汉乡 云琅摸摸霍光圆圆的脑袋道：“这就是我们因为自诩高贵而应该付出的代价！” “高贵之心很重要吗？” “很重要，这会让我们怜惜</description>
			<content type="html"><![CDATA[<hr>
<h2 id="title-汉乡摘录">title: 汉乡摘录</h2>
<p>论高贵——汉乡</p>
<p>云琅摸摸霍光圆圆的脑袋道：“这就是我们因为自诩高贵而应该付出的代价！”</p>
<p>“高贵之心很重要吗？”</p>
<p>“很重要，这会让我们怜惜自己，不鲁莽做事，不轻易的舍弃性命，对他人有怜悯之心，以天下大任为己任，让这个世界因为有你而变得更加精彩。”</p>
<p>“可是，这样做了对我们有什么好处呢？”</p>
<p>云琅笑道：“没好处，甚至有坏处。”</p>
<p>“没好处的事情为什么要做？”</p>
<p>“这就是另外一个问题了，小子，你可能不知道，高贵之人眼中的好处跟一般人眼中的好处不太一样。你年纪再大一点就会明白。‘’</p>
<ul>
<li>
<ul>
<li>*对于霍二传递过来小鹿一般怯生生的眼神，云琅一般都是无视的。</li>
</ul>
</li>
</ul>
<p>　　坐在他桌子上的几个小王八蛋，没有一个是省油的灯。</p>
<p>　　怂恿霍二这么干的霍一，埋着头把饭吃的飞快，或许霍一心中有愧，云琅却没有惩罚他，能忽悠别人也是一种很好地能力，应该奖励而不是惩罚。</p>
<p>　　惩罚霍二的最主要原因也不是因为他弄坏了菜圃，而是因为他明知道弄坏菜圃会有惩罚，还要去做。</p>
<p>　　这就是愚蠢了。</p>
<p>　　大人在教导孩子的时候，其实就是在进行一场悄然无声的战争，小家伙们会通过一系列的犯错，来试探大人容忍的底线，而大人们则通过一次次的惩罚，来告诉他这个世界上还是有规矩的，有些事能做，有些事不能做。</p>
<p>　　惩罚孩子的时候呢，既不能将他探索的勇气一下子给打没了，也不能放任自流，这中间的尺度需要灵活掌握，很考验大人的智慧。<!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>个人网站是否需要备案</title>
			<link>https://blog.v5u.win/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E5%A4%87%E6%A1%88/</link>
			<pubDate>Wed, 16 Jan 2019 03:03:31 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E5%A4%87%E6%A1%88/</guid>
			<description>ShunYea初期制作，我觉得可以考虑国外，可以避免上述很多问题，否则你是娱乐性网站，估计又要涉及很多前置审批的问题。 举个例子，多年前办过一</description>
			<content type="html"><![CDATA[<p><strong>ShunYea</strong>初期制作，我觉得可以考虑国外，可以避免上述很多问题，否则你是娱乐性网站，估计又要涉及很多前置审批的问题。  举个例子，多年前办过一个游戏论坛，也就是普通玩家分享攻略心得之类的。结果通管局告诉我去文化厅备案，我说我这个一个普通讨论社区要啥文化厅备案？通管局不跟你讲理，就拿某某条款说事，反正你也说不过他，然后我就去文化厅了，一听我是做游戏的，告诉我你准备好一千万注册资本，我瞬间石化了……后来人家文化厅告诉我，以为我做游戏是做网游的，原来只是个普通游戏论坛，这个不用到文化厅备案。然后我有电话通管局，然后那人说既然文化厅不用就不用，接着到通管局完成剩下的手续……  这些来来回回的折腾，浪费人力物力不说，通管局我觉得就是完全不讲人性，不跟你合理沟通，只要你一讲就拿条款说事，我也不想说是某省的通管局。当然各个省不一样，我省是非常严格，早就的上述结果。  你的站我觉得初期可以放国外，等建了有人气了，最终再考虑移回国内，那个时候我觉得你专做这个也无所谓了，因为大了，应该可以盈利或是可以成立你的团队了，你团队里面有专人来做公关了。否则我觉得你就等着通管局天天来骚扰你吧（当然我说了各个省不一样，或许你们省备案了就一百年没人问津，这个最好）。  最后说一点，很多人的思维，就是借用某人的说法，你的站有一百人访问时候，你在考虑访问量一亿时候的事，很多站长眼大肚小，做点事实，扎扎实实来。也就是，你的站有起色了再说，并不是说放国外就不会有起色。</p>
<p><strong>kisshere</strong> 嗯，好的，非常感谢你，这是我曾经问过的一个问题 <a href="http://www.v2ex.com/t/126654">http://www.v2ex.com/t/126654</a> ，我也想过先把站点架设在linode 东京节点，用七牛cdn图片和js，但是以后转移到国内，这备案一个多月期间网站不能访问，我得流失多少ip和uv啊!如果我以个人的名义做娱乐性微博社区，真的还要前置审批或是那些乱七八糟的专项备案么?不能先做个积极向上页面混过备案，以后再来做社区，这样做大了会不会被发现然后直接拔网线?另外，弱弱问一下你是四川的么？诚恳向你请教，谢啦!</p>
<p><strong>sophymax</strong>还是说用户量不到一百的时候不要去考虑用户量10W的事情，备案不是问题，个人备案才是问题，达到一定用户量，网站里面有互动，放在境内备案网站被封掉的概率不比放境外小，境外还能有封掉后换ip的自由，国内被封掉，备案号就注销了，国内再无容身之地，另外，放国内备案号注销域名也就差不多加黑名单了，域名就废了，用心做站的话，达到一定用户量后想办法拿企业备案，个人备案随便找一条条款就能把网站封掉，这个条款还不一定是法律条文，而是当地的某个地方规定。所以，备案对一个稍大点的网站时必要的，但是这个备案绝不是个人备案，而是企业备案，个人备案并不能让网站更安全，反而会有更多不必要的麻烦，在有办法拿到正规的企业备案前，还是建议网站放亚洲其它地区的服务器上，另：个人备案没办法平滑地转成企业备案，北京是明令禁止，其他省份也要走冗长的审批流程，实际操作中也都是先注销个人备案再关站申请企业备案来的保险，之前也曾经备案过，后发现个人备案造成的风险要大于放在海外，因为几乎所有网站必定会出现个人网站禁止出现的东西，比如你的网站有个用户评论、再比如你转载了篇新闻或者发表了对时下某个事情的看法和分析，抠一下当地相关法规的话，会发现这写都是不允许个人网站做的，再比如网站里面有xx爱好、技术交流、动漫研究、程序员之类的词语，规则上也是不允许个人网站做的，有任何小群体性质的网站个人做都是违规的，所以个人备案是没必要去折腾的，只会有数不尽的麻烦和不确定性，备案对稍具规模的网站是必要的，但这里的备案是指企业备案</p>
<p><strong>kisshere</strong> 谢谢，那你的意思是国内大部分流量大的社区早期都是国外服务器?那网上一些很牛叉的个人站长，做到日pv上千万的论坛(参考猴岛论坛)，他们早期是选择国内还是国外的?另外，貌似国内一些广告联盟也要要求网站必须备案，另外，不是北京，像四川这样政治不敏感的地区，个人备案也会查得如此之严?</p>
<p><strong>sophymax</strong>   不一定，比如人家本来就是一个有实力的群体或者公司，弄了个网站，也没有理由放国外，猴岛论坛…….可能我的圈子里没人上这个网站吧，我不太了解，看起来是个大站，站长经历了什么他自己清楚，我了解的是知乎，在用户量很惊人的时候才从日本迁回国内，另外广告联盟，很多个人站长办理国内备案的主要原因就是国内的广告联盟要备案，也就是说他们为了广告收入才办理的备案，网站速度并不是主因，如果用户量真的达到大到能有广告收入的时候，想用国内的广告的话是需要备案，这也是权衡利弊后得出的决策，如果他们能办理企业备案也绝不会办个人备案的。网站能有收入那也是用户量有XXX万的时候需要考虑的问题(月光博客牛逼不，他的广告收入估算值也就才刚破四位数，个人根本不能指望着做网站致富，就是提升下知名度、多交些朋友多些机会，网站的用户变现能力很水的)，审查的严不严，这个不好说，平常有可能不会查，但比如哪天领导说我们要扫黄打非，人家就会去找茬，老老实实做博客的被整得关站，但也会有大量做黄色网站赌博网站的多年来高枕无忧，其实，北上广这些城市做网站比其他省份要省心的多，四川严不严我不知道，但是正经做站的话北京比四川要省心（参考36kr，这个是个人备案，在四川很难允许个人备案做这样规模的新闻类博客）…..虽然政治不敏感，但是公务员有指标啊，需要罚款挣外快啊，需要政绩啊，小地方的官僚更把自己当成官僚。国家前几年就说个人可以做论坛，放开了专项备案的限制，但至今也没有省份明说允许个人做，都是偷偷摸摸地做，因为出了事还是找下属单位的麻烦，非发达地区尤甚，备不备案看你个人情况。牛叉的个人站长，有多年来平安无事的，也有备案取消域名被拉黑关站的，还有把网站放国外的正常访问的以及放到国外天天发表愤青言论被GFW屏蔽的，都是他们自己的决策造成的结果，没有完美的方案，大家只是把各种可能性的利弊都列举出来，备不备案看你自己的情况</p>
]]></content>
		</item>
		
		<item>
			<title>派生法又包括前缀和后缀法</title>
			<link>https://blog.v5u.win/%E6%B4%BE%E7%94%9F%E6%B3%95%E5%8F%88%E5%8C%85%E6%8B%AC%E5%89%8D%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E6%B3%95/</link>
			<pubDate>Wed, 16 Jan 2019 02:57:30 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E6%B4%BE%E7%94%9F%E6%B3%95%E5%8F%88%E5%8C%85%E6%8B%AC%E5%89%8D%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E6%B3%95/</guid>
			<description>其中派生法最为重要，由它演化而来的单词最多。 派生法又包括前缀和后缀法。一般情况下，前缀改变词义，但不改变词性；后缀改变词性，但不改变词义。这</description>
			<content type="html"><![CDATA[<p>其中派生法最为重要，由它演化而来的单词最多。</p>
<p>派生法又包括前缀和后缀法。一般情况下，前缀改变词义，但不改变词性；后缀改变词性，但不改变词义。这个派生法，也就是我们常说的词根词缀法。</p>
]]></content>
		</item>
		
		<item>
			<title>navigationbar status bug</title>
			<link>https://blog.v5u.win/posts/ios/ios-navigationbar-status-bug/</link>
			<pubDate>Wed, 16 Jan 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-navigationbar-status-bug/</guid>
			<description>源起： 遇到一个问题，当A-&amp;gt;B, A隐藏navigationBar，设置了statusBar的颜色; B反之。 当navigationcon</description>
			<content type="html"><![CDATA[<p>源起：</p>
<p>遇到一个问题，当A-&gt;B, A隐藏navigationBar，设置了statusBar的颜色; B反之。</p>
<p>当navigationcontroller短促滑动返回 pop失败的时候，有大概率会出现navigationbar隐藏的bug</p>
<p>原因：这个方法引起的 <code>- (UIStatusBarStyle)preferredStatusBarStyle</code>,不改变状态栏颜色的话，这个bug是不会出现的.</p>
<p>解决：导航控制器中重写childViewControllerForStatusBarStyle方法：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<blockquote>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>php session 不能跨页面传递</title>
			<link>https://blog.v5u.win/php-session-%E4%B8%8D%E8%83%BD%E8%B7%A8%E9%A1%B5%E9%9D%A2%E4%BC%A0%E9%80%92/</link>
			<pubDate>Wed, 16 Jan 2019 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/php-session-%E4%B8%8D%E8%83%BD%E8%B7%A8%E9%A1%B5%E9%9D%A2%E4%BC%A0%E9%80%92/</guid>
			<description>session错误 确认当前页面session有没有添加成功 debug可不可以讲session值跨页面传递 设置php.ini文件session</description>
			<content type="html"><![CDATA[<p>session错误</p>
<ol>
<li>确认当前页面session有没有添加成功</li>
<li>debug可不可以讲session值跨页面传递</li>
<li>设置php.ini文件session.auto_start=1,此时use_cookies=0，use_only_cookies=0</li>
</ol>
<p>验证：</p>
<p>php -i 查看PHP配置</p>
<p>php.ini phpinfo()对比配置文件和实际环境配置</p>
]]></content>
		</item>
		
		<item>
			<title>vagrant&amp;homestead的使用</title>
			<link>https://blog.v5u.win/vagranthomestead%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
			<pubDate>Fri, 11 Jan 2019 07:32:39 +0000</pubDate>
			
			<guid>https://blog.v5u.win/vagranthomestead%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
			<description>~/Homestead 目录下执行下面的命令 初始化虚拟机vagrant up 登录vagrant ssh 退出虚拟机exit 关闭 Homesteadvagrant halt</description>
			<content type="html"><![CDATA[<p>~/Homestead 目录下执行下面的命令</p>
<ul>
<li>初始化虚拟机vagrant up</li>
<li>登录vagrant ssh</li>
<li>退出虚拟机exit</li>
<li>关闭 Homesteadvagrant halt</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>2018-年终总结</title>
			<link>https://blog.v5u.win/2018-%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link>
			<pubDate>Sat, 29 Dec 2018 07:07:56 +0000</pubDate>
			
			<guid>https://blog.v5u.win/2018-%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid>
			<description>做个复盘 TODO： 年初购买了齐俊杰的粉丝圈和读书圈，坚持读书和学习投资知识，持续时间半年，断续时间一年。 今年的读完的书有：正书：《指数基金投</description>
			<content type="html"><![CDATA[<p>做个复盘</p>
<p>TODO：</p>
<ul>
<li>
<p>年初购买了齐俊杰的粉丝圈和读书圈，坚持读书和学习投资知识，持续时间半年，断续时间一年。</p>
</li>
<li>
<p>今年的读完的书有：正书：《指数基金投资指南》 《从0到1》《小岛经济学》《黑客与画家》《番茄工作法》闲书：《梦想为王》《五行天》《逍遥游》《我是杀毒软件》《赘婿》其中正书推荐指数基金，再此感谢@熊猫没了黑眼圈 购买并分享给我，使我对基金有了一个清晰的了解。闲书尤其推荐梦想为王，为此购买了一个足球来作为纪念。</p>
</li>
<li>
<p>建立并启动了书香门第计划，以此为始点，下半年藏书数量大幅增长。</p>
</li>
<li>
<p>参与了项目架构调整，cocoapods组件化。</p>
</li>
<li>
<p>研究Xcode代码文档使用和规范并成文两篇</p>
</li>
<li>
<p>PHP学习，完成一个简单的在线订单系统。</p>
</li>
<li>
<p>年终听完JT叔叔的中医基础理论，幸甚，使我终于得窥真正的中医门径。</p>
</li>
<li>
<p>完整的使用了一次“番茄工作法”，收获巨大。</p>
</li>
<li>
<p>结了个婚。</p>
</li>
</ul>
<p>GET：</p>
<ul>
<li>
<p>入门了价值投资，学会了指数基金的正确使用姿势。</p>
</li>
<li>
<p>每月财务分析终于形成习惯。简化了个人记账流程，只关注信用卡支出就好了，感谢无现金社会。</p>
</li>
<li>
<p>完整的了解了番茄工作法，并延伸了解“看板管理”</p>
</li>
<li>
<p>个人博客各种折腾之后，终于收心，归于hexo和WordPress共用。购买了一台vps，开启了服务器折腾之路。:)</p>
</li>
<li>
<p>找到了一个合适自己的发型，重新开始蓄发。</p>
</li>
<li>
<p>图书馆计划，藏书下半年大幅增长主要是因为不是我买的，看来对于我这么一个抠者来说，欲望还是需要借她人之手实现。</p>
</li>
<li>
<p>PHP thinkPHP5学完，由此PHP方面终于进入框架阶段。</p>
</li>
<li>
<p>Python方面确定只关心scrapy方面，其他方向暂不涉及。收心。</p>
</li>
<li>
<p>娶了个媳妇算是今年最大的一个收获，嗯，今年主要的工作就是干这么一个事儿。</p>
</li>
</ul>
<p>弄完发现我的时间颗粒度竟然这么大，以年为单位，以日为单位。我果然是个穷人——个人时间不值钱。</p>
]]></content>
		</item>
		
		<item>
			<title>mac-nginx-php-mysql</title>
			<link>https://blog.v5u.win/posts/php/php-mac-nginx-php-mysql/</link>
			<pubDate>Tue, 25 Dec 2018 10:04:25 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/php/php-mac-nginx-php-mysql/</guid>
			<description>[TOC] 安装环境 brew install nginx brew install php brew install mysql 配置环境 /usr/local/homebrew/etc/nginx/nginx.conf /etc/php-fpm.conf 启动环境 brew services start nginx php-fpm（启动php-fpm） nginx.conf php-fpm.conf</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h3 id="安装环境">安装环境</h3>
<ul>
<li>brew install nginx</li>
<li>brew install php</li>
<li>brew install mysql</li>
</ul>
<h3 id="配置环境">配置环境</h3>
<ul>
<li>/usr/local/homebrew/etc/nginx/nginx.conf</li>
<li>/etc/php-fpm.conf</li>
</ul>
<h3 id="启动环境">启动环境</h3>
<ul>
<li>brew services start nginx</li>
<li>php-fpm（启动php-fpm）</li>
</ul>
<!-- raw HTML omitted -->
<h4 id="nginxconf">nginx.conf</h4>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="php-fpmconf">php-fpm.conf</h4>
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>scrapy</title>
			<link>https://blog.v5u.win/posts/python/python-scrapy/</link>
			<pubDate>Tue, 18 Dec 2018 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/python/python-scrapy/</guid>
			<description>scrapy crawl m530pcrawl会去搜搜cmd目录下的scrapy.cfg 有些Scrapy命令(比如 crawl)要求必须在Scrapy项目中运行。 您</description>
			<content type="html"><![CDATA[<p><code>scrapy crawl m530p</code>crawl会去搜搜cmd目录下的scrapy.cfg</p>
<p>有些Scrapy命令(比如 <a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/commands.html#std:command-crawl"><code>crawl</code></a>)要求必须在Scrapy项目中运行。 您可以通过下边的 <a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/commands.html#topics-commands-ref">commands reference</a> 来了解哪些命令需要在项目中运行，哪些不用。</p>
]]></content>
		</item>
		
		<item>
			<title>tp5 db</title>
			<link>https://blog.v5u.win/posts/php/php-tp5-db/</link>
			<pubDate>Tue, 18 Dec 2018 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/php/php-tp5-db/</guid>
			<description># 表达式 不区分大小写， # EQ = # NEQ &amp;lt;&amp;gt; 不等于 # LT &amp;lt; # ELT &amp;lt;= # RT &amp;gt; # ELT &amp;gt;= # BETWEEN BETWEEN * AND * # NOTBETWEEN NOTBETWEEN * AND * # IN IN (*,*) # NOTIN NOT IN (*,*) $sql = $db-&amp;gt;where(&#39;id&#39;,&#39;between&#39;,&amp;quot;1,5&amp;quot;)-&amp;gt;buildSql();</description>
			<content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-mysql" data-lang="mysql"><span style="display:flex;"><span>    <span style="color:#75715e"># 表达式   不区分大小写，
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e"># EQ    =
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e"># NEQ   &lt;&gt;	不等于
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e"># LT    &lt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e"># ELT   &lt;=
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e"># RT    &gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e"># ELT   &gt;=
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e"># BETWEEN   BETWEEN * AND *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e"># NOTBETWEEN    NOTBETWEEN * AND *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e"># IN    IN (*,*)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e"># NOTIN NOT IN (*,*)
</span></span></span></code></pre></div><p><code>$sql = $db-&gt;where('id','between',&quot;1,5&quot;)-&gt;buildSql();</code></p>
]]></content>
		</item>
		
		<item>
			<title>解读一富爸爸现金流游戏</title>
			<link>https://blog.v5u.win/%E8%A7%A3%E8%AF%BB%E4%B8%80%E5%AF%8C%E7%88%B8%E7%88%B8%E7%8E%B0%E9%87%91%E6%B5%81%E6%B8%B8%E6%88%8F/</link>
			<pubDate>Mon, 10 Dec 2018 06:20:40 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E8%A7%A3%E8%AF%BB%E4%B8%80%E5%AF%8C%E7%88%B8%E7%88%B8%E7%8E%B0%E9%87%91%E6%B5%81%E6%B8%B8%E6%88%8F/</guid>
			<description>来自: 船长(富爸爸现金流俱乐部) 2012-04-13 21:13:58 首先，在开始现金流游戏之前，你要明确自己的目的。虽然这个产品被称为游戏，但你要明白，这不仅仅是款游戏而已</description>
			<content type="html"><![CDATA[<h3 id="来自nbsp船长1富爸爸现金流俱乐部nbsp2012-04-13-211358">来自: <a href="https://www.douban.com/people/1090754/">船长</a>(富爸爸现金流俱乐部) 2012-04-13 21:13:58</h3>
<p>首先，在开始现金流游戏之前，你要明确自己的目的。虽然这个产品被称为游戏，但你要明白，这不仅仅是款游戏而已，无论你是下载得来的还是买来的，你的目的都不应该是简单地获胜，更不是为了单纯的”快乐”。如果你把它当作一般的游戏去玩，那你不但糟蹋了这个产品，也糟蹋了你的时间。 </p>
<p>现金流游戏的规则比较简单：脱离老鼠跑道，进入快车道，获得足够的被动收入，你就赢了。不过想要完成这个过程，你必须要完成一些环节，比如掷色子、选择不同规模的贸易机会，选择使用现金或信用卡付帐、选择是否以及何时偿还银行贷款等等。 </p>
<p>在所有的游戏环节中，最重要的当属”把贸易后的各项数据填入（或拖拽入）财务报表中”。这个过程曾经让许多第一次玩现金流游戏的朋友吃到苦头，有些人可能直到现在还对游戏的这个设定耿耿于怀，因为这个过程复杂且麻烦，一项弄错游戏就进行不下去，而且，没有这个环节，似乎游戏可以进行得更流畅。其实，这个填表的环节恰恰是游戏的精华所在。我玩现金流以来收获最多的部分就是来自这里。为什么这样说呢？ </p>
<p>聪明的朋友可能已经想到了，这个环节就是清崎先生经常提到的”点金术”————学习如何填写、阅读财务报表。熟读富爸爸的朋友一定能明白我这样说的理由。整个富爸爸系列文字量相当庞大。累加在一起差不多快有一部辞典厚了。不过，其中的大部分内容都是罗伯特讲故事和推理的过程，真正结论性的东西并不是很多，这需要你自己去整理。我的感受是，穷人和富人除了在思想上差异巨大外，一个很重要的技术性层面的区别就是穷人不了解财务报表，而富人却十分精通。所以，同样一笔交易，可能穷人只从中看到获利的希望，富人却从财务报表中看到失败的端倪。有时候，穷人认为不屑一顾的交易，富人却能从财务报表中看到它的真正价值，从而从中获利。如果你不懂财务报表，投资于你而言就是赌博。 </p>
<p>同样的，所谓投资的风险也正在于你是否能读懂财务报表。如果你能看懂财务报表，就能更好的控制风险，如果不能，那你就只能祈祷了。但作为普通人，我们中的大多数人对财务报表感到十分陌生。而且，对于工薪族来说，也不大有机会接触到财务报表。为了帮助人们更好的学习阅读、填写财务报表，了解现金流在现实生活中的重要作用，清崎设计了现金流这个游戏。这也是我把现金流游戏称为富爸爸产品精华的原因所在（详见拙作《原创：对富爸爸系列的批判性阅读》）。 </p>
<p>在推广现金流游戏中，清崎发现大多数人（多数是中产阶级）对于财务报表理解得十分困难，而且他们几乎总是弄不清资产和负债的区别（我刚开始玩现金流的时候也犯过这样的错误）。为了帮助人们更好的进行游戏（同时也是为了更好地促进现金流游戏的销售），清崎从一个9岁儿童的阅读水平出发，写了一本十分通俗易懂的小册子，来帮助人们理解现金流游戏中的一些概念。这本小册子，就是大家熟悉得再不能熟悉的《富爸爸，穷爸爸》了，这便是富爸爸系列丛书的由来。 </p>
<p>我之所以说这些，无非是希望大家对现金流游戏在来龙去脉上有一个总的了解。如果你不了解这些，游戏当然也可以玩下去，不过，效果一定是大打折扣。 </p>
<p>现金流游戏为我们模拟了一个和现实生活高度相似的财务世界。在这个世界里，有职业，有工资、住房贷款、奖金，慈善捐助、子女抚养费用、日常支出、额外购物支出（屈服于购物欲望的表现，这一点很真实）、失业（在中国叫下岗，虽然让人很难以接受却是真实生活的一部分），还有为数众多的机会（在老鼠跑道上机会卡占据了1/2左右，可能是清崎认为”机会”无处不在吧？） </p>
<p>当然，我们也不要苛求这个游戏和真实生活完全吻合，事实上，为了增加游戏的乐趣，也为了降低难度，罗伯特把机会的比例和出现的几率人为地扩大了。对于象巴非特这样伟大的投资者，一年能寻找到一两个合适的投资机会就已经算成功了。而交易再频繁的房地产商也不大可能每隔1天就面临一次交易机会。而且，为了奖励离开老鼠跑道的玩家，系统设定把玩家原来的月被动收入增加100倍，变成每日常规收入（这等于把你的收入扩大了3000倍！！！）这些情况在现实生活中显然是不可能存在的。 </p>
<p>不过，这并不影响我们从游戏中汲取营养。清崎是希望玩家能够从游戏中学到实实在在的财务技能。更重要的，是在游戏中建立一种思维方式，一种能够在潜意识里发挥巨大作用的思维方式！！</p>
<p>《穷爸爸富爸爸》的内容应该是有一些道理的。但读过这些书后，你们的实际生活是否有什么实质性的改变，至少是观念上的真正改变呢？如果你认真思考这个问题，可能会回答没有。为什么？书中所说的道理你都明白了啊，为什么一到实际问题你就回到原来的轨道上去了呢？ </p>
<p>因为你只是在意识层面接受了作者的观点。在潜意识里，你可能仍旧充斥着怀疑，甚至是抵触。富爸爸并没有改变你的思维方式。 </p>
<p>但是，通过玩现金流游戏，你会通过自己的”实践”（从相对于阅读而言）发现，当你运用错误的思维方式去进行游戏，会引发什么样的后果。相对应的，没有人逼迫你该怎么做，但是，如果你想早点离开那该死的老鼠跑道，就应该运用一些技巧。非常幸运的，这些在游戏中帮助你跳出老鼠赛跑的技巧在生活中也一样实用。一旦你掌握了这些技巧，并在游戏中形成了正确的思维方式（这一点需要大量的练习），在理论上，你就可以在现实生活中开展这个现金流游戏了。当然，在这个转变过程中，你还需要一点胆量。在生活中，有谋无勇的人远远多过有勇无谋的人。帮助你克服恐惧、迈出第一步的书籍有很多，几乎所有的成功励志书籍都有这样的功能。但帮助你克服思维方式中固有缺陷，帮助你学习理财技能的书却不多。大家不一定都去读富爸爸，但你不能不了解以财务报表为基本内容的财务知识。一旦你养成记录、阅读财务报表的习惯，你离真正的投资者就不远了。</p>
]]></content>
		</item>
		
		<item>
			<title>对富爸爸系列的批判性阅读！</title>
			<link>https://blog.v5u.win/%E5%AF%B9%E5%AF%8C%E7%88%B8%E7%88%B8%E7%B3%BB%E5%88%97%E7%9A%84%E6%89%B9%E5%88%A4%E6%80%A7%E9%98%85%E8%AF%BB%EF%BC%81/</link>
			<pubDate>Mon, 10 Dec 2018 06:14:20 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E5%AF%B9%E5%AF%8C%E7%88%B8%E7%88%B8%E7%B3%BB%E5%88%97%E7%9A%84%E6%89%B9%E5%88%A4%E6%80%A7%E9%98%85%E8%AF%BB%EF%BC%81/</guid>
			<description>声明：本文由ydy135原创，请尊重作者劳动，如需转载，请注明作者和出处。 来这里的朋友应该对富爸爸系列不会陌生，但真正把富爸爸系列看全的，并</description>
			<content type="html"><![CDATA[<p>声明：本文由ydy135原创，请尊重作者劳动，如需转载，请注明作者和出处。 </p>
<p>来这里的朋友应该对富爸爸系列不会陌生，但真正把富爸爸系列看全的，并真正能够看懂的 <br>
却并不是很多，我看到这里谈富爸爸系列下载的人很多，但谈自己阅读体会的却很少，所以想在此献丑，和大家交流一下我这4年来的阅读体会。 <br>
关于致富、理财、成功之类的书我看了很多，但富爸爸系列是给我印象最深的。我在2000年接触这个系列的第1本，至今已经4年了。如今，除了第5本——年轻退休，我还没来得及读之外，其余的我基本都读过了，而现金流游戏也是我近期正在努力揣摩的，可以说，我是清崎的忠实读者。 <br>
有些人说，罗伯特的书1本烂过1本，这有点言过其实，不过罗伯特的灌水本领是大家都晓得的。总的来说，前3本的内容（富爸爸，现金流象限，投资指南）比较实用，也比较紧凑。后3本就有骗钱的嫌疑了。尤其是最后1本，那厚达300页的内容有50页足够写了，不过是对原来早已说过的退休金制度的变革的看法，却偏偏要说是什么预言，有点夸张了。 <br>
不知大家注意没有，在产品推荐列表中居后的”现金流”游戏却是所有富爸爸书籍的起源。在我看来，第一本富爸爸不过是为了推销现金流101，儿童版及202的小册子。在罗伯特的电脑里，它们甚至支离破碎，无法成为一个完整的系统，更不用说成书了。但罗伯特的合作者——莎伦女士，却是位优秀的作家，是她把不善文字的罗伯特的小册子充实成一本象模象样的书。但结果的确是出乎了罗伯特和莎伦的意料————本来作为副产品的东西却喧宾夺主，成为宠儿！ <br>
后来的事情，大家就十分了解了，我无须多说。但我们不要忘记，让众多投资者支持罗伯特，把他推举为财商启蒙者的重要因素不只有他的书稿，更有他的现金流游戏的作用，所以，从某种意义上讲，罗伯特的现金流游戏才是系列产品中的精华！如果说现金流是母鸡，那富爸爸系列丛书就是这只母鸡下的蛋。可惜今天的富爸爸读者过多的关注着那些鸡蛋，却无视母鸡。 <br>
关于这个现金流游戏，我正在玩，感慨颇多，把它和富爸爸书籍相结合发挥的强大作用让我感到震惊。有时间，我会单独开贴和大家交流我对这个游戏的感悟的。 <br>
富爸爸系列著作的销量虽1本不如1本（边际效应递减），但含金量在前3本中却是1本大过1本的。 <br>
随着清崎对财商理念讲解的逐步深入，问题变得越来越具体，越来越复杂，内容也越来越枯燥了（这也是销量递减的原因）。不过如果你想真正学到东西，还是要把这些枯燥的东西吃透才行，如果你只满足于看第1本（富爸爸，穷爸爸），那说明你离财富的距离还很远。 <br>
第2本书用现金流象限这一独特的理论把人分为4种。对于大多数读者而言，我们都处于E象限，这本书主要就是写给E象限的人们的。了解不同象限人们的思维方式，对自己所处象限的思维方式进行反省并确定适合自己的道路，是罗伯特对现金流象限读者的期望。 <br>
第3本虽然名为投资指南，但实际内容和我们通常理解的投资（证券投资）相去甚远，认真读过此书的朋友会发现，罗伯特是不大提倡人们通过购买股票来积累财富的。虽然他本人也很推崇巴非特的思想（我也是），但他更侧重与强调大家学习巴非特的投资理念，而不是投资手段。要知道，这个世界上只有一个巴非特，几乎没有人能够重复巴非特的奇迹，而且现实中股票的风险不是一般人能够轻易控制的。罗伯特.清崎的建议是：建立你自己的企业，把你的企业变成别人的投资，从而通过出售你的投资来积累财富。同时，建立企业还有一个好处——可以利用企业产生的现金流购买为数众多的能够带来大量被动收入的投资项目。从而确保自己的财富不会因企业的经营状况而朝不保夕，这也是国内大多数企业最容易忽略的。 </p>
<p>在罗伯特陈述的众多思想中，我认为最有价值的有两句。 <br>
第一句——如果你想寻求建议，一定要向已经在此领域中取得成功的人请教。 <br>
第二句——先是努力”成为”，然后才是努力去”做”。 </p>
<p>之所以推荐第一句，是因为它让我不再沉迷对所谓的”成功学”的盲目追求和信任。因为罗伯特的提醒，我认识到许多所谓的成功学大师只是文字工夫过人罢了，他们并不是真正的商人，如果离开他们所写的文字，他们并算不上”成功”，事实上，是我们这些读者导致了他们的成功。北京有个王小平，就比较可笑，她的那本《本领恐慌》让我明白，在现代社会，想通过有选择的抄袭成名是多么容易。 <br>
推荐第二句是因为，太多的时候我急功近利，结果往往事与愿违。在寻求具体方法的道路上我几乎迷失了自己。事实上，我们无法通过做和别人一样的事情取得同样的成功，成功在某种意义上是不可复制的。但我们却可以通过学习别人的思想来改变自己，充实自己！因为罗伯特的提醒，我认识到，如果在思想上没有一个根本的改变，即使做了和那些成功人士一样的事情，也无济于事，所以，我对富爸爸的第一本也十分看重。想了解或接受罗伯特的思想，这本书只须读1遍，但是如果想让这些思想成为你的一部分，你至少要读上3遍。有些时候，我甚至可以通过阅读清崎的著作来感受他的思想！我不但能看懂他在写什么，还能体会到他在写这些文字时在想什么！这是真的！！连我自己都感到很惊奇。如果大家和我读得一样多，一样专注，一定能明白我的话！ </p>
<p>最后，我要说的是，罗伯特自始至终都在强调实践的作用。而且，在2、3册中，他明显冲淡了自己在第1册中所鼓吹的致富很容易、很迅速的观点。用他自己的话说，就是：在致富的道路上，你可以很快速，却没有捷径。在奔跑之前，你一定要学会如何去走。这个走路的过程在某种意义上比奔跑的过程更重要。中国有许多国内企业之所以崛起很快，衰落很快，就是太擅长奔跑，而不会走路了。 <br>
请大家相信，真正的财富都是慢慢积累的。如果我们不能去掉自己心头的浮躁，那财富自由将一直是我们的梦想。愿大家都能在这个系列的丛书中寻找到属于自己的收获！</p>
]]></content>
		</item>
		
		<item>
			<title>让我们安静的等待黎明的到来-艾青</title>
			<link>https://blog.v5u.win/%E8%AE%A9%E6%88%91%E4%BB%AC%E5%AE%89%E9%9D%99%E7%9A%84%E7%AD%89%E5%BE%85%E9%BB%8E%E6%98%8E%E7%9A%84%E5%88%B0%E6%9D%A5-%E8%89%BE%E9%9D%92/</link>
			<pubDate>Mon, 10 Dec 2018 05:08:32 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E8%AE%A9%E6%88%91%E4%BB%AC%E5%AE%89%E9%9D%99%E7%9A%84%E7%AD%89%E5%BE%85%E9%BB%8E%E6%98%8E%E7%9A%84%E5%88%B0%E6%9D%A5-%E8%89%BE%E9%9D%92/</guid>
			<description>请你告诉他们 说他们所等待的已经要来 说我已踏着露水而来 已借着最后一颗星的照引而来 我从东方来 从汹涌着波涛的还上来 我将带光明给世界 又将带温暖给人来</description>
			<content type="html"><![CDATA[<p>请你告诉他们</p>
<p>说他们所等待的已经要来</p>
<p>说我已踏着露水而来</p>
<p>已借着最后一颗星的照引而来</p>
<p>我从东方来</p>
<p>从汹涌着波涛的还上来</p>
<p>我将带光明给世界</p>
<p>又将带温暖给人来</p>
]]></content>
		</item>
		
		<item>
			<title>vagrant&amp;homestead的使用</title>
			<link>https://blog.v5u.win/posts/system/system-vagranthomestead%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
			<pubDate>Tue, 04 Dec 2018 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-vagranthomestead%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
			<description>~/Homestead 目录下执行下面的命令 初始化虚拟机vagrant up 登录vagrant ssh 退出虚拟机exit 关闭 Homesteadvagrant halt</description>
			<content type="html"><![CDATA[<p>~/Homestead 目录下执行下面的命令</p>
<ul>
<li>初始化虚拟机<code>vagrant up</code></li>
<li>登录<code>vagrant ssh</code></li>
<li>退出虚拟机<code>exit</code></li>
<li>关闭 Homestead<code>vagrant halt</code></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>沙龙举办流程</title>
			<link>https://blog.v5u.win/posts/design/design-%E6%B2%99%E9%BE%99%E4%B8%BE%E5%8A%9E%E6%B5%81%E7%A8%8B/</link>
			<pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/design/design-%E6%B2%99%E9%BE%99%E4%B8%BE%E5%8A%9E%E6%B5%81%E7%A8%8B/</guid>
			<description>*title: 沙龙举办流程 date: 2018-11-19 在开放的基础上，环境应当设置的尽可能的平等。比如尽可能的采用圆桌形式，而且参与人员尽量围成一个圈，避免层次上的区别， 主持人</description>
			<content type="html"><![CDATA[<ul>
<li>
<ul>
<li>*title: 沙龙举办流程<!-- raw HTML omitted --></li>
</ul>
</li>
</ul>
<h2 id="date-2018-11-19">date: 2018-11-19</h2>
<p><strong>在开放的基础上，环境应当设置的尽可能的平等。比如尽可能的采用圆桌形式，而且参与人员尽量围成一个圈，避免层次上的区别，</strong></p>
<p>主持人的重点不是表达自己观点，而是传承上下，并尽量避免一个人表达过多，要适时打断，并及时将话语权传递给其他的人。<strong>如果读书会参与人数合适的话，可以争取让每一个人都发表自己的观点。</strong></p>
<p>主持人是轮流的，效果挺好，会有轮流发言和自由讨论环节。</p>
]]></content>
		</item>
		
		<item>
			<title>thinkPHP5.0 学习总结</title>
			<link>https://blog.v5u.win/posts/php/php-thinkphp5.0-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</link>
			<pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/php/php-thinkphp5.0-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</guid>
			<description>thinkPHP5.0 学习总结感悟 免费的是最贵的，学习使用文档和手册，学习效率低下——改用优秀视频后，效果显著，如果使用付费内容想必效果会更好，参考买的《数据结</description>
			<content type="html"><![CDATA[<h3 id="thinkphp50-学习总结感悟">thinkPHP5.0 学习总结感悟</h3>
<ol>
<li>免费的是最贵的，学习使用文档和手册，学习效率低下——改用优秀视频后，效果显著，如果使用付费内容想必效果会更好，参考买的《数据结构与算法》：内容很容易理解，让我从浩瀚的理论书籍中解脱了出来。</li>
<li>技能的习得是曲折前进，螺旋上升的，学习路径：PHP基础——&gt;练手项目(sqlite，MySQL学习)——&gt;tp5手册——&gt;tp5视频。所有的学习都没有白费。化作了以后习得技能的土壤。</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>thinkphp5开发规范</title>
			<link>https://blog.v5u.win/posts/php/php-thinkphp5%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</link>
			<pubDate>Fri, 09 Nov 2018 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/php/php-thinkphp5%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</guid>
			<description>目录结构 ./application ​ ./index ​ ./controller 控制层 ​ ./model 模型 ​ ./view ​ ./admin 后台模块 ​ command.php 控制台配置，命令行执行，读取该模块 ​ common.php 项目的公共文件，通用函数，全局调用 ​ config.php 应用的配置文</description>
			<content type="html"><![CDATA[<h4 id="目录结构">目录结构</h4>
<p>./application</p>
<p>​	./index</p>
<p>​		./controller 控制层</p>
<p>​		./model	模型</p>
<p>​		./view</p>
<p>​	./admin 后台模块</p>
<p>​	command.php 控制台配置，命令行执行，读取该模块</p>
<p>​	common.php 项目的公共文件，通用函数，全局调用</p>
<p>​	config.php 应用的配置文件</p>
<p>​	database.php 数据库配置文件</p>
<p>​	router.php 路由配置文件，对URL进行美化</p>
<p>​	tags.php 应用行为配置文件，默认提供很多钩子，对框架进行扩展，达到无需修改框架源码，注册函数/行为——&gt;改变执行流程</p>
<p>./extend 非composer的第三方库存放地址</p>
<p>./public 网站根目录</p>
<p>​	favicon.ico 网站标签页图标</p>
<p>​	index.php 整个网站入口文件</p>
<p>​	robots.txt 搜索引擎配置文件</p>
<p>​	router.php 快速启动配置文件，无Apache时，通过thinkPHP内置的work server读取该文件，启动框架。例:php -S localhost:8888 router.php</p>
<p>​	./static 静态资源存放处，例: css、js、image</p>
<p>./runtime	网站运行中缓存文件，日志、缓存、编译文件</p>
<p>./thinkphp	框架文件</p>
<p>​	base.php	定义一些常量</p>
<p>​	composer.json	composer的配置文件</p>
<p>​	console.php 控制台入口文件</p>
<p>​	convention.php 	框架的默认配置文件</p>
<p>​	helper.php	助手函数</p>
<p>​	./lang 	语言包</p>
<p>​	./library	核心</p>
<p>​		./think	框架核心文件</p>
<p>​		./traits	类库扩展</p>
<p>​	LICENSE.txt	法律声明文件</p>
<p>​	logo.png	tp的logo</p>
<p>​	phpunit.xml	phpunit测试的配置文件</p>
<p>​	readme.md	说明文件</p>
<p>​	start.php 框架启动文件</p>
<p>​	./tpl	框架默认模板文件</p>
<p>​		default_index.tpl	控制器模板</p>
<p>​		dispatch_jump.tpl	网站发出成功/失败的跳转模板</p>
<p>​		page_trace.tpl	调试时显示的</p>
<p>​		think_exception.tpl	抛出异常时页面展示的</p>
<p>./vendor	composer安装存放区</p>
<h4 id="开发规范">开发规范</h4>
<ol>
<li>目录全部小写，下划线分割 例：./application</li>
<li>类库函数名均已.php结尾 例：./application/index/controller 下的 Index.php</li>
<li>类的文件名均已命名空间定义，且命名空间和类库文件所在的路径一致 例：./application/index/controller—— namespace app\index\controller; app定义顶级目录</li>
<li>类文件采用驼峰 首字母大写 其余文件小写+下划线命名</li>
<li>类名与类文件名保持一致，采用驼峰命名&amp;首字母大写</li>
<li>类采用驼峰命名，首字母大写不需要添加后缀  Index √，IndexController ✘</li>
<li>函数名，驼峰，首字母小写 例：public function getUserName(){}</li>
<li>属性名，规则同7</li>
<li>以双下划线__开头的函数或方法为魔术方法</li>
<li>常量和配置 所以的常量都以大写字母+下划线命名 例: define(&lsquo;APP_STATE_&rsquo;,&lsquo;dev&rsquo;);</li>
<li>配置参数以小写字母+下划线命名</li>
<li>其他规范 数据库 表和字段名采用小写+下划线命名，不能以下划线开头 user_name</li>
<li>应用类库名统一使用&quot;app&quot;</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>chrome 调试</title>
			<link>https://blog.v5u.win/posts/web/web-chrome-%E8%B0%83%E8%AF%95/</link>
			<pubDate>Thu, 08 Nov 2018 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/web/web-chrome-%E8%B0%83%E8%AF%95/</guid>
			<description>chrome 调试 keyword: workspace,breakpoints 将调试代码文件添加到Chrome 的Workspace中：Sources&amp;ndash;&amp;gt;filesystem&amp;ndash;&amp;g</description>
			<content type="html"><![CDATA[<p>chrome 调试</p>
<p>keyword: workspace,breakpoints</p>
<ol>
<li>将调试代码文件添加到Chrome 的Workspace中：Sources&ndash;&gt;filesystem&ndash;&gt;+Add folder to workspace&ndash;&gt;chrome 警告框，设置允许访问—&gt;在workspace中打开文件，直接编写，cmd+s保存&ndash;&gt;刷新网页查看效果.</li>
<li>breakpoints: Sources&ndash;&gt;Event Listener Breakpoints&ndash;&gt;Mouse&ndash;&gt;click 选中——&gt;在调试代码出添加断点——&gt;执行代码（例：点击button，执行js）——&gt;使用断点调试器，R,➡️,⬇️，⬆️</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>php 网站效率原理</title>
			<link>https://blog.v5u.win/posts/php/php-%E7%BD%91%E7%AB%99%E6%95%88%E7%8E%87%E5%8E%9F%E7%90%86/</link>
			<pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/php/php-%E7%BD%91%E7%AB%99%E6%95%88%E7%8E%87%E5%8E%9F%E7%90%86/</guid>
			<description>*title: php 网站效率原理 date: 2018-11-07 确实如你所言, 是我对php的认识不足. 刚刚补了一下这里的知识, 应该是这样的: php有三种工作模式. 其中是最常见的是php</description>
			<content type="html"><![CDATA[<ul>
<li>
<ul>
<li>*title: php 网站效率原理<!-- raw HTML omitted --></li>
</ul>
</li>
</ul>
<h2 id="date-2018-11-07">date: 2018-11-07</h2>
<p>确实如你所言, 是我对php的认识不足. 刚刚补了一下这里的知识, 应该是这样的:</p>
<p>php有三种工作模式. 其中是最常见的是php作为一个模块工作在一个多进程的webserver中, 例如apache webserver. apache会启动一个主进程, 多个子进程(php). 主进程分发请求到子进程上处理. 目前流行的nginx + php-fpm应该也是类似这一种模式, ngnix会把请求转发给php-fpm处理. php-fpm是一个php进程管理器, 维护了一个php进程池, 在接收到请求后分发给php子进程.</p>
<p>在这种模式下, php进程可以是一直存活的. 进程启动时会做进程相关的初始化操作, 比如加载插件. 对于接收到的请求, 会做请求处理的相关初始化-&gt;调用相应的php代码做业务操作-&gt;销毁请求上下文. 对于php程序员来讲, 每个请求的处理都是全新的上下文, 所有定义/对象/变量完全限定在单个请求处理的这个上下文中. 大家写的php代码到此结束. 当然, php进程也可以被销毁, 这与php-fpm的工作模式有关. 更多细节详见相关文档1+2.</p>
<p>因此, 对于一个这样的php进程, 是可以做持久化数据库连接的, 只是稍有不同. 每个php进程只保留一个持久连接. 例如, php-fpm启动了20个php子进程, 对于同一个数据库和同一个用户名, 最多有20个持久连接. 对于同一个php进程所处理的多个请求, 它们都使用同一个数据库连接. 更多详见文档3.</p>
<p>所以, 这个效果与使用一个连接池也差不多了. 持久连接数取决与php进程的数量. 最终, 持久连接数量/进程数量就需要按实际的情况来调优了.</p>
<p>目前理解是这样, 如有误请指正.</p>
<p>相关文档:</p>
<p>\1. php生命周期 <a href="http://www.slideshare.net/laruence/the-php-life-cycle">http://www.slideshare.net/laruence/the-php-life-cycle</a></p>
<p>\2. php-fpm配置文档: <a href="http://php.net/manual/en/install.fpm.configuration.php">http://php.net/manual/en/install.fpm.configuration.php</a></p>
<p>\3. php持久化连接: <a href="http://php.net/manual/en/features.persistent-connections.php">http://php.net/manual/en/features.persistent-connections.php</a></p>
<p>对于 php 应用来说， 数据库的链接重用并不是瓶颈， 所以语言开发者不花这个心思也是正常的。</p>
<p>从目前看来， php 应用的最大瓶颈， 是没有 jit 和 弱类型带来的性能负担。这也是 php 社区所应该尽快解决的问题。另外一个问题就是 yii2、lavarel 这些把开发者带进坑里的玩意，大型网站压根就没法用这些往死里浪费性能的重型框架。</p>
]]></content>
		</item>
		
		<item>
			<title>烧香，檀香</title>
			<link>https://blog.v5u.win/854/</link>
			<pubDate>Sat, 03 Nov 2018 07:43:24 +0000</pubDate>
			
			<guid>https://blog.v5u.win/854/</guid>
			<description>我国的焚香文化颇有历史。早在上古时期，巫师便用艾叶、茱萸等植物熏香去疾，驱除瘟疫。其后，香的用途越来越广。皇家焚香，意在营造宫廷氛围；科考应</description>
			<content type="html"><![CDATA[<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>　　我国的焚香文化颇有历史。早在上古时期，巫师便用艾叶、茱萸等植物熏香去疾，驱除瘟疫。其后，香的用途越来越广。皇家焚香，意在营造宫廷氛围；科考应试设香案，寓意对皇权的敬畏；讲经论道时焚香为修身养性；寒窗学子苦读时焚香图提神清心；茶友相会，香也是茶的天然伴侣……</p>
<p>香制品，一般以木材粉末与一些添加的香料、药剂、粘合剂混合做成，用于燃烧。按形态，有线香、盘香、塔香之分，按成分则有檀香、沉香、麝香、龙涎香等类别。</p>
<p>美国国立生物技术信息中心（NCBI）是一个精选生物医学资料的数据库，其官网收录了一篇论文，是台湾成功大学与美国东田纳西州立大学学者的一项联合研究，介绍了燃香与呼吸道疾病之间的关系。该文介绍，一支普通的香一般由21%的木材粉末、35%的香料、11%的粘合剂和33%的竹芯组成。虽然材料种类不多，但每种材料中所含化学成分是数不清的，因此香体的燃烧牵扯一系列复杂的化学变化，烟雾的成分也是包罗万象，比如形态各异的颗粒物（PM）、常见的无机气体以及多种挥发性有机物等等。</p>
<p>与香道爱好者认为的“安神健脑”功效相反，这些成分大部分是明确记录在册的空气污染物。该文指出，吸入焚香产生的烟雾会诱发过敏性皮炎、呼吸系统紊乱等皮肤和呼吸道疾病，同时加剧鳞状细胞等相关组织的癌变，建议公众尽量减少与焚香烟雾的接触，寺庙神职人员等长期处于焚香环境中的人群，尤其应当警惕。</p>
<!-- raw HTML omitted -->
<p>　　焚香会产生多少颗粒物呢？该文章的实验数据表明，每烧掉1克香烟平均有10毫克颗粒物产生，而每烧掉1克香，颗粒物平均产量高达45毫克。研究人员在台湾一座寺庙内测出了颗粒物浓度高达1316微克/立方米，而且其中绝大部分都是直径2.5微米以下的成员（即PM2.5），可以直达人体肺泡。文章称，加热或燃烧某些材料——如木柴、烟草、香制品、蜡烛和食材等，对直径0.5～5微米颗粒物的贡献率高达62%～92%。</p>
<p>石粉（滑石粉），是制香过程中常见的添加物，主成分是碳酸钙，研究发现，当石粉比例从0.5％提高到5％，悬浮颗粒物就能减半；当石粉含量从0.5%增加到20％时，多环芳烃（不完全燃烧而产生的）排放量可减少30％。碳酸钙可提高香燃烧温度，使燃烧更充分，降低多环芳烃与悬浮微粒排放量。所以在香中加入较多的碳酸钙，可在一定程度上减少焚香对公众身体健康的危害。</p>
<p>焚香产生的气态无机物，主要有一氧化碳、二氧化碳、二氧化氮和二氧化硫4种，除二氧化碳外，其余3种均为公认的有害气体和大气污染物。一氧化碳因能大大降低血液含氧量致人窒息的行径，早已恶名远扬；二氧化硫和二氧化氮是两种有刺鼻气味的酸性有害气体，会给人的皮肤、呼吸系统（肺部、气管和鼻粘膜等）和眼睛带来明显不适，是这些部位患上慢性病的推手。不过，该文章并没有给出这些气体在焚香烟雾中的含量。因为比起它们，五花八门的气态有机物才是焚香烟雾中的“主犯”。</p>
<!-- raw HTML omitted -->
<p>　　为减少使用昂贵的天然原料比例，不少制香者往往会添加人工香精来补充，问题是香精要融入香粉，得先被有机溶剂溶解，这些有机溶剂大多含甲苯（带特殊香味，只能不完全燃烧）等致癌物，可能导致血癌。焚香产生的气态有机物包含苯系物（苯、甲苯、二甲苯等）、醛酮类、烯烃、多环芳烃等，这些物质的恼人之处在于入侵人体的门槛太低——吸入和皮肤暴露均可遭受其害，很难防护周全，短期接触到它们就能引起眼、鼻、喉不适，以及头痛、恶心、眩晕等反应，长期与它们为邻则会重创肝脏、肾脏和中枢神经系统，增加癌症风险。</p>
<p>其中，相对知名的有以下几种。一是苯，挥发性强，有明显芳香气味，以毒害神经系统和造血系统见长，引起神经衰弱综合征和再生障碍性贫血，还会使皮肤干裂、脱屑，同时也被世卫组织下属的国际癌症研究机构（IARC）划为Ⅰ类致癌物——明确的人类致癌物；二是多环芳烃中的明星成员苯并(a)芘，它既是香烟的主要有害成分之一，也是烹调油烟中的常客，同样属于Ⅰ类致癌物；三是甲醛，室内装修污染的主力之一，有强烈的刺激性且易挥发，很容易灼伤人体黏膜组织，进而引起眼鼻喉部位的相关炎症（如结膜炎、角膜炎、鼻炎、支气管炎）和肺部病变。</p>
<p>此外，有些香上面有五颜六色的图案，在加工过程中可能混入铅、镉、铬等重金属，它们的急性毒性和慢性毒性都很强，对肾脏、血液循环系统和神经系统的破坏性极大，能致DNA损伤，而且有慢性蓄积效应。</p>
<p>值得注意的是，倘若室内空气清洁，少量PM2.5即便入肺一游也难以对人构成大的威胁，可是当它吸附着烟雾中这些有害成分进入肺泡甚至毛细血管，那就真是“毁人不倦”了。而且在同等浓度下，颗粒物越小，携带的有害物质总量就越多。</p>
<p>以一间20平方米、屋内净高2.5米的居室来计算，燃烧1克香就能使室内的颗粒物平均浓度达到900微克/立方米。按燃烧过程的物理特性，绝大部分颗粒物的大小都集中在PM2.5甚至PM1范畴，如果按PM2.5的空气质量标准看，这个数字早已超过“爆表”水平（浓度超过500微克/立方米），严重程度可见一斑。</p>
<!-- raw HTML omitted -->
<p>　　焚香与烧秸秆、吸烟、烧柴等过程的化学本质相同，都是多种混合有机物燃烧。美国癌症协会（ACS）的官方期刊《癌症期刊》，早在2008年10月就刊登了美国明尼苏达大学、丹麦哥本哈根国家血清研究所、新加坡国立大学联合开展的研究项目，揭示了焚香过程中的这些有害成分。研究团队在1993～1998年间对6万多名未患癌症的中老年（45～74岁）新加坡籍华人的饮食习惯、生活方式等进行了调查，到2005年回访时，这批人当中有325人得了上呼吸道癌，821人得了肺癌。该研究团队结合这些中老年人生活习惯的记录得出，焚香习惯与上呼吸道癌的发病呈现出显著相关性，但对肺癌却没有明显的“促进”作用。研究者还发现，长期高强度焚香对鳞状细胞癌的罹患风险也有很大贡献。鳞状细胞癌又称表皮癌，多见于有鳞状上皮覆盖的部位，如皮肤、口腔、唇、食道等处。</p>
<p>与香制品直接相关的国家标准，有《燃香类产品安全通用技术条件》（GB26386-2011）和《燃香类产品有害物质测试方法》（GB/T26393-2011），分别给出了主要有害燃烧产生物的浓度上限，和检验燃香类产品是否超标的测试方法。</p>
<p>这两套国标规定，在43至47立方米大小的密闭空间内焚香45分钟，甲醛浓度不得超过0.1毫克/立方米，苯的浓度不得超过0.2毫克/立方米，总挥发性有机物（TVOC）浓度不超0.6毫克/立方米。同时，《燃香类产品安全通用技术条件》还根据烟尘量的不同，把燃香类产品分为无烟香、微烟香和有烟香，并要求在产品包装上明示。</p>
<!-- raw HTML omitted -->
<p>　　我国台湾寺庙多，以焚香方式祭祖奉神、祈福礼佛的人群十分广泛。然而在2014年8月26日，每年吸引约600万名香客的台北行天宫开始执行“禁香令”，撤掉了香炉和供桌，既不烧香也不准备供品，提倡“用手敬拜、用心敬神”。台湾“环保署”工作人员在接受当地媒体采访时指出，香一经焚烧，就会释放出PM2.5、甲醛、苯及其他有害的挥发性有机物，而且由于香客是近距离吸入，烟雾污染空气的同时，对人体的伤害也很强。虽然一次性吸入问题不大，但对庙宇的工作人员来说，每天累积的吸入量非常可观。他还强调，即使是所谓环保线香也会产生烟雾，“只要点了香，就有问题”。</p>
<p>台湾媒体2014年4月4日也报道，台中市一名56岁的道教法师，18年来身处朝拜的炷香烟雾中心，常常出现流鼻血、鼻塞、耳鸣、重听与头痛症状，就医诊断结果是鼻咽癌初期。医生分析，高强度吸入的焚香烟雾难辞其咎。后来，法师在神坛上方架设了3台大型排烟设备，昼夜运转，同时积极配合治疗，病情才得以控制。</p>
<p>2015年5月，台湾大学医学院附属医院心血管医生苏大成，自带仪器前往当地的行天宫和没有禁香的龙山寺，对比测量PM2.5，在两地各停留40分钟。此时禁香数月的行天宫已经不见烟雾缭绕的景象，测试仪显示，PM2.5浓度只有15.2微克/立方米，属于一级（优）水平。反观持续焚香的龙山寺，PM2.5浓度高达1360微克/立方米，是“爆表”限值的2倍多，而当天台北全市的PM2.5平均浓度，也不过27.5微克/立方米。</p>
<p>可喜的是，龙山寺方面也在通过多种措施逐步削减焚香污染，比如减少香炉数量、缩短香体长度等。台湾的消费者文教基金会建议，民众最好以双手合十的方式取代焚香祭拜，非要烧香的话，最好在室内加装通风设备，保持空气流通。</p>
<p>不过，台湾有制香业人士认为，价位影响香品的质量。很多高端香选用品质较好的天然原料和严谨细致的工艺制成，气味温和怡人，而有些廉价的劣质香是用木屑掺杂着重金属残渣等有害添加物粗制滥造的产物，烧出来当然会危害身体健康。他们指责这种禁香行动不免有“一竿子打翻一船人”之嫌。</p>
<!-- raw HTML omitted -->
<p>　　其实，不管什么档次的香，主要成分几乎都是木料。像这种成分繁多的有机物混合体，燃烧起来很难不产生有害成分，只是有害物的种类和比例有所差异。有些香点燃后的气味确实能博嗅觉细胞一悦，但气味的好坏并不能代表烟雾中成分的“善恶”。在“坏分子”成员中，有些无嗅无味，有些本身很好闻给人一种友好的假象。</p>
<!-- raw HTML omitted -->
<p>文章来源：http://www.dooland.com/magazine/article_816889.html</p>
]]></content>
		</item>
		
		<item>
			<title>鸭子定律</title>
			<link>https://blog.v5u.win/%E9%B8%AD%E5%AD%90%E5%AE%9A%E5%BE%8B/</link>
			<pubDate>Fri, 02 Nov 2018 02:50:06 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E9%B8%AD%E5%AD%90%E5%AE%9A%E5%BE%8B/</guid>
			<description>鸭子定律 定律1 如果走路像鸭子、说话像鸭子、长得像鸭子、啄食也像鸭子，那它肯定就是一只鸭子。 重述：事物的外在特征就是事物本质的表现。 定律2 即使</description>
			<content type="html"><![CDATA[<p>鸭子定律</p>
<p>定律1 如果走路像鸭子、说话像鸭子、长得像鸭子、啄食也像鸭子，那它肯定就是一只鸭子。</p>
<p>重述：事物的外在特征就是事物本质的表现。</p>
<p>定律2 即使在最理想的条件下，鸭子也不可能成为雄鹰，无论其多么高贵也无论其出于多么善良的动机。</p>
<p>重述∶万物只能是其本身，不可能变成别的东西。</p>
<p>定律3 鸭子可以伪装成雄鹰，可一到危难时刻它就会原形毕露。</p>
<p>重述：伪装和危难是不可能共生的，危难之际方显显露其真性情。</p>
<p>定律4 不抛弃自己的蹼掌，不脱胎换骨换取鹰爪和利喙，鸭子永远也变不成雄鹰。</p>
<p>重述：只有完全改变确定其本质的属性它才能进化。否则，鸭子永远是鸭子。</p>
<p>定律5 鸭子是高贵的，不能因其是鸭子而不是雄鹰就被小视。</p>
<p>重述：万物都值得尊重，只要它们实实在在，该是什么就是什么，即使与你不相同。</p>
<p>定律6 即使最伟大的鸭子也不如一只普通的鹰飞得高。</p>
<p>重述：若梦想与雄鹰一起翱翔，切不可与鸭子一起游泳。</p>
<p>定律7 鸭子喜群居，雄鹰独自飞。雄鹰永远不可能与鸭子为伍。</p>
<p>重述∶ 明智选择自己的伙伴。</p>
<p>定律8 鸭子的呷呷叫声从来都得不到回应。没有人知道这是为什么。</p>
<p>重述：有些问题你永远也不会找到答案。</p>
]]></content>
		</item>
		
		<item>
			<title>《程序员的咆哮》阅读总结</title>
			<link>https://blog.v5u.win/posts/read/read-%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%92%86%E5%93%AE%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93/</link>
			<pubDate>Wed, 10 Oct 2018 09:40:11 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/read/read-%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%92%86%E5%93%AE%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93/</guid>
			<description>编程界的数学 学校的数学教育体系是错误的，因为这是数学领域的连续知识，但是在现实生活中很多没有实际用处。 学校不教，现实中很有用的数学：统计，代</description>
			<content type="html"><![CDATA[<p>编程界的数学</p>
<p>学校的数学教育体系是错误的，因为这是数学领域的连续知识，但是在现实生活中很多没有实际用处。</p>
<p>学校不教，现实中很有用的数学：统计，代数——线性代数，数理逻辑，信息论和柯氏复杂性</p>
<p>运用数学的第一步是：界定问题。当一个问题在手却不知道如何下手的时候，是最花时间的。</p>
<h3 id="编译原理是计算机科学第二重要的科学很重要因为他非常切实的将你学到的几乎所有东西都捏合在了一起">编译原理是计算机科学第二重要的科学，很重要，因为他非常切实的将你学到的几乎所有东西都捏合在了一起。</h3>
<p>编译原理3个领域：</p>
<ol>
<li>
<p>解析，词法分析，语法分析生成解析树</p>
</li>
<li>
<p>类型检查</p>
</li>
<li>
<p>代码生成的正确性</p>
</li>
</ol>
<p>Google的面试</p>
<ol>
<li>细的马克笔</li>
<li>大O复杂度分析</li>
<li>知道排序是怎么回事，两个nlog(n)的排序算法，比如快排和归并排序</li>
<li>哈希表是人类已知的最重要的数据结构，一定要弄明白原理。</li>
<li>树，必须弄懂</li>
<li>图，内存中表示图的方法有3中(指针和对象，矩阵，邻接表)
每次遇到问题首先考虑的是图算法。他们是任何关系里最基本，最灵活的方法。</li>
<li>基本的离散数学</li>
<li>操作系统：线程，进程，并发这些概念，掌握锁的概念，</li>
<li>编程，对一门语言的细节有相当的了解</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>sqlite3使用总结</title>
			<link>https://blog.v5u.win/sqlite3%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link>
			<pubDate>Tue, 09 Oct 2018 04:29:10 +0000</pubDate>
			
			<guid>https://blog.v5u.win/sqlite3%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid>
			<description>新建数据库 sqlite3 databasefilename 检查databasefilename是否存在，如果不存在就创建并进入数据库（如果直接退出，数据库文件不会创建）如果已经存在直接</description>
			<content type="html"><![CDATA[<p>新建数据库</p>
<p>sqlite3 databasefilename</p>
<p>检查databasefilename是否存在，如果不存在就创建并进入数据库（如果直接退出，数据库文件不会创建）如果已经存在直接进入数据库 对数据库进行操作</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --></p>
<p>创建表：</p>
<p>create table if not exists UserList(id integer primary key autoincrement,firstName[not null],lastName[not null],sex,birthday,remark[not null],resumeNum[not null])</p>
<p>该表已经创建了主键，可以自增ID</p>
<p>terminal命令行使用sqlite3</p>
<p>打开或创建：进入到文件所在目录下，输入sqlite3 filename</p>
<p>1、显示数据库中所有的表：.tables</p>
<p>2、显示表头：.head on 然后执行 select * from tableName</p>
<p>sqlite中命令:</p>
<p>以.开头,大小写敏感（数据库对象名称是大小写不敏感的）</p>
<p>.exit</p>
<p>.help 查看帮助 针对命令</p>
<p>.database 显示数据库信息；包含当前数据库的位置</p>
<p>.tables 或者 .table 显示表名称 没有表则不显示</p>
<p>.schema 命令可以查看创建数据对象时的SQL命令；</p>
<p>.schema databaseobjectname查看创建该数据库对象时的SQL的命令；如果没有这个数据库对象就不显示内容，不会有错误提示</p>
<p>.read FILENAME 执行指定文件中的SQL语句</p>
<p>.headers on/off 显示表头 默认off</p>
<p>.mode list|column|insert|line|tabs|tcl|csv 改变输出格式，具体如下</p>
<p>sqlite .mode list</p>
<p>sqlite select * from emp;</p>
<p>7369|SMITH|CLERK|7902|17-12-1980|800||20</p>
<p>7499|ALLEN|SALESMAN|7698|20-02-1981|1600|300|30</p>
<p>如果字段值为NULL 默认不显示 也就是显示空字符串</p>
<p>sqlite .mode column</p>
<p>sqlite select * from emp;</p>
<p>7369 SMITH CLERK 7902 17-12-1980 800 20</p>
<p>7499 ALLEN SALESMAN 7698 20-02-1981 1600 300 30</p>
<p>7521 WARD SALESMAN 7698 22-02-1981 1250 500 30</p>
<p>sqlite .mode insert</p>
<p>sqlite select * from dept;</p>
<p>INSERT INTO table VALUES(10,ACCOUNTING,NEW YORK);</p>
<p>INSERT INTO table VALUES(20,RESEARCH,DALLAS);</p>
<p>INSERT INTO table VALUES(30,SALES,CHICAGO);</p>
<p>INSERT INTO table VALUES(40,OPERATIONS,BOSTON);</p>
<p>sqlite .mode line</p>
<p>sqlite select * from dept;</p>
<p>DEPTNO = 10</p>
<p>DNAME = ACCOUNTING</p>
<p>LOC = NEW YORK</p>
<p>DEPTNO = 20</p>
<p>DNAME = RESEARCH</p>
<p>LOC = DALLAS</p>
<p>DEPTNO = 30</p>
<p>DNAME = SALES</p>
<p>LOC = CHICAGO</p>
<p>DEPTNO = 40</p>
<p>DNAME = OPERATIONS</p>
<p>LOC = BOSTON</p>
<p>sqlite .mode tabs</p>
<p>sqlite select * from dept;</p>
<p>10 ACCOUNTING NEW YORK</p>
<p>20 RESEARCH DALLAS</p>
<p>30 SALES CHICAGO</p>
<p>40 OPERATIONS BOSTON</p>
<p>sqlite .mode tcl</p>
<p>sqlite select * from dept;</p>
<p>10 ACCOUNTINGNEW YORK</p>
<p>20 RESEARCHDALLAS</p>
<p>30 SALES CHICAGO</p>
<p>40 OPERATIONSBOSTON</p>
<p>sqlite .mode csv</p>
<p>sqlite select * from dept;</p>
<p>10,ACCOUNTING,NEW YORK</p>
<p>20,RESEARCH,DALLAS</p>
<p>30,SALES,CHICAGO</p>
<p>40,OPERATIONS,BOSTON</p>
<p>.separator X 更改分界符号为X</p>
<p>sqlite .separator</p>
<p>sqlite select * from dept;</p>
<p>10ACCOUNTINGNEW YORK</p>
<p>20RESEARCHDALLAS</p>
<p>30SALESCHICAGO</p>
<p>40OPERATIONS**BOSTON</p>
<p>.dump ?TABLE? 生成形成数据库表的SQL脚本</p>
<p>.dump 生成整个数据库的脚本在终端显示</p>
<p>.output stdout 将输出打印到屏幕 默认</p>
<p>.output filename 将输出打印到文件（.dump .output 结合可将数据库以sql语句的形式导出到文件中）</p>
<p>.nullvalue STRING 查询时用指定的串代替输出的NULL串 默认为.nullvalue</p>
<p>字段类型：</p>
<p>数据库中存储的每个值都有一个类型,都属于下面所列类型中的一种,(被数据库引擎所控制)</p>
<p>NULL: 这个值为空值</p>
<p>INTEGER: 值被标识为整数,依据值的大小可以依次被存储为1,2,3,4,5,6,7,8个字节</p>
<p>REAL: 所有值都是浮动的数值,被存储为8字节的IEEE浮动标记序号.</p>
<p>TEXT: 文本. 值为文本字符串,使用数据库编码存储(TUTF-8, UTF-16BE or UTF-16-LE).</p>
<p>BLOB: 值是BLOB数据,如何输入就如何存储,不改变格式.</p>
<p>值被定义为什么类型只和值自身有关,和列没有关系,和变量也没有关系.所以sqlite被称作 弱类型 数据库</p>
<p>数据库引擎将在执行时检查、解析类型，并进行数字存储类型(整数和实数)和文本类型之间的转换.</p>
<p>SQL语句中部分的带双引号或单引号的文字被定义为文本,</p>
<p>如果文字没带引号并没有小数点或指数则被定义为整数,</p>
<p>如果文字没带引号但有小数点或指数则被定义为实数,</p>
<p>如果值是空则被定义为空值.</p>
<p>BLOB数据使用符号XABCD来标识.</p>
<p>但实际上，sqlite3也接受如下的数据类型：</p>
<p>smallint 16位的整数。</p>
<p>interger 32位的整数。</p>
<p>decimal(p,s) 精确值p是指全部有几个十进制数,s是指小数点后可以有几位小数。如果没有特别指定，则系统会默认为p=5 s=0 。</p>
<p>float 32位元的实数。</p>
<p>double 64位元的实数。</p>
<p>char(n) n 长度的字串，n不能超过 254。</p>
<p>varchar(n) 长度不固定且其最大长度为 n 的字串，n不能超过 4000。</p>
<p>graphic(n) 和 char(n) 一样，不过其单位是两个字节， n不能超过127。这个形态是为了支持两个字节长度的字体，如中文字。</p>
<p>vargraphic(n) 可变长度且其最大长度为n的双字元字串，n不能超过2000</p>
<p>date 包含了 年份、月份、日期。</p>
<p>time 包含了 小时、分钟、秒。</p>
<p>timestamp 包含了 年、月、日、时、分、秒、千分之一秒。</p>
<p>SQLite包含了如下时间/日期函数：</p>
<p>datetime() 产生日期和时间 无参数表示获得当前时间和日期</p>
<p>sqlite select datetime();</p>
<p>2012-01-07 12:01:32</p>
<p>有字符串参数则把字符串转换成日期</p>
<p>sqlite select datetime(2012-01-07 12:01:30);</p>
<p>2012-01-07 12:01:30</p>
<p>select date(2012-01-08,+1 day,+1 year);</p>
<p>2013-01-09</p>
<p>select datetime(2012-01-08 00:20:00,+1 hour,-12 minute);</p>
<p>2012-01-08 01:08:00</p>
<p>select datetime(now,start of year);</p>
<p>2012-01-01 00:00:00</p>
<p>select datetime(now,start of month);</p>
<p>2012-01-01 00:00:00</p>
<p>select datetime(now,start of day);</p>
<p>2012-01-08 00:00:00</p>
<p>select datetime(now,start of week);错误</p>
<p>select datetime(now,localtime);</p>
<p>结果：2006-10-17 21:21:47</p>
<p>date()产生日期</p>
<p>sqlite select date(2012-01-07 12:01:30);</p>
<p>2012-01-07</p>
<p>同理 有参和无参</p>
<p>select date(now,start of year);</p>
<p>2012-01-01</p>
<p>select date(2012-01-08,+1 month);</p>
<p>2012-02-08</p>
<p>time() 产生时间</p>
<p>select time();</p>
<p>03:14:30</p>
<p>select time(23:18:59);</p>
<p>23:18:59</p>
<p>select time(23:18:59,start of day);</p>
<p>00:00:00</p>
<p>select time(23:18:59,end of day);错误</p>
<p>在时间/日期函数里可以使用如下格式的字符串作为参数：</p>
<p>YYYY-MM-DD</p>
<p>YYYY-MM-DD HH:MM</p>
<p>YYYY-MM-DD HH:MM:SS</p>
<p>YYYY-MM-DD HH:MM:SS.SSS</p>
<p>HH:MM</p>
<p>HH:MM:SS</p>
<p>HH:MM:SS.SSS</p>
<p>now</p>
<p>其中now是产生现在的时间。</p>
<p>日期不能正确比较大小,会按字符串比较，日期默认格式 dd-mm-yyyy</p>
<p>select hiredate from emp order by hiredate;</p>
<p>17-11-1981</p>
<p>17-12-1980</p>
<p>19-04-1987</p>
<p>20-02-1981</p>
<p>22-02-1981</p>
<p>strftime() 对以上三个函数产生的日期和时间进行格式化</p>
<p>strftime()函数可以把YYYY-MM-DD HH:MM:SS格式的日期字符串转换成其它形式的字符串。 strftime(格式, 日期/时间, 修正符, 修正符, …) select strftime(%d,datetime());</p>
<p>它可以用以下的符号对日期和时间进行格式化：</p>
<p>%d 在该月中的第几天, 01-31</p>
<p>%f 小数形式的秒，SS.SSS</p>
<p>%H 小时, 00-23</p>
<p>%j 算出某一天是该年的第几天，001-366</p>
<p>%m 月份，00-12</p>
<p>%M 分钟, 00-59</p>
<p>%s 从1970年1月1日到现在的秒数</p>
<p>%S 秒, 00-59</p>
<p>%w 星期, 0-6 (0是星期天)</p>
<p>%W 算出某一天属于该年的第几周, 01-53</p>
<p>%Y 年, YYYY</p>
<p>%% 百分号</p>
<p>select strftime(%Y.%m.%d %H:%M:%S,now);</p>
<p>select strftime(%Y.%m.%d %H:%M:%S,now,localtime);</p>
<p>结果：2006.10.17 21:41:09</p>
<p>select hiredate from emp</p>
<p>order by strftime(%Y.%m.%d %H:%M:%S,hiredate); 正确</p>
<p>select strftime(%Y.%m.%d %H:%M:%S,hiredate) from emp</p>
<p>order by strftime(%Y.%m.%d %H:%M:%S,hiredate); 错误</p>
<p>算术函数</p>
<p>abs(X) 返回给定数字表达式的绝对值。</p>
<p>max(X,Y[,…]) 返回表达式的最大值。 组函数 max(列名)</p>
<p>sqlite select max(2,3,4,5,6,7,12);</p>
<p>12</p>
<p>min(X,Y[,…]) 返回表达式的最小值。</p>
<p>random() 返回随机数。</p>
<p>sqlite select random();</p>
<p>3224224213599993831</p>
<p>round(X[,Y]) 返回数字表达式并四舍五入为指定的长度或精度。</p>
<p>字符处理函数</p>
<p>length(X) 返回给定字符串表达式的字符个数。</p>
<p>lower(X) 将大写字符数据转换为小写字符数据后返回字符表达式。</p>
<p>upper(X) 返回将小写字符数据转换为大写的字符表达式。</p>
<p>substr(X,Y,Z) 返回表达式的一部分。 从Y开始读Z个字符 Y最小值1</p>
<p>sqlite select substr(abcdef,3,3);</p>
<p>cde</p>
<p>quote(A) 给字符串加引号</p>
<p>sqlite select quote(aaa);</p>
<p>aaa</p>
<p>条件判断函数</p>
<p>ifnull(X,Y) 如果X为null 返回Y</p>
<p>select ifnull(comm,0) from emp;</p>
<p>300</p>
<p>500</p>
<p>1400</p>
<p>集合函数</p>
<p>avg(X) 返回组中值的平均值。</p>
<p>count(X) 返回组中项目的数量。</p>
<p>max(X) 返回组中值的最大值。</p>
<p>min(X) 返回组中值的最小值。</p>
<p>sum(X) 返回表达式中所有值的和。</p>
<p>其他函数</p>
<p>typeof(X) 返回数据的类型。</p>
<p>sqlite select typeof(111);</p>
<p>integer</p>
<p>sqlite select typeof(233);</p>
<p>text</p>
<p>sqlite select typeof(2012-12-12);</p>
<p>text</p>
<p>sqlite select typeof(223.44);</p>
<p>text</p>
<p>sqlite select typeof(223.44);</p>
<p>real</p>
<p>last_insert_rowid() 返回最后插入的数据的ID。</p>
<p>sqlite_version() 返回SQLite的版本。</p>
<p>sqlite select sqlite_version();</p>
<p>3.7.9</p>
<p>change_count() 返回受上一语句影响的行数。</p>
<p>last_statement_change_count()</p>
<p>create table emp_bak select * from EMP;不能在sqlite中使用</p>
<p>插入记录</p>
<p>insert into table_name values (field1, field2, field3…);</p>
<p>查询</p>
<p>select * from table_name;查看table_name表中所有记录；</p>
<p>select * from table_name where field1=xxxxx; 查询符合指定条件的记录；</p>
<p>select …..</p>
<p>from table_name[,table_name2,…]</p>
<p>where …..</p>
<p>group by….</p>
<p>having ….</p>
<p>order by …</p>
<p>select …..</p>
<p>from table_name inner join | left outer join | right outer join table_name2</p>
<p>on …</p>
<p>where …..</p>
<p>group by….</p>
<p>having ….</p>
<p>order by …</p>
<p>子查询：</p>
<p>select *</p>
<p>from EMP m</p>
<p>where SAL</p>
<p>(select avg(SAL) from EMP where DEPTNO=m.DEPTNO);</p>
<p>支持case when then 语法</p>
<p>update EMP</p>
<p>set SAL=</p>
<p>(</p>
<p>case</p>
<p>when DEPTNO=10 and JOB=MANAGER then SAL1.1</p>
<p>when DEPTNO=20 and JOB=CLERK then SAL1.2</p>
<p>when DEPTNO=30 then SAL1.1</p>
<p>when DEPTNO=40 then SAL1.2</p>
<p>else SAL</p>
<p>END</p>
<p>);</p>
<p>select ENAME,</p>
<p>case DEPTNO</p>
<p>when 10 then 后勤部</p>
<p>when 20 then 财务部</p>
<p>when 30 then 内务部门</p>
<p>else 其他部门</p>
<p>end as dept</p>
<p>from EMP;</p>
<p>支持关联子查询 in后面的语法中可以有limit（mysql不可以）</p>
<p>select *</p>
<p>from emp e</p>
<p>where e.EMPNO in</p>
<p>(</p>
<p>select empno</p>
<p>from EMP</p>
<p>where deptno=e.DEPTNO</p>
<p>order by SAL desc</p>
<p>limit 0,2</p>
<p>);</p>
<p>支持表和表之间的数据合并等操作</p>
<p>union 去重复 union all 不去掉重复</p>
<p>select deptno from emp</p>
<p>union</p>
<p>select deptno from dept;</p>
<p>select deptno from emp</p>
<p>union all</p>
<p>select deptno from dept;</p>
<p>在列名前加distinct也是去重复</p>
<p>sqlite select distinct deptno from emp;</p>
<p>删除</p>
<p>delete from table_name where …</p>
<p>删除表</p>
<p>drop table_name; 删除表；</p>
<p>drop index_name; 删除索引；</p>
<p>修改</p>
<p>update table_name</p>
<p>set xxx=value[, xxx=value,…]</p>
<p>where …</p>
<p>建立索引</p>
<p>如果资料表有相当多的资料，我们便会建立索引来加快速度。好比说：</p>
<p>create index film_title_index on film(title);</p>
<p>意思是针对film资料表的name字段，建立一个名叫film_name_index的索引。这个指令的语法为</p>
<p>CREATE [ UNIQUE ] NONCLUSTERED INDEX index_name</p>
<p>ON { table | view } ( column ASC | DESC )</p>
<p>create index index_name on table_name(field_to_be_indexed);</p>
<p>一旦建立了索引，sqlite3会在针对该字段作查询时，自动使用该索引。这一切的操作都是在幕后自动发生的，无须使用者特别指令。</p>
<p>其他sqlite的特别用法</p>
<p>sqlite可以在shell底下直接执行命令：</p>
<p>sqlite3 film.db select * from emp;</p>
<p>输出 HTML 表格：</p>
<p>sqlite3 -html film.db select * from film;</p>
<p>将数据库「倒出来」：</p>
<p>sqlite3 film.db .dump output.sql</p>
<p>利用输出的资料，建立一个一模一样的数据库（加上以上指令，就是标准的SQL数据库备份了）：</p>
<p>sqlite3 film.db output.sql</p>
<p>在大量插入资料时，你可能会需要先打这个指令：</p>
<p>begin;</p>
<p>插入完资料后要记得打这个指令，资料才会写进数据库中：</p>
<p>commit;</p>
<p>sqlite begin;</p>
<p>sqlite insert into aaaa values(aaa,333);</p>
<p>sqlite select * from aaaa;</p>
<p>2|sdfds</p>
<p>sdfsd|9</p>
<p>2012-12-12|13:13:13</p>
<p>aaa|333</p>
<p>sqlite rollback;</p>
<p>sqlite select * from aaaa;</p>
<p>2|sdfds</p>
<p>sdfsd|9</p>
<p>2012-12-12|13:13:13</p>
<p>创建和删除视图</p>
<p>CREATE VIEW view_name AS</p>
<p>SELECT column_name(s)</p>
<p>FROM table_name</p>
<p>WHERE condition</p>
<p>DROP VIEW view_name</p>
<p>create view e as</p>
<p>select avg(SAL) avgsal,DEPTNO</p>
<p>from EMP</p>
<p>group by DEPTNO;</p>
<p>select ENAME,EMP.DEPTNO,SAL,avgsal</p>
<p>from EMP inner join e</p>
<p>on EMP.DEPTNO=e.DEPTNO</p>
<p>where SALavgsal;</p>
<p>练习员工表：</p>
<p>PRAGMA foreign_keys=OFF;</p>
<p>BEGIN TRANSACTION;</p>
<p>CREATE TABLE DEPT</p>
<p>(</p>
<p>DEPTNO int(2) not null,</p>
<p>DNAME varchar(14),</p>
<p>LOC varchar(13)</p>
<p>);</p>
<p>INSERT INTO DEPT VALUES(10,ACCOUNTING,NEW YORK);</p>
<p>INSERT INTO DEPT VALUES(20,RESEARCH,DALLAS);</p>
<p>INSERT INTO DEPT VALUES(30,SALES,CHICAGO);</p>
<p>INSERT INTO DEPT VALUES(40,OPERATIONS,BOSTON);</p>
<p>CREATE TABLE EMP</p>
<p>(</p>
<p>EMPNO int(4) not null,</p>
<p>ENAME varchar(10),</p>
<p>JOB varchar(9),</p>
<p>MGR int(4),</p>
<p>HIREDATE date,</p>
<p>SAL int(7 ),</p>
<p>COMM int(7 ),</p>
<p>DEPTNO int(2)</p>
<p>);</p>
<p>INSERT INTO EMP VALUES(7369,SMITH,CLERK,7902,17-12-1980,800,NULL,20);</p>
<p>INSERT INTO EMP VALUES(7499,ALLEN,SALESMAN,7698,20-02-1981,1600,300,30);</p>
<p>INSERT INTO EMP VALUES(7521,WARD,SALESMAN,7698,22-02-1981,1250,500,30);</p>
<p>INSERT INTO EMP VALUES(7566,JONES,MANAGER,7839,02-04-1981,2975,NULL,20);</p>
<p>INSERT INTO EMP VALUES(7654,MARTIN,SALESMAN,7698,28-09-1981,1250,1400,30);</p>
<p>INSERT INTO EMP VALUES(7698,BLAKE,MANAGER,7839,01-05-1981,2850,NULL,30);</p>
<p>INSERT INTO EMP VALUES(7782,CLARK,MANAGER,7839,09-06-1981,2450,NULL,10);</p>
<p>INSERT INTO EMP VALUES(7788,SCOTT,ANALYST,7566,19-04-1987,3000,NULL,20);</p>
<p>INSERT INTO EMP VALUES(7839,KING,PRESIDENT,NULL,17-11-1981,5000,NULL,10);</p>
<p>INSERT INTO EMP VALUES(7844,TURNER,SALESMAN,7698,08-09-1981,1500,0,30);</p>
<p>INSERT INTO EMP VALUES(7876,ADAMS,CLERK,7788,23-05-1987,1100,NULL,20);</p>
<p>INSERT INTO EMP VALUES(7900,JAMES,CLERK,7698,03-12-1981,950,NULL,30);</p>
<p>INSERT INTO EMP VALUES(7902,FORD,ANALYST,7566,03-12-1981,3000,NULL,20);</p>
<p>INSERT INTO EMP VALUES(7934,MILLER,CLERK,7782,23-01-1982,1300,NULL,10);</p>
<p>CREATE TABLE SALGRADE</p>
<p>(</p>
<p>GRADE int,</p>
<p>LOSAL int,</p>
<p>HISAL int</p>
<p>);</p>
<p>INSERT INTO SALGRADE VALUES(1,700,1200);</p>
<p>INSERT INTO SALGRADE VALUES(2,1201,1400);</p>
<p>INSERT INTO SALGRADE VALUES(3,1401,2000);</p>
<p>INSERT INTO SALGRADE VALUES(4,2001,3000);</p>
<p>INSERT INTO SALGRADE VALUES(5,3001,9999);</p>
<p>COMMIT;</p>
]]></content>
		</item>
		
		<item>
			<title>数据结构与算法1-复杂度分析1</title>
			<link>https://blog.v5u.win/posts/system/system-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%951-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</link>
			<pubDate>Mon, 08 Oct 2018 10:53:57 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%951-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</guid>
			<description>为什么需要复杂度分析？ 有两种估算方法：1.事后统计法 2.大O复杂度表示法 事后统计法: 把代码跑一遍，通过统计、监控，就能得到算法执行的时间和占</description>
			<content type="html"><![CDATA[<p>为什么需要复杂度分析？</p>
<h4 id="有两种估算方法1事后统计法-2大o复杂度表示法">有两种估算方法：1.事后统计法 2.大O复杂度表示法</h4>
<ol>
<li>事后统计法: 把代码跑一遍，通过统计、监控，就能得到算法执行的时间和占用的内存大小</li>
</ol>
<ul>
<li>
<p>测试结果非常依赖测试环境</p>
</li>
<li>
<p>测试结果受数据规模的影响很大</p>
</li>
</ul>
<ol start="2">
<li>
<p>我们需要一个不用具体的测试数据来测试，就可以粗略的估计计算法的执行效率的方法——大O复杂度表示法</p>
<p>从CPU角度看，代码的执行类似这种操作：读数据——运算——写数据。</p>
<p>所有代码的执行时间T(n)与每行代码的执行次数n成正比。T(n)=O(f(n)),例：T(n)=O(2n+2),T(n)=O(2n²+2n+3)</p>
<p>大O时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以也叫，渐进时间复杂度，简称时间复杂度。T(n) = O(n)； T(n) = O(n²)。</p>
</li>
</ol>
<h4 id="时间复杂度分析">时间复杂度分析</h4>
<ol>
<li>只关注循环执行次数最多的一段代码：核心代码执行次数的 n 的量级，就是整段要分析代码的时间复杂度</li>
<li>加法法则：总复杂度等于量级最大的那段代码的复杂度</li>
<li>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</li>
</ol>
<h4 id="几种常见时间复杂度实例分析">几种常见时间复杂度实例分析</h4>
<pre><code>常量阶O(1)	对数阶O(logn)	线性阶O(n)	线性对数阶O(nlogn)

指数阶O(2^n)		阶乘阶O(n!)
</code></pre>
<p>粗略分为两类：多项式量级和非多项式量级，非多项式量级只有两个：O(2^n)和O(n!)。</p>
]]></content>
		</item>
		
		<item>
			<title>数据结构与算法之美0</title>
			<link>https://blog.v5u.win/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E0/</link>
			<pubDate>Sun, 30 Sep 2018 02:20:57 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E0/</guid>
			<description>技术人员究竟需要修炼那些内功？ 无外乎就是大学里的那些基础课程： 操作系统 计算机网络 编译原理 数据结构和算法 学好这些东西，在学其他东西就会很简单，</description>
			<content type="html"><![CDATA[<h4 id="技术人员究竟需要修炼那些内功">技术人员究竟需要修炼那些内功？</h4>
<p>无外乎就是大学里的那些基础课程：</p>
<ol>
<li>
<p>操作系统</p>
</li>
<li>
<p>计算机网络</p>
</li>
<li>
<p>编译原理</p>
</li>
<li>
<p>数据结构和算法</p>
</li>
</ol>
<h5 id="学好这些东西在学其他东西就会很简单很快">学好这些东西，在学其他东西就会很简单，很快。</h5>
]]></content>
		</item>
		
		<item>
			<title>Xcode Code Snippets</title>
			<link>https://blog.v5u.win/xcode-code-snippets/</link>
			<pubDate>Tue, 18 Sep 2018 11:50:09 +0000</pubDate>
			
			<guid>https://blog.v5u.win/xcode-code-snippets/</guid>
			<description>Xcode Code Snippets 在Double Encore，我们写的代码都是干净，可重用的——不过，有时候并不能完全做到。如在使用pragma mark的时候。下面就是</description>
			<content type="html"><![CDATA[<p>Xcode Code Snippets</p>
<p>在Double Encore，我们写的代码都是干净，可重用的——不过，有时候并不能完全做到。如在使用pragma mark的时候。下面就是一个示例：</p>
<p>#pragma mark – UIViewController overrides</p>
<p>通过pragma mark，可以让代码看起来既整洁又有组织。虽然这很重要，但是会带来额外的输入操作和时间。此时，我们可以使用code snippets。</p>
<p>通过code snippets，我们可以创建一些可重用的代码块，并且在任何需要的地方很容易的就可以使用这些代码块。这可以节省输入需要的操作和时间。并且，一旦你学会使用code snippets，会发现你可以创建并扩充自己的code snippet library。</p>
<p>创建一个code snippet非常简单。首先，打开Xcode并在utilities panel中选择code snippet library。</p>
<p>上图中，可以看到在code snippet library中已经有一些数据了。</p>
<p>接着，输入希望创建的code snippet。在这里，我为pragma mark创建一个code snippet。如下图所示，在代码编辑器中输入 “#pragma mark – UIViewController overrides”。</p>
<p>选中代码块，如下图所示：</p>
<p>然后单击并按住代码块，知道文本光标变为箭头光标。接着将代码块拖放到code snippet library中，然后松开鼠标。如下图所示</p>
<p>此时会弹出一个popover，通过该popover可以对新的code snippet进行编辑，如下图所示。</p>
<p>首先，是定snippet的名字。这里我指定为“Pragma Mark”</p>
<p>然后，指定该snippet的completion shortcut（可选项）。这里我指定为“pm”。这样设置以后，在Xcode的代码编辑器中只需要输入快捷方式（pm），就能简单的将这个snippet添加到代码中。非常有用！</p>
<p>接着，可以看到在上面的示例中，pragma mark的标题是“UIViewController overrides”，不过我们是希望对其修改一下，以能够很容易的输入任意标题。</p>
<p>我们可以简单的将code snippet包含的文本内容修改为“#pragma mark – “即可。不过，这里还有更好的一个办法——将文本块封装到“&lt;#” 和 “#&gt;”中间，这样code snippet将指出我们可以插入自定义文本的完整范围。</p>
<p>下面，将“UIViewController overrides”替换为“&lt;#Title#&gt;”。</p>
<p>注意，completion scopes字段在这里并没有做修改，通过该字段可以指定completion shortcut的有效范围。</p>
<p>最后，点击edit按钮，以完成snippet的编辑。之后可以在这个popover画面中看到最终结果的一个预览效果。</p>
<p>然后点击popover中的done按钮。下面，你可以将我们在代码编辑器中为创建snippet而写入的文本行删除掉。</p>
<p>现在来试用一下刚刚创建的snippet！有两种方法。第一种是在code snippet library中找到snippet，然后用鼠标将其拖拽到代码编辑器中…</p>
<p>…然后松开鼠标。</p>
<p>一旦将snippet拖放到代码编辑器之后，就可以通过点击键盘上的tab键在不同的completion字段间移动焦点。</p>
<p>第二种方法是在代码编辑器里简单的输入completion shortcut中设置的内容即可。我们这里是“pm”。</p>
<p>然后点击键盘中的return键，就可以将snippet插入到代码编辑器中。</p>
<p>很简单吧！现在你已经知道如何创建自己的snippet了，你将发现这非常的有用。任何时候，你都遇到重复输入的相同代码块，都可以考虑将其添加到你的code snippets library中。</p>
<p>下面是我经常使用到的一些snippet：</p>
<p>Title: Animation Block</p>
<p>Completion Shortcut: ab</p>
<p>Completion Scopes: Function or Method</p>
<p>void (^&lt;#Title#&gt;)(void) = ^{ };</p>
<p>Title: Animation Completion Block</p>
<p>Completion Shortcut: acb</p>
<p>Completion Scopes: Function or Method</p>
<p>void (^&lt;#Title#&gt;)(BOOL) = ^(BOOL finished) { };</p>
<p>Title: Notification Add</p>
<p>Completion Shortcut: na</p>
<p>Completion Scopes: Function or Method</p>
<p>[[NSNotificationCenter defaultCenter] addObserver:&lt;#Observer#&gt; selector:&lt;#Selector#&gt; name:&lt;#Name#&gt; object:&lt;#Object#&gt;];</p>
<p>Title: Notification Remove</p>
<p>Completion Shortcut: nr</p>
<p>Completion Scopes: Function or Method</p>
<p>[[NSNotificationCenter defaultCenter] removeObserver:&lt;#Observer#&gt; name:&lt;#Name#&gt; object:&lt;#Object#&gt;];</p>
<p>Title: NSLog</p>
<p>Completion Shortcut: log</p>
<p>Completion Scopes: Function or Method</p>
<p>NSLog(@”&lt;#Log#&gt;”);</p>
<p>Title: Private Interface</p>
<p>Completion Shortcut: pi</p>
<p>Completion Scopes: Top Level</p>
<p>@interface &lt;#Title#&gt; ()</p>
<p>@end</p>
<p>Title: Property Assign</p>
<p>Completion Shortcut: pa</p>
<p>Completion Scopes: All</p>
<p>@property (assign, nonatomic)</p>
<p>Title: Property Strong</p>
<p>Completion Shortcut: ps</p>
<p>Completion Scopes: All</p>
<p>@property (strong, nonatomic)</p>
<p>Title: Property Unsafe Unretained</p>
<p>Completion Shortcut: pu</p>
<p>Completion Scopes: All</p>
<p>@property (unsafe_unretained, nonatomic)</p>
<p>来源http://www.cocoachina.com/industry/20130604/6336.html</p>
]]></content>
		</item>
		
		<item>
			<title>code review</title>
			<link>https://blog.v5u.win/posts/system/system-codereview/</link>
			<pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-codereview/</guid>
			<description>Code Review的好处我觉得不用多说了，主要是让你的代码可以更好的组织起来，有更易读，有更高的维护性，同时可以达到知识共享，找到bug只是其中</description>
			<content type="html"><![CDATA[<p><strong>Code Review的好处我觉得不用多说了，主要是让你的代码可以更好的组织起来，有更易读，有更高的维护性，同时可以达到知识共享，找到bug只是其中的副产品</strong>。</p>
<p>**我个人认为代码有这几种级别：**1）可编译，2）可运行，3）可测试，4）可读，5）可维护，6）可重用。通过自动化测试的代码只能达到第3）级，而通过Code Review的代码少会在第4）级甚至更高。</p>
<p>在Amazon，开发工程师都会被教育拿到需求后一定要问——“为什么要做？业务影响度有多大？有多少用户受益？”，</p>
<h4 id="review实施思路">review实施思路</h4>
<p>先Review设计实现思路，然后Review设计模式，接着Review成形的骨干代码，最后Review完成的代码，如果程序复杂的话，需要拆成几个单元或模块分别Review。当然，最佳的practice是，每次Review的代码应该在1000行以内，时间不能超过一部电影的时间——1.5小时（因为据说那个一个正常人的膀胱可以容纳尿液的最长限度）</p>
<h4 id="1--经常进行code-review">1.- 经常进行Code Review</h4>
<h4 id="2--code-review不要太正式而且要短">2.- Code Review不要太正式，而且要短</h4>
<h4 id="3--尽可能的让不同的人reivew你的代码">3.- 尽可能的让不同的人Reivew你的代码</h4>
<h4 id="4--保持积极的正面的态度">4.- 保持积极的正面的态度</h4>
<p>5.- 学会享受Code Reivew</p>
<p><a href="https://coolshell.cn/articles/1302.html">https://coolshell.cn/articles/1302.html</a></p>
<p>review工具</p>
<p><strong>1. Review board:</strong></p>
<p><strong>Codestriker:</strong></p>
<p><strong>Groogle:</strong>：</p>
<ul>
<li>各式各样语言的语法高亮。</li>
<li>支持整个版本树的比较。</li>
<li>支持当个文件不同版本的diff功能，并有一个图形的版本树。</li>
<li>邮件通知所有的Reivew的人当前的状态。</li>
<li>认证机制。</li>
</ul>
<p><strong>4. Rietveld:</strong></p>
<p><a href="http://www.review-board.org/">Review board</a> 很像。它也是一个基于Web的应用，并在<a href="http://code.google.com/appengine/">Google App Engine</a> 上。</p>
<p><strong>5. JCR</strong></p>
<p>基于WEB界面的最初设计给Reivew Java 语言的</p>
<p><a href="http://jcodereview.sourceforge.net/">JCR</a> 主要想协助：</p>
<ul>
<li><strong>审查者</strong>。所有的代码更改都会被高亮，以及大多数语言的语法高亮。Code extracts 可以显示代码评审意见。如果你正在Review Java的代码，你可以点击代码中的类名来查看相关的类的声明。</li>
<li><strong>项目所有者</strong>。可以 轻松创建并配置需要Review的项目，并不需要集成任何的软件配置管理系统（SCM）。</li>
<li><strong>流程信仰者</strong>。 所有的评语都会被记录在数据库中，并且会有状态报告，以及各种各样的统计。</li>
<li><strong>架构师和开发者</strong>。 这个系统也可以让我们查看属于单个文件的评语，这样有利于我们重构代码。</li>
</ul>
<p><a href="http://jcodereview.sourceforge.net/">JCR</a> 主要面对的是大型的项目，或是非常正式的代码评审，从这方面看来，他并不像上面的那些工具。</p>
<p><strong>Jupiter</strong></p>
<p>它是一个Eclipse IDE 的插件。</p>
<p>Gerrit</p>
<p>使用 <a href="https://www.oschina.net/p/git">Git</a> 作为底层版本控制系统。它分支自<a href="http://www.oschina.net/p/rietveld">Rietveld</a>，作者为Google公司的Shawn Pearce，原先是为了管理Android计划而产生。</p>
<p>Gerrit实际上一个Git服务器，它为在其服务器上托管的Git仓库提供一系列权限控制，以及一个用来做Code Review是Web前台页面。当然，其主要功能就是用来做Code Review。</p>
]]></content>
		</item>
		
		<item>
			<title>富爸爸-给你的钱找个工作</title>
			<link>https://blog.v5u.win/%E5%AF%8C%E7%88%B8%E7%88%B8-%E7%BB%99%E4%BD%A0%E7%9A%84%E9%92%B1%E6%89%BE%E4%B8%AA%E5%B7%A5%E4%BD%9C/</link>
			<pubDate>Fri, 31 Aug 2018 13:15:42 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E5%AF%8C%E7%88%B8%E7%88%B8-%E7%BB%99%E4%BD%A0%E7%9A%84%E9%92%B1%E6%89%BE%E4%B8%AA%E5%B7%A5%E4%BD%9C/</guid>
			<description>富爸爸-给你的钱找个工作 富爸爸鼓励作者，让他的钱，快速在资产间穿梭，而不是傻傻的等待不动，他这里写的不是很细，但老齐可以补充下，最简单的几种</description>
			<content type="html"><![CDATA[<p>富爸爸-给你的钱找个工作</p>
<p>富爸爸鼓励作者，让他的钱，快速在资产间穿梭，而不是傻傻的等待不动，他这里写的不是很细，但老齐可以补充下，最简单的几种东西，都是可以用来对冲的。</p>
<h4 id="比如利率最高的时候一定是投资债券的最好时机">比如利率最高的时候，一定是投资债券的最好时机</h4>
<p>因为未来利率下降，债券市场肯定会先动起来，老债的价格会越来越高。</p>
<h4 id="而当利率降到底了一定是投资股票市场最好的时期">而当利率降到底了，一定是投资股票市场最好的时期</h4>
<p>利率低点往往就是股票的低点，降息周期末尾通常都是牛市的起点。</p>
<h4 id="而一旦利率开始提升股市就不乐观了">而一旦利率开始提升，股市就不乐观了。</h4>
<p>利率上升，资产价格一定下行，但利率上行，通常都伴随有通胀发生，所以这个期间一般是现金为王，商品次之，也就是说可以买一些货币基金，而一些大宗商品也是不错的投资机会。</p>
<p>危机模式，一定是黄金涨的好，繁荣模式下一定是股市更有机会，所以我们一定要利用大类资产间的相互关系，让自己的钱周转起来。</p>
<p>而大部分人不懂的这个道理，他们认为什么能赚钱，就认为这个资产一直都能赚钱，殊不知风向一变，原来赚的钱也都会吐出来。</p>
<p>所以大家要想做到资产穿梭，把资金周转起来，有2个因素必须要看：</p>
<h4 id="第一就是利率和利率趋势">第一就是利率和利率趋势</h4>
<p>这东西就是整个经济周期的开关，他的变化会影响所有资产配置的逻辑。</p>
<h4 id="第二就是别跟大方向作对">第二就是别跟大方向作对</h4>
<p>比如前两天赤字之心的赵丹阳就做了一个演讲，他说如果你是70年代去日本投资，什么都不干就买指数，你15年赚22倍，90年代你觉得日本人太疯狂了，号称自己买下美国了，觉得这有点扯淡了，你拿着钱去了美国，觉得互联网挺有意思，你投下去，还是只买指数，10年间你又赚了27倍，2000年开始，你觉得美国都开始用市梦率估值了，还是中国的股票便宜，中国入世后，也许经济能高增长，你回到了中国8年间基本又是12倍，至此你的资产已经增长了7000多倍，所以投资就是一场选择，选择那趟快车，即使你上去睡大觉，也能赚很多的钱。70年代选中日本，90年代选中美国，2000年后选中中国，这个很难吗？傻子都能看出来谁增长的更快吧。那么现在机会在哪呢？中国肯定比美国快，比欧洲日本都快，但赵丹阳说，越南可能比中国还快。那么你再想想，以后中国发展靠什么？是靠房地产呢？还是靠茅台，又或者靠格力美的这些制造业，以及华为，腾讯，阿里这些高科技企业。这些问题都是我们要思考的。要紧紧跟对趋势。</p>
]]></content>
		</item>
		
		<item>
			<title>读书笔记之指数基金投资指南</title>
			<link>https://blog.v5u.win/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E6%8A%95%E8%B5%84%E6%8C%87%E5%8D%97/</link>
			<pubDate>Wed, 22 Aug 2018 16:45:11 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E6%8A%95%E8%B5%84%E6%8C%87%E5%8D%97/</guid>
			<description>指数基金投资指南 银行螺丝钉 投资者笔记 2018-05-16 16:54:05 所以一般挑选指数基金的时候，会避开规模较小的指数基金，最好规模在1亿以上再考虑。 2018-05-16 17:06:31 将全部沪深300</description>
			<content type="html"><![CDATA[<p>指数基金投资指南</p>
<p>银行螺丝钉</p>
<p>投资者笔记</p>
<p>2018-05-16 16:54:05</p>
<p>所以一般挑选指数基金的时候，会避开规模较小的指数基金，最好规模在1亿以上再考虑。</p>
<p>2018-05-16 17:06:31</p>
<p>将全部沪深300指数的300家公司排除，然后将最近一年日均总市值排名前300名的企业也排除，这样可以最大限度地避免选入大公司。在剩下的公司中，选择日均总市值排名前500名的企业，这就是中证500指数啦。</p>
<p>第4章 如何挑选适合投资的指数基金</p>
<p>2018-05-16 17:28:13</p>
<p>创业板指数整体公司规模较小，属于以中小型公司为主的指数。</p>
<p>价值投资的理念</p>
<p>2018-05-16 17:32:13</p>
<p>红利策略的有效性久经考验，所以各家指数发布商都发布了基于红利策略的指数。上证有上证红利指数，深证有深证红利指数，中证有中证红利指数，标普指数公司也为A股开发了红利机会指数。</p>
<p>2018-05-16 17:37:31</p>
<p>也就是说，熊市分红后再投入的效果非常出众。指数的股息率越高，这一点在熊市越是明显。所以红利指数高股息率的特性，在熊市里是非常不错的优势。</p>
<p>注: 红利指数的使用规范。</p>
<p>指数基金估值方法小结</p>
<p>2018-05-16 18:07:13</p>
<p>港地区上市，这样的公司就是H股了</p>
<p>投资者笔记</p>
<p>2018-05-16 18:21:21</p>
<p>但实际上，信息科技行业是一个“老二非死不可”的行业：</p>
<p>2018-05-16 18:39:04</p>
<p>要想入选标普500，得是一个行业排在前面的领导者</p>
<p>第5章 如何买卖指数基金：懒人定投法</p>
<p>2018-05-16 18:42:58</p>
<p>沪深300指数主要投资沪深两市规模最大的300只股票，是大盘股的代表指数。中证500指数投资排除了沪深300包含的300只股票之后的规模最大的500只股票，是中盘股的代表指数。</p>
<p>2018-05-16 18:46:56</p>
<p>市盈率、市净率、市现率较低，股息率较高”的股票。这类股票一般被称为价值型股票，而价值指数就是这类股票的代表。</p>
<p>什么是定投</p>
<p>2018-05-16 19:00:38</p>
<p>最主要的10个一级行业分别是：</p>
<p>如何制定定投策略</p>
<p>2018-05-16 19:02:04</p>
<p>像医药、必需消费、可选消费，以及相关的主题行业。另一类是在周期底部也能盈利的强周期性行业，像金融行业中的银行、证券、保险、地产行业、能源行业、部分材料行业等。</p>
<p>2018-05-16 19:07:31</p>
<p>医药行业的指数主要有以下几种：</p>
<p>2018-05-16 19:07:41</p>
<p>中证医药指数：又称中证800医药指数，是从中证800指数中挑选</p>
<p>2018-05-16 19:07:50</p>
<p>医药行业。</p>
<p>·中证医药100指数：挑选了100家大型医药股，每只股票买入相同的金额。</p>
<p>·上证医药指数：只投资上交所的医药行业公司。</p>
<p>·全指医药指数：从整个A股中挑选医药行业，它覆盖的医药公司是最全的。</p>
<p>·细分医药指数：挑选了医药行业细分领域的主要公司。</p>
<p>·300医药指数：挑选了沪深300指数里的医药行业公司。</p>
<p>·500医药指数：挑选了中证500指数里的医药行业公司。</p>
<p>定投的实操步骤</p>
<p>2018-05-16 19:18:59</p>
<p>银行可以以3%的利率从储户手里收集钱财，然后以6%的利率贷给企业。贷款的利息就是利息收入，支付的3%就是利息费用。</p>
<p>注: 利息收入。</p>
<p>2018-05-16 19:19:07</p>
<p>银行贷款给客户，如果客户还不上钱，银行就得从自己的收益中拿出一部分来弥补亏空。这个用来弥补亏空的资金要预先准备好，这就是“风险准备金”费</p>
<p>注: 风险准备金。</p>
<p>2018-05-16 19:21:46</p>
<p>我们可以看出银行的周期性受宏观经济的影响较大。当经济处于下行周期，客户还款质量下降，风险准备金增加，同时国家也要降息来刺激经</p>
<p>2018-05-16 19:21:55</p>
<p>济，所以银行利差收益减少，风险准备金增加，银行效益就会变差。当经济好转时，国家要给经济降温，客户还款质量也变好了，银行效益就会变好。因为经济周期一直在波动，所以银行也会周期往复。</p>
<p>注: 银行周期和经济周期的关系。</p>
<p>如何计算定投的年复合收益率</p>
<p>2018-05-17 14:55:50</p>
<p>我们选择证券行业的指数基金来投资券商，既可以享受到它的强周期性特征，又可以摒弃大多数个股风险。</p>
<p>注: 证券行业指数基金</p>
<p>2018-05-17 14:57:54</p>
<p>金融行业指数基金分为两类：一类是同时包括银行、证券、保险3个子行业的指数基金。另外一类，有一些投资者不想投资银行，但是看好证券和保险这两个金融子行业，则可以通过非银金融行业的指数基金来投资。</p>
<p>注: 金融行业指数基金</p>
<p>三个定投计划实例</p>
<p>2018-05-17 15:11:02</p>
<p>格雷厄姆对价值投资总结出了三个非常重要的理论，分别是：价格与价值的关系、能力圈，以及安全边际。</p>
<p>注: 价值投资</p>
<p>读者的案例</p>
<p>2018-05-17 15:15:28</p>
<p>最常用的估值指标有哪些呢？主要是4个：市盈率、盈利收益率、市净率、股息率。</p>
<p>注: 股票估值指标</p>
<p>2018-05-17 15:16:55</p>
<p>（1）市盈率反映了我们愿意为获取1元的净利润付出多少代价。</p>
<p>2018-05-17 15:17:12</p>
<p>（2）估算市值。</p>
<p>2018-05-17 15:27:37</p>
<p>（3）市盈率的适用范围：流通性好、盈利稳定的品种。</p>
<p>2018-05-17 19:30:08</p>
<p>总的来说，流动性好、盈利稳定的品种，就可以使用市盈率为其估值。宽基指数基金大多都可以与这两点比较符合，所以使用市盈率为宽基指数基金来估值是可行的。</p>
<p>注: 市盈率的使用规则</p>
<p>投资者笔记</p>
<p>2018-06-01 09:16:54</p>
<p>有几种可以获得指数估值的方法。</p>
<p>注: 指数基金估值指标查看方法</p>
<p>货币基金：随取随用的“余额宝”</p>
<p>2018-06-01 08:47:10</p>
<p>这里有两个数据可供参考。一个是10%，一个是6.4%。</p>
<p>当盈利收益率大于10%时，开始定投。</p>
<p>2018-06-01 08:47:38</p>
<p>格雷厄姆认为，满足两个条件就算高，一是盈利收益率要大于10%，二是盈利收益率要大幅高于同期无风险利率。</p>
<p>债券基金怎么买</p>
<p>2018-06-01 08:55:50</p>
<p>目前适合盈利收益率的品种，国内主要是上证红利、中证红利、上证50、基本面50、上证50AH优选、央视50、恒生指数和恒生中国企业指数等。</p>
<p>做好家庭资产配置</p>
<p>2018-06-01 09:19:47</p>
<p>决定股市长期回报的最关键的三个因素。分别是：初始投资时刻的股息率、投资期内的市盈率变化、投资期内的盈利增长率。</p>
<p>投资者笔记</p>
<p>2018-06-13 08:04:17</p>
<p>提高定投收益的5个小技巧</p>
<p>后记</p>
<p>2018-06-13 08:09:15</p>
<p>有几个要诀：</p>
<p>2018-06-13 08:08:57</p>
<p>（1）尽量选择费率比较低的场外和场内渠道。</p>
<p>（2）不要过于频繁交易，以免产生较高的费用。</p>
<p>（3）成立1年以上的指数基金，在分红税上会更有优势一些。</p>
<p>2018-06-13 08:29:29</p>
<p>这里要注意一点，家庭中打算投资股票资产的比例，最好不要低于30%，低于30%的投资</p>
<p>2018-06-13 08:30:01</p>
<p>对于家庭总资产的收益提升作用不明显。</p>
<p>2018-06-13 08:32:07</p>
<p>一份完整的定投计划，需要根据自己的收入和开支，设定合理的每月定投额度；也需要筛选适合投资的品种，设定好买卖区间；最终我们需要把这些因素全部一一落在纸面上，让任何一个拿到这个计划的人，都可以执行出相同的效果。如此，这份定投计划才算完成了。</p>
<p>需要强调的是，最终的计划必须能落在纸面上！这样才能让自己每次投资的时候严格遵守，避免主观情绪干扰我们的投资。</p>
<p>2018-06-13 08:33:23</p>
<p>记账小窍门</p>
<p>窍门一：大账马上记，小账汇总记。</p>
<p>比较大的开销，要在发生之后马上记下来。比较小的开销，例如路边买饮料等，随时记录不太方便，我们可以大概估算一下花了多少，每一两天记录一下花在小账上的总数就好。</p>
<p>2018-06-13 08:33:35</p>
<p>窍门二：购物凭证要留好。</p>
<p>2018-06-13 08:35:15</p>
<p>通过记账，我们能看到自己把钱花在了哪里。但同时聪明人还会发现其中的一个问题，那就是我们购买的真的是我们所需要的吗？</p>
<p>很多时候，其实我们都只是因为觉得“以后会需要”，就把这些东西买下来。这些东西可能是超市或电商大降价促销的廉价大米，可能是一堆用不到的塑料碗，也可能是网站推荐的一个功能貌似不错的小家电，结果买下来以后就屯在家里吃灰了，相信不少读者都有这样的体会。</p>
<p>这些貌似“以后用得上”的东西，也是我们投资的敌人。</p>
<p>2018-06-13 08:43:16</p>
<p>4.定期检查优化</p>
<p>2018-06-13 18:40:13</p>
<p>定投计划表</p>
<p>2018-06-13 18:41:44</p>
<p>不管是什么需求，定投过程中“买什么，怎么买，卖什么，怎么卖”这四点基本不变。读者可以参考这三个实例，更好地完善自己的定投计划。</p>
<p>2018-06-13 18:41:50</p>
<p>1.为父母构建养老定投计划</p>
<p>2018-06-13 18:42:54</p>
<p>这里有一个参考标准。如果我们每年从计划中取用的资金不超过总市值的4%，就不会影响长期取用。</p>
<p>2018-06-13 18:44:40</p>
<p>.为自己构建加薪定投计划</p>
<p>2018-06-13 18:44:48</p>
<p>首先要明确一点，对于年轻上班族来说，认真工作才是让自己资产变多的最佳途径，而不是靠投资致富。</p>
<p>2018-06-13 18:45:01</p>
<p>对于上班族的投资，要牢记以下三个原则：</p>
<p>2018-06-13 18:44:56</p>
<p>原则一：钱少也要存，节流为先。</p>
<p>2018-06-13 18:45:07</p>
<p>原则二：区分“想要”和“必需”。</p>
<p>2018-06-13 18:45:13</p>
<p>原则三：越早开始投资越好。</p>
<p>2018-06-13 18:45:53</p>
<p>为子女构建教育定投计划</p>
<p>2018-06-13 19:13:57</p>
<p>构建一个适合自己的详细定投计划分为四个步骤：梳理自己的现金流、挑选好基金、构建定投计划、定期检查优化。</p>
<p>2018-06-13 19:32:16</p>
<p>简单总结一下，我们什么时候可以投资债券基金呢？当有短期资金需要打理的时候，或是对于打算长期投资的资金，若有低估指数基金则主要投资指数基金，而一旦没有低估值指数基金时，就可以考虑债券基金品种啦。</p>
<p>2018-06-13 19:33:55</p>
<p>.债券基金怎么投资</p>
<p>投资债券基金比指数基金简单很多，只需要记住两句话即可：</p>
<p>第一，利率低位选短期，利率高位选长期。</p>
<p>第二，随时可以投资，出现浮亏可以加仓拉低成本。</p>
<p>2018-06-13 19:39:15</p>
<p>债券基金有哪些品种</p>
<p>2018-06-13 19:39:22</p>
<p>短期债券基金</p>
<p>2018-06-13 20:10:46</p>
<p>巴菲特卖出有三种情况：（1）基本面恶化：鹅下不出金蛋了。</p>
<p>（2）过于昂贵：有人愿意出大价钱买我们手里的鹅，价钱远比鹅能产出的金蛋多得多。</p>
<p>（3）有更好的品种：手里的鹅卖出，可以买到另一只能下更多金蛋的鹅。</p>
<p>2018-06-13 20:13:46</p>
<p>投资指数基金，复利从哪里来</p>
<p>2018-06-13 20:13:58</p>
<p>对指数基金投资来说，复利主要有三种形式。</p>
<p>2018-06-13 20:14:16</p>
<p>1.低买高卖</p>
<p>2018-06-13 20:15:51</p>
<p>2.公司盈利的再投入</p>
<p>2018-06-13 20:16:57</p>
<p>3.分红再投入</p>
<p>多看笔记 来自多看阅读 for iOS</p>
]]></content>
		</item>
		
		<item>
			<title>composer的使用</title>
			<link>https://blog.v5u.win/composer%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
			<pubDate>Tue, 21 Aug 2018 18:27:06 +0000</pubDate>
			
			<guid>https://blog.v5u.win/composer%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
			<description>composer是PHP的包管理器 使用： 在项目目录下执行 引入 composer require twbs/bootstrap 删除 composer remove twbs/bootstrap p.s. 这种方式的引入讲整个项目都下载下载，本人非常不喜欢 参考网站 https://www.phpcomposer.com/</description>
			<content type="html"><![CDATA[<p>composer是PHP的包管理器</p>
<p>使用：</p>
<p>在项目目录下执行</p>
<p>引入 composer require twbs/bootstrap</p>
<p>删除 composer remove twbs/bootstrap</p>
<p>p.s. 这种方式的引入讲整个项目都下载下载，本人非常不喜欢</p>
<p>参考网站 <a href="https://www.phpcomposer.com/">https://www.phpcomposer.com/</a></p>
]]></content>
		</item>
		
		<item>
			<title>编程难在哪里？一个美国实习生的故事</title>
			<link>https://blog.v5u.win/%E7%BC%96%E7%A8%8B%E9%9A%BE%E5%9C%A8%E5%93%AA%E9%87%8C%EF%BC%9F%E4%B8%80%E4%B8%AA%E7%BE%8E%E5%9B%BD%E5%AE%9E%E4%B9%A0%E7%94%9F%E7%9A%84%E6%95%85%E4%BA%8B/</link>
			<pubDate>Tue, 21 Aug 2018 12:03:55 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E7%BC%96%E7%A8%8B%E9%9A%BE%E5%9C%A8%E5%93%AA%E9%87%8C%EF%BC%9F%E4%B8%80%E4%B8%AA%E7%BE%8E%E5%9B%BD%E5%AE%9E%E4%B9%A0%E7%94%9F%E7%9A%84%E6%95%85%E4%BA%8B/</guid>
			<description>记得之前组里来了一个美国实习生小伙子，很geek的那种，干活快，一天能给你写2000行代码(我code review的速度跟不上他写的速度)，</description>
			<content type="html"><![CDATA[<p>记得之前组里来了一个美国实习生小伙子，很geek的那种，干活快，一天能给你写2000行代码(我code review的速度跟不上他写的速度)，让做什么东西，上午告诉做个这个功能，下午就能在测试环境跑起来演示了。跟他单独开会的时候，他说觉的普通的编程没什么意思，太简单了，写程序这方面已经没什么追求了，他比较想跟我研究大数据的框架，数据库，或者机器学习之类的工作，做设计，早日脱离代码这种无脑工作。</p>
<p>我足足花了1周时间，每天review他的代码到凌晨。给他写的comments反馈快赶上我在知乎写的答案文章之和了。。。期间几小时几小时的开会论战，孩子狂，语速快，脑力灵，辩论角度刁钻。他天天要与我论战，看我的评语，速度还算慢下来了。</p>
<p>没来得及讨论完，隔周我要休假了，2周。交代了些他要做的工作。</p>
<p>2周回来，让他改的那个java包爆炸了，本来我们一个支持了7个功能的框架包，总代码量也就5k把，等我回来这包代码量1w5+。也就是说他为了一个小功能加了1w行代码。</p>
<p>这没法review，只能跟他坐一块，先让他给我讲讲这代码都干什么的，然后他说：</p>
<p>(沉思+100)这块我现在也看不太懂当时为什么这么写了。。。</p>
<p>(沉思)这边写的比较复杂是因为当初那边是那样写的，所以这边没办法才只能这么写。</p>
<p>(沉思)把当初那边改好很麻烦，影响也很大，不如就这样吧。</p>
<p>(沉思)这里这么写是因为你看着里是这样的， 然后这里有这个逻辑，然后这里。。。（来回来去翻n个类之后）。。。 所以你看我这里虽然写的比较诡异，但是完全没问题的！（得意ing）</p>
<p>(沉思)这边做的这么奇怪是因为有个bug，通过这么写，这个就bug没了，我也不知道怎么回事。。。所以你看我在这边注释，这行不能删了。。。</p>
<p>(沉思)我觉得这个功能很酷，你们虽然现在不需要，不过有总比没有好吧，将来如果……%¥……&amp;%&amp;……%<em>7&amp;%……</em>%…（我没听懂）的话，这个就很有用！！</p>
<p>…</p>
<p>一次一次被我打回去重写，后来总算简化成大概5k行了；临走时候跟我说：你这样编程也太难了。。。</p>
<p>再后来由于一些额外复杂的代码造成我们实现新东西会很复杂，我又重写了一遍，总共大概不到1k行代码。</p>
<p>这里边有几件事情我想说：</p>
<p>做出来容易， 做正确难，这里做出来指没bug且完成需要的功能，这是最基本要求，不多加讨论。这里正确，不是指功能正确，而是指程序可以很容易推理理解，理解意图， 理解如何做到的，理解为什么系统不会出错。理解为什么要这么做。正确是现在怎么写不会挖坑害将来的人，现在怎么写能让别人1年后看你代码时候不可能理解错你现在的意图，现在怎么写能在别人将来犯错的时候提示他你错了。</p>
<p>编程是给未来的未知人讲故事，你无法知道将来这个人是谁，他都懂什么，他经历过什么，这个系统将来已经是什么样子了。我们需要在这种无知，缺乏信息的情况下做决定，从千万种把这件事做出来的方法里，选出你觉得最能把这个故事给讲好的那种方式，把故事写下来。编程是一种沟通，沟通是一种艺术，用程序跨越时空之沟通则是一门属于程序员的特有的艺术（就好比数学家用数学公式来沟通） coding is all about the art of communication（引用）。</p>
<p>坏的决定会导致坏的决定，甚至导致人们去扭曲一个好的决定去迎合坏的决定。垃圾会制造垃圾，一个放在系统里不经清理的额外复杂度，会导致更多的额外复杂度的生成。</p>
<p>每个人甚至同一个人的不同时刻都有自己的不同的制造额外复杂度的缺陷，比如我每年去看去年自己写的代码，觉得都是垃圾。</p>
<p>然后我又想问几个问题：</p>
<p>我们所在的部门，所在的组，公司，它们的文化，到底是关心作出了一个东西，还是关心做好了一个东西。一个总是给系统添加垃圾，留坑给后人，但是能很快做出能跑起来的系统的程序员，我们到底认为他是做了好事还是做了坏事？我们到底认为他很强，还是他很弱？用超过必要而为了突显技术实力（或者练手）的复杂工具，技术框架搭建系统，做完跑路，在一个组，一个部门，一个公司，那里的文化，到底应该是鼓励还是抑制这种行为？我们又应该如何在一个环境中，去倡导推崇什么样的文化，相遇什么样的人？</p>
<p>人与文化，决定了什么人留在这里，什么人离开，什么人吸引什么人，什么人成长成什么样子。而设计／技术这些枝末细节则必顺应此中的人与文化而自然变化，或自愈，或走向毁灭；哪怕在恶劣的环境中，向下引导，向上规谏，潜移默化，最终改天换日，此为编程之大道也！</p>
<p>下边是定理证明（雾）</p>
<p>======画风突变高能预警！！！！！！</p>
<ul>
<li>最小垃圾存在定律</li>
<li>垃圾与复杂度正比定律</li>
<li>垃圾倍增定律</li>
<li>系统腐败定律</li>
<li>战斗人员负战力定律</li>
<li>以一敌百存在定律</li>
<li>系统本质复杂度不可知定律与系统表征复杂度无限接近本质定律</li>
<li>最弱表达力原则</li>
</ul>
<p>最小垃圾存在定律：定义垃圾为系统的总复杂度减去系统的本质复杂度；那么得到：如存在多种方法可以设计与实现一个系统或功能，存在且只存在一种实现会引入最少的垃圾；</p>
<p>垃圾与复杂度正比定律：根据定义可得，系统存在的垃圾越多，系统越复杂；</p>
<p>垃圾倍增定律：基于已有垃圾量a的现状来演化，进化此系统，增加的新垃圾量与已有垃圾量a成正比；</p>
<p>系统腐败定律：当基于垃圾量a来实现新功能的cost大于新功能本身的价值时，系统腐败，需要重构；</p>
<p>战斗人员负战力定律：如果程序员a引入的垃圾，在n次迭代中经过倍增所造成的成本，大于其所清扫的垃圾经过倍增所获得的机会成本，和其实现的新功能价值之和。此时，我们称此程序员战力为负值，其战力绝对值与其引入垃圾的能力和其清扫垃圾的能力的差值成正比</p>
<p>以一敌百存在定律：由负战力定律可知，对所有的自然数n，一个正战力的战斗人员的战力 &gt; （负战力战斗员1+负战力战斗员2+ … 负战力战斗员n）的战力和系统本质复杂度不可知定律与系统表征复杂度无限接近</p>
<p>本质定律：取决于战斗人员的知识量，经验，天赋等，对于任何战斗人员n，都必定存在一个战斗人员m（考虑历史长河）使得战斗人员n观察系中的纯净无垃圾系统（复杂度总为1）是战斗人员m观察系中的含垃圾系统（复杂度为1+x），这使得在所有观察系中（包含外星生物），系统的表征复杂度(或者说观察复杂度)无限趋近与本质复杂度。然而我们只能通过观察来感知事物的本质复杂度，却永远无法得知我们离本质复杂度还有多远。（感谢评论区 @尤睿 提出表征复杂度这个概念来纠正此定律）</p>
<p>以有限的生命去追求可以无限的提升的净化方法与视野，我们称之程序艺术家，也就是SDA（Software Development Artist）</p>
<p>… it’s extraordinarily important that we in computer science keep fun in computing…</p>
<p>——— Alan J. Perlis (April 1, 1922-February 7, 1990) 《SICP》</p>
<p>打星际… 哦，不, 错了重来… 写程序，你快乐嘛？</p>
<p>写在最后，看到大家最关心的是他拿到正式录取资格了么？还有也许通过我的描述关于他的这个侧面，你会觉得他很不称职。其实不是的，他代码写的绝对是平均值往上的水平，他的问题在于：</p>
<p>是他根本没有想过去简化业务逻辑，所以很多符合最初需求的代码在简单优化业务逻辑之后完全不需要，</p>
<p>是自己加了很多功能，</p>
<p>是自己加了很多自以为是的优化，比如用一个算法估算某个函数的输入数组的最大可能值，然后用那个值来初始化一个数组，因为这样就不会重新分配内存了（他原话）。</p>
<p>抽象能力有限，这个毕竟经验少， 年轻。</p>
<p>滥用设计模式(关于设计模式，最多程序员被绊住的一关：设计模式是面向对象编程模型中，应对经典问题的经典解决方案。这里就有两个问题，第一，设计模式的场景用对了么？第二，为什么要用面向对象范式，选择编程语言范式时，要从表达力最弱最简单的语言范式开始选择。这叫做最弱表达力原则，而面向对象范式作为最复杂，表达力最强的语言范式，在大多数时候都可以避免使用。关于第二点的论述证明，你可以看concept techniques and models of computer programming这本书。注意，这里说的是语言范式，而不是语言。即使你用java，如果你从来不使用mutable(专业词汇)的功能，和继承。那么你就没有使用面向对象范式)</p>
<p>他其实有非常强的解决问题的能力，想法天马行空，通过自己设计算法来猜函数可能需要的数组大小就可见一斑，还有一个从s3(专业词汇)读数据的需求，他不是简单调api完了，而是写了一个环状buffer(专业词汇)，使得网络，硬盘，app可以在理论上最大效率的适应程序当时的场景（为了协调异步，他自己发明了一个很笨拙的promise(专业词汇)），这非常厉害，一般的实习生哪怕sde1可能都写不出来（可惜的是场景会随业务逻辑激烈变化，今天的优化可以是明日的累赘，这就叫做过度优化，过度优化是一种强耦合，会把你的系统死死的钉死在当前版本）。他只是不明白简单是美这件事情而已。如果能有人帮他斧正，日后必成大器。</p>
<p>他最终拿到了正式录取资格，这其中还有个小波折，终审的bar raiser(amazon内部的一个可以一票否决招聘结果的角色)看到他在代码复查系统里跟我的各种激辩，觉得这人不能留。好说歹说才给了正式录取资格。不过最后人家没接，去读博啦。</p>
<p>最最后：在一个相对干净的环境写程序，不断找出新的本来以为不是垃圾的垃圾，对我来说，是一件非常愉快的事情。然而帮别人打扫他本就不该制造的垃圾则是非常痛苦的一件事。</p>
<p>写程序，本应是多么快乐的一件事啊！</p>
<p><a href="url:https://1024ss.com/r/7663">原文</a></p>
]]></content>
		</item>
		
		<item>
			<title>面试</title>
			<link>https://blog.v5u.win/posts/ios/ios-%E9%9D%A2%E8%AF%95/</link>
			<pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-%E9%9D%A2%E8%AF%95/</guid>
			<description>当面试，问对象深拷贝，浅拷贝的时候，面试官实际上是想问什么？ 拷贝方法的实现原理 指针拷贝和值拷贝 各种数据结构的 选择倾向</description>
			<content type="html"><![CDATA[<p>当面试，问对象深拷贝，浅拷贝的时候，面试官实际上是想问什么？</p>
<p>拷贝方法的实现原理</p>
<p>指针拷贝和值拷贝</p>
<p>各种数据结构的 选择倾向</p>
]]></content>
		</item>
		
		<item>
			<title>“哥德尔不完备定理”到底说了些什么</title>
			<link>https://blog.v5u.win/805/</link>
			<pubDate>Tue, 14 Aug 2018 16:46:52 +0000</pubDate>
			
			<guid>https://blog.v5u.win/805/</guid>
			<description>作者：自由飞翔 链接：https://www.zhihu.com/question/27528796/answer/329942289 来源：知</description>
			<content type="html"><![CDATA[<p>作者：自由飞翔</p>
<p>链接：https://www.zhihu.com/question/27528796/answer/329942289</p>
<p>来源：知乎</p>
<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p>转一段清华大学赵昊彤博士的解读，我认为算是简单清晰准确。</p>
<p>““哥德尔不完备定理”到底说了些什么？——（一）</p>
<p>【中文网上深入介绍哥德尔不完备定理的文章很少，我这篇文章写得很长，花了不少时间打磨它，希望能帮助到爱好数学与逻辑的人。</p>
<p>文章把理解哥德尔不完备定理分为了五重，建议只是想初步了解的读者，可以重点看第一重；希望了解一些背景的读者，可以修炼到第二重；希望较深入理解哥德尔证明思路的读者，建议修炼到第三重；如果确实感兴趣，希望详细了解哥德尔证明过程以及其严谨性的读者，可以修炼到第四重；如果还想多知道一些知识的读者，可以练到第五重。</p>
<p>——— 作者】1931年，库尔特∙弗雷德里希∙哥德尔（KurtFriedrich Gödel）发表了一篇影响深远的论文“On formally undecidablepropositions of Principia Mathematica and related systems I”[1]（论文的原文是用德文发表的，这里给出的是英译名）。</p>
<p>今天，我们一般笼统的把论文中提出的定理称为“哥德尔不完备定理”。80多年过去了，“哥德尔不完备定理”的影响仍然持续、深远，特别是引起了很多非数学界人士的兴趣，引发了各种各样的解读。很遗憾，有一些解读是不准确的，甚至是错误的；更为严重的是，有一些人出于对“哥德尔不完备定理”的一知半解，甚至开始怀疑、批判人类的理性，以至于发展到相信、鼓吹不可知论。近期，我在认真研读了哥德尔论文原文（英译版，本人实在是不懂德文）和相关资料的基础上，加深了自己的认识，同时也很希望尽自己绵薄之力，分享对“哥德尔不完备定理”的理解，厘清对“哥德尔不完备定理”的误解。</p>
<p>“哥德尔不完备定理”是数学、逻辑学领域的划时代成果，使人们对于数学研究基础的认识更加深刻、准确，同时它也是现代逻辑史上的重要里程碑。“哥德尔不完备定理”虽然伟大、深刻，但是个人认为它并不深奥。对于一个普通人，只要愿意动脑，都可以在一定程度上准确理解它。当今的互联网时代，网上有不少对“哥德尔不完备定理”的介绍和解读；60多年前，两位美国作家欧内斯特·内格尔（Ernest Nagel）和詹姆士 R. 纽曼 （James R. Newman）撰写的的著作《哥德尔证明》更是科普“哥德尔不完备定理”的重要作品。如今网上能看到的中文介绍“哥德尔不完备定理”的文章，绝大部分是转述《哥德尔证明》这本书的内容的。不过这本书撰写太早，有些新的结论当年尚不了解；另外这本书在普及哥德尔证明的时候，更多的是讲解背景、思路，并用作者自己的理解来讲述哥德尔的证明，个别地方不够严谨，一些讲述方式也不够准确。本文则全部基于哥德尔论文的原文来介绍“哥德尔不完备定理”的证明，并适当融入一些80多年来新的认识和结论，希望能帮助数学、逻辑学爱好者了解并理解“哥德尔不完备定理”。为了帮助更多人在各自需要的层面上理解“哥德尔不完备定理”，下面的介绍把理解“哥德尔不完备定理”分为了五重，从对定理的基本含义的理解一直到对核心证明的了解都包括了进来。读者可以像修习“乾坤大挪移”神功一样，依照自身内力基础，修炼到适合自己的层面即可。祝愿大家都能练成“哥德尔不完备定理”第五重神功！</p>
<p>第一重：“庐山真面目”——准确了解“哥德尔不完备定理”赏玩一块美玉的时候，首先不应该是听各类专家讲这块玉多么晶莹剔透、多么价值连城，而应该是首先把玉拿出来让大家看看，有个感性认识。在哥德尔的论文中，我们一般所说的“哥德尔不完备定理”（有时候也被叫做“哥德尔第一不完备定理”）是指论文中的定理VI，</p>
<p>原文如下：TheoremVI: For every ω-consistent primitive recursive class κ of formulae, there is aprimitive recursive class-sign r , such that neither forall(v,r) nornot(forall(v,r)) belongs to Conseq(κ) (where v is the free variable of r).</p>
<p>尽量原汁原味的翻译如下：定理VI：对于任意一个ω一致（第四重）的原始递归公理集合κ，一定存在一个原始递归（第三重、第四重）的表达式r，使得无论是“r总成立”这个命题，还是“r不总成立”这个命题，都不属于通过κ可推导出来的定理的集合（原文中的Conseq(κ)）。</p>
<p>补充说明一点，哥德尔论文中的κ所代表的公理集合，是指蕴含了皮亚诺算术公理（Peano Axioms）的集合，这是在哥德尔论文的前面明确了的，所以在阐述定理VI时就没有再特意强调。修炼第一重神功的读者可能会问了“大哥，你说的这些都是啥？”。别担心，修炼第一重神功没那么复杂。</p>
<p>让我们先从公理说起，公理其实就是无需证明而被认定为成立的命题。公理体系是指一组公理的集合。通过这些公理和基本的逻辑关系，可以推导出更多成立的命题，称为定理。公理体系一般被认为发源于2300多年前欧几里德撰写的《几何原本》。在现代科学形成的过程中，人们发现通过定义一组公理再加上合理的逻辑推演，可以证明很多命题或结论。公理体系是当今数学研究和科学研究的基础，数学研究成果就是（或者说在极大的程度上依赖于）一组公理体系的推演，而其它科学研究除了依赖公理体系进行推演外，还需要通过系统的实验来进行验证。“哥德尔不完备定理”是针对公理体系的一项结论，它之所以如此伟大且深刻，正是因为它撼动的是一切科学的研究基础——公理体系。</p>
<p>修炼第一重神功的时候，我们简要理解“哥德尔不完备定理”说的是：一个足够复杂的公理体系（至少蕴含了皮亚诺算术公理），如果它是一致的（相容的，无矛盾的），那么它就是不完备的。这里的完备，指的是“对于任何可在这个公理体系内描述的命题，都可以在这个公理体系内得到判定，要么是正确的，要么是错误的”。</p>
<p>再用大白话解释一下，就是说，一个没有矛盾的公理体系内，总有一些命题是说不清楚对还是错的（务必注意，这是指在这个体系内说不清楚，不是说永远都说不清楚了）。也许有人说了，既然没矛盾的公理体系有问题，那就搞个有矛盾的公理体系呗。</p>
<p>如果设想一个公理体系，一会儿告诉我们“1+1=2”，一会儿又告诉我们“1+12”，相信不会再有人把这个公理体系当回事。有矛盾的公理体系会导致彻底的无意义和虚无，修炼第二重神功的时候会详细阐明这一点。上述结论听起来是比较可怕的，公理体系必须没有矛盾，可是没有矛盾的公理体系又会导致出现一些命题说不清楚对错。于是开始出现了各种各样的解读，比如“哥德尔定理告诉了我们数学和逻辑的极限，这也几乎是人类理性的极限。它证明理性不是无所不能的”、“哥德尔定理告诉我们，人类不可能真正认识这个世界，永远不可能理解宇宙的真理”等等。相信作为人类理性智慧光辉代表之一的哥德尔，如果听到这些说法，可能也会很无奈吧。</p>
<p>第一，“哥德尔不完备定理”不仅不是所谓人类理性的极限，恰恰相反，它是人类理性智慧的重大成果。它告诉了我们，正是由于有了人类理性的智慧，才有可能认识到这样深刻的结论。哥德尔是通过构造出了一个无法在这个公理体系内证明的命题来证明出“哥德尔不完备定理”的。这个命题的内容说的正是“命题自身无法在此公理体系内被证明”，既然哥德尔已经清楚的证明了这一点，说明这个命题毫无疑问是正确的。所以，“哥德尔不完备定理”的证明过程其实告诉了我们，存在一个可在这个公理体系内表达的正确的命题，但是在这个公理体系内却既不能证明它，也无法证伪它。如果说“哥德尔不完备定理”阐明了什么极限的话，那它阐明的也只是“某类公理体系的极限”，而不是“数学、逻辑的极限”，更不是什么“人类理性的极限”。</p>
<p>第二，“哥德尔不完备定理”不仅不会告诉我们“人类不可能真正认识这个世界”，反而是在更深刻的层面上告诉了我们人类应该如何去认识世界、探索真理。譬如在数学上，如果发现一个命题通过现有的方法、公理和定理一直得不到证明，我们就可以尝试扩展现有的方法和公理体系来进一步研究；费马大定理、黎曼猜想等命题被称为“会下金蛋的母鸡”就是这个道理。物理学上，广义相对论的发现过程，也是因出现了平直空间中狭义相对论某些推论难以解释（如高速旋转的圆盘会发生扭曲），爱因斯坦提出了等效原理并毅然拓展了平直空间的假设，创建了广义相对论这个伟大的理论。值得一提的是，哥德尔和爱因斯坦在普林斯顿大学成为了非常好的朋友。晚年的爱因斯坦曾经说过，之所以他每天还会经常坚持去办公室上班，是因为可以在路上和哥德尔聊聊天；而爱因斯坦的去世也曾给哥德尔的情绪以很大打击。</p>
<p>第三，“哥德尔不完备定理”也没有给出人类认识真理的上限。如果一个命题在某个公理体系内无法判定，那也不是意味着这个命题就是无法判定的了。对于这类命题，如果属于科学范畴的，可以通过科学实验加以判定，从而扩展现有的公理体系，发现新的科学规律；如果属于数学范畴的，可以通过寻找新的数学工具、数学方法或者数学理论来直接拓展现有公理体系，从而准确的判定这个命题，进而扩大人类研究的深度和广度。还有人了解到，数学研究已经证明了“不存在一个通用的算法，能够判定一个给定的命题在某个确定的公理体系内是否是可判定的”。由此认为既存在着不可判定的命题，又不存在“能够判定某个命题是否不可判定的方法”，显然我们没法准确认识这个世界了。这种观点是不准确的。</p>
<p>虽然我们的确证明了不存在通用的判定算法，但是人类认识世界不是只依靠某组公理体系和确定的逻辑与算法的，人类的思维也不可能只局限在某个或者某组公理体系之内。虽然我们无法设计出一个通用算法，来判定一个命题是否在某个公理体系内可判定，但是这并不必然导致我们无法认知这个命题。举个比较简单的例子，“Goodstein定理”（这个定理相对简单易懂，修炼到第五重的时候会详细说明这个例子）就是一个在皮亚诺公理体系里无法判定的命题，但是在集合论中，利用序数知识可以非常简单的证明它。</p>
<p>“哥德尔不完备定理”揭示了公理体系内在而深刻的性质和固有局限性，告诉我们不要奢望仅仅通过若干组公理出发，机械地利用基本逻辑规则进行推导，就能够对全部的命题进行判定。从这个意义上讲，无论是数学还是其它科学，都需要不断的完善、扩充自身的公理体系（或者基本规律），只有这样才能不断认知更加深刻复杂的客观世界。或者说，哥德尔真正严格证明了这句格言——“科学研究是永无止境的”。</p>
<p>这是解读的第一重，属于最通俗易懂的，后面还有四重。需要的可去原文学习。</p>
<p>科学网-“哥德尔不完备定理”到底说了些什么？–（一） – 赵昊彤的博文</p>
]]></content>
		</item>
		
		<item>
			<title>不完备定理</title>
			<link>https://blog.v5u.win/posts/life/life-%E4%B8%8D%E5%AE%8C%E5%A4%87%E5%AE%9A%E7%90%86/</link>
			<pubDate>Tue, 14 Aug 2018 16:38:59 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/life/life-%E4%B8%8D%E5%AE%8C%E5%A4%87%E5%AE%9A%E7%90%86/</guid>
			<description>转一段清华大学赵昊彤博士的解读，我认为算是简单清晰准确。 ““哥德尔不完备定理”到底说了些什么？——（一） 【中文网上深入介绍哥德尔不完备定理的</description>
			<content type="html"><![CDATA[<h2 id="转一段清华大学赵昊彤博士的解读我认为算是简单清晰准确"><strong>转一段清华大学赵昊彤博士的解读，我认为算是简单清晰准确。</strong></h2>
<p>“<strong>“哥德尔不完备定理”到底说了些什么？——（一）</strong></p>
<p>【中文网上深入介绍哥德尔不完备定理的文章很少，我这篇文章写得很长，花了不少时间打磨它，希望能帮助到爱好数学与逻辑的人。文章把理解哥德尔不完备定理分为了五重，建议只是想初步了解的读者，可以重点看第一重；希望了解一些背景的读者，可以修炼到第二重；希望较深入理解哥德尔证明思路的读者，建议修炼到第三重；如果确实感兴趣，希望详细了解哥德尔证明过程以及其严谨性的读者，可以修炼到第四重；如果还想多知道一些知识的读者，可以练到第五重。</p>
<p>——— 作者】</p>
<p>1931年，库尔特∙弗雷德里希∙哥德尔（KurtFriedrich
Gödel）发表了一篇影响深远的论文“On formally undecidablepropositions of Principia
Mathematica and related systems I”[1]（论文的原文是用德文发表的，这里给出的是英译名）。今天，我们一般笼统的把论文中提出的定理称为“哥德尔不完备定理”。80多年过去了，“哥德尔不完备定理”的影响仍然持续、深远，特别是引起了很多非数学界人士的兴趣，引发了各种各样的解读。很遗憾，有一些解读是不准确的，甚至是错误的；更为严重的是，有一些人出于对“哥德尔不完备定理”的一知半解，甚至开始怀疑、批判人类的理性，以至于发展到相信、鼓吹不可知论。近期，我在认真研读了哥德尔论文原文（英译版，本人实在是不懂德文）和相关资料的基础上，加深了自己的认识，同时也很希望尽自己绵薄之力，分享对“哥德尔不完备定理”的理解，厘清对“哥德尔不完备定理”的误解。</p>
<p>“哥德尔不完备定理”是数学、逻辑学领域的划时代成果，使人们对于数学研究基础的认识更加深刻、准确，同时它也是现代逻辑史上的重要里程碑。“哥德尔不完备定理”虽然伟大、深刻，但是个人认为它并不深奥。对于一个普通人，只要愿意动脑，都可以在一定程度上准确理解它。当今的互联网时代，网上有不少对“哥德尔不完备定理”的介绍和解读；60多年前，两位美国作家欧内斯特·内格尔（Ernest
Nagel）和詹姆士 R. 纽曼 （James R.
Newman）撰写的的著作《哥德尔证明》更是科普“哥德尔不完备定理”的重要作品。如今网上能看到的中文介绍“哥德尔不完备定理”的文章，绝大部分是转述《哥德尔证明》这本书的内容的。不过这本书撰写太早，有些新的结论当年尚不了解；另外这本书在普及哥德尔证明的时候，更多的是讲解背景、思路，并用作者自己的理解来讲述哥德尔的证明，个别地方不够严谨，一些讲述方式也不够准确。本文则全部基于哥德尔论文的原文来介绍“哥德尔不完备定理”的证明，并适当融入一些80多年来新的认识和结论，希望能帮助数学、逻辑学爱好者了解并理解“哥德尔不完备定理”。</p>
<p>为了帮助更多人在各自需要的层面上理解“哥德尔不完备定理”，下面的介绍把理解“哥德尔不完备定理”分为了五重，从对定理的基本含义的理解一直到对核心证明的了解都包括了进来。读者可以像修习“乾坤大挪移”神功一样，依照自身内力基础，修炼到适合自己的层面即可。祝愿大家都能练成“哥德尔不完备定理”第五重神功！</p>
<p><strong>第一重：“庐山真面目”——准确了解“哥德尔不完备定理”</strong></p>
<p>赏玩一块美玉的时候，首先不应该是听各类专家讲这块玉多么晶莹剔透、多么价值连城，而应该是首先把玉拿出来让大家看看，有个感性认识。在哥德尔的论文中，我们一般所说的“哥德尔不完备定理”（有时候也被叫做“哥德尔第一不完备定理”）是指论文中的定理VI，原文如下：</p>
<p><strong>TheoremVI: For every ω-consistent primitive recursive class κ of formulae, there is aprimitive recursive class-sign r , such that neither forall(v,r) nornot(forall(v,r)) belongs to Conseq(κ) (where v is the free variable of r).</strong></p>
<p>尽量原汁原味的翻译如下：</p>
<p>定理VI：对于任意一个ω一致（第四重）的原始递归公理集合κ，一定存在一个原始递归（第三重、第四重）的表达式r，使得无论是“r总成立”这个命题，还是“r不总成立”这个命题，都不属于通过κ可推导出来的定理的集合（原文中的Conseq(κ)）。</p>
<p>补充说明一点，哥德尔论文中的κ所代表的公理集合，是指蕴含了皮亚诺算术公理（Peano Axioms）的集合，这是在哥德尔论文的前面明确了的，所以在阐述定理VI时就没有再特意强调。</p>
<p>修炼第一重神功的读者可能会问了“大哥，你说的这些都是啥？”。别担心，修炼第一重神功没那么复杂。</p>
<p>让我们先从公理说起，公理其实就是无需证明而被认定为成立的命题。公理体系是指一组公理的集合。通过这些公理和基本的逻辑关系，可以推导出更多成立的命题，称为定理。公理体系一般被认为发源于2300多年前欧几里德撰写的《几何原本》。在现代科学形成的过程中，人们发现通过定义一组公理再加上合理的逻辑推演，可以证明很多命题或结论。公理体系是当今数学研究和科学研究的基础，数学研究成果就是（或者说在极大的程度上依赖于）一组公理体系的推演，而其它科学研究除了依赖公理体系进行推演外，还需要通过系统的实验来进行验证。</p>
<p>“哥德尔不完备定理”是针对公理体系的一项结论，它之所以如此伟大且深刻，正是因为它撼动的是一切科学的研究基础——公理体系。修炼第一重神功的时候，我们简要理解“哥德尔不完备定理”说的是：**一个足够复杂的公理体系（至少蕴含了皮亚诺算术公理），如果它是一致的（相容的，无矛盾的），那么它就是不完备的。**这里的完备，指的是“对于任何可在这个公理体系内描述的命题，都可以在这个公理体系内得到判定，要么是正确的，要么是错误的”。</p>
<p>再用大白话解释一下，就是说，一个没有矛盾的公理体系内，总有一些命题是说不清楚对还是错的（务必注意，这是指在这个体系内说不清楚，不是说永远都说不清楚了）。也许有人说了，既然没矛盾的公理体系有问题，那就搞个有矛盾的公理体系呗。如果设想一个公理体系，一会儿告诉我们“1+1=2”，一会儿又告诉我们“1+12”，相信不会再有人把这个公理体系当回事。有矛盾的公理体系会导致彻底的无意义和虚无，修炼第二重神功的时候会详细阐明这一点。</p>
<p>上述结论听起来是比较可怕的，公理体系必须没有矛盾，可是没有矛盾的公理体系又会导致出现一些命题说不清楚对错。于是开始出现了各种各样的解读，比如“哥德尔定理告诉了我们数学和逻辑的极限，这也几乎是人类理性的极限。它证明理性不是无所不能的”、“哥德尔定理告诉我们，人类不可能真正认识这个世界，永远不可能理解宇宙的真理”等等。相信作为人类理性智慧光辉代表之一的哥德尔，如果听到这些说法，可能也会很无奈吧。</p>
<p>第一，“哥德尔不完备定理”不仅不是所谓人类理性的极限，恰恰相反，它是人类理性智慧的重大成果。它告诉了我们，正是由于有了人类理性的智慧，才有可能认识到这样深刻的结论。哥德尔是通过构造出了一个无法在这个公理体系内证明的命题来证明出“哥德尔不完备定理”的。这个命题的内容说的正是“命题自身无法在此公理体系内被证明”，既然哥德尔已经清楚的证明了这一点，说明这个命题毫无疑问是正确的。所以，“哥德尔不完备定理”的证明过程其实告诉了我们，存在一个可在这个公理体系内表达的<strong>正确</strong>的命题，但是在这个公理体系内却既不能证明它，也无法证伪它。如果说“哥德尔不完备定理”阐明了什么极限的话，那它阐明的也只是“某类公理体系的极限”，而不是“数学、逻辑的极限”，更不是什么“人类理性的极限”。</p>
<p>第二，“哥德尔不完备定理”不仅不会告诉我们“人类不可能真正认识这个世界”，反而是在更深刻的层面上告诉了我们人类应该如何去认识世界、探索真理。譬如在数学上，如果发现一个命题通过现有的方法、公理和定理一直得不到证明，我们就可以尝试扩展现有的方法和公理体系来进一步研究；费马大定理、黎曼猜想等命题被称为“会下金蛋的母鸡”就是这个道理。物理学上，广义相对论的发现过程，也是因出现了平直空间中狭义相对论某些推论难以解释（如高速旋转的圆盘会发生扭曲），爱因斯坦提出了等效原理并毅然拓展了平直空间的假设，创建了广义相对论这个伟大的理论。值得一提的是，哥德尔和爱因斯坦在普林斯顿大学成为了非常好的朋友。晚年的爱因斯坦曾经说过，之所以他每天还会经常坚持去办公室上班，是因为可以在路上和哥德尔聊聊天；而爱因斯坦的去世也曾给哥德尔的情绪以很大打击。</p>
<p>第三，“哥德尔不完备定理”也没有给出人类认识真理的上限。如果一个命题在某个公理体系内无法判定，那也不是意味着这个命题就是无法判定的了。对于这类命题，如果属于科学范畴的，可以通过科学实验加以判定，从而扩展现有的公理体系，发现新的科学规律；如果属于数学范畴的，可以通过寻找新的数学工具、数学方法或者数学理论来直接拓展现有公理体系，从而准确的判定这个命题，进而扩大人类研究的深度和广度。</p>
<p>还有人了解到，数学研究已经证明了“不存在一个通用的算法，能够判定一个给定的命题在某个确定的公理体系内是否是可判定的”。由此认为既存在着不可判定的命题，又不存在“能够判定某个命题是否不可判定的方法”，显然我们没法准确认识这个世界了。这种观点是不准确的。虽然我们的确证明了不存在通用的判定算法，但是人类认识世界不是只依靠某组公理体系和确定的逻辑与算法的，人类的思维也不可能只局限在某个或者某组公理体系之内。虽然我们无法设计出一个通用算法，来判定一个命题是否在某个公理体系内可判定，但是这并不必然导致我们无法认知这个命题。举个比较简单的例子，“Goodstein定理”（这个定理相对简单易懂，修炼到第五重的时候会详细说明这个例子）就是一个在皮亚诺公理体系里无法判定的命题，但是在集合论中，利用序数知识可以非常简单的证明它。</p>
<p>“哥德尔不完备定理”揭示了公理体系内在而深刻的性质和固有局限性，告诉我们不要奢望仅仅通过若干组公理出发，机械地利用基本逻辑规则进行推导，就能够对全部的命题进行判定。从这个意义上讲，无论是数学还是其它科学，都需要不断的完善、扩充自身的公理体系（或者基本规律），只有这样才能不断认知更加深刻复杂的客观世界。或者说，<strong>哥德尔真正严格证明了这句格言——“科学研究是永无止境的”</strong>。</p>
<p>这是解读的第一重，属于最通俗易懂的，后面还有四重。需要的可去原文学习。</p>
<p><a href="https://link.zhihu.com/?target=http%3A//blog.sciencenet.cn/blog-409681-1067019.html">科学网-“哥德尔不完备定理”到底说了些什么？&ndash;（一） - 赵昊彤的博文</a></p>
]]></content>
		</item>
		
		<item>
			<title>黑客与画家</title>
			<link>https://blog.v5u.win/%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6/</link>
			<pubDate>Tue, 07 Aug 2018 11:22:17 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6/</guid>
			<description>黑客与画家 保罗·格雷厄姆 真话 2018-07-16 20:44:09 这就是找出“不能说的话”的第一种方法：判断言论的真伪。 异端邪说 2018-07-16 20:43:24 我们把这种不一定正确、但是极富争议的言论称</description>
			<content type="html"><![CDATA[<p>黑客与画家</p>
<p>保罗·格雷厄姆</p>
<p>真话</p>
<p>2018-07-16 20:44:09</p>
<p>这就是找出“不能说的话”的第一种方法：判断言论的真伪。</p>
<p>异端邪说</p>
<p>2018-07-16 20:43:24</p>
<p>我们把这种不一定正确、但是极富争议的言论称为“异端邪说”。关注“异端邪说”，是找出“不能说的话”的第二种方法。</p>
<p>时空差异</p>
<p>2018-07-16 20:42:20</p>
<p>所以，我们就有了找出“不能说的话”的第三种方法：将当代观念与不同时期的古代观念diff^一下。</p>
<p>道貌岸然</p>
<p>2018-07-16 20:49:28</p>
<p>还有第四种寻找“不能说的话”的方法：寻找那些一本正经的卫道者，看看他们到底在捍卫着什么。</p>
<p>机制</p>
<p>2018-07-16 20:52:15</p>
<p>我还想到了第五种方法，可以找出“不能说的话”，那就是去观察禁忌是如何产生的。</p>
<p>客户支持</p>
<p>2018-08-06 19:47:14</p>
<p>Viaweb的开发人员总是与客服人员保持密切联系。客服人员坐在距离程序员只有9米的地方，知道自己可以随时打断程序员的工作，提交新证实的bug的报告。遇到重大bug，我们就算在开董事会，也会马上回来修改程序。</p>
<p>目标客户</p>
<p>2018-08-07 10:19:43</p>
<p>不少公司都很想知道，什么事情可以外包，什么事情不可以外包。一个可能的答案是，公司内部所有不直接感受到竞争压力的部门都应该外包出去，让它们暴露在竞争压力之下。</p>
<p>注: 公司的那些事情可以外包？</p>
<p>创业公司</p>
<p>2018-08-07 10:39:10</p>
<p>桌面软件迫使用户变成系统管理员，互联网软件则是迫使程序员变成系统管理员：</p>
<p>为什么不尝试一下？</p>
<p>2018-08-07 11:11:10</p>
<p>如果你是一个黑客，并且梦想自己创业，可能会有两件事情令你望而却步，不敢真正开始采取行动。一件是你不懂得管理企业，另一件是你害怕竞争。可是实际上，这两件事都是没有通电的电篱笆。</p>
<p>首先，管理企业其实很简单，只要记住两点就可以了：做出用户喜欢的产品，保证开支小于收入。只要做到这两点，你就会超过大多数创业公司。随着事业的发展，你自己就能琢磨出来其他的诀窍。</p>
<p>2018-08-07 11:15:34</p>
<p>至于如何做出用户喜欢的产品，下面是一些通用规则。从制造简洁的产品开始着手，首先要保证你自己愿意使用。然后，迅速地做出1.0版，并且不断以改进，整个过程中密切倾听用户的反馈。用户总是对的，但是不同的用户要求不一样。低端的用户要求简化操作和清晰易懂，高端的用户要求你增加新功能。软件最大的好处就是让一切变得简单。但是，做到这一点的方法是正确设置默认值，而不是限制用户的选择。如果竞争对手的产品很糟糕，你也不要自鸣得意。比较软件的标准应该是看对手的软件将来会有什么功能，而不是现在有什么功能。无论何时，你都要使用自己的软件。</p>
<p>金钱不等于财富</p>
<p>2018-08-07 11:38:56</p>
<p>如果你想要创造财富（这里指的是狭义的财富，也就是使你免于饥饿的东西），那么你应该抱着特别怀疑的态度，去思考那些着眼于你自己感兴趣的东西的商业计划。对于自己感兴趣的东西，你会觉得它们很有价值，伹是它们恰恰最不可能与他人眼中有价值的东西发生重合。」</p>
<p>高科技=可放大性</p>
<p>2018-08-08 09:08:56</p>
<p>在实际操作中，这就意味着我们故意选择那些很困难的技术问题。假定软件有两个候选的新功能，它们创造的商业价值完全相同，那么我们总是选择较困难的那个功能。不是因为这个功能能带来更多的收入，</p>
<p>而是因为它比较难。我们很乐于迫使那些又大又慢的竞争对手跟着我们一起走进沼泽地。创业公司就像游击队一样，喜欢选择不易生存的深山老林作为根据地，政府的正规军无法追到那种地方。我还记得创业初期我们是多么筋疲力尽，整天都为一些可怕的技术难题绞尽脑汁。但是，我还是感到相当高兴，因为那些问题连我们都觉得这么困难，那么竞争对手就更会认为是不可能解决的。</p>
<p>2018-08-08 09:12:14</p>
<p>总的来说，这也是很好的处事原则。如果你有两个选择，就选较难的那个。如果你要选择是坐在家里看电视，还是外出跑步，那就出去跑步吧。这个方法有效的原因可能是遇到两个一难一易的选择时，往往出于懒惰的缘故，你会选择较易的那个选项。在意识深处，你其实知道不懒惰的做法会带来更好的结果，这个方法只是迫使你接受这一点。」</p>
<p>潜规则</p>
<p>2018-08-08 09:13:18</p>
<p>创业是有一些潜规则的，其中一条就是很多事情由不得你。</p>
<p>2018-08-08 09:18:20</p>
<p>另一条潜规则是，创业的付出与回报虽然总体上是成比例的，但是在个体上是不成比例的。</p>
<p>2018-08-08 09:22:23</p>
<p>那么，怎样才能把公司卖掉呢？基本上，不管是否想出售公司，你要做的事情都是一样的（比如多赚钱）。但是，被收购本身就是一门学问，我们在Viaweb花了很多时间研究它。</p>
<p>潜在的买家会尽可能地拖延收购。收购这件事最难的地方就是让买方真正拿出钱。大多数时候，促成买方掏钱的最好办法不是让买家看到有获利的可能，而是让他们感到失去机会的恐惧。对于买家来说，最强的收购动机就是看到竞争对手可能收购你。我们发现这会使得CEO们连夜行动。次强的动机则是让他们担心如果现在不买你，你的高速成长将使得未来的收购耗资巨大，甚至你本身可能变成一个他们的竞争对手。</p>
<p>2018-08-08 09:24:46</p>
<p>我认为你应该和买家一样，也把用户数量当作一个测试指标。像优化软件一样优化公司，用户数量就是判断公司表现好坏的指标。做过软件优化的人都知道，优化难点就是如何测出系统的表现。如果凭空猜测软件最慢的是哪一部分以及怎样让它快起来，那估计百分百会猜错。用户数量也许不是最好的测量指标，但应该也相差不远了。买家关心它，收入依赖它，竞争对手恐惧它，记者和潜在用户则是被它打动。无论你的技术水平有多高，用户数量都比你自己的判断更能准确反映哪些问题应该优先解决。</p>
<p>2018-08-08 09:25:19</p>
<p>此外，将公司管理视同软件优化还能帮助你避免VC担心的另一个陷阱——开发某种产品的时间过长。现在，黑客都已经熟知这一点，并总结出一个术语“过早优化”（premature optimization）。尽快拿出1.0版，然后根据用户的反映而不是自己的猜测进行软件优化。</p>
<p>你必须时刻牢记的最基本的原则就是，</p>
<p>财富和权力</p>
<p>2018-08-08 09:37:27</p>
<p>为什么欧洲在历史上变得如此强大？是因为欧洲优越的地理位置，还是因为欧洲人天生就比较优秀，或者是宗教原因？答案（或者至少是近因）可能就是欧洲人接受了一个威力巨大的新观点：允许赚到大钱的人保住自己的财富。</p>
<p>7.关注贫富分化</p>
<p>2018-08-08 10:10:18</p>
<p>与下棋、画画、写小说一样，赚钱也是一种专门的技能。但是，出于某种原因，我们以完全不同的态度对待这种技能。如果某些人善于下棋或写小说，没有人会有意见；伹是，如果某些人善与赚钱，报纸上就会有社论出来说这是不对的。</p>
<p>为什么？赚钱看上去与其他技能没有本质不同，为什么人们的反应如此强烈？</p>
<p>我认为有三个原因使得我们对赚钱另眼相看。第一，我们从小被误导的对财富的看法；第二，历史上积累财富的方式大多名声不好；第三，担心收入差距拉大将对社会产生不利影响。就我所知，第一点是错的，第二点已经过时了，第三点通不过现实的检验。有没有可能，在现代社会中，收入差距拉大实际上是一种健康的信号？</p>
<p>财富的老爹模式</p>
<p>2018-08-08 09:47:35</p>
<p>为什么财富的分配问题引起这么多争论？部分原因是反对声最大的人当中，很多人都少有创造财富的经验：大学生、继承人、教授、政客、新闻记者。（如果你在酒吧里听过大家议论体育赛事，你一定很熟悉这种现象。）</p>
<p>9.设计者的品味</p>
<p>2018-08-14 16:04:35</p>
<p>9.设计者的品味</p>
<p>2018-08-14 16:05:11</p>
<p>只要你开始思考这些问题，你就会发现，众多不同学科对“美”的认识有着惊人的相似度。优秀设计的原则是许多学科的共同原则，一再反复地出现。</p>
<p>2018-08-14 16:04:17</p>
<p>好设计是简单的设计。</p>
<p>2018-08-14 16:05:29</p>
<p>当你被迫把东西做得很简单时，你就被迫直接面对真正的问题。当你不能用表面的装饰交差时，你就不得不做好真正的本质部分。</p>
<p>2018-08-14 16:03:25</p>
<p>好设计是永不过时的设计。</p>
<p>2018-08-14 16:03:42</p>
<p>以永不过时作为目标也是一种避开时代风潮的影响的方法。</p>
<p>2018-08-14 16:04:05</p>
<p>所以，如果你的作品对今天的人们以及1500年的人都有吸引力，那么它极有可能也会吸引2500年的人。</p>
<p>2018-08-14 16:03:10</p>
<p>好设计是解决主要问题的设计。</p>
<p>2018-08-14 16:02:40</p>
<p>许多坏设计做得很辛苦，但是从一开始方向就错了。20世纪中期，有一股使用无衬线（sans-serif）字体的潮流。这一类字体接近于纯手写的样式，但是它无助于解决最主要的问题。印刷出来的文字首先应该是易于辨认的，所以能够清晰地分辨字母就是最主要的问题——传统的新罗马（Times Roman）字体是一种有衬线的字体，虽然看上去古老得就像维多利亚女王时代的风格，但是它的小写g就是可以很轻易地与小写y区分。</p>
<p>注: 关于设计</p>
<p>2018-08-14 16:07:58</p>
<p>好设计是启发性的设计。</p>
<p>2018-08-14 16:08:51</p>
<p>在建筑学和设计学中，这条原则意味着，一幢建筑或一个物品应该允许你按照自己的愿望来使用。</p>
<p>2018-08-14 16:09:21</p>
<p>在软件业中，这条原则意味着，你应该为用户提供一些基本模块，使得他们可以随心所欲自由组合，就像玩乐高积木那样。</p>
<p>2018-08-14 16:10:36</p>
<p>在数学中，这条原则意味着，一个可以成为许多新工作基础的证明要优于一个难度很高、但无助于未来学科发展的证明</p>
<p>2018-08-14 16:10:48</p>
<p>好设计通常是有点趣味性的设计。</p>
<p>2018-08-14 16:48:24</p>
<p>好设计是艰苦的设计。</p>
<p>2018-08-14 16:52:25</p>
<p>好设计是看似容易的设计。</p>
<p>2018-08-14 16:59:15</p>
<p>好设计是对称的设计。</p>
<p>2018-08-14 16:59:31</p>
<p>对称有两种：重复性对称和递归性对称。递归性对称就是指子元素的重复，比如树叶上叶脉的纹路。</p>
<p>2018-08-14 17:03:06</p>
<p>在数学和工程学中，递归尤其有用。归纳式证明方法既简洁又美妙。在软件中，能用递归解决的问题通常代表已经找到了最佳解法。</p>
<p>2018-08-14 17:03:37</p>
<p>好设计是模仿大自然的设计。</p>
<p>2018-08-14 17:06:01</p>
<p>好设计是一种再设计。</p>
<p>2018-08-14 17:08:56</p>
<p>好设计是能够复制的设计。</p>
<p>2018-08-14 17:10:09</p>
<p>好设计常常是奇特的设计。</p>
<p>2018-08-14 17:11:46</p>
<p>好设计是成批出现的。</p>
<p>2018-08-14 17:13:32</p>
<p>好设计常常是大胆的设计</p>
<p>2018-08-14 17:15:37</p>
<p>单单是无法容忍丑陋的东西还不够，只有对这个领域非常熟悉，你才可能发现哪些地方可以动手改进。你必须锻炼自己。只有在成为某个领域的专家之后，你才会听到心里有一个细微的声音说：“这样解决太糟糕了！一定有更好的选择。”不要忽视这种声音，要培育它们。优秀作品的秘块就是：非常严格的品味，再加上实现这种品味的能力。</p>
<p>注: 如何达到具有好的品味</p>
<p>面向对象编程</p>
<p>2018-08-14 18:18:37</p>
<p>事实上有两种程度的面向对象编程：某些语言允许你以这种风格编程，另一些语言则强迫你一定要这样编程。</p>
<p>2018-08-14 18:18:24</p>
<p>我觉得后一类语言不可取。允许你做某事的语言肯定不差于强迫你做某事的语言。所以，至少在这方面我们可以得到明确的结论：你应该使用允许你面向对象编程的语言。至于你最后到底用不用则是另外一个问题了。</p>
<p>11.百年后的编程语言</p>
<p>2018-08-14 18:25:02</p>
<p>我的判断是，那些内核最小、最干净的编程语言才会存在于进化的主干上。一种语言的内核设计得越小、越干净，它的生命力就越顽强。</p>
<p>2018-08-14 18:29:06</p>
<p>浪费可以分成好的浪费和坏的浪费。我感兴趣的是好的浪费，即用更多的钱得到更简单的设计。</p>
<p>2018-08-14 18:32:21</p>
<p>如果我们把一种语言的内核设想为一些基本公理的集合，那么仅仅为了提高效率就往内核添加多余的公理，却没有带来表达能力的提升，这肯定是一件很糟的事。没错，效率是很重要，但是我认为修改语言设计并不是提高效率的正确方法。</p>
<p>正确做法应该是将语言的语义与语言的实现予以分离。在语义上不需要同时存在列表和字符串，单单列表就够了。而在实现上做好编译器优化，使它在必要时把字符串作为连续字节的形式处理^。</p>
<p>^「我相信，Lisp Machine Lisp（Lisp语言的一种方言）是第一个具体表达这样一种观点的语言：变量的声明（除了动态类型变量之外）只是优化的建议，对一个正确程序本身的含义不构成影响。Common Lisp（Lisp语言的另一种方言）则好像第一个明确提出了这一点。」</p>
<p>2018-08-14 18:34:29</p>
<p>毕竟数组只是散列表的一个子集，其特点就是数组的键全部都是整数向量。进一步说，散列表本身会不会被列表取代呢？</p>
<p>2018-08-14 18:42:03</p>
<p>即使是应用程序，使用多层形式开发也是一种很强大的技巧。自下而上的编程方法意味着要把软件分成好几层，每一层都可以充当它上面那一层的开发语言。这种方法往往会产生更小、更灵活的程序。它也是通往软件圣杯——可重用性（reusability）——的最佳路线。从定义上看，语言就是可以重用的。在编程语言的帮助下，你的应用程序越是采用这种多层形式开发，它的可重用性就越好。</p>
<p>13.书呆子的复仇</p>
<p>2018-08-22 13:13:15</p>
<p>一般来说，如果你动手创造一种新语言，那是因为你觉得它在某些方面会优于现有的语言。J</p>
<p>向心力</p>
<p>2018-08-22 13:31:47</p>
<p>如果你创业的话，千万不要为了取悦风险投资商或潜在并购方而设计你的产品。让用户感到满意才是你的设计方向。只要赢得用户，其他事情就会接踵而来。如果没有用户，谁会关心你选择的“正统”技术是多么令人放心。</p>
<p>随大流的代价</p>
<p>2018-08-22 13:32:08</p>
<p>随大流的代价</p>
<p>一个诀窍</p>
<p>2018-08-22 13:44:18</p>
<p>我们就有了两点结论，我认为它们非常有价值。事实上，这是我用自己的经历换来的。第一，不同语言的编程能力不一样。第二，大多数经理故意忽视第一点。</p>
<p>附录：编程能力</p>
<p>2018-08-22 13:56:12</p>
<p>格林斯潘第十定律”（Greenspun’s Tenth Rule）：</p>
<p>任何C或Fortran程序复杂到一定程度之后，都会包含一个临时开发的、只有一半功能的、不完全符合规格的、到处都是bug的、运行速度很慢的Common Lisp实现。</p>
<p>2018-08-22 13:56:25</p>
<p>如果你想解决一个困难的问题，关键不是你使用的语言是否强大，而是好几个因素同时发挥作用：（a）使用一种强大的语言；（b）为这个难题写一个事实上的解释器；或者（c）你自己变成这个难题的人肉编译器。在Python的例子中，这样的处理方法已经开始出现了，我们实际上就是自己写代码，模拟出编译器实现词法变量的功能。</p>
<p>2018-08-22 13:57:45</p>
<p>皮特·诺维格发现，总共23种设计模式之中，有16种在Lisp语言中“本身就提供，或者被大大简化”。（www.norvig.com/design-pattems）」</p>
<p>简洁</p>
<p>2018-08-22 14:18:04</p>
<p>简洁性最重要的方面就是要使得语言更抽象。</p>
<p>效率</p>
<p>2018-08-22 14:28:54</p>
<p>所以，编程时提高代码运行速度的关键是使用好的性能分析器（profiler），而不是使用其他方法，比如精心选择一种静态类型的编程语言。</p>
<p>时间</p>
<p>2018-08-22 14:36:56</p>
<p>，要常年累月不断地做市场推广，直到人们开始接受这种发明。我们就耗费了好几年才使得客户明白ViaWeb不需要下载安装就能使用。不过，好消息是，简单重复同一个信息就能解决这个问题。你只需要不停地重复同一句话，最终人们将会开始倾听。人们真正注意到你的时候，不是第一眼看到你站在那里，而是发现过了这么久你居然还在那里。</p>
<p>2018-08-22 14:37:38</p>
<p>新技术被市场接纳的方式有两种，一种是自然成长式，另一种是大爆炸式。自</p>
<p>再设计</p>
<p>2018-08-22 14:39:52</p>
<p>为了写出优秀软件，你必须同时具备两种互相冲突的信念。一方面，你要像初生牛犊一样，对自己的能力信心万丈；另一方面，你又要像历经沧桑的老人一样，对自己的能力抱着怀疑态度。</p>
<p>2018-08-22 14:40:26</p>
<p>你必须对解决难题的可能性保持乐观，同时对当前解法的合理性保持怀疑。</p>
<p>15.设计与研究</p>
<p>2018-08-22 16:06:07</p>
<p>设计与研究的区别看来就在于，前者追求“好”（good），后者追求“新”（new）。优秀的设计不一定很“新”，但必须是“好”的；优秀的研究不一定很“好”，但必须是“新”的。我认为这两条道路最后会发生交叉：只有应用“新”的创意和理论，才会诞生超越前人的最佳设计；只有解决那些值得解决的难题（也就是“好”的难题），才会诞生最佳研究。所以，最终来说，设计和研究都通向同一个地方，只是前进的路线不同罢</p>
<p>2018-08-22 16:10:19</p>
<p>怎么理解编程语言？你不要把它看成那些已完成的程序的表达方式，而应该把它理解成促进程序从无到有的一种媒介。这里的意思是说，成品的材料和开发时用的材料其实是不一样的。搞艺术的人都知道，这两个阶段往往需要不同的媒介。比如，大理石是一种非常良好、耐用的材料，很适合用于最后的成品，但是它极其缺乏弹性和灵活性，所以不适合在构思阶段用来做模型。</p>
<p>2018-08-22 16:16:24</p>
<p>开发软件的时候，我有一条规则：任何时候，代码都必须能够运行。</p>
<p>2018-08-22 16:17:35</p>
<p>设计意味着做出符合人类特点和需要的产品。但是，“人类”不仅包括用户，还包括设计师，所以设计工作本身也必须符合设计师的特点和需要。</p>
]]></content>
		</item>
		
		<item>
			<title>Xcode-debug-view-hierarchy</title>
			<link>https://blog.v5u.win/posts/xcode/xcode-debug-view-hierarchy%E8%B0%83%E8%AF%95%E8%A7%86%E5%9B%BE%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/</link>
			<pubDate>Fri, 03 Aug 2018 10:34:49 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/xcode/xcode-debug-view-hierarchy%E8%B0%83%E8%AF%95%E8%A7%86%E5%9B%BE%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/</guid>
			<description>Xcode 教程之调试视图层次结构 Xcode开发，当我们需要调整/检查UI时正确的处理方式是什么？ 答案：debug view hierarchy P.s. 下面是为什么要使用debug view</description>
			<content type="html"><![CDATA[<h3 id="xcode-教程之调试视图层次结构">Xcode 教程之调试视图层次结构</h3>
<p>Xcode开发，当我们需要调整/检查UI时正确的处理方式是什么？</p>
<p>答案：debug view hierarchy</p>
<p><img src="http://ocnjk5c7r.bkt.clouddn.com/image/iOS/debug-view-hierarchy.png" alt="debug view hierarchy"></p>
<p>P.s. 下面是为什么要使用debug view hierarchy，没时间的读者自行略过</p>
<p>很多人知道</p>
<p>很多人不知道</p>
<p>很多人知道仅仅了解了一下</p>
<p>少部分的人知道了解，并经常用它辅助开发。</p>
<p>范子属于知道作为新功能仅仅了解了一下。包括之前的Mac软件reveal。</p>
<p>因为实际的开发过程中，并不是很关心UI的处理，毕竟前期要先保证业务逻辑正确，后期还有调整&amp;测试UI的过程。</p>
<p>然而在这次的产品在上线之前临时提出调整UI的需求，在调整UI的过程中，让范子重新审视了一下自己画UI的过程是否合理。</p>
<p>其实范子之前就知道自己画UI很不用心，或者说没有给予足够的重视，在整个产品开发过程中，经常出现后期调整，耽误工程进度的情况。</p>
<p>这次的反思并不是因为影响进度，而是基于自身的编码习惯的反思审视。我们可以通过debug view hierarchy一次完成完美的代码布局，并以此优化自己代码布局逻辑，其实是有助于提升自己的编码水平的。</p>
<p>以前是因为没有合适的工具比如reveal收费昂贵。现在Xcode早就原生支持了，那么我们也就不应错过这个可以提升效率的工具。</p>
<p>完！</p>
]]></content>
		</item>
		
		<item>
			<title>npm-scripts.md</title>
			<link>https://blog.v5u.win/posts/nodejs/nodejs-npm-scripts/</link>
			<pubDate>Tue, 17 Jul 2018 16:47:27 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/nodejs/nodejs-npm-scripts/</guid>
			<description>scripts是npm的脚本编辑的地方，不是node的 所以在package.json中scripts的命令行使用方式是这样的，如下 npm run start &amp;#34;scripts&amp;#34;: {</description>
			<content type="html"><![CDATA[<p>scripts是npm的脚本编辑的地方，不是node的
所以在package.json中scripts的命令行使用方式是这样的，如下
npm run start</p>
<pre tabindex="0"><code>  &#34;scripts&#34;: {
    &#34;start&#34;: &#34;node ./bin/www&#34;
  },
</code></pre><p>详细使用方法请参考http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html</p>
]]></content>
		</item>
		
		<item>
			<title>Linux版本使用总结</title>
			<link>https://blog.v5u.win/posts/system/system-linux%E7%89%88%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link>
			<pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-linux%E7%89%88%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid>
			<description>Linux版本使用总结</description>
			<content type="html"><![CDATA[<p>Linux版本使用总结</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>iterm比terminal好在哪里？</title>
			<link>https://blog.v5u.win/iterm%E6%AF%94terminal%E5%A5%BD%E5%9C%A8%E5%93%AA%E9%87%8C%EF%BC%9F/</link>
			<pubDate>Thu, 12 Jul 2018 02:38:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/iterm%E6%AF%94terminal%E5%A5%BD%E5%9C%A8%E5%93%AA%E9%87%8C%EF%BC%9F/</guid>
			<description>iterm比terminal好在哪里？ 为什么要用iterm 多窗口切换 command + T 同个窗口横向分屏 command + d 同个窗口，竖向分屏 command + shift + d 自动补齐命令 comm +</description>
			<content type="html"><![CDATA[<h4 id="iterm比terminal好在哪里">iterm比terminal好在哪里？</h4>
<h4 id="为什么要用iterm">为什么要用iterm</h4>
<ol>
<li>多窗口切换</li>
</ol>
<pre><code>command + T
</code></pre>
<ol start="2">
<li>同个窗口横向分屏</li>
</ol>
<pre><code>command + d
</code></pre>
<ol start="3">
<li>同个窗口，竖向分屏</li>
</ol>
<pre><code>command + shift + d
</code></pre>
<ol start="4">
<li>自动补齐命令</li>
</ol>
<pre><code>comm + ;
</code></pre>
<ol start="5">
<li>直接打开文件</li>
</ol>
<pre><code>按住command键并点击文件名 (ps: terminal用open命令也可以)
</code></pre>
<ol start="6">
<li>自动复制</li>
</ol>
<pre><code>直接双击需要复制的文字，即可自动复制
</code></pre>
<ol start="7">
<li>设置主题配色</li>
</ol>
<pre><code>在偏好设置里进行一些基本的颜色设置，在GitHub上下载做好的主题，导入。

(ps: 成品自由度高👍，合心意的需要手动配置-&gt;terminal也可以手动配置)
</code></pre>
<p>这么好的东西我还是用terminal好了。</p>
]]></content>
		</item>
		
		<item>
			<title>写代码原则整理</title>
			<link>https://blog.v5u.win/posts/system/system-%E5%86%99%E4%BB%A3%E7%A0%81%E5%8E%9F%E5%88%99%E6%95%B4%E7%90%86/</link>
			<pubDate>Sat, 07 Jul 2018 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-%E5%86%99%E4%BB%A3%E7%A0%81%E5%8E%9F%E5%88%99%E6%95%B4%E7%90%86/</guid>
			<description>写代码原则整理： 写直观的代码 我写代码有一条重要的原则：如果有更加直接，更加清晰的写法，就选择它，即使它看起来更长，更笨，也一样选择它。 防止过</description>
			<content type="html"><![CDATA[<p>写代码原则整理：</p>
<h5 id="写直观的代码">写直观的代码</h5>
<p>我写代码有一条重要的原则：如果有更加直接，更加清晰的写法，就选择它，即使它看起来更长，更笨，也一样选择它。</p>
<ul>
<li>防止过度工程的原则</li>
</ul>
<p>王垠根据这些，我总结出来的防止过度工程的原则如下：</p>
<ol>
<li>先把眼前的问题解决掉，解决好，再考虑将来的扩展问题。</li>
<li>先写出可用的代码，反复推敲，再考虑是否需要重用的问题。</li>
<li>先写出可用，简单，明显没有bug的代码，再考虑测试的问题。</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>数据库选型</title>
			<link>https://blog.v5u.win/posts/system/system-%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
			<pubDate>Sat, 07 Jul 2018 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
			<description>作者：大宽宽 在整个行业发展过程中，一些需求催生了各种各样的的优化的机会。有人抓住机会去提出新的数据模型和查询接口。比如： 想内存数据库，上re</description>
			<content type="html"><![CDATA[<p>作者：大宽宽</p>
<p>在整个行业发展过程中，一些需求催生了各种各样的的优化的机会。有人抓住机会去提出新的数据模型和查询接口。比如：</p>
<ul>
<li>想内存数据库，上redis</li>
<li>想高性能访问KV模型，有rocksDB</li>
<li>想制作树状结构的数据，mongo你值得拥有</li>
<li>想做图分析，有图数据库</li>
<li>想要时序数据，有influxdb和Prometheus这种列存</li>
<li>想做Data Warehouse，有GP、有大规模的并行计算引擎</li>
<li>想做高性能海量数据存储，但是访问的方式相对简单，可以上Hadoop全家桶，Spark全家桶</li>
<li>想做海量数据的KV，有HBase，Cassandra</li>
<li>……</li>
</ul>
<p>就连SQL自己也在演进，比如各大数据库增加了对json格式的支持，MySQL还搞了个X-API，弄得像mongo一样；Postgres中一列可以是复合的类型（类似于struct），也可以是数组类型。mysql和postgres还支持全文索引（按照王垠的讲法，是不是这时候得先用一套LSM tree库玩转sstable管理，然后再攒一个lucene做分词和倒排？）</p>
<p>根据实际需求，从上面这些备选中，总能找到几个东西组合在一起满足需要。如果还不够用，那就按照需求定制，就像polarDB，TiDB。但我相信，绝大部分的开发场景，弄个mysql，sqlite之类的就完事了，不需要特别仔细的优化。</p>
<p>遇到了SQL处理不了的，有价值的问题，去解决，去优化，去建模就好。光吐槽SQL这也不行，那也不行，没有任何卵用。</p>
]]></content>
		</item>
		
		<item>
			<title>论商业名字的重要性</title>
			<link>https://blog.v5u.win/posts/life/life-%E8%AE%BA%E5%95%86%E4%B8%9A%E5%90%8D%E5%AD%97%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</link>
			<pubDate>Sat, 07 Jul 2018 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/life/life-%E8%AE%BA%E5%95%86%E4%B8%9A%E5%90%8D%E5%AD%97%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</guid>
			<description>论商业名字的重要性 源起：同一篇文章，我在两个最知名的汽车论坛上同时投稿：汽车之家，易车。3个小时后查看评论量。 汽车之家 ：4，易车：0. 由此推</description>
			<content type="html"><![CDATA[<p>论商业名字的重要性</p>
<p>源起：同一篇文章，我在两个最知名的汽车论坛上同时投稿：汽车之家，易车。3个小时后查看评论量。</p>
<p>汽车之家 ：4，易车：0.</p>
<p>由此推断出一个结论：论坛活跃度,汽车之家 &gt; 易车。</p>
<p>然后想到了一个问题，是什么影响了这两个网站的活跃度？</p>
<p>脑海中闪现的第一个年头是名字。是名字影响的。</p>
<p>那名字是如何影响用户行为偏好的呢？</p>
<p>与我而言，汽车之家，站如其名，是一个关于汽车以前相关的集合，比之于家。</p>
<p>那在家中我们做什么事情呢？我们和朋友讨论什么东西如何选择（购买），和邻居讨论这个东西如何使用（保养，改装，售后），和家人讨论自己真正的需求（前期测评）。所以，汽车之家不过是将这种行为拓展到了网上。</p>
<p>那易车是什么感觉？对于一个小白来说，意味着交易车辆的地方，哦，这个网站就是交易车辆的地方，所有和汽车交易相关的东西是这个网站的定位。比如：汽车交易市场。在汽车交易市场我们，看车，选车，买车。听别人嘚啵嘚，各种介绍。这是完全不同于家的体验。</p>
<p>所以对于用户来说，怎么使用这两种网站就很明显了，你想买个车：想听官方的洗脑，来易车。想听邻里的感受，来之家。然后呢，买车之后怎么办，当然汽车之家，因为汽车交易市场不是交流家长里短（用车感受）的地方。</p>
<p>就名字所隐喻的范围人群和场景而言，很明显汽车之家 &gt; 易车。这大概也是为什么汽车之家的活跃度大的原因吧。</p>
]]></content>
		</item>
		
		<item>
			<title>语言特性汇总</title>
			<link>https://blog.v5u.win/posts/system/system-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7%E6%B1%87%E6%80%BB/</link>
			<pubDate>Tue, 03 Jul 2018 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7%E6%B1%87%E6%80%BB/</guid>
			<description>语言特性汇总： 类型推导， 类型检查， 惰性求值 currying 闭包 OO lambda</description>
			<content type="html"><![CDATA[<p>语言特性汇总：</p>
<ul>
<li>类型推导，</li>
<li>类型检查，</li>
<li>惰性求值</li>
<li>currying</li>
<li>闭包</li>
<li>OO</li>
<li>lambda</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Apache使用总结</title>
			<link>https://blog.v5u.win/posts/system/system-apache%E6%80%BB%E7%BB%93/</link>
			<pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-apache%E6%80%BB%E7%BB%93/</guid>
			<description>Apache总结 http.conf配置 开启/关闭目录索引 &amp;lt;Directory &amp;#34;D:/Apache/blog.phpha.com&amp;#34;&amp;gt; Options Indexes FollowSymLinks # 修改为: Options FollowSymLinks #Indexes 的作用就是当该目录下没有 index.html 文件时，就显示目录结构，去掉 Indexes ，</description>
			<content type="html"><![CDATA[<p>Apache总结</p>
<p>http.conf配置</p>
<p>开启/关闭目录索引</p>
<pre tabindex="0"><code>&lt;Directory &#34;D:/Apache/blog.phpha.com&#34;&gt; 

Options Indexes FollowSymLinks # 修改为: Options  FollowSymLinks
#Indexes 的作用就是当该目录下没有 index.html 文件时，就显示目录结构，去掉 Indexes ，Apache 就不会显示该目录的列表了。

AllowOverride None     
Order allow,deny     
Allow from all


 &lt;/Directory&gt;
</code></pre>]]></content>
		</item>
		
		<item>
			<title>PHP工程总结</title>
			<link>https://blog.v5u.win/posts/php/php-%E5%B7%A5%E7%A8%8B%E6%80%BB%E7%BB%93/</link>
			<pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/php/php-%E5%B7%A5%E7%A8%8B%E6%80%BB%E7%BB%93/</guid>
			<description>*title: PHP工程总结 date: 2018-07-02 PHP工程总结 使用session需要调用session_start()手动开启环境，session_start()调用之</description>
			<content type="html"><![CDATA[<ul>
<li>
<ul>
<li>*title: PHP工程总结<!-- raw HTML omitted --></li>
</ul>
</li>
</ul>
<h2 id="date-2018-07-02">date: 2018-07-02</h2>
<p>PHP工程总结</p>
<ol>
<li>使用session需要调用session_start()手动开启环境，<code>session_start()调用之前页面不允许输出任何内容，包括空格</code></li>
<li>sql语句 执行exec(),查询使用query()</li>
<li>order不能作为表名称，这是关键字</li>
<li>获取最后一条插入数据 id使用PHP内置的方法调用: $db-&gt;lastInsertRowID();插入一条数据后获取此条数据id。</li>
<li>$\sum_{i=1}^{n}\sqrt{i+\sin(i)}$</li>
<li><strong>include 和 require 除了处理错误的方式不同之外，在其他方面都是相同的：</strong>
<ul>
<li>require 生成一个致命错误（E_COMPILE_ERROR），在错误发生后脚本会停止执行。</li>
<li>include 生成一个警告（E_WARNING），在错误发生后脚本会继续执行。</li>
</ul>
</li>
<li>增</li>
<li>删</li>
<li>改updateRow(tablename, id, key-values )</li>
<li>查</li>
</ol>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>/</p>
]]></content>
		</item>
		
		<item>
			<title>mac虚拟机上的centos 7实现ssh连接</title>
			<link>https://blog.v5u.win/posts/system/system-mac%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8A%E7%9A%84centos-7%E5%AE%9E%E7%8E%B0ssh%E8%BF%9E%E6%8E%A5/</link>
			<pubDate>Sat, 30 Jun 2018 08:57:11 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-mac%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8A%E7%9A%84centos-7%E5%AE%9E%E7%8E%B0ssh%E8%BF%9E%E6%8E%A5/</guid>
			<description>mac虚拟机上的centos7实现ssh连接 查看是否安装ssh rpm -qa | grep ssh（一般都内置了） 配置sshd_config文件 /etc/ssh/sshd_config Port 22 ListenAddress 0.0.0.0 ListenAddress :: 防火</description>
			<content type="html"><![CDATA[<p>mac虚拟机上的centos7实现ssh连接</p>
<ol>
<li>
<p>查看是否安装ssh rpm -qa | grep ssh（一般都内置了）</p>
</li>
<li>
<p>配置sshd_config文件 /etc/ssh/sshd_config</p>
</li>
</ol>
<pre><code>Port 22
ListenAddress 0.0.0.0
ListenAddress ::
</code></pre>
<ol>
<li>防火墙配置</li>
</ol>
<pre><code>1. 安装iptables: yum install iptables-service
2. 配置防火墙文件：vim /etc/sysconfig/iptables
3. 关闭防火墙：systemctl restart iptables.service
4. systemctl enable iptables.service //设置防火墙开机启动
</code></pre>
<ol>
<li>安装netstat：yum install net-tools （查看监听端口：netstat -ntpl | grep 22）</li>
<li>关闭虚拟机，设置虚拟机网络为host-only方式，virtualbox需要设置全局设置</li>
</ol>
<pre><code>1. cmd+,-&gt;网络-&gt;仅主机(host-only)网络
2. 添加网络
</code></pre>
<ol>
<li>查看虚拟机ip地址，ip <code>ip addr</code></li>
<li>主机找到可以ping 通的ip</li>
<li>ssh登录 ssh <a href="mailto:root@192.168.xx.xx">root@192.168.xx.xx</a></li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>centos7 更改系统启动模式</title>
			<link>https://blog.v5u.win/posts/system/system-centos7-boot-type/</link>
			<pubDate>Tue, 26 Jun 2018 01:51:41 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-centos7-boot-type/</guid>
			<description>centos7 更改系统启动模式 查看当前启动模式 systemctl get-default 查看配置文件 cat /etc/inittab 设置启动模式为命令行模式 systemctl set-target multi-user.target 重启 shutdown -r now</description>
			<content type="html"><![CDATA[<p>centos7 更改系统启动模式</p>
<ol>
<li>查看当前启动模式 systemctl get-default</li>
<li>查看配置文件 cat /etc/inittab</li>
<li>设置启动模式为命令行模式 systemctl set-target multi-user.target</li>
<li>重启 shutdown -r now</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>centos7 PHP7环境配置</title>
			<link>https://blog.v5u.win/posts/system/system-centos7-php7/</link>
			<pubDate>Tue, 26 Jun 2018 01:50:27 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-centos7-php7/</guid>
			<description>centos7 PHP7环境配置 目录 1. 开启22端口2. 创建其他用户，使用其他用户ssh登录（root账户禁止登录）3. 关闭防火墙4. 关闭selinux5.</description>
			<content type="html"><![CDATA[<p>centos7 PHP7环境配置 目录 1. 开启22端口2. 创建其他用户，使用其他用户ssh登录（root账户禁止登录）3. 关闭防火墙4. 关闭selinux5. 安装Apache6. 安装MySQL7. 安装PHP7.28. 配置 [TOC]</p>
<ol>
<li>
<p>开启22端口</p>
</li>
<li>
<p>创建其他用户，使用其他用户ssh登录（root账户禁止登录）</p>
</li>
</ol>
<p>ssh <a href="mailto:test@10.211.55.5">test@10.211.55.5</a> (使用eth0网卡IP)</p>
<ol>
<li>
<p>关闭防火墙</p>
<p>centos7 默认使用firewalld，不在内置iptables
//临时关闭
systemctl stop firewalld
//禁止开机启动
systemctl disable firewalld</p>
</li>
<li>
<p>sudo yum -y install iptables-services</p>
</li>
<li>
<p>sudo vi /etc/sysconfig/iptables</p>
</li>
<li>
<p>systemctl restart iptables.service （重启）</p>
</li>
<li>
<p>systemctl enable iptables.service （开机自启动iptables）注：并不能开机自动关闭firewalld</p>
</li>
<li>
<p>关闭selinux</p>
</li>
</ol>
<p>gedit /etc/sysconfig/selinux</p>
<ol>
<li>
<p>安装Apache</p>
</li>
<li>
<p>sudo yum install httpd</p>
</li>
<li>
<p>sudo service httpd start</p>
</li>
<li>
<p>service httpd state</p>
</li>
<li>
<p>安装MySQL</p>
</li>
</ol>
<p>sudo yum install mysql-server （失败）</p>
<ol>
<li>
<p>安装PHP7.2</p>
</li>
<li>
<p>sudo yum install <a href="http://rpms.remirepo.net/enterprise/remi-release-7.rpm">http://rpms.remirepo.net/enterprise/remi-release-7.rpm</a></p>
</li>
<li>
<p>yum install yum-utils</p>
</li>
<li>
<p>yum-config-manager &ndash;enable remi-php72</p>
</li>
<li>
<p>yum install php php-mcrypt php-cli php-gd php-curl php-mysql php-ldap php-zip php-fileinfo (安装PHP模块)</p>
</li>
<li>
<p>php -v</p>
</li>
<li>
<p>配置</p>
</li>
<li>
<p>sudo chkconfig httpd on （Apache重启）</p>
</li>
<li>
<p>sudo nano /var/www/html/info.php （编辑PHP文件）</p>
</li>
<li>
<p>sudo service httpd restart</p>
</li>
<li>
<p>sudo vi /var/www/html/index.php (添加并编辑index.php)</p>
</li>
<li>
<p>修改Apache配置文件 /etc/httpd/conf/httpd.conf</p>
</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Apache不能访问directory 目录</title>
			<link>https://blog.v5u.win/posts/system/system-apache-directory/</link>
			<pubDate>Mon, 28 May 2018 06:14:25 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-apache-directory/</guid>
			<description>Mac升级了系统，发现启动了Apache，可以访问index.php文件。 当目录下找不到文件的时候，应该显示Indexes目录， 此时报错Fo</description>
			<content type="html"><![CDATA[<p>Mac升级了系统，发现启动了Apache，可以访问index.php文件。 当目录下找不到文件的时候，应该显示Indexes目录， 此时报错<code>Forbidden 403 You don't have permission to access /www on this server</code> 原因是Apache2.2版config默认设置是：</p>
<pre><code>&lt;Directory /&gt;
    AllowOverride none
    Allow from all
&lt;/Directory&gt;
</code></pre>
<p>Apache2.4 config默认设置是：</p>
<pre><code>&lt;Directory /&gt;
    AllowOverride none
    Require all denied
&lt;/Directory&gt;
</code></pre>
<p>最佳方案，目标<code>&lt;Directory&gt;</code>下设置文件访问权限为: <code>Allow from all</code> 参考：https://www.zyxware.com/articles/4550/solved-forbidden-you-dont-have-permission-to-access-on-this-server</p>
]]></content>
		</item>
		
		<item>
			<title>gitbook如何生成epub</title>
			<link>https://blog.v5u.win/posts/system/system-gitbook-make-epub/</link>
			<pubDate>Wed, 23 May 2018 15:44:43 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-gitbook-make-epub/</guid>
			<description>全局安装gitbook ：npm install -g gitbook 下载calibre安装应用 将calibre中的执行文件ebook-convert链接到shall环境：$</description>
			<content type="html"><![CDATA[<ol>
<li>全局安装gitbook ：npm install -g gitbook</li>
<li>下载calibre安装应用</li>
<li>将calibre中的执行文件ebook-convert链接到shall环境：<code>$ sudo ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/local/bin</code></li>
<li>验证ebook-convert可用，terminal下输入ebook-convert 后回车</li>
<li>如果可用，导出epub文件 gitbook epub ./ ./mbook.epub</li>
</ol>
<p>node: gitbook 项目需要先 npm install 配置好依赖库,再生成 epub 书籍</p>
<p><strong>Gitbook使用方法</strong> <a href="http://www.chengweiyang.cn/gitbook/basic-usage/README.html">http://www.chengweiyang.cn/gitbook/basic-usage/README.html</a></p>
]]></content>
		</item>
		
		<item>
			<title>gitbook如何生成epub</title>
			<link>https://blog.v5u.win/gitbook%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90epub/</link>
			<pubDate>Wed, 23 May 2018 15:44:43 +0000</pubDate>
			
			<guid>https://blog.v5u.win/gitbook%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90epub/</guid>
			<description>全局安装gitbook ：npm install -g gitbook 下载calibre安装应用 将calibre中的执行文件ebook-convert链接到shall环境：$</description>
			<content type="html"><![CDATA[<ol>
<li>全局安装gitbook ：npm install -g gitbook</li>
<li>下载calibre安装应用</li>
<li>将calibre中的执行文件ebook-convert链接到shall环境：<code>$ sudo ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/local/bin</code></li>
<li>验证ebook-convert可用，terminal下输入ebook-convert 后回车</li>
<li>如果可用，导出epub文件 gitbook epub ./ ./mbook.epub</li>
</ol>
<p>node: gitbook 项目需要先 npm install 配置好依赖库,再生成 epub 书籍</p>
<p><strong>Gitbook使用方法</strong> <a href="http://www.chengweiyang.cn/gitbook/basic-usage/README.html">http://www.chengweiyang.cn/gitbook/basic-usage/README.html</a></p>
]]></content>
		</item>
		
		<item>
			<title>ternimal</title>
			<link>https://blog.v5u.win/posts/system/system-terminal/</link>
			<pubDate>Fri, 18 May 2018 08:53:16 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-terminal/</guid>
			<description>暴力删除文件：输入 sudo rm -rf .Trash 再输入密码后 Enter 。 mac 设置软件安装安全级别 sudo spctl &amp;ndash;master-disable 文件权限修改 文字设定法 chmod [who] [+ | - | =] [mode] 文件名? mkdir code 修改权限的命令格式 chmod</description>
			<content type="html"><![CDATA[<p>暴力删除文件：输入 sudo rm -rf .Trash 再输入密码后 Enter 。 mac 设置软件安装安全级别 sudo spctl &ndash;master-disable 文件权限修改</p>
<ol>
<li>
<p>文字设定法 　　chmod [who] [+ | - | =] [mode] 文件名?</p>
</li>
<li>
<p>mkdir code</p>
</li>
</ol>
<pre tabindex="0"><code>修改权限的命令格式 
chmod [&lt;权限范围&gt;&lt;权限操作&gt;&lt;具体权限&gt;] [文件或目录…]

&lt;权限范围&gt; 
u：User，即文件或目录的拥有者。 
g：Group，即文件或目录的所属群组。 
o：Other，除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围。 
a：All，即全部的用户，包含拥有者，所属群组以及其他用户。

&lt;权限操作&gt; 
+：表示增加权限 
- ：表示取消权限 
=：表示唯一设定权限

&lt;具体权限&gt; 
r：表示可读取 
w：表示可写入 
x ：表示可执行

例：chmod o+w 111.txt
</code></pre><p>打开当前文件夹 open . 打开当前文件用指定的软件 open -a Sublime\ Text Podfile (open -a app_name file_name)</p>
]]></content>
		</item>
		
		<item>
			<title>车险</title>
			<link>https://blog.v5u.win/posts/life/life-%E8%BD%A6%E9%99%A9/</link>
			<pubDate>Thu, 17 May 2018 09:40:11 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/life/life-%E8%BD%A6%E9%99%A9/</guid>
			<description>续保的保费计算逻辑 商业险 一般来说，车主在第一年只要符合下面的这些情况就可以享受降价的好处： 首先，第一年你得没有出险。 其次，出险的次数要少于两</description>
			<content type="html"><![CDATA[<h3 id="续保的保费计算逻辑">续保的保费计算逻辑</h3>
<p>商业险 一般来说，车主在第一年只要符合下面的这些情况就可以享受降价的好处：</p>
<p>首先，第一年你得没有出险。</p>
<p>其次，出险的次数要少于两次，包含有两次。</p>
<p>最后，第一年的额赔付金额需要低于保险金额。</p>
<p>车主要符合以上三种情况才有资格在第二年享有优惠。否则，就不能享有优惠。</p>
<p>交强险 打个比方说，张先生在第一年驾驶车的时候都没有出过什么以外，也就是没有出险， 那么到了第二年，交强险的价格就会在第一年的基础上少10%， 到了第三年，价格就会下降到原先价格的80%。 但倘若第一年除了事情，第二年交费的时候还和第一年一样，没什么变化， 但如果出了两次事情，就得多交10%了。这是汽车出险第二年保费中的一种。</p>
<p>还有一点需要特别指出的是，如果车主在驾驶的过程中出现了酒驾的情况，那么交强险还会上涨。</p>
<hr>
<h3 id="各家保险公司比较">各家保险公司比较</h3>
<p>阳光车险：三者，车损，交强，无法找到第三人(特色，价低)，16项福利，首次高速送油5L免费，一闪赔。线上视频定损，先钱后修，不要发票，不限修理厂。</p>
]]></content>
		</item>
		
		<item>
			<title>如何增加见识，提高格局</title>
			<link>https://blog.v5u.win/posts/life/life-%E5%A6%82%E4%BD%95%E5%A2%9E%E5%8A%A0%E8%A7%81%E8%AF%86-%E6%8F%90%E9%AB%98%E6%A0%BC%E5%B1%80/</link>
			<pubDate>Mon, 23 Apr 2018 05:43:54 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/life/life-%E5%A6%82%E4%BD%95%E5%A2%9E%E5%8A%A0%E8%A7%81%E8%AF%86-%E6%8F%90%E9%AB%98%E6%A0%BC%E5%B1%80/</guid>
			<description>一个原则：增加经历—— 不管是经历人还是事，哪个方面都算。 具体办法： 交朋友。了解别人眼中的世界，经历小圈子，小社交的人情处事 旅游。经历社会，自</description>
			<content type="html"><![CDATA[<h3 id="一个原则增加经历-不管是经历人还是事哪个方面都算">一个原则：增加经历—— 不管是经历人还是事，哪个方面都算。</h3>
<p>具体办法： 交朋友。了解别人眼中的世界，经历小圈子，小社交的人情处事 旅游。经历社会，自然的世界 读书。经历牛逼的人升华后的世界 工作。经历不同：公司，行业，职位</p>
]]></content>
		</item>
		
		<item>
			<title>如何增加见识，提高格局</title>
			<link>https://blog.v5u.win/%E5%A6%82%E4%BD%95%E5%A2%9E%E5%8A%A0%E8%A7%81%E8%AF%86%EF%BC%8C%E6%8F%90%E9%AB%98%E6%A0%BC%E5%B1%80/</link>
			<pubDate>Mon, 23 Apr 2018 05:43:54 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E5%A6%82%E4%BD%95%E5%A2%9E%E5%8A%A0%E8%A7%81%E8%AF%86%EF%BC%8C%E6%8F%90%E9%AB%98%E6%A0%BC%E5%B1%80/</guid>
			<description>一个原则：增加经历—— 不管是经历人还是事，哪个方面都算。 具体办法： 交朋友。了解别人眼中的世界，经历小圈子，小社交的人情处事 旅游。经历社会，自</description>
			<content type="html"><![CDATA[<h3 id="一个原则增加经历-不管是经历人还是事哪个方面都算">一个原则：增加经历—— 不管是经历人还是事，哪个方面都算。</h3>
<p>具体办法：</p>
<p>交朋友。了解别人眼中的世界，经历小圈子，小社交的人情处事</p>
<p>旅游。经历社会，自然的世界</p>
<p>读书。经历牛逼的人升华后的世界</p>
<p>工作。经历不同：公司，行业，职位</p>
]]></content>
		</item>
		
		<item>
			<title>brew gem npm cocoapods</title>
			<link>https://blog.v5u.win/brew-gem-npm-cocoapods/</link>
			<pubDate>Fri, 20 Apr 2018 05:00:32 +0000</pubDate>
			
			<guid>https://blog.v5u.win/brew-gem-npm-cocoapods/</guid>
			<description>Mac上的包管理器 常用的有：brew gem npm cocoapods pip3 brew 用来管理Unix相关工具软件，就像centos之于yum，Ubuntu之于apt-get gem 即R</description>
			<content type="html"><![CDATA[<p>Mac上的包管理器 常用的有：brew gem npm cocoapods pip3</p>
<ul>
<li>
<p>brew 用来管理Unix相关工具软件，就像centos之于yum，Ubuntu之于apt-get</p>
</li>
<li>
<p>gem 即RubyGems,管理ruby社区的软件包。</p>
</li>
<li>
<p>npm 是nodejs的包管理器，用来管理nodejs社区的软件包。</p>
</li>
<li>
<p>pip 是Python的包管理器，用来管理Python社区的软件包</p>
</li>
<li>
<p>cocoapods 是iOS开发的包管理器，用来管理iOS代码包</p>
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>古代读书人的学习流程</title>
			<link>https://blog.v5u.win/posts/life/life-%E5%8F%A4%E4%BB%A3%E8%AF%BB%E4%B9%A6%E4%BA%BA%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%B5%81%E7%A8%8B/</link>
			<pubDate>Thu, 19 Apr 2018 09:38:27 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/life/life-%E5%8F%A4%E4%BB%A3%E8%AF%BB%E4%B9%A6%E4%BA%BA%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%B5%81%E7%A8%8B/</guid>
			<description>我内亲一家是清代有名的科举世家，从清初到晚清，号称“代有闻人”，十代九进士。他们家在晚清留下过一张单子，大概就是所谓家学流程。单子虽然不方便</description>
			<content type="html"><![CDATA[<p>我内亲一家是清代有名的科举世家，从清初到晚清，号称“代有闻人”，十代九进士。他们家在晚清留下过一张单子，大概就是所谓家学流程。单子虽然不方便发图上来，但是可以大概总结一下，不过其中书籍很多都是清中叶的。 家学内容： 学龄前由内亲内眷（姑、姨、姐）开蒙，教“字号”（即单字的大字）。【注：似乎别人家也有父母教的，但是这家只让内亲内眷教。】 六学入家学念书：六学开始：《三字经》、《小学集解》、《龙文鞭影》、《幼学琼林》。八岁开始：四书、《孔子家语》、《孝经》。 十岁开始：《诗义折中》、《书经图说》。并开始学对对子与缀句，进而诗赋。 十二岁开始：《周易折中》、《礼记》、《春秋》、《尔雅》、《说文》。 十几岁开始：《古文观止》、《古文释义》、《文章轨范》、《古文笔法百篇》、《古唐诗合解》、《赋学正鹄》、《骈体文钞》、《六朝文絜》、《昭明文选》。 再之后：前三史、《资治通鉴》、《通鉴辑览》、《纲鉴易知录》、《史论》。 习字：六学开始描红，用自家某代祖先特制的四孔格，共三十二字。 八岁开始小楷行书：先选《词林二妙》中一家学习，再临唐晋小楷。 作者：橘玄雅 链接：https://www.zhihu.com/question/20901379/answer/77825216 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
		</item>
		
		<item>
			<title>注、疏、解、记、典、经、传</title>
			<link>https://blog.v5u.win/posts/life/life-%E5%8F%A4%E4%BB%A3%E4%B9%A6%E5%90%8D%E7%9A%84%E5%90%AB%E4%B9%89/</link>
			<pubDate>Tue, 17 Apr 2018 09:18:10 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/life/life-%E5%8F%A4%E4%BB%A3%E4%B9%A6%E5%90%8D%E7%9A%84%E5%90%AB%E4%B9%89/</guid>
			<description>古文考据，遣词造句。 （一）传注类（诂、训、传、注、笺等） 1.诂、训这两个名称，笼统说来没有什么区别，凡侧重于字词、名物解释的，一般称作“诂”</description>
			<content type="html"><![CDATA[<h3 id="古文考据遣词造句">古文考据，遣词造句。</h3>
<p>（一）传注类（诂、训、传、注、笺等） 1.诂、训这两个名称，笼统说来没有什么区别，凡侧重于字词、名物解释的，一般称作“诂” （通作“故”）、“训”。 2.传，是传述的意思。传原本指解释儒家六经的书。 3.注，是注释的通称。“注”与“传”一脉相承，“注”的名称大致始于东汉郑玄。郑玄对 “三礼”有注，其书称“注”，含有对师儒谦下之意。古代经与注本分离，东汉以来，始经、 注合载，就经下注。 4.笺，是表识的意思。作为注释体，“笺”的名称始于郑玄。郑玄有《毛诗笺》，为《毛诗诂训传》作注。 （二）章句类 章句之名，是离章辨句的省称，是分析古书章节句读的意思。刘师培《国语发微》说：“章句之体，乃分析经文之章句者也。”作为一种注释，章句不像传注类注释那样以解释词义为主，而着重于逐句逐章串讲、分析大意。今仅存东汉赵歧的《孟子章句》，王逸的《楚辞章句》。 （三）义疏类 义疏，是疏通其义的意思。这是一种既释经文，又兼释注文的注释。 义疏兴起于魏晋南北朝，唐人“正前人之疏义，奉诏列裁，定名曰正。”（黄承吉《左传旧疏考证序》）因而义疏在唐代又称作“正义”，也称作“疏”。 （四）集解类 集解类注释是汇集众说并加上编者意见的一种注释。包括集注、集传、集释等。 如 何晏的《论语集解》，朱熹的《孟子集注》、《诗集传》，郭庆藩的《庄子集释》即是。需要指出的是，晋杜预的所撰《春秋经传集解》，名为“集解”，但它只是将《春秋经》和《左氏传》聚集在一起进行注解，与上面所说的汇集众说的“集解”名同实异。 这里附带讲一下补注。补注类注释有补、补疏、补释、补义、补正等名称，这是一种对 前人注释作补充、订正的注释。宋洪兴祖《楚辞补注》就是这类著作。 （五）音义类 音义是一种注音释义的著作，兴起于魏晋，另有音训、音诂、音注、音解、音证、音隐、音释等名称。唐陆德明的《经典释义》由《周易音义》、《尚书音义》、《毛诗音义》、《周礼音义》等十四部典籍的音义组成，是音义类注释的代表作。这类著作以注音为主，有时兼有简单释义，或指出经典不同版本的异文现象。音义书在给多音多义的词注音时，注音本身即暗含着释义，这是应该注意的。 作者：木瓷 链接：https://www.zhihu.com/question/28458046/answer/40951778</p>
]]></content>
		</item>
		
		<item>
			<title>孩子多大能办身份证？</title>
			<link>https://blog.v5u.win/posts/life/life-%E8%BA%AB%E4%BB%BD%E8%AF%81/</link>
			<pubDate>Mon, 16 Apr 2018 08:16:03 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/life/life-%E8%BA%AB%E4%BB%BD%E8%AF%81/</guid>
			<description>孩子多大能办身份证？ 根据派出所的规定，只要孩子愿意办身份证，16岁以下也可以办理，但是需要在家长或监护人的陪同下办理，并且有效期只有5年，当</description>
			<content type="html"><![CDATA[<p>孩子多大能办身份证？ 根据派出所的规定，只要孩子愿意办身份证，16岁以下也可以办理，但是需要在家长或监护人的陪同下办理，并且有效期只有5年，当然，这其中也包括新生儿可以办理身份证。 1/孩子多大能办身份证 答：办理身份证不受年龄限制！ 孩子出生后，持出生证明、父母结婚证、准生证到派出所报户口，就会有相应的身份证号； 现在未成年人也可以办理身份证的，没有年龄限制。 16岁以下办理身份证，须在家长或监护人陪同，有效期为5年。 16岁以上的，本人办理，初次有效期10年，26岁以后有效期为20年，46岁以后终身有效。 2/新生儿能办身份证吗？ 答：能办 幼儿身份证就是在未满十六周岁的少年儿童自愿的情况下，申请办理的身份证件，这类身份证必须由家长陪同才能办理，而且有效期只有五年。有了儿童身份证，在很多需要身份证明的场合，不需要再出示户口本，有身份证即可。 未成年人办理身份证，首先要遵循该未成年人自主自愿的原则，在父母的陪同下去办理。 过程： 1、未成年人如何办理身份证 儿童身份证办理流程 2、所需要的证件有：父母的身份证、孩子的户口簿、孩子的出生证明、学籍证明（未上学的可以不必带），以上证件均为原件。 未成年人如何办理身份证 儿童身份证办理流程 3、带齐上述证件之后，带着孩子到户籍所在派出所申请办理即可，一般需要缴纳20元的费用，等待一个月左右取证。领取身份证时，需要带着户口本和取证单据。 注意事项： 1、在申请身份证的时候，孩子要穿着深色有领子的上衣，和我们成人申请身份证的要求相同。 2、未成年人如何办理身份证 儿童身份证办理流程 3、拍摄身份证照片时，要求孩子能够单独坐正，不能有旁人的协助，所以，太小的孩子还不适宜申领身份证。 4、儿童身份证的有效期是5年，如果孩子在成长过程中，样貌发生了较大变化，家长需要及时带孩子去更换身份证上的照片，以免造成不必要的麻烦。 3/孩子办身份证流程 如果年满16岁，可以带户口本到户口所在地派出所申请。 流程如下： 1.先去公安机关定点的照相馆拍证件照。要求免冠（不带帽子，如果由眼镜的话最好眼镜也不要带），穿衣服看自己，不过最好不要太花哨。20元/人 2.取得照片后，照片会附一张单子，上面有你的照片编号。这张单子很重要，一定不能弄丢。 3.带上照片和单子、户口册到户口所在地派出所申请办理。交6块钱，然后公安机关会告诉你什么时候去拿。到时候去拿就是了。通常一代换二代是三到四个月。第一次办理的话通常是当年年底拿 4.如果是老身份证换二带，去拿新证的时候要把老证带过去，如果是第一次办就带户口册去拿 5.如果是大学生或其他原因，户口是集体户口的，还需要相关证明 4/新生儿需要办理哪些证 一，出生医学证明 二，入户户口本 三，身份证 四，独生子女证 五，社保 来源https://www.sohu.com/a/127290283_349098</p>
]]></content>
		</item>
		
		<item>
			<title>xcode 头文件引用</title>
			<link>https://blog.v5u.win/posts/ios/ios-include-import/</link>
			<pubDate>Thu, 12 Apr 2018 03:43:53 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-include-import/</guid>
			<description>头文件引用 头文件引用主要由#include 和#import 两种。每种又分为尖括号(&amp;lt;&amp;gt;)引用和双引号(&amp;quot; &amp;ldquo;</description>
			<content type="html"><![CDATA[<h5 id="头文件引用">头文件引用</h5>
<p>头文件引用主要由#include 和#import 两种。每种又分为尖括号(&lt;&gt;)引用和双引号(&quot; &ldquo;)引用 。 <code>#include</code> 与 <code>#import</code> 的区别是: <code>#import</code> 不会造成重复引用，它会自己检查是否已经引用过，也可以防止递归包含。 尖括号(&lt;&gt;)引用与双引号(&rdquo; &ldquo;)引用的区别是: 双引号(&rdquo; &ldquo;)引用的文件，编译器会首先在存储源文件的同一目录下搜索，如果文件没有找到编译器会搜索默认目录（配置文件中配置的头文件引用目录）。 尖括号(&lt;&gt;)引用 只会在默认目录下搜索。 换句话说 双引号引入的方式其搜索目录的范围要更大，当然效率差一点。 双引号引用范围=源文件目录+默认目录 尖括号引用范围=默认目录</p>
]]></content>
		</item>
		
		<item>
			<title>WordPress4.4之后原生支持REST API</title>
			<link>https://blog.v5u.win/posts/blog/blog-wordpress4-4-suported-rest-api/</link>
			<pubDate>Tue, 10 Apr 2018 05:33:11 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/blog/blog-wordpress4-4-suported-rest-api/</guid>
			<description>WordPress4.4之后REST API 格式:www.网址/wp-json/wp/v2,例：www.v5u.win/wp-json/wp/v2</description>
			<content type="html"><![CDATA[<p>WordPress4.4之后REST API 格式:www.网址/wp-json/wp/v2,例：<code>www.v5u.win/wp-json/wp/v2</code> 路由参数有五个，posts,pages,categories,tags,comments。 例：<code>www.v5u.win/wp-json/wp/v2/posts</code> url参数有： per_page(每页记录数)， page(页码), orderby(排序规则), order(排序方式) 例：<code>?per_page=8&amp;page=1&amp;orderby=date&amp;order=desc</code>每页显示8条，第一页，以时间排序，降序展示。 官方文档REST API在这里查看： <a href="https://developer.wordpress.org/rest-api/">https://developer.wordpress.org/rest-api/</a></p>
]]></content>
		</item>
		
		<item>
			<title>WordPress4 如何添加友情链接</title>
			<link>https://blog.v5u.win/posts/blog/blog-wordpress4-add-links/</link>
			<pubDate>Tue, 10 Apr 2018 03:11:38 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/blog/blog-wordpress4-add-links/</guid>
			<description>链接—&amp;gt;创建链接分类目录 —&amp;gt;添加链接 外观—&amp;gt;小工具—&amp;gt;链接—&amp;gt;选择链接分类目录 以前有用友链插件或者自定义菜单目</description>
			<content type="html"><![CDATA[<p>链接—&gt;创建链接分类目录 —&gt;添加链接 外观—&gt;小工具—&gt;链接—&gt;选择链接分类目录 以前有用友链插件或者自定义菜单目录（Google第一条），发现这些教程有过时了。特意总结后写到这里</p>
]]></content>
		</item>
		
		<item>
			<title>基金A类B类C类是什么意思？</title>
			<link>https://blog.v5u.win/posts/life/life-%E5%9F%BA%E9%87%91%E5%88%86%E7%B1%BBabc/</link>
			<pubDate>Tue, 10 Apr 2018 02:41:38 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/life/life-%E5%9F%BA%E9%87%91%E5%88%86%E7%B1%BBabc/</guid>
			<description>货币基金和短期理财债券基金 在货币基金和短期理财债券基金里，最常见的后缀是A和B，它们的差别主要是参与门槛的不同： A类是低申购起点，1分、1元</description>
			<content type="html"><![CDATA[<p>货币基金和短期理财债券基金 在货币基金和短期理财债券基金里，最常见的后缀是A和B，它们的差别主要是参与门槛的不同： A类是低申购起点，1分、1元和100元 B类则是高申购起点的，一般水平在500万元，低的也要近百万元。如此，B类基金的销售服务费会低很多，自然收益会高于A类。</p>
<hr>
<p>但是A、B两类货币基金在费率上也有差别： 货币基金不收取申购和赎回费，A、B两类货币基金的管理费和托管费都一样，唯一区别是B类的销售服务费比A类少一些，当然我们也经常发现，一般B类货基的七日年化收益率相对高一些。 货基也有一类特殊群体——E类份额，是最近几年才出现的。主要是针对销售渠道的区别，有的是对传统销售渠道的和网络销售渠道的区别；有的是对不同销售平台的的区别；也可能是对某一个专门的销售渠道定制的。比如，华夏现金增利E份额专为百度理财定制；诺安天天宝货币E专为同花顺爱基金收益宝定制。 货基里还有一种特例：基民可以按照持有时间进阶，享受不同的销售费率，比如南方现金通货币基金。 债券型基金 债券型基金有A、B和C三个后缀。其中的不同，就是申购和赎回费用的区别。 A类份额：表示前端收费。 B类份额：表示后端收费，根据持有这只基金的时间长短来决定。 值得注意的是：A类和B类，都要收取基金管理费和托管费，不收取销售服务费。 C类份额：前后端都不收费。认购和赎回时，都不需要手续费，它多了一个销售服务费。 股票型基金和混合型基金 股票型基金和混合型基金ABC的后缀和债券型基金的费率模式一样。 A类份额：是基金前段收费模式； B类份额：是基金后端收费模式； C类份额：不收取申购和赎回费，一般情况下要收取0.5%的销售服务费； 那么下面是选择方案建议 在股票型和混合型基金中，A类、B类和C类的管理费和托管费一样，但C类份额的销售服务费一般从基金净值中扣除，前端收费会随着基金申购金额增加而递减，后端收费随着持有基金时间变长而递减。如果基金的操作资金在100万元以内，且在一年内赎进行回的话，就是前段费率小于后端费率，前段收费具有较大优势；如果是长期持有，特别是超过2年以上，后端收费优势则更加明显。 那么C类份额究竟适合那些投资群体呢？ C类份额由于0申购费、赎回费也比较低，故适合那些对资金流动性要求高且投资期限小于一年的投资者。注意，C类份额有销售服务费，而这个费用是基于基金资产净值计算的，所以C类份额的收费不适合基金规模偏大的投资者。 分级基金 分级基金具有三种份额，分别是母份额、A份额（稳健份额）、B份额（激进份额）。 最初，分级基金需要标识，但只靠名字来标识，效果并不理想，如瑞福优先和瑞福进取、银华稳进和银华锐进。最后，还是用A和B区分，更通俗易懂。于是，A代表的就是低风险份额，B代表的就是高风险份额。</p>
]]></content>
		</item>
		
		<item>
			<title>读给年轻互联网人的一些建议总结</title>
			<link>https://blog.v5u.win/posts/life/life-%E8%AF%BB%E7%BB%99%E5%B9%B4%E8%BD%BB%E4%BA%92%E8%81%94%E7%BD%91%E4%BA%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE%E6%80%BB%E7%BB%93/</link>
			<pubDate>Sun, 08 Apr 2018 06:14:21 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/life/life-%E8%AF%BB%E7%BB%99%E5%B9%B4%E8%BD%BB%E4%BA%92%E8%81%94%E7%BD%91%E4%BA%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE%E6%80%BB%E7%BB%93/</guid>
			<description>ReidHoffman的ABZ计划 a: ios组件化，项目化，当下职业发展方向 b: 大前端，全栈创业，文章分享，连接人与事，支线职业知识储备 z: 投资理</description>
			<content type="html"><![CDATA[<p>ReidHoffman的ABZ计划 a: ios组件化，项目化，当下职业发展方向 b: 大前端，全栈创业，文章分享，连接人与事，支线职业知识储备 z: 投资理财，应对最糟糕的情况</p>
]]></content>
		</item>
		
		<item>
			<title>读给年轻互联网人的一些建议总结</title>
			<link>https://blog.v5u.win/%E8%AF%BB%E7%BB%99%E5%B9%B4%E8%BD%BB%E4%BA%92%E8%81%94%E7%BD%91%E4%BA%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE%E6%80%BB%E7%BB%93/</link>
			<pubDate>Sun, 08 Apr 2018 06:14:21 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E8%AF%BB%E7%BB%99%E5%B9%B4%E8%BD%BB%E4%BA%92%E8%81%94%E7%BD%91%E4%BA%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE%E6%80%BB%E7%BB%93/</guid>
			<description>ReidHoffman的ABZ计划 a: ios组件化，项目化，当下职业发展方向 b: 大前端，全栈创业，文章分享，连接人与事，支线职业知识储备 z: 投资理</description>
			<content type="html"><![CDATA[<p>ReidHoffman的ABZ计划</p>
<p>a: ios组件化，项目化，当下职业发展方向</p>
<p>b: 大前端，全栈创业，文章分享，连接人与事，支线职业知识储备</p>
<p>z: 投资理财，应对最糟糕的情况</p>
]]></content>
		</item>
		
		<item>
			<title>藏酒</title>
			<link>https://blog.v5u.win/posts/life/life-%E7%99%BD%E9%85%92%E7%9A%84%E5%82%A8%E8%97%8F/</link>
			<pubDate>Sat, 07 Apr 2018 13:09:36 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/life/life-%E7%99%BD%E9%85%92%E7%9A%84%E5%82%A8%E8%97%8F/</guid>
			<description>操作： 容器：陶罐/瓷罐（结构致密不漏，略有微孔，小分子可以渗透） 温度：3-23°C（维持微生物的活性：冬天冰点以上，夏天不可暴晒） 避光：直射</description>
			<content type="html"><![CDATA[<p>操作： 容器：陶罐/瓷罐（结构致密不漏，略有微孔，小分子可以渗透） 温度：3-23°C（维持微生物的活性：冬天冰点以上，夏天不可暴晒） 避光：直射阳光杀菌，紫外线杀死酒中活性物质 干燥：湿气会遮挡陶坛上的微孔，甚至反渗入坛，使酒变质 存放：室内柜子下，床下 密封：生胶带（安装水管水龙头用的白色生胶带化学性质稳定，不带胶质，质地柔软且密封性能好，在酒瓶脖子上缠绕几大圈，效果非常出色） 误区： 溶洞、地洞藏酒；酒糟埋酒</p>
]]></content>
		</item>
		
		<item>
			<title>package.json中scripts的使用方法</title>
			<link>https://blog.v5u.win/package-json%E4%B8%ADscripts%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</link>
			<pubDate>Thu, 05 Apr 2018 15:49:56 +0000</pubDate>
			
			<guid>https://blog.v5u.win/package-json%E4%B8%ADscripts%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
			<description>scripts是npm的脚本编辑的地方，不是node的 所以在package.json中scripts的命令行使用方式是这样的，如下 npm run start &amp;quot;scripts&amp;quot;: {</description>
			<content type="html"><![CDATA[<p>scripts是npm的脚本编辑的地方，不是node的</p>
<p>所以在package.json中scripts的命令行使用方式是这样的，如下</p>
<p>npm run start</p>
<pre><code>  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;node ./bin/www&quot;
  },
</code></pre>
<p>详细使用方法请参考http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html</p>
]]></content>
		</item>
		
		<item>
			<title>terminal的显示增加色彩</title>
			<link>https://blog.v5u.win/posts/system/system-terminal%E7%9A%84%E6%98%BE%E7%A4%BA%E5%A2%9E%E5%8A%A0%E8%89%B2%E5%BD%A9/</link>
			<pubDate>Wed, 04 Apr 2018 10:16:29 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-terminal%E7%9A%84%E6%98%BE%E7%A4%BA%E5%A2%9E%E5%8A%A0%E8%89%B2%E5%BD%A9/</guid>
			<description>打开 .bash_profile文件，添加： export GREP_OPTIONS=‘—-color=auto’ #如果没有指定，则自动选择颜色 export CLICOLOR=1 #是否输</description>
			<content type="html"><![CDATA[<p>打开 .bash_profile文件，添加：</p>
<pre><code>export GREP_OPTIONS=‘—-color=auto’ #如果没有指定，则自动选择颜色
export CLICOLOR=1 #是否输出颜色
export LSCOLORS=Bxfxcxdxbxegedabagacad#指定颜色
</code></pre>
<p>LSCOLORS此变量的值描述使用 CLICOLOR</p>
<p>启用颜色时要使用哪种属性的颜色</p>
<p>。该字符串是</p>
<p>fb格式对的串联，其中f是前景色，b是</p>
<p>背景色。</p>
<p>颜色代号如下：</p>
<p>a黑色</p>
<p>b红色</p>
<p>c绿色</p>
<p>d棕色</p>
<p>e蓝色</p>
<p>f洋红色</p>
<p>g青色</p>
<p>h浅灰色</p>
<p>黑色粗体，通常显示为深灰色</p>
<p>B粗体红色</p>
<p>C粗体绿色</p>
<p>D粗体棕色，通常显示为黄色</p>
<p>E粗体蓝色</p>
<p>F粗体洋红色</p>
<p>G加粗青色</p>
<p>H加粗浅灰色; 看起来像明亮的白色</p>
<p>x默认前景或背景</p>
<p>请注意，以上是标准的ANSI颜色。实际</p>
<p>显示可能根据</p>
<p>使用中的终端的颜色能力而不同。</p>
<p>属性的顺序如下：</p>
<p>1.目录</p>
<p>2.符号链接</p>
<p>3.套接字</p>
<p>4.管道</p>
<p>5.可执行</p>
<p>6.块特殊</p>
<p>7.字符特殊</p>
<p>8.可执行与setuid位设置</p>
<p>9.可执行与setgid位设置</p>
<p>10.目录可写给其他人，粘性位</p>
<p>11。目录可写给其他人，没有粘性</p>
<p>位</p>
<p>默认为“exfxcxdxbxegedabagacad”，即</p>
<p>常规目录的</p>
<p>蓝色前景和默认背景，setuid执行的黑色前景和红色背景</p>
<p>等。</p>
]]></content>
		</item>
		
		<item>
			<title>docker 使用规则</title>
			<link>https://blog.v5u.win/posts/docker/docker-%E7%AE%80%E4%BB%8B/</link>
			<pubDate>Wed, 04 Apr 2018 09:39:10 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/docker/docker-%E7%AE%80%E4%BB%8B/</guid>
			<description>[TOC] 硬件/操作系统 要求 Docker支持以下的发行版版本： Ubuntu18.04 LTS 是目前对docker兼容性最好的发行版 CentOS 7 (64-bit)，要求内核版本不低于 3.10 。</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="硬件操作系统-要求">硬件/操作系统 要求</h2>
<p>Docker支持以下的发行版版本：</p>
<ul>
<li>
<p>Ubuntu18.04 LTS 是目前对docker兼容性最好的发行版</p>
</li>
<li>
<p>CentOS 7 (64-bit)，要求内核版本不低于 3.10 。CentOS 7 满足最低内核的要求，但由于内核版本比较低，部分功能（如 <code>overlay2</code> 存储层驱动）无法使用，并且部分功能可能不太稳定。</p>
</li>
<li>
<p>Debain 9</p>
</li>
</ul>
<hr>
<h2 id="前提条件">前提条件</h2>
<p>目前，CentOS 仅发行版本中的内核支持 Docker。</p>
<p>Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。</p>
<p>Docker 运行在 CentOS-6.5 或更高的版本的 CentOS 上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。</p>
<h3 id="docker-的组件结构">docker 的组件结构</h3>
<p>Docker 由镜像(Image)、容器(Container)、仓库(Repository) 三部分组成。</p>
<p>docker-machine, docker, docker-compose (docker环境)</p>
<p>docker container 容器(运行实例)</p>
<p>docker image 镜像(安装实例)</p>
<p>Dockerfile(用于生成image)</p>
<h3 id="docker配置使用">docker配置+使用</h3>
<p>预先安装docker的相关库</p>
<pre tabindex="0"><code>brew install 
docker
docker-compose
docker-machine
</code></pre><h4 id="关于-docker-machine">关于 docker-machine</h4>
<p><a href="https://docs.docker.com/machine/overview/">Docker Machine</a> 是 Docker 官方提供的一个工具，它可以帮助我们在远程的机器上安装 Docker，或者在虚拟机 host 上直接安装虚拟机并在虚拟机中安装 Docker。我们还可以通过 docker-machine 命令来管理这些虚拟机和 Docker。</p>
<p>Mac 命令行安装 docker的话需要首先安装 docker-machine,默认启动的虚拟机对外IP：192.168.99.100</p>
<p><code>tcp://192.168.99.100:2376</code></p>
<h4 id="启动docker-machine">启动docker-machine</h4>
<p>To have launchd start docker-machine now and restart at login:
<code>brew services start docker-machine</code></p>
<p>Or, if you don&rsquo;t want/need a background service you can just run:
<code>docker-machine start</code></p>
<h3 id="利用docker-machine-使-docker从创建到启动步骤">利用docker-machine 使 docker从创建到启动步骤</h3>
<hr>
<ol>
<li>
<p>docker-machine ls 	//检查docker-machine 是否启动了,如果查看的URL为空，则启动docker-machine</p>
</li>
<li>
<p>docker-machine start 或 docker-machine create default // 启动或创建docker虚拟主机。每一次启动都要重新创建，默认为 default。</p>
</li>
<li>
<p>docker-machine env	//配置docker 虚拟主机环境变量</p>
</li>
<li>
<p>eval $(docker-machine env)	// 使default环境变量生效</p>
</li>
</ol>
<hr>
<p>docker操作
5. docker image pull ubuntu // 拉取镜像库</p>
<ol start="6">
<li>
<p>docker image ls // 查看 已经安装的 image 镜像</p>
</li>
<li>
<p>docker container run ubuntu //命令会从 image 文件，生成一个正在运行的容器实例。</p>
</li>
<li>
<p>docker exec -it [容器ID] bash //进入已运行的容器，进行bash操作</p>
</li>
</ol>
<h3 id="docker-使用规则">docker 使用规则</h3>
<p>镜像源：https://www.docker-cn.com/registry-mirror
在docker或网易蜂巢的镜像库中找到需要的image
docker pull hub.c.163.com/library/mysql:latest
docker images
//启动容器,端口映射8888:8080
docker run -b -p 8888:8080 hub.c.163.com/library/mysql</p>
<p><code>docker container run hello-world</code></p>
<p>输出这段提示以后，<code>hello world</code>就会停止运行，容器自动终止。</p>
<p>有些容器不会自动终止，因为提供的是服务。比如，安装运行 Ubuntu 的 image，就可以在命令行体验 Ubuntu 系统。</p>
<p><code>docker container run -it ubuntu bash</code></p>
<h3 id="编写-dockerfile-文件生成image">编写 Dockerfile 文件生成image</h3>
<ol>
<li>新建 .dockerignore 文件
写入要忽略的目录/文件</li>
</ol>
<pre tabindex="0"><code>.git
node_modules
npm-debug.log
</code></pre><ol start="2">
<li>新建文本文件 Dockerfile</li>
</ol>
<p>Dockerfile 是一个文本文件，其内包含了一条条的 <strong>指令(Instruction)</strong>，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p>
<p>写入环境配置</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dockerfile" data-lang="dockerfile"><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> node:8.4 //该 image 文件继承官方的 node image，冒号表示标签，这里标签是8.4，即8.4版本的 node。</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> . /app	//将当前目录下的所有文件（除了.dockerignore排除的路径），都拷贝进入 image 文件的/app目录。<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /app	//指定接下来的工作路径为/app。</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> npm install --registry<span style="color:#f92672">=</span>https://registry.npm.taobao.org	//在/app目录下，运行npm install命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">EXPOSE</span><span style="color:#e6db74"> 3000	//将容器 3000 端口暴露出来， 允许外部连接这个端口。</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span> node demos/01.js	//容器启动后自动执行node demos/01.js。<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><ol start="3">
<li>创建 image 文件</li>
</ol>
<p><code>docker image build -t koa-demo .</code> 或<code> docker image build -t koa-demo:0.0.1 .</code></p>
<p><code>docker build</code> 命令最后有一个 <code>.</code>。<code>.</code> 表示当前目录，而 <code>Dockerfile</code> 就在当前目录，因此不少初学者以为这个路径是在指定 <code>Dockerfile</code> 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定 <strong>上下文路径</strong>。</p>
<ol start="4">
<li>生成容器</li>
</ol>
<p><code>docker container run -p 8000:3000 -it koa-demo /bin/bash</code></p>
<h3 id="发布-image-文件">发布 image 文件</h3>
<p>去 hub.docker.com 或 cloud.docker.com 注册一个账户.</p>
<ol>
<li>docker login</li>
<li>为本地的 image 标注用户名和版本。</li>
<li>重新构建一下 image 文件。</li>
<li>发布 image 文件。</li>
<li>发布成功以后，登录 hub.docker.com，查看已经发布的 image 文件。</li>
</ol>
<h3 id="其他docker命令">其他docker命令</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>docker-machine env 	// 查看环境变量：IP
</span></span><span style="display:flex;"><span>docker ps 					//查看运行的docker
</span></span><span style="display:flex;"><span>netstat -na|grep <span style="color:#ae81ff">8888</span> // 查看端口监听情况
</span></span><span style="display:flex;"><span>docker exec -it <span style="color:#f92672">[</span>容器ID<span style="color:#f92672">]</span> bash //进入容器，进行bash操作 -it：这是两个参数，一个是 -i 表示交互式操作，一个是 -t 为终端。
</span></span><span style="display:flex;"><span>docker run -ti -d --name my-nginx -p 8088:80 docker.io/nginx // 端口映射
</span></span><span style="display:flex;"><span>docker rm containerId // 删除 容器文件
</span></span><span style="display:flex;"><span>docker rmi imageId 		// 删除 image文件
</span></span><span style="display:flex;"><span>docker stop 1f 				// 停止运行的容器
</span></span><span style="display:flex;"><span>docker start 					//启动一个或多个已经被停止的容器
</span></span><span style="display:flex;"><span>docker stop 					//停止一个运行中的容器
</span></span><span style="display:flex;"><span>docker restart b0				//重启容器
</span></span><span style="display:flex;"><span>docker container kill <span style="color:#f92672">[</span>containID<span style="color:#f92672">]</span> // 手动终止 运行的 容器
</span></span><span style="display:flex;"><span>docker container ls 	// 列出本机正在运行的容器
</span></span><span style="display:flex;"><span>docker container ls --all //列出本机所有容器，包括终止运行的容器
</span></span><span style="display:flex;"><span>docker volume create portainer_data
</span></span></code></pre></div><p>docker-machine create default // 创建docker虚拟主机，每一次启动都要重新创建，默认创建环境名为 default。如果报错，boot2docker.iso 无法下载可以在GitHub上单独下载后放到 /Users/$username/.docker/machine/cache/ 下</p>
<p>在容器的命令行，按下 Ctrl + c 停止 Node 进程，然后按下 Ctrl + d （或者输入 exit）退出容器。</p>
<h4 id="docker的数据持久化主要有两种方式">Docker的数据持久化主要有两种方式：</h4>
<ul>
<li>bind mount</li>
<li>volume</li>
</ul>
<p><strong>使用volume</strong></p>
<p>volume也是绕过container的文件系统，直接将数据写到host机器上，只是volume是被docker管理的，docker下所有的volume都在host机器上的指定目录下/var/lib/docker/volumes。</p>
<p>将my-volume挂载到container中的/mydata目录：</p>
<pre tabindex="0"><code>docker run -it -v my-volume:/mydata alpine sh
</code></pre><h4 id="varrundockersock文件">/var/run/docker.sock文件</h4>
<p>这个文件是什么呢？为什么有些容器需要使用它？简单地说，它是Docker守护进程(Docker daemon)默认监听的Unix域套接字(Unix domain socket)，容器中的进程可以通过它与Docker守护进程进行通信。</p>
<p>Portainer镜像通过绑定的/var/run/docker.sock文件与<strong>Docker守护进程</strong>通信，执行各种管理操作。</p>
<h4 id="一些使用原则">一些使用原则</h4>
<ol>
<li>
<p><em>在创建 Docker Image 的时候使用 <strong>-t</strong> 参数对 Image 打上 Tag</em></p>
</li>
<li>
<p><em>不要在 Dockerfile 中进行端口映射</em></p>
</li>
</ol>
<p>如果 Image 的使用者关心 Container 应该将自己的什么端口和 host 的端口进行映射，那就会显式地在创建 Container 的时候使用 <strong>-p</strong> 参数进行设置，否则，Docker 会自动给 Container 分配一个 host 上的端口进行映射。</p>
<ol start="3">
<li>在使用 <strong>CMD</strong> 和 <strong>ENTRYPOINT</strong> 指示的时候使用数组传入参数 <code>CMD [&quot;/bin/echo&quot;]</code></li>
<li>**CMD **和 <strong>ENTRYPOINT</strong> 最好配合使用</li>
</ol>
<p><strong>注意</strong></p>
<p>docker是运行在Linux上的，在Windows/Mac中运行docker，实际上还是在Windows/Mac下先安装了一个Linux环境，然后在这个系统中运行的docker。也就是说，服务中使用的localhost指的是这个Linux环境的地址，而不是我们的宿主环境Windows/Mac。我们可以通过命令：<code>docker-machine ip default</code></p>
<p><strong>找到这个Linux的ip地址，一般情况下这个地址是192.168.99.100，然后在 Windows/Mac 的浏览器中，输入这个地址，加上服务的端口即可启用了。</strong> <code>http://192.168.99.100:8080</code></p>
<h3 id="docker-compose-编排项目">docker-compose 编排项目</h3>
<p>docker-compose build 	//编排 image</p>
<p>docker-compose run my-gin //创建并启动容器</p>
<p>docker-compose.yml	//配置文件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#34;2&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">gili-api</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">image</span>: <span style="color:#ae81ff">gili-api:latest</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">always</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">MYSQL_DSN</span>: <span style="color:#e6db74">&#34;root:K3b4XRqsmVpW@tcp(172.20.0.2)/giligili?charset=utf8&amp;parseTime=True&amp;loc=Local&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">REDIS_ADDR</span>: <span style="color:#e6db74">&#34;172.21.0.2:6379&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">REDIS_PW</span>: <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">REDIS_DB</span>: <span style="color:#e6db74">&#34;0&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">SESSION_SECRE</span>: <span style="color:#e6db74">&#34;K3b4XRqsmVpW&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">GIN_MODE</span>: <span style="color:#e6db74">&#34;release&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">3002</span>:<span style="color:#ae81ff">3000</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">mysql</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">image</span>: <span style="color:#ae81ff">mysql:5.6</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">always</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">MYSQL_ROOT_PASSWORD</span>: <span style="color:#ae81ff">K3b4XRqsmVpW</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">mysql_data:/var/lib/mysql/data</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">3306</span>:<span style="color:#ae81ff">3306</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">redis</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">redis</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">image</span>: <span style="color:#ae81ff">redis</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">always</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">6379</span>:<span style="color:#ae81ff">6379</span>
</span></span></code></pre></div><p><strong>在docker容器里localhost并不是指宿主机的localhost</strong></p>
<p>由此原因，并不能在容器中通过localhost:3306访问到宿主机的mysql</p>
<p><strong>docker在运行时就建立了虚拟网卡，并命名为docker0</strong></p>
<p>我们可以在宿主机上运行ifconfig看到它，这就是宿主机建立的网桥，用于与各个容器之间通信</p>
<p><strong>宿主机在与容器同一局域网的IP地址一般是docker0对应的IP地址段的首个地址（如172.0.17.1）</strong></p>
<p>我们可以在容器里通过172.0.17.1:3306访问到宿主机的mysql服务器</p>
<p>ip 查询命令：<code>ip addr show</code></p>
<p><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html">Docker 入门教程</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html">Docker 微服务教程</a></p>
<p><a href="https://studygolang.com/articles/4219">Dockerfile 最佳实践</a></p>
<p><a href="https://registry.docker-cn.com">https://registry.docker-cn.com</a></p>
<p><a href="https://yeasy.gitbooks.io/docker_practice/">https://yeasy.gitbooks.io/docker_practice/</a></p>
]]></content>
		</item>
		
		<item>
			<title>appledoc使用说明</title>
			<link>https://blog.v5u.win/posts/ios/ios-appledoc%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</link>
			<pubDate>Wed, 04 Apr 2018 07:00:34 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-appledoc%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</guid>
			<description>appledoc使用说明 安装命令行： git clone git://github.com/tomaz/appledoc.git cd ./appledoc sudo sh install-appledoc.sh appledoc —version //检查successed 使用 生成HTML 当需要html文档时，可以加</description>
			<content type="html"><![CDATA[<p>appledoc使用说明</p>
<p>安装命令行：</p>
<ul>
<li>git clone git://github.com/tomaz/appledoc.git</li>
<li>cd ./appledoc</li>
<li>sudo sh install-appledoc.sh</li>
<li>appledoc —version //检查successed</li>
</ul>
<p>使用</p>
<p>生成HTML</p>
<p>当需要html文档时，可以加上“–no-create-docset”——</p>
<pre><code>appledoc --no-create-docset --output ~/doc --project-name &quot;DrowRect&quot; --company-id &quot;com.jinyuyoulong&quot; --project-company &quot;jinyuyoulong&quot; ./
</code></pre>
<p>注:</p>
<p>–output ./doc：设置输出目录为“./doc”。</p>
<p>–project-name objcdoc：设置项目名为“DrowRect”。</p>
<p>–project-company “jinyuyoulong”：设置公司名为“jinyuyoulong”。</p>
<p>–company-id “com.jinyuyoulong”：设置公司id为“com.jinyuyoulong”。</p>
<p>./：当前目录。</p>
<p>生成docset 此路不通</p>
<pre><code>appledoc --output ./doc --project-name &quot;DrowRect&quot; --project-company &quot;jinyuyoulong&quot; --company-id &quot;com.jinyuyoulong&quot; ./
</code></pre>
<ul>
<li>
<ul>
<li>*Xcode脚本生成文档</li>
</ul>
</li>
</ul>
<p>Xcode 配置<!-- raw HTML omitted --></p>
<ol>
<li>
<p>add new target —&gt;选择Other—Aggregate，命名为docText<!-- raw HTML omitted --></p>
</li>
<li>
<p>Build Phases + run script</p>
</li>
<li>
<p>编辑run script的内容</p>
</li>
<li>
<p>设置target为docText，运行Xcode</p>
</li>
<li>
<p>在脚本中标明的导出目录下查看生成的文档</p>
</li>
</ol>
<p>script:</p>
<pre><code>#appledoc Xcode script
# Start constants
company=&quot;abc&quot;;
companyID=&quot;com.abc&quot;;
companyURL=&quot;http://abc.com&quot;;
target=&quot;iphoneos&quot;;
#target=&quot;macosx&quot;;
outputPath=&quot;~/doc&quot;;#输出地址
# End constants
/usr/local/bin/appledoc \
--project-name &quot;${PROJECT_NAME}&quot; \
--project-company &quot;${company}&quot; \
--company-id &quot;${companyID}&quot; \
--docset-atom-filename &quot;${company}.atom&quot; \
--docset-feed-url &quot;${companyURL}/${company}/%DOCSETATOMFILENAME&quot; \
--docset-package-url &quot;${companyURL}/${company}/%DOCSETPACKAGEFILENAME&quot; \
--docset-fallback-url &quot;${companyURL}/${company}&quot; \
--output &quot;${outputPath}&quot; \
--publish-docset \
--docset-platform-family &quot;${target}&quot; \
--logformat xcode \
--keep-intermediate-files \
--no-repeat-first-par \
--no-warn-invalid-crossref \
--exit-threshold 2 \
&quot;${PROJECT_DIR}&quot;</code></pre>
]]></content>
		</item>
		
		<item>
			<title>pycharm如何添加 local venv</title>
			<link>https://blog.v5u.win/posts/python/python-pycharm-local-venv/</link>
			<pubDate>Fri, 30 Mar 2018 03:20:02 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/python/python-pycharm-local-venv/</guid>
			<description>需求：pycharm为项目添加已经存在的venv虚拟环境 前几天学习Django，开始是terminal + sublime text。后来学的差不多了，想想做</description>
			<content type="html"><![CDATA[<p>需求：pycharm为项目添加已经存在的venv虚拟环境 前几天学习Django，开始是terminal + sublime text。后来学的差不多了，想想做项目还是得上pycharm，所以开始折腾。 说明，pycharm create project是会询问是否创建新的venv的，换句话说，其实pycharm是建议设置基础引用Python版本，然后在他的基础上，每个项目都有自己的venv。这种策略很好，每个项目的环境互不干扰。奈何范子处于学习阶段，local项目已经有了本地的venv，不需要重新创建。这时候我就需要考虑如何添加一个local venv。 然而道路颇多波折，localvenv的path是确切知道的，但是在pycharm的configurations中Python interperter是一个选择栏，而没有添加栏。这就尴尬了！ <img src="http://ocnjk5c7r.bkt.clouddn.com/python/pycharm_config.png" alt="pycharm_config"> 万幸经过摸索，在设置中（Mac版 cmd+,）发现是可以添加的 <img src="http://ocnjk5c7r.bkt.clouddn.com/python/python_setting.png" alt="pycharm_setting"> 在这里添加好了之后，在返回configurations，出现了新的选项，选择就可以了。</p>
]]></content>
		</item>
		
		<item>
			<title>pycharm如何添加 local venv</title>
			<link>https://blog.v5u.win/pycharm%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0-local-venv/</link>
			<pubDate>Fri, 30 Mar 2018 03:20:02 +0000</pubDate>
			
			<guid>https://blog.v5u.win/pycharm%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0-local-venv/</guid>
			<description>需求：pycharm为项目添加已经存在的venv虚拟环境 前几天学习Django，开始是terminal + sublime text。后来学的差不多了，想想做</description>
			<content type="html"><![CDATA[<p>需求：pycharm为项目添加已经存在的venv虚拟环境</p>
<p>前几天学习Django，开始是terminal + sublime text。后来学的差不多了，想想做项目还是得上pycharm，所以开始折腾。</p>
<p>说明，pycharm create project是会询问是否创建新的venv的，换句话说，其实pycharm是建议设置基础引用Python版本，然后在他的基础上，每个项目都有自己的venv。这种策略很好，每个项目的环境互不干扰。奈何范子处于学习阶段，local项目已经有了本地的venv，不需要重新创建。这时候我就需要考虑如何添加一个local venv。</p>
<p>然而道路颇多波折，localvenv的path是确切知道的，但是在pycharm的configurations中Python interperter是一个选择栏，而没有添加栏。这就尴尬了！</p>
<p><img src="http://ocnjk5c7r.bkt.clouddn.com/python/pycharm_config.png" alt="pycharm_config"></p>
<p>万幸经过摸索，在设置中（Mac版 cmd+,）发现是可以添加的</p>
<p><img src="http://ocnjk5c7r.bkt.clouddn.com/python/python_setting.png" alt="pycharm_setting"></p>
<p>在这里添加好了之后，在返回configurations，出现了新的选项，选择就可以了。</p>
]]></content>
		</item>
		
		<item>
			<title>范蠡传</title>
			<link>https://blog.v5u.win/posts/life/life-%E8%8C%83%E8%A0%A1%E4%BC%A0/</link>
			<pubDate>Mon, 19 Mar 2018 08:19:12 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/life/life-%E8%8C%83%E8%A0%A1%E4%BC%A0/</guid>
			<description>分事略记 学艺 范蠡生卒约为孔子同时期，出身贫寒。父母早亡，由哥嫂扶养成人。范蠡小时天资聪慧，博闻强识，喜读书，抱负大，不喜耕作，众乡邻不齿。范</description>
			<content type="html"><![CDATA[<p>分事略记 学艺 范蠡生卒约为孔子同时期，出身贫寒。父母早亡，由哥嫂扶养成人。范蠡小时天资聪慧，博闻强识，喜读书，抱负大，不喜耕作，众乡邻不齿。范蠡说：“你们怎么知道我的志向呢？”他苦读了《书》、《易》、《诗》等大量的书籍，学到了许多历史知识和治国安邦的理论。范蠡不仅弄通了风后的《握奇经》，还潜心钻研了姜太公的军事书籍《六韬》和《三略》。姜太公把大力发展农业、手工业和商业作为军事韬略的三***宝，这一点范蠡特别推崇。后来范蠡无论是治家还是治国，姜太公的思想对其影响都很大。</p>
<pre><code>当时著名的理财家计然（计然，名研，姓辛，字文子，著有《文子》一书，春秋时期名人），到南阳云游，范蠡拜其为师，跟他学习经济知识和经商技巧。



范蠡虽满腹经纶，但当时楚国政治黑暗，选拔官吏，非贵族阶层不得做官。范蠡空有文才而不被任用。报国无门，使得范蠡放浪形骸，做事办事不合时宜，作出的事情往往令人惊诧不已，疯疯癫癫，行为怪异，被誉为有名的“楚国狂人”，乡邻们喊他为“范疯子”。
</code></pre>
<p>范蠡狗洞遇文种 楚荆王时，楚国名士文种（字子禽，楚国郢人）到宛任令，听说范蠡年纪不大，但很有才能，就差官员去拜访他。手下人回来说：“范蠡行为怪异，疯疯癫癫是个疯子，不值得邀请。”文种却说：“一个人有才能，必假装疯狂，来掩盖其贤德。”此后多次拜访，范蠡都避而不见。这一天，文种又亲自拜访，却发现范蠡的大门紧闭，正要下车，忽见院墙下的一个破洞里有个人蓬头垢面，趴在那里冲着文种学狗叫。手下人便说：“这就是范蠡。”众乡邻都围着看热闹。文种手下的人怕文种难堪，忙用宽大的衣袖把洞遮住。文种却说：“我听说过狗只对着人叫，他是个人身，却对着我学狗叫，意思是说我是个人，是看得起我呀！”于是文种下车便拜，范蠡看也不看，文种只好悄然离去。 第二天，范蠡对其哥嫂说：“今天有贤人来拜访我，请借给我一套干净衣帽。”刚穿戴梳洗完毕，文种就来了。两人交谈后，方觉相见恨晚，结为终身知己。这就是我们南阳广为流传的“范蠡狗洞遇文种”故事。 这时，楚国的政治更加黑暗，有才之士得不到重用，两人的政治抱负眼看无法实现，就商量着要离开楚国，另投贤明，实现政治抱负。因伍子胥已投奔了吴国，于是两人就投奔了越国，遂受到越王的重用，成为越王勾践的左膀右臂。 商人的来历 范蠡认识文种后，生活发生了很大改变，就到处云游、拜访贤人，并开始经商。一次到了商洛，商洛离淅川很近，据说是中国最早发明青铜器的地方。商洛当时生产的青铜器具很精美，远近闻名，当时上至豪门，下至百姓都以使用青铜器为荣耀。范蠡打听到邻近的秦国需求量大。范蠡想：物以稀为贵，如果把商洛的青铜器运到秦国，肯定能够牟取高利。范蠡于是就雇了很多牛车和人，到商洛地区去收集青铜器，到秦国去卖。在去秦国的时候，为了标明身份，就在牛车上和青铜器上都铸个“商”字，“商”的意思是“买卖”。 到了秦国国都咸阳，秦人看到牛头上写着“商”字，青铜器上铸着“商”字，加上一件件器具光亮耀眼，精美绝伦。于是人们都叫着“商人来了”、“商人来了”，不一会儿，就把器具抢购一空。“商人”后来就成为买卖商品人的代称，“商人”的名称由此而来。范蠡是中国最早的商人之一。 范蠡与西施 越王勾践三年，勾践想攻打吴国，范蠡劝阻不听，结果被吴打败。吴国围困勾践于会稽山上，越国面临着亡国的危险，范蠡出计，让文种去议和，刚开始吴王不答应，通过贿赂吴国的太宰喜否，议和成功。越国保住了，但吴王夫差提出勾践必须到吴国为人质。 吴王夫差好色，为投其所好，消磨敌人的斗志，麻痹对方，范蠡向勾践献策：用美人计。勾践同意了，下令在全国遍寻美女上报朝廷。最后各地共报上美女20多个，范蠡亲自去挑选，选出了容貌最美的一个女子———西施。西施是越国苎罗（今浙江诸暨南）人。苎罗山有东西两村，两村人大多姓施，她住西村，故称西施。西施是个绝色美女，其容貌之美，方圆皆知。西施不但貌美，而且深明大义，是一个爱国之人。西施与范蠡几经交往，相互产生爱意，但为了越国就答应前往吴国。范蠡先带西施来到越国国都。快到越国都时，城中的百姓听说西施貌美，纷纷出城来到郊外，想一睹西施的美貌。 范蠡见人多拥挤，道路堵塞，便将西施安排到城外馆舍，并让人传话：“要想观看西施，须先交纳金钱一文。”于是设柜收钱，顷刻之间，钱柜就满了。西施在郊外停留三天，范蠡得金钱无数，他将钱运交国库。 范蠡把西施送给夫差。夫差见到西施，喜其美貌，非常宠幸她。为她修建了馆娃宫，馆娃宫内造了响廊，屐是木板拖鞋，廊下的土地被挖成瓮形大坑，上面用厚木板覆盖铺平，西施和宫女们穿着木鞋在上面行走，铮铮有声，悦耳动听。现部分古迹亦存。夫差还为她修建了姑苏台，夫差与西施经常在姑苏台上饮酒作乐，逐渐不理朝政，朝纲日坏。 吴亡后，西施因与范蠡早已心心相印，就随范蠡一同出走，留下了千古传颂的英雄与美人的传奇佳话，又有一说勾践得到西施后，勾践妻嫉恨杀了西施。 劝文种 公元前476年，在范蠡和文种的帮助下，勾践卧薪尝胆，经过了十年生聚，十年教训，深谋20余年，终于灭掉了吴国。灭掉吴国后，勾践挥师北上，与众诸侯会盟于徐州，勾践当了霸主。自徐州返回后，勾践摆宴祝贺，群臣欢歌笑语，十分高兴。此时，只有勾践一人面无喜色，范蠡看到后叹道：“越王不想将功劳落到大臣名下，只能同患难，不能共享乐，猜忌之心已露，我若不走，必有不测。”第二天，范蠡就向越王道别，勾践说：“灭掉吴国，全凭你的帮助，现吴国已灭，天下太平，我正要和你分享这个国家，共享富贵，为什么要走？如果走，我将杀掉你的全家。”范蠡说：“臣的生死全系大王，但我辞官决心已下，你若要杀我，我亦无法。”于是范蠡在夜间悄悄出走。 范蠡出走之后，给文种去了一封信，信上写道： 你难道没有听说过吗？狡兔死，走狗烹。飞鸟尽，良弓藏。敌国破，谋臣亡。勾践长着长长的脖子，嘴尖像鸟嘴一样，这样的人只能共患难，不能同享乐。我已经走了，你若不走，定有杀身之祸，望你接到信后，尽快行动。 文种接到信后，就称病不朝。越王的左右有嫉恨文种的人向勾践进谗言道：“文种自认为功高盖世，现在大王不封赏他，他心中不满，所以不上朝。”勾践了解文种的才干，觉得吴国已灭，他对自己已经无用，更害怕文种有朝一日作乱，无人能制，现听群臣这么说，就有了杀文种之心。 有一天，越王突然到文种家中探病，随手解下宝剑，放在文种床边，对他说：“你教我七条计谋，我用了三条就已灭吴，剩下的四条你帮我到地下去见先王如何。”说完就走了，文种把宝剑取出一看，正是当年吴王赐令伍子胥自杀的宝剑，立即就明白了越王的意思，于是仰天长叹道：“我不听范蠡的话，今日终被越王所杀，我真后悔呀！”说完举剑自刎而死。 经商致富 范蠡到了齐国，隐姓埋名，自称“鸱夷子皮”即生牛皮，意为“有罪被流放的盛酒皮囊”。这是为了纪念被吴王逼杀、并装入叫“鸱夷”牛皮革囊中抛入大海的伍子胥。范蠡认为自己的遭遇同伍子胥一样。在齐国，范蠡充分利用青年时期向计然学到的经商知识。范蠡想：对付吴国定了七条计策，我只用了三条就灭了吴，我要把治国与治家结合起来，来置家产。所以他们一家在海边开荒种地，引海水煮盐，没多久财产已达数十万钱。齐国人听说他贤能，便想让他做齐国的丞相。范蠡感叹地说：“居家则致千金，居官则至相，这都是普通人最得意的事了，长久地享受这种荣誉不好呀！”于是范蠡归还相印，悄悄地把财产分给亲戚乡邻，只带少量财物又一次不辞而别。 这次，他到了“陶”（今山东定陶）这个地方，陶当时人口稠密，经济发达，商业往来频繁。他认为陶是天下的中心，是交易买卖、互通有无的商业要道。在此谋生置产，可以致富，于是自称陶朱公。陶朱公做生意讲究薄利多销，赚钱只赚十分之一的利润，看准行情买卖货物，货物的买入和出售都很谨慎，不多久家产已达上亿计，富比王侯。天下都知道陶朱公了，诸侯争相与他交往。 救子 范蠡住在陶地时，生了个小儿子。小儿子长大后，不知钱来之不易，花钱如流水。这时范蠡二儿子在楚国因杀了人而被逮了起来。范蠡认为，杀人偿命，理所应当。但是，家里有千金财产的孩子，是不应该在大庭广众面前被处死的。于是就要求他的小儿子，叫他去探视一下。长子听说了，要求让他去办。范蠡不答应，长子觉得很委屈，感到范蠡不相信他的办事能力，闹着自杀。范蠡夫人知道后，对范蠡说：“你派小儿子去，未必能救老二的命，现在老二没救回来，却让长子先死，你咋能这样？”范蠡没办法，只好让长子带了两万四千两黄金去了楚国，并写了一封信给他从前在楚国的好朋友庄先生。 范长子在出发前，又私自带几百镒的黄金。见到庄先生，范长子把信及两万四千两黄金给了他。庄先生收下钱后对他说：“赶快离开楚国，即使你弟弟被放出来也不要问为什么。”庄先生是个很耿直讲信誉的人，虽穷困潦倒，但上至楚王下至百姓都很尊重他。这次他收下范蠡的钱，并不是有意接受，而是表明一种信誉，想等他办成事后，再送还陶朱公。所以庄先生对其夫人说：“这是陶朱公的钱，如果我有什么不测，这钱一定要送还给他。”范蠡的长子却担心把钱送给他，不会起什么作用。为了保险起见，继续在楚国逗留，并用私带的钱去贿赂楚王身边的人。 庄先生找到一个适当的机会对楚王说：某星出现在某个位置，对楚不利，要他施恩德，去避害。楚王答应了，准备大赦天下。楚王身边的人听到这个消息，赶紧告诉范长子。范长子认为只要大赦，他弟弟肯定要放，白白给庄先生那么多钱实在太可惜了，于是他又见了庄先生。庄先生很吃惊，问他为什么不走。范长子说：“楚王准备大赦，我弟弟没事了，特来向你辞别。”庄先生一听就明白啥意思，就把财物给了他。长子很庆幸这次的钱能失而复得。 庄先生对范蠡长子的所作所为，觉得很羞愤，于是又见楚王，对他说：“我听别人议论，这次你大赦天下，完全是因为陶朱公儿子的缘故。”楚王很生气，我大赦天下，完全是为了施恩德，怎么会因为他的儿子呢？于是就把范蠡的二儿子杀了，杀了之后才宣布大赦天下。范蠡的长子把弟弟的尸体运回家的时候，全家除陶朱公外，都很悲伤。陶朱公说：“我老早就知道会有这个结果的。他不是不爱他的弟弟，而是他太爱金钱了，这是因为他年轻的时候和我一起置家产，深知钱财来之不易，看得重。而小儿子生而富有，不知钱财来之不易，所以他会轻易舍弃财物，这一点长子做不到。”这就是著名的成语“千金之子，不死于市”故事的来源。 范蠡年老的时候，由子孙持家，最后的家产越做越大。当时有一个猗顿的人听说陶朱公经商有法，就拜他为师，后来经商致富，家产也达亿计。后人说起富豪就把他俩并称为“陶朱猗顿之富”。范蠡被认为是做生意人的老祖宗。 范蠡搬迁三次，每次搬迁都有自己的目的，每次都能成名。治国则国盛，治家则家富。他淡泊名利、急流勇退的行为给后人很大的启示，后代有贤德的人都把范蠡的这种行为作为处世的楷模。他一人集政治、财富、美人于一身，试想，古今中外，有几人能够达到这一层次？宋王十朋曾写诗“只与君王共辛苦，功成身退步逡出。五湖渺渺烟波阔，谁是扁舟第一人”来赞扬他。 范蠡曾著有《范蠡篇》（已轶）、《范子计然》15卷、《养鱼经》1卷。其中《养鱼经》是世界上最早一本关于养鱼知识的书籍。 范蠡生意经 根据陶朱公的经商思想加工整理而成的《陶朱公生意经》，又称《陶朱公商经》、《陶朱公商训》或《陶朱公经商十八则》，至今仍在定陶一带流传。《陶朱公生意经》内容如下： 　　生意要勤快，懒惰百事废。 　　用度要节俭，奢华钱财竭。 　　价格要证明，含糊争执多。 　　赊欠要证人，滥欠血本亏。 　　货物要面验，滥入质价减。 　　出入要谦慎，潦草错误多。 　　用人要方正，歪斜托付难。 　　优劣要细分，混淆耗用大。 　　货物要修正，散漫查点难。 　　期限要约定，马虎失信用。 　　买卖要随时，拖延失良机。 　　钱财要明慎，糊涂弊端生。 　　临事要尽责，委托受害大。 　　账目要稽查，懈怠资本滞。 　　接纳要谦和，暴躁交易少。 　　主心要宁静，妄动误事多。 　　说话要规矩，浮躁失事多。 　　工作要精细，粗糙出劣品。 文言原文 范蠡事越王勾践，既苦身戮力，与勾践深谋二十馀年，竟灭吴，报会稽之耻，北渡兵於淮以临齐、晋，号令中国，以尊周室，勾践以霸，而范蠡称上将军。还反国，范蠡以为大名之下，难以久居，且勾践为人可与同患，难与处安，为书辞勾践曰：“臣闻主忧臣劳，主辱臣死。昔者君王辱於会稽，所以不死，为此事也。今既以雪耻，臣请从会稽之诛。”勾践曰：“孤将与子分国而有之。不然，将加诛于子。”范蠡曰：“君行令，臣行意。”乃装其轻宝珠玉，自与其私徒属乘舟浮海以行，终不反。於是勾践表会稽山以为范蠡奉邑。 范蠡浮海出齐，变姓名，自谓鸱夷子皮，耕于海畔，苦身戮力，父子治产。居无几何，致产数十万。齐人闻其贤，以为相。范蠡喟然叹曰：“居家则致千金，居官则至卿相，此布衣之极也。久受尊名，不祥。”乃归相印，尽散其财，以分与知友乡党，而怀其重宝，间行以去，止于陶，以为此天下之中，交易有无之路通，为生可以致富矣。於是自谓陶朱公。复约要父子耕畜，废居，候时转物，逐什一之利。居无何，则致赀累巨万。天下称陶朱公。 朱公居陶，生少子。少子及壮，而朱公中男杀人，囚於楚。朱公曰：“杀人而死，职也。然吾闻千金之子不死於市。”告其少子往视之。乃装黄金千溢，置褐器中，载以一牛车。且遣其少子，朱公长男固请欲行，朱公不听。长男曰：“家有长子曰家督，今弟有罪，大人不遣，乃遗少弟，是吾不肖。”欲自杀。其母为言曰：“今遣少子，未必能生中子也，而先空亡长男，柰何？”朱公不得已而遣长子，为一封书遗故所善庄生。曰：“至则进千金于庄生所，听其所为，慎无与争事。”长男既行，亦自私赍数百金。 至楚，庄生家负郭，披藜藋到门，居甚贫。然长男发书进千金，如其父言。庄生曰：“可疾去矣，慎毋留！即弟出，勿问所以然。”长男既去，不过庄生而私留，以其私赍献遗楚国贵人用事者。 庄生虽居穷阎，然以廉直闻於国，自楚王以下皆师尊之。及朱公进金，非有意受也，欲以成事后复归之以为信耳。故金至，谓其妇曰：“此朱公之金。有如病不宿诫，后复归，勿动。”而朱公长男不知其意，以为殊无短长也。 庄生间时入见楚王，言“某星宿某，此则害於楚”。楚王素信庄生，曰：“今为柰何？”庄生曰：“独以德为可以除之。”楚王曰：“生休矣，寡人将行之。”王乃使使者封三钱之府。楚贵人惊告朱公长男曰：“王且赦。”曰：“何以也？”曰：“每王且赦，常封三钱之府。昨暮王使使封之。”朱公长男以为赦，弟固当出也，重千金虚弃庄生，无所为也，乃复见庄生。庄生惊曰：“若不去邪？”长男曰：“固未也。初为事弟，弟今议自赦，故辞生去。”庄生知其意欲复得其金，曰：“若自入室取金。”长男即自入室取金持去，独自欢幸。 庄生羞为儿子所卖，乃入见楚王曰：“臣前言某星事，王言欲以修德报之。今臣出，道路皆言陶之富人朱公之子杀人囚楚，其家多持金钱赂王左右，故王非能恤楚国而赦，乃以朱公子故也。”楚王大怒曰：“寡人虽不德耳，柰何以朱公之子故而施惠乎！”令论杀朱公子，明日遂下赦令。朱公长男竟持其弟丧归。 至，其母及邑人尽哀之，唯朱公独笑，曰：“吾固知必杀其弟也！彼非不爱其弟，顾有所不能忍者也。是少与我俱，见苦，为生难，故重弃财。至如少弟者，生而见我富，乘坚驱良逐狡兔，岂知财所从来，故轻弃之，非所惜吝。前日吾所为欲遣少子，固为其能弃财故也。而长者不能，故卒以杀其弟，事之理也，无足悲者。吾日夜固以望其丧之来也。”故范蠡三徙，成名於天下，非苟去而已，所止必成名。卒老死于陶，故世传曰陶朱公。 太史公曰：禹之功大矣，渐九川，定九州，至于今诸夏艾安。及苗裔句践，苦身焦思，终灭强吴，北观兵中国，以尊周室，号称霸王。句践可不谓贤哉！盖有禹之遗烈焉。范蠡三迁皆有荣名，名垂后世。臣主若此，欲毋显得乎！ 译文（没有逐句翻译）：范蠡，字少伯，楚国宛三户人，据说是宛城区黄台岗三十里屯人（另有淅川、内乡说），春秋时期著名的政治家、军事家、大商人。他被当时楚宛令文种所赏识，相交甚深。后两人一起投奔越国，辅佐越王勾践。他存越灭吴，雪会稽之耻，成为春秋时期叱咤风云的人物。功成名就后，他淡泊名利，毅然弃官经商，累治家产数以亿计，富比王侯。他的经商思想和经商理论一直到现在还被人们流传、使用，成为我国古代的商界先圣，被后人尊称“陶朱公”、“商圣”。</p>
]]></content>
		</item>
		
		<item>
			<title>范蠡传</title>
			<link>https://blog.v5u.win/%E8%8C%83%E8%A0%A1%E4%BC%A0/</link>
			<pubDate>Mon, 19 Mar 2018 08:19:12 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E8%8C%83%E8%A0%A1%E4%BC%A0/</guid>
			<description>分事略记 学艺 范蠡生卒约为孔子同时期，出身贫寒。父母早亡，由哥嫂扶养成人。范蠡小时天资聪慧，博闻强识，喜读书，抱负大，不喜耕作，众乡邻不齿。范</description>
			<content type="html"><![CDATA[<p>分事略记</p>
<p>学艺</p>
<p>范蠡生卒约为孔子同时期，出身贫寒。父母早亡，由哥嫂扶养成人。范蠡小时天资聪慧，博闻强识，喜读书，抱负大，不喜耕作，众乡邻不齿。范蠡说：“你们怎么知道我的志向呢？”他苦读了《书》、《易》、《诗》等大量的书籍，学到了许多历史知识和治国安邦的理论。范蠡不仅弄通了风后的《握奇经》，还潜心钻研了姜太公的军事书籍《六韬》和《三略》。姜太公把大力发展农业、手工业和商业作为军事韬略的三***宝，这一点范蠡特别推崇。后来范蠡无论是治家还是治国，姜太公的思想对其影响都很大。</p>
<pre><code>当时著名的理财家计然（计然，名研，姓辛，字文子，著有《文子》一书，春秋时期名人），到南阳云游，范蠡拜其为师，跟他学习经济知识和经商技巧。
范蠡虽满腹经纶，但当时楚国政治黑暗，选拔官吏，非贵族阶层不得做官。范蠡空有文才而不被任用。报国无门，使得范蠡放浪形骸，做事办事不合时宜，作出的事情往往令人惊诧不已，疯疯癫癫，行为怪异，被誉为有名的“楚国狂人”，乡邻们喊他为“范疯子”。
</code></pre>
<p>范蠡狗洞遇文种</p>
<p>楚荆王时，楚国名士文种（字子禽，楚国郢人）到宛任令，听说范蠡年纪不大，但很有才能，就差官员去拜访他。手下人回来说：“范蠡行为怪异，疯疯癫癫是个疯子，不值得邀请。”文种却说：“一个人有才能，必假装疯狂，来掩盖其贤德。”此后多次拜访，范蠡都避而不见。这一天，文种又亲自拜访，却发现范蠡的大门紧闭，正要下车，忽见院墙下的一个破洞里有个人蓬头垢面，趴在那里冲着文种学狗叫。手下人便说：“这就是范蠡。”众乡邻都围着看热闹。文种手下的人怕文种难堪，忙用宽大的衣袖把洞遮住。文种却说：“我听说过狗只对着人叫，他是个人身，却对着我学狗叫，意思是说我是个人，是看得起我呀！”于是文种下车便拜，范蠡看也不看，文种只好悄然离去。</p>
<p>第二天，范蠡对其哥嫂说：“今天有贤人来拜访我，请借给我一套干净衣帽。”刚穿戴梳洗完毕，文种就来了。两人交谈后，方觉相见恨晚，结为终身知己。这就是我们南阳广为流传的“范蠡狗洞遇文种”故事。</p>
<p>这时，楚国的政治更加黑暗，有才之士得不到重用，两人的政治抱负眼看无法实现，就商量着要离开楚国，另投贤明，实现政治抱负。因伍子胥已投奔了吴国，于是两人就投奔了越国，遂受到越王的重用，成为越王勾践的左膀右臂。</p>
<p>商人的来历</p>
<p>范蠡认识文种后，生活发生了很大改变，就到处云游、拜访贤人，并开始经商。一次到了商洛，商洛离淅川很近，据说是中国最早发明青铜器的地方。商洛当时生产的青铜器具很精美，远近闻名，当时上至豪门，下至百姓都以使用青铜器为荣耀。范蠡打听到邻近的秦国需求量大。范蠡想：物以稀为贵，如果把商洛的青铜器运到秦国，肯定能够牟取高利。范蠡于是就雇了很多牛车和人，到商洛地区去收集青铜器，到秦国去卖。在去秦国的时候，为了标明身份，就在牛车上和青铜器上都铸个“商”字，“商”的意思是“买卖”。</p>
<p>到了秦国国都咸阳，秦人看到牛头上写着“商”字，青铜器上铸着“商”字，加上一件件器具光亮耀眼，精美绝伦。于是人们都叫着“商人来了”、“商人来了”，不一会儿，就把器具抢购一空。“商人”后来就成为买卖商品人的代称，“商人”的名称由此而来。范蠡是中国最早的商人之一。</p>
<p>范蠡与西施</p>
<p>越王勾践三年，勾践想攻打吴国，范蠡劝阻不听，结果被吴打败。吴国围困勾践于会稽山上，越国面临着亡国的危险，范蠡出计，让文种去议和，刚开始吴王不答应，通过贿赂吴国的太宰喜否，议和成功。越国保住了，但吴王夫差提出勾践必须到吴国为人质。</p>
<p>吴王夫差好色，为投其所好，消磨敌人的斗志，麻痹对方，范蠡向勾践献策：用美人计。勾践同意了，下令在全国遍寻美女上报朝廷。最后各地共报上美女20多个，范蠡亲自去挑选，选出了容貌最美的一个女子———西施。西施是越国苎罗（今浙江诸暨南）人。苎罗山有东西两村，两村人大多姓施，她住西村，故称西施。西施是个绝色美女，其容貌之美，方圆皆知。西施不但貌美，而且深明大义，是一个爱国之人。西施与范蠡几经交往，相互产生爱意，但为了越国就答应前往吴国。范蠡先带西施来到越国国都。快到越国都时，城中的百姓听说西施貌美，纷纷出城来到郊外，想一睹西施的美貌。</p>
<p>范蠡见人多拥挤，道路堵塞，便将西施安排到城外馆舍，并让人传话：“要想观看西施，须先交纳金钱一文。”于是设柜收钱，顷刻之间，钱柜就满了。西施在郊外停留三天，范蠡得金钱无数，他将钱运交国库。</p>
<p>范蠡把西施送给夫差。夫差见到西施，喜其美貌，非常宠幸她。为她修建了馆娃宫，馆娃宫内造了响廊，屐是木板拖鞋，廊下的土地被挖成瓮形大坑，上面用厚木板覆盖铺平，西施和宫女们穿着木鞋在上面行走，铮铮有声，悦耳动听。现部分古迹亦存。夫差还为她修建了姑苏台，夫差与西施经常在姑苏台上饮酒作乐，逐渐不理朝政，朝纲日坏。</p>
<p>吴亡后，西施因与范蠡早已心心相印，就随范蠡一同出走，留下了千古传颂的英雄与美人的传奇佳话，又有一说勾践得到西施后，勾践妻嫉恨杀了西施。</p>
<p>劝文种</p>
<p>公元前476年，在范蠡和文种的帮助下，勾践卧薪尝胆，经过了十年生聚，十年教训，深谋20余年，终于灭掉了吴国。灭掉吴国后，勾践挥师北上，与众诸侯会盟于徐州，勾践当了霸主。自徐州返回后，勾践摆宴祝贺，群臣欢歌笑语，十分高兴。此时，只有勾践一人面无喜色，范蠡看到后叹道：“越王不想将功劳落到大臣名下，只能同患难，不能共享乐，猜忌之心已露，我若不走，必有不测。”第二天，范蠡就向越王道别，勾践说：“灭掉吴国，全凭你的帮助，现吴国已灭，天下太平，我正要和你分享这个国家，共享富贵，为什么要走？如果走，我将杀掉你的全家。”范蠡说：“臣的生死全系大王，但我辞官决心已下，你若要杀我，我亦无法。”于是范蠡在夜间悄悄出走。</p>
<p>范蠡出走之后，给文种去了一封信，信上写道：</p>
<p>你难道没有听说过吗？狡兔死，走狗烹。飞鸟尽，良弓藏。敌国破，谋臣亡。勾践长着长长的脖子，嘴尖像鸟嘴一样，这样的人只能共患难，不能同享乐。我已经走了，你若不走，定有杀身之祸，望你接到信后，尽快行动。</p>
<p>文种接到信后，就称病不朝。越王的左右有嫉恨文种的人向勾践进谗言道：“文种自认为功高盖世，现在大王不封赏他，他心中不满，所以不上朝。”勾践了解文种的才干，觉得吴国已灭，他对自己已经无用，更害怕文种有朝一日作乱，无人能制，现听群臣这么说，就有了杀文种之心。</p>
<p>有一天，越王突然到文种家中探病，随手解下宝剑，放在文种床边，对他说：“你教我七条计谋，我用了三条就已灭吴，剩下的四条你帮我到地下去见先王如何。”说完就走了，文种把宝剑取出一看，正是当年吴王赐令伍子胥自杀的宝剑，立即就明白了越王的意思，于是仰天长叹道：“我不听范蠡的话，今日终被越王所杀，我真后悔呀！”说完举剑自刎而死。</p>
<p>经商致富</p>
<p>范蠡到了齐国，隐姓埋名，自称“鸱夷子皮”即生牛皮，意为“有罪被流放的盛酒皮囊”。这是为了纪念被吴王逼杀、并装入叫“鸱夷”牛皮革囊中抛入大海的伍子胥。范蠡认为自己的遭遇同伍子胥一样。在齐国，范蠡充分利用青年时期向计然学到的经商知识。范蠡想：对付吴国定了七条计策，我只用了三条就灭了吴，我要把治国与治家结合起来，来置家产。所以他们一家在海边开荒种地，引海水煮盐，没多久财产已达数十万钱。齐国人听说他贤能，便想让他做齐国的丞相。范蠡感叹地说：“居家则致千金，居官则至相，这都是普通人最得意的事了，长久地享受这种荣誉不好呀！”于是范蠡归还相印，悄悄地把财产分给亲戚乡邻，只带少量财物又一次不辞而别。</p>
<p>这次，他到了“陶”（今山东定陶）这个地方，陶当时人口稠密，经济发达，商业往来频繁。他认为陶是天下的中心，是交易买卖、互通有无的商业要道。在此谋生置产，可以致富，于是自称陶朱公。陶朱公做生意讲究薄利多销，赚钱只赚十分之一的利润，看准行情买卖货物，货物的买入和出售都很谨慎，不多久家产已达上亿计，富比王侯。天下都知道陶朱公了，诸侯争相与他交往。</p>
<p>救子</p>
<p>范蠡住在陶地时，生了个小儿子。小儿子长大后，不知钱来之不易，花钱如流水。这时范蠡二儿子在楚国因杀了人而被逮了起来。范蠡认为，杀人偿命，理所应当。但是，家里有千金财产的孩子，是不应该在大庭广众面前被处死的。于是就要求他的小儿子，叫他去探视一下。长子听说了，要求让他去办。范蠡不答应，长子觉得很委屈，感到范蠡不相信他的办事能力，闹着自杀。范蠡夫人知道后，对范蠡说：“你派小儿子去，未必能救老二的命，现在老二没救回来，却让长子先死，你咋能这样？”范蠡没办法，只好让长子带了两万四千两黄金去了楚国，并写了一封信给他从前在楚国的好朋友庄先生。</p>
<p>范长子在出发前，又私自带几百镒的黄金。见到庄先生，范长子把信及两万四千两黄金给了他。庄先生收下钱后对他说：“赶快离开楚国，即使你弟弟被放出来也不要问为什么。”庄先生是个很耿直讲信誉的人，虽穷困潦倒，但上至楚王下至百姓都很尊重他。这次他收下范蠡的钱，并不是有意接受，而是表明一种信誉，想等他办成事后，再送还陶朱公。所以庄先生对其夫人说：“这是陶朱公的钱，如果我有什么不测，这钱一定要送还给他。”范蠡的长子却担心把钱送给他，不会起什么作用。为了保险起见，继续在楚国逗留，并用私带的钱去贿赂楚王身边的人。</p>
<p>庄先生找到一个适当的机会对楚王说：某星出现在某个位置，对楚不利，要他施恩德，去避害。楚王答应了，准备大赦天下。楚王身边的人听到这个消息，赶紧告诉范长子。范长子认为只要大赦，他弟弟肯定要放，白白给庄先生那么多钱实在太可惜了，于是他又见了庄先生。庄先生很吃惊，问他为什么不走。范长子说：“楚王准备大赦，我弟弟没事了，特来向你辞别。”庄先生一听就明白啥意思，就把财物给了他。长子很庆幸这次的钱能失而复得。</p>
<p>庄先生对范蠡长子的所作所为，觉得很羞愤，于是又见楚王，对他说：“我听别人议论，这次你大赦天下，完全是因为陶朱公儿子的缘故。”楚王很生气，我大赦天下，完全是为了施恩德，怎么会因为他的儿子呢？于是就把范蠡的二儿子杀了，杀了之后才宣布大赦天下。范蠡的长子把弟弟的尸体运回家的时候，全家除陶朱公外，都很悲伤。陶朱公说：“我老早就知道会有这个结果的。他不是不爱他的弟弟，而是他太爱金钱了，这是因为他年轻的时候和我一起置家产，深知钱财来之不易，看得重。而小儿子生而富有，不知钱财来之不易，所以他会轻易舍弃财物，这一点长子做不到。”这就是著名的成语“千金之子，不死于市”故事的来源。</p>
<p>范蠡年老的时候，由子孙持家，最后的家产越做越大。当时有一个猗顿的人听说陶朱公经商有法，就拜他为师，后来经商致富，家产也达亿计。后人说起富豪就把他俩并称为“陶朱猗顿之富”。范蠡被认为是做生意人的老祖宗。</p>
<p>范蠡搬迁三次，每次搬迁都有自己的目的，每次都能成名。治国则国盛，治家则家富。他淡泊名利、急流勇退的行为给后人很大的启示，后代有贤德的人都把范蠡的这种行为作为处世的楷模。他一人集政治、财富、美人于一身，试想，古今中外，有几人能够达到这一层次？宋王十朋曾写诗“只与君王共辛苦，功成身退步逡出。五湖渺渺烟波阔，谁是扁舟第一人”来赞扬他。</p>
<p>范蠡曾著有《范蠡篇》（已轶）、《范子计然》15卷、《养鱼经》1卷。其中《养鱼经》是世界上最早一本关于养鱼知识的书籍。</p>
<p>范蠡生意经</p>
<p>根据陶朱公的经商思想加工整理而成的《陶朱公生意经》，又称《陶朱公商经》、《陶朱公商训》或《陶朱公经商十八则》，至今仍在定陶一带流传。《陶朱公生意经》内容如下：</p>
<p>　　生意要勤快，懒惰百事废。</p>
<p>　　用度要节俭，奢华钱财竭。</p>
<p>　　价格要证明，含糊争执多。</p>
<p>　　赊欠要证人，滥欠血本亏。</p>
<p>　　货物要面验，滥入质价减。</p>
<p>　　出入要谦慎，潦草错误多。</p>
<p>　　用人要方正，歪斜托付难。</p>
<p>　　优劣要细分，混淆耗用大。</p>
<p>　　货物要修正，散漫查点难。</p>
<p>　　期限要约定，马虎失信用。</p>
<p>　　买卖要随时，拖延失良机。</p>
<p>　　钱财要明慎，糊涂弊端生。</p>
<p>　　临事要尽责，委托受害大。</p>
<p>　　账目要稽查，懈怠资本滞。</p>
<p>　　接纳要谦和，暴躁交易少。</p>
<p>　　主心要宁静，妄动误事多。</p>
<p>　　说话要规矩，浮躁失事多。</p>
<p>　　工作要精细，粗糙出劣品。</p>
<p>文言原文</p>
<p>范蠡事越王勾践，既苦身戮力，与勾践深谋二十馀年，竟灭吴，报会稽之耻，北渡兵於淮以临齐、晋，号令中国，以尊周室，勾践以霸，而范蠡称上将军。还反国，范蠡以为大名之下，难以久居，且勾践为人可与同患，难与处安，为书辞勾践曰：“臣闻主忧臣劳，主辱臣死。昔者君王辱於会稽，所以不死，为此事也。今既以雪耻，臣请从会稽之诛。”勾践曰：“孤将与子分国而有之。不然，将加诛于子。”范蠡曰：“君行令，臣行意。”乃装其轻宝珠玉，自与其私徒属乘舟浮海以行，终不反。於是勾践表会稽山以为范蠡奉邑。</p>
<p>范蠡浮海出齐，变姓名，自谓鸱夷子皮，耕于海畔，苦身戮力，父子治产。居无几何，致产数十万。齐人闻其贤，以为相。范蠡喟然叹曰：“居家则致千金，居官则至卿相，此布衣之极也。久受尊名，不祥。”乃归相印，尽散其财，以分与知友乡党，而怀其重宝，间行以去，止于陶，以为此天下之中，交易有无之路通，为生可以致富矣。於是自谓陶朱公。复约要父子耕畜，废居，候时转物，逐什一之利。居无何，则致赀累巨万。天下称陶朱公。</p>
<p>朱公居陶，生少子。少子及壮，而朱公中男杀人，囚於楚。朱公曰：“杀人而死，职也。然吾闻千金之子不死於市。”告其少子往视之。乃装黄金千溢，置褐器中，载以一牛车。且遣其少子，朱公长男固请欲行，朱公不听。长男曰：“家有长子曰家督，今弟有罪，大人不遣，乃遗少弟，是吾不肖。”欲自杀。其母为言曰：“今遣少子，未必能生中子也，而先空亡长男，柰何？”朱公不得已而遣长子，为一封书遗故所善庄生。曰：“至则进千金于庄生所，听其所为，慎无与争事。”长男既行，亦自私赍数百金。</p>
<p>至楚，庄生家负郭，披藜藋到门，居甚贫。然长男发书进千金，如其父言。庄生曰：“可疾去矣，慎毋留！即弟出，勿问所以然。”长男既去，不过庄生而私留，以其私赍献遗楚国贵人用事者。</p>
<p>庄生虽居穷阎，然以廉直闻於国，自楚王以下皆师尊之。及朱公进金，非有意受也，欲以成事后复归之以为信耳。故金至，谓其妇曰：“此朱公之金。有如病不宿诫，后复归，勿动。”而朱公长男不知其意，以为殊无短长也。</p>
<p>庄生间时入见楚王，言“某星宿某，此则害於楚”。楚王素信庄生，曰：“今为柰何？”庄生曰：“独以德为可以除之。”楚王曰：“生休矣，寡人将行之。”王乃使使者封三钱之府。楚贵人惊告朱公长男曰：“王且赦。”曰：“何以也？”曰：“每王且赦，常封三钱之府。昨暮王使使封之。”朱公长男以为赦，弟固当出也，重千金虚弃庄生，无所为也，乃复见庄生。庄生惊曰：“若不去邪？”长男曰：“固未也。初为事弟，弟今议自赦，故辞生去。”庄生知其意欲复得其金，曰：“若自入室取金。”长男即自入室取金持去，独自欢幸。</p>
<p>庄生羞为儿子所卖，乃入见楚王曰：“臣前言某星事，王言欲以修德报之。今臣出，道路皆言陶之富人朱公之子杀人囚楚，其家多持金钱赂王左右，故王非能恤楚国而赦，乃以朱公子故也。”楚王大怒曰：“寡人虽不德耳，柰何以朱公之子故而施惠乎！”令论杀朱公子，明日遂下赦令。朱公长男竟持其弟丧归。</p>
<p>至，其母及邑人尽哀之，唯朱公独笑，曰：“吾固知必杀其弟也！彼非不爱其弟，顾有所不能忍者也。是少与我俱，见苦，为生难，故重弃财。至如少弟者，生而见我富，乘坚驱良逐狡兔，岂知财所从来，故轻弃之，非所惜吝。前日吾所为欲遣少子，固为其能弃财故也。而长者不能，故卒以杀其弟，事之理也，无足悲者。吾日夜固以望其丧之来也。”故范蠡三徙，成名於天下，非苟去而已，所止必成名。卒老死于陶，故世传曰陶朱公。</p>
<p>太史公曰：禹之功大矣，渐九川，定九州，至于今诸夏艾安。及苗裔句践，苦身焦思，终灭强吴，北观兵中国，以尊周室，号称霸王。句践可不谓贤哉！盖有禹之遗烈焉。范蠡三迁皆有荣名，名垂后世。臣主若此，欲毋显得乎！</p>
<p>译文（没有逐句翻译）：范蠡，字少伯，楚国宛三户人，据说是宛城区黄台岗三十里屯人（另有淅川、内乡说），春秋时期著名的政治家、军事家、大商人。他被当时楚宛令文种所赏识，相交甚深。后两人一起投奔越国，辅佐越王勾践。他存越灭吴，雪会稽之耻，成为春秋时期叱咤风云的人物。功成名就后，他淡泊名利，毅然弃官经商，累治家产数以亿计，富比王侯。他的经商思想和经商理论一直到现在还被人们流传、使用，成为我国古代的商界先圣，被后人尊称“陶朱公”、“商圣”。</p>
]]></content>
		</item>
		
		<item>
			<title>关键字探索 define const</title>
			<link>https://blog.v5u.win/%E5%85%B3%E9%94%AE%E5%AD%97%E6%8E%A2%E7%B4%A2-define-const/</link>
			<pubDate>Fri, 19 Jan 2018 09:37:16 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E5%85%B3%E9%94%AE%E5%AD%97%E6%8E%A2%E7%B4%A2-define-const/</guid>
			<description>define 单纯的代码替换，预编译时进行 const 常数，不变的。 ​ const是一个关键字。它限定一个变量不允许被改变，产生静态作用。 编译时进行处理 只分配一次内</description>
			<content type="html"><![CDATA[<h3 id="define-单纯的代码替换预编译时进行">define 单纯的代码替换，预编译时进行</h3>
<h3 id="const-常数不变的">const 常数，不变的。</h3>
<p>​ const是一个关键字。它限定一个变量不允许被改变，产生静态作用。</p>
<ul>
<li>
<p>编译时进行处理</p>
</li>
<li>
<p>只分配一次内存</p>
</li>
<li>
<p>修饰关键字右边部分表示的内容不可变</p>
<p>// stringConst 地址能修改，stringConst值不能修改
NSString * const stringConst = @&ldquo;I am a NSString * const string&rdquo;;</p>
</li>
</ul>
<h3 id="static-局部变量只在文件内使用">static 局部变量（只在文件内使用）</h3>
<ul>
<li>延长被修饰变量的生命周期，程序结束才被销毁</li>
<li>只生成一份内存，只做一次初始化</li>
<li>修改变量作用域，限制在本文件内</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>各大pages提供商对比</title>
			<link>https://blog.v5u.win/posts/web/web-pages%E6%8F%90%E4%BE%9B%E5%95%86/</link>
			<pubDate>Fri, 08 Dec 2017 16:17:33 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/web/web-pages%E6%8F%90%E4%BE%9B%E5%95%86/</guid>
			<description>各大pages提供商对比 ### github 稳定，全球高效，使用者众 ### coding 国内速度飞快，使用复杂，坑多，使用者正在增加 ### oschina 国内提供商，速度一般，使用者寡，和g</description>
			<content type="html"><![CDATA[<pre tabindex="0"><code>各大pages提供商对比

### github

稳定，全球高效，使用者众

### coding

国内速度飞快，使用复杂，坑多，使用者正在增加

### oschina

国内提供商，速度一般，使用者寡，和github相似度极高
</code></pre>]]></content>
		</item>
		
		<item>
			<title>python-sublime</title>
			<link>https://blog.v5u.win/posts/python/python-sublime/</link>
			<pubDate>Wed, 29 Nov 2017 17:29:24 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/python/python-sublime/</guid>
			<description>sublime text 下的Python编译环境设置 file name : python3.sublime-build { &amp;#34;shell_cmd&amp;#34;: &amp;#34;Python编译器的路径 ${file}&amp;#34;, &amp;#34;selector&amp;#34; :&amp;#34;source.python&amp;#34;, &amp;#34;file_regex&amp;#34;:&amp;#34;^(...*?):[0-9]:?([0-9]*)&amp;#34;, &amp;#34;working_dir&amp;#34;:&amp;#34;${file_path}&amp;#34;, &amp;#34;env&amp;#34;: {&amp;#34;PYTHONIOENCODING&amp;#34;: &amp;#34;utf8&amp;#34;}, }</description>
			<content type="html"><![CDATA[<p>sublime text 下的Python编译环境设置</p>
<p>file name : python3.sublime-build</p>
<pre tabindex="0"><code>{

	&#34;shell_cmd&#34;: &#34;Python编译器的路径 ${file}&#34;,
	&#34;selector&#34; :&#34;source.python&#34;,
	&#34;file_regex&#34;:&#34;^(...*?):[0-9]:?([0-9]*)&#34;,
	&#34;working_dir&#34;:&#34;${file_path}&#34;,
	&#34;env&#34;: {&#34;PYTHONIOENCODING&#34;: &#34;utf8&#34;},
}
</code></pre>]]></content>
		</item>
		
		<item>
			<title>三省吾身，日醒三身</title>
			<link>https://blog.v5u.win/posts/read/read-%E4%B8%89%E7%9C%81%E5%90%BE%E8%BA%AB%E6%97%A5%E9%86%92%E4%B8%89%E8%BA%AB/</link>
			<pubDate>Thu, 09 Nov 2017 16:06:38 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/read/read-%E4%B8%89%E7%9C%81%E5%90%BE%E8%BA%AB%E6%97%A5%E9%86%92%E4%B8%89%E8%BA%AB/</guid>
			<description>孩子，中国人常说三省吾身，指的是每天自我审视三次，也就是我跟你提到的复盘，可如果方向错了，审视的思路不对，再多的次数那也是无用，所以我们佛家</description>
			<content type="html"><![CDATA[<p>孩子，中国人常说三省吾身，指的是每天自我审视三次，也就是我跟你提到的复盘，可如果方向错了，审视的思路不对，再多的次数那也是无用，所以我们佛家讲究日省三身，法身、报身、化身，法身就是佛法，一切的根源，报身是自己内心的思想，化身是对外所做的事情，法身在上，报身在心，化身在外，若坚信自信报身胜于一切化身，就是自我想法压过了现实，则飘飘然心向恶，背离法身入地狱了，切记！状态决定你的成就</p>
]]></content>
		</item>
		
		<item>
			<title>mac下 pip 设置豆瓣源</title>
			<link>https://blog.v5u.win/mac%E4%B8%8B-pip-%E8%AE%BE%E7%BD%AE%E8%B1%86%E7%93%A3%E6%BA%90/</link>
			<pubDate>Thu, 19 Oct 2017 07:18:14 +0000</pubDate>
			
			<guid>https://blog.v5u.win/mac%E4%B8%8B-pip-%E8%AE%BE%E7%BD%AE%E8%B1%86%E7%93%A3%E6%BA%90/</guid>
			<description>在用户目录下创建文件夹.pip，在.pip下创建pip.conf pip.conf填入内容 [global] index-url = https://pypi.douban.com/simple [list] format=columns</description>
			<content type="html"><![CDATA[<p>在用户目录下创建<strong>文件夹</strong>.pip，在.pip下创建pip.conf</p>
<p>pip.conf填入内容</p>
<p>[global]</p>
<p>index-url = <a href="https://pypi.douban.com/simple">https://pypi.douban.com/simple</a></p>
<p>[list]</p>
<p>format=columns</p>
]]></content>
		</item>
		
		<item>
			<title>mac下 pip 设置豆瓣源</title>
			<link>https://blog.v5u.win/posts/system/system-pip/</link>
			<pubDate>Thu, 19 Oct 2017 07:18:14 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-pip/</guid>
			<description>在用户目录下创建文件夹.pip，在.pip下创建pip.conf pip.conf填入内容 [global] index-url = https://pypi.douban.com/simple [list] format=columns</description>
			<content type="html"><![CDATA[<p>在用户目录下创建文件夹.pip，在.pip下创建pip.conf
pip.conf填入内容
[global]
index-url = <a href="https://pypi.douban.com/simple">https://pypi.douban.com/simple</a>
[list]
format=columns</p>
]]></content>
		</item>
		
		<item>
			<title>中国人的“故土难离”其实缘于中国式求人,缘于故土有其多年织下的关系网</title>
			<link>https://blog.v5u.win/posts/read/read-%E4%B8%AD%E5%9B%BD%E4%BA%BA%E7%9A%84%E6%95%85%E5%9C%9F%E9%9A%BE%E7%A6%BB%E5%85%B6%E5%AE%9E%E7%BC%98%E4%BA%8E%E4%B8%AD%E5%9B%BD%E5%BC%8F%E6%B1%82%E4%BA%BA%E7%BC%98%E4%BA%8E%E6%95%85/</link>
			<pubDate>Wed, 20 Sep 2017 02:12:10 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/read/read-%E4%B8%AD%E5%9B%BD%E4%BA%BA%E7%9A%84%E6%95%85%E5%9C%9F%E9%9A%BE%E7%A6%BB%E5%85%B6%E5%AE%9E%E7%BC%98%E4%BA%8E%E4%B8%AD%E5%9B%BD%E5%BC%8F%E6%B1%82%E4%BA%BA%E7%BC%98%E4%BA%8E%E6%95%85/</guid>
			<description>这些年,中国人似乎往远走的多些了。但往远走的中国人大多年轻,上了一点儿年龄的,还是大都不喜远走,哪怕这旮旯兔子都不拉屎,他也愿窝在这儿。 什么</description>
			<content type="html"><![CDATA[<p>这些年,中国人似乎往远走的多些了。但往远走的中国人大多年轻,上了一点儿年龄的,还是大都不喜远走,哪怕这旮旯兔子都不拉屎,他也愿窝在这儿。</p>
<p>什么原因呢?仅是中国人恋乡土吗?是“谁不说俺家乡好”吗?不是。他在这苦巴苦业的窝了一辈子,也没窝出几顿饱饭来,家乡好吗?</p>
<p>但究竟是什么东西扯着中国人不喜远走呢?人际关系。亲人圈、朋友圈、同事圈、同学圈、战友圈,这几年又添上网友圈。</p>
<p>中国人不喜远走的真正原因,是离不了这些东西。“哪也不去了,在这儿这么多年了。”在这儿这么多年了。是舍不得这地方吗?不是,是舍不得这么多年,好不容易建立的一圈套一圈的人际关系网。</p>
<p>那么到一个新地方不可以再建人际关系吗?可以,但需要时间。一个人活不满百,大都只扑腾几十年。没走上社会之前的十几年刨去后,进新单位,熟悉同事、熟悉领导、交朋友、扩大交往、没个十年八年的,这人际关系网你织不好。你不离开家,偎在父母身边,织网的速度能快点儿。你独闯世界去,就会慢点儿。</p>
<p>偎在父母身边为何织网快?先有了七大姑八大姨的亲人圈,由亲人圈向四周扩展了朋友圈,进了单位建了同事圈;人到中年,人际关系还不够用,再将从前的小学、中学、大学,以及在部队时的时间捡回来,修补成同学圈、战友圈,这几年又添上网友圈。网上热恋网下见面。往哪去,有人。没有同学找战友,没有战友找网友。那么新到一个地方,没这些圈子,没熟人行不?也行,跟上旅行社转山转水玩几天行。真在这儿住上,你试试?不是说祖国处处有亲人吗?是有人说,但你信吗?</p>
<p>中国人为什么要穷尽一生的大多数时光搭建这些圈子,编织人际关系网?如果祖国处处有亲人,他还费这个劲儿?这些年,大量民工进城,有没有老乡圈子?不多说了吧。有人际关系,人好见、事好办;无人际关系,人难见、事难办,说明了什么?人与人之间近乎残酷的冷漠。那种看似火炭似的沸腾的生活状态,实际上是一个又一个大大小小、形态各异的圈子在转动,置身圈子之外的人,会实实在在感到孤独和寂寞。这就是为什么好多置身大都市的人大喊太冷了。因为他没进到那些小圈子里。</p>
<p><!-- raw HTML omitted --><strong><!-- raw HTML omitted -->中国人喜欢圈子，反映了中国目前仍缺少一个公共道德体系,缺少一种制度化的人文关怀。当一个陌生个体遭遇困难,我们常常看到的是:麻木不仁、漠不关心。为什么?他不认识你<!-- raw HTML omitted --></strong><!-- raw HTML omitted -->。这就是为什么车祸后,面对跪地求救者,一辆又一辆大小车辆扬长而去;为什么,一个倒地少年,围观者众多,但无一人上前施求。他要认识你,起码打个电话。</p>
<p>在家靠父母,出门靠朋友;打虎亲兄弟,上阵父子兵。这些我们并不陌生的人生经验总结,过时了吗?没有。而且,有些东西愈演愈烈。<!-- raw HTML omitted --><strong><!-- raw HTML omitted -->你干点啥儿,不得进行“中国式求人”?<!-- raw HTML omitted --></strong><!-- raw HTML omitted --></p>
<p>那么不喜欢远走的中国人,为什么这些年远走国外的越来越多?人家那里同咱这儿不一样。笔者的弟弟某年去德国,人生地不熟,车站外正徘徊,一老者上前问需要帮助吗?然后,将弟弟送到要去的地方后,开车而去。极自然、极正常,该做的,不须感谢。</p>
<p>另有文章介绍:中国人的车出故障后,几个外国人帮忙几个小时，完事后当中国人致谢时，老外说：不需要感谢,你遇到这种情况会不管吗?<!-- raw HTML omitted -->找政府办事,该办的会尽力给你办,不必送礼吃饭。这种社会道德环境,需要建圈子织网吗？<!-- raw HTML omitted --></p>
<p>呜呼！一圈一圈又一圈,大圈套小圈,小圈连大圈,中国人已经被这一个又一个的圈子勒得呼吸愈发困难。</p>
<p>文章转自<a href="http://bbs.voc.com.cn/topic-5351681-1-1.html">华声论坛</a></p>
]]></content>
		</item>
		
		<item>
			<title>python venv 虚拟环境使用</title>
			<link>https://blog.v5u.win/posts/system/system-python-venv-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8/</link>
			<pubDate>Tue, 04 Jul 2017 09:53:23 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-python-venv-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8/</guid>
			<description>virtualenv就是用来为一个应用创建一套“隔离”的Python运行环境。 Python3.3以上的版本通过venv模块原生支持虚拟环境，</description>
			<content type="html"><![CDATA[<p>virtualenv就是用来为一个应用创建一套“隔离”的Python运行环境。</p>
<p>Python3.3以上的版本通过venv模块原生支持虚拟环境，可以代替<!-- raw HTML omitted -->Python<!-- raw HTML omitted -->之前的virtualenv。</p>
<p>该venv模块提供了创建轻量级“虚拟环境”，提供与系统<!-- raw HTML omitted -->python<!-- raw HTML omitted -->的隔离支持。每一个虚拟环境都有其自己的Python二进制（允许有不同的Python版本创作环境），并且可以拥有自己独立的一套Python包。</p>
<p>需要注意的是，在Python3.3中使用”venv”命令创建的环境不包含”pip”，你需要进行手动安装。在Python3.4中改进了这一个缺陷。</p>
<p>安装 <strong>python -m venv .</strong></p>
<p>启动 <strong>source venv/bin/activate</strong></p>
<p>退出 <strong>deactivate</strong></p>
<p> </p>
<p> </p>
<p>virtualenv是如何创建“独立”的Python运行环境的呢？原理很简单，就是把系统Python复制一份到virtualenv的环境，用命令<code>source venv/bin/activate</code>进入一个virtualenv环境时，virtualenv会修改相关环境变量，让命令<code>python</code>和<code>pip</code>均指向当前的virtualenv环境。</p>
]]></content>
		</item>
		
		<item>
			<title>mac下nvm 使用记录</title>
			<link>https://blog.v5u.win/posts/system/system-mac%E4%B8%8Bnvm-%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</link>
			<pubDate>Tue, 02 May 2017 10:29:55 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-mac%E4%B8%8Bnvm-%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</guid>
			<description>mac下nvm 使用记录 断开连接 brew unlink nvm 安装 brew install nvm 环境变量 add to ~/.bash_profile export NVM_DIR=”$HOME/.nvm” . “$(brew –prefix nvm)</description>
			<content type="html"><![CDATA[<p>mac下nvm 使用记录</p>
<p>断开连接 brew unlink nvm</p>
<p>安装 brew install nvm</p>
<p>环境变量 add to ~/.bash_profile</p>
<p>export NVM_DIR=”$HOME/.nvm”</p>
<p>. “$(brew –prefix nvm)/nvm.sh”</p>
<p>配置国内镜像源 export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/dist</p>
<p>配置npm镜像源</p>
<p>创建 ~/.npmrc 写入registry=https://registry.npm.taobao.org</p>
<p>更新环境变量 . ~/.bash_profile</p>
<p>查看可安装的nodejs版本 nvm ls-remote</p>
<p>安装node nvm install</p>
<p>删除版本 nvm uninstall v6</p>
<p>查看 nvm ls</p>
<p>切换nvm use //只针对当前shall</p>
<p>设置默认 nvm alias default v7</p>
<p>可以通过 nvm ls-remote 查看有哪些 node 版本。</p>
]]></content>
		</item>
		
		<item>
			<title>mac文件权限修改</title>
			<link>https://blog.v5u.win/posts/system/system-mac%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%BF%AE%E6%94%B9/</link>
			<pubDate>Mon, 13 Mar 2017 17:20:42 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-mac%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%BF%AE%E6%94%B9/</guid>
			<description>文件或目录的访问权限分为只读，只写和可执行三种。 文件被创建时，文件所有者自动拥有对该文件的读、写和可执行权限，以便于对文件的阅读和修改。 有三</description>
			<content type="html"><![CDATA[<p>文件或目录的访问权限分为只读，只写和可执行三种。</p>
<p>文件被创建时，文件所有者自动拥有对该文件的读、写和可执行权限，以便于对文件的阅读和修改。</p>
<p>有三种不同类型的用户可对文件或目录进行访问：文件所有者，同组用户、其他用户。</p>
<p>用ls -l命令显示文件或目录的详细信息，最左边的一列为文件的访问权限</p>
<p>例:</p>
<p><code>$ ls -l script.swift</code></p>
<p><code>-rw-r--r--  1 fans  staff  39  3 13 16:16 script.swift</code></p>
<p>横线代表空许可。r代表只读，w代表写，x代表可执行</p>
<p>这里共有10个位置。第一个字符指定了文件类型。</p>
<p>在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是d，表示是一个目录。</p>
<table>
<thead>
<tr>
<th>–</th>
<th>rw-</th>
<th>r–</th>
<th>r–</th>
</tr>
</thead>
<tbody>
<tr>
<td>普通文件</td>
<td>文件主</td>
<td>组用户</td>
<td>其他用户</td>
</tr>
</tbody>
</table>
<p>是文件script.swift 的访问权限，表示script.swift是一个普通文件；</p>
<p>script.swift的属主有读写权限；与script.swift属主同组的用户只有读权限；其他用户也只有读权限。</p>
<h3 id="chmod-命令">chmod 命令</h3>
<p>功能：用于改变文件或目录的访问权限.用户用它控制文件或目录的访问权限.</p>
<p>语法：该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。</p>
<ol>
<li>文字设定法</li>
</ol>
<pre><code>`chmod u+x script.swift`

\[详情点一下\]\[http://blog.csdn.net/nitghost/article/details/4224034\]&lt;/p&gt; 
</code></pre>
<ol start="2">
<li>数字设定法</li>
</ol>
<pre><code>略。。。知道那么多干嘛，一种还不够你用的！^_^
</code></pre>
<p>swift研究学习</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>sublime text3 配置nodejs build 环境</title>
			<link>https://blog.v5u.win/sublime-text3-%E9%85%8D%E7%BD%AEnodejs-build-%E7%8E%AF%E5%A2%83/</link>
			<pubDate>Fri, 03 Mar 2017 15:18:23 +0000</pubDate>
			
			<guid>https://blog.v5u.win/sublime-text3-%E9%85%8D%E7%BD%AEnodejs-build-%E7%8E%AF%E5%A2%83/</guid>
			<description>可参考使用Sublime Text 3 进行Python3开发 Tools–&amp;gt;Build System–&amp;gt;New Build System 写入 { &amp;quot;shell_cmd&amp;quot;: &amp;quot;/usr/local/bin/node ${file}&amp;quot;, &amp;quot;selector&amp;quot;: &amp;quot;source.javascript&amp;quot;, &amp;quot;file_regex&amp;quot;: &amp;quot;^(...*?):([0-9]*):?([0-9]*)&amp;quot;, &amp;quot;working_dir&amp;quot;: &amp;quot;${file_path}&amp;quot;, } 保</description>
			<content type="html"><![CDATA[<p>可参考<a href="https://www.v5u.win/archives/543">使用Sublime Text 3 进行Python3开发</a></p>
<p>Tools–&gt;Build System–&gt;New Build System 写入</p>
<pre><code>{
    &quot;shell_cmd&quot;: &quot;/usr/local/bin/node ${file}&quot;,
    &quot;selector&quot;: &quot;source.javascript&quot;,
    &quot;file_regex&quot;: &quot;^(...*?):([0-9]*):?([0-9]*)&quot;,
    &quot;working_dir&quot;: &quot;${file_path}&quot;,
}
</code></pre>
<p>保存为/Packages/User/node.sublime-build</p>
<p>然后选择环境为node即可</p>
]]></content>
		</item>
		
		<item>
			<title>brew 安装</title>
			<link>https://blog.v5u.win/posts/system/system-brew-%E5%AE%89%E8%A3%85/</link>
			<pubDate>Sat, 25 Feb 2017 22:54:49 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-brew-%E5%AE%89%E8%A3%85/</guid>
			<description>Mac自带ruby 安装brew ruby -e &amp;quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&amp;quot; 已经安装了可以输入这个命令 ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot; 如何使用brew 举个栗子: wget 这个工具 输入命令: brew install wget 输入命令 brew uninstall</description>
			<content type="html"><![CDATA[<p>Mac自带ruby</p>
<p>安装brew</p>
<p><code>ruby -e &quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&quot;</code></p>
<p>已经安装了可以输入这个命令</p>
<p><code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></p>
<p>如何使用brew</p>
<p>举个栗子: wget 这个工具</p>
<p>输入命令: brew install wget</p>
<p>输入命令 brew uninstall wget</p>
]]></content>
		</item>
		
		<item>
			<title>mac 安装nginx</title>
			<link>https://blog.v5u.win/mac-%E5%AE%89%E8%A3%85nginx/</link>
			<pubDate>Sat, 25 Feb 2017 16:12:18 +0000</pubDate>
			
			<guid>https://blog.v5u.win/mac-%E5%AE%89%E8%A3%85nginx/</guid>
			<description>安装 brew install nginx 启动 sudo nginx 重新启动 sudo nginx -s reload 停止 sudo nginx -s stop ps 查看80端口占用情况 sudo lsof -P -itcp:80</description>
			<content type="html"><![CDATA[<p>安装</p>
<p>brew install nginx</p>
<p>启动</p>
<p>sudo nginx</p>
<p>重新启动</p>
<p>sudo nginx -s reload</p>
<p>停止</p>
<p>sudo nginx -s stop</p>
<p>ps 查看80端口占用情况</p>
<p>sudo lsof -P -itcp:80</p>
]]></content>
		</item>
		
		<item>
			<title>nvm管理不同的node版本</title>
			<link>https://blog.v5u.win/posts/nodejs/nodejs-nvm%E7%AE%A1%E7%90%86%E4%B8%8D%E5%90%8C%E7%9A%84node%E7%89%88%E6%9C%AC/</link>
			<pubDate>Fri, 24 Feb 2017 09:59:52 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/nodejs/nodejs-nvm%E7%AE%A1%E7%90%86%E4%B8%8D%E5%90%8C%E7%9A%84node%E7%89%88%E6%9C%AC/</guid>
			<description>前任栽树后人乘凉 ：http://www.cnblogs.com/kongxianghai/p/5660101.html 安装多版本node 安装</description>
			<content type="html"><![CDATA[<p>前任栽树后人乘凉 ：http://www.cnblogs.com/kongxianghai/p/5660101.html</p>
<h3 id="安装多版本node">安装多版本node</h3>
<ul>
<li>
<p>安装nvm</p>
<p>通过下面的命令可进行一步到位的安装，下面两种方式可二选一。</p>
<p>curl -o- <a href="https://raw.githubusercontent.com/creationix/nvm/v0.31.2/install.sh">https://raw.githubusercontent.com/creationix/nvm/v0.31.2/install.sh</a> | bash</p>
<p>或者:</p>
<p>wget -qO- <a href="https://raw.githubusercontent.com/creationix/nvm/v0.31.2/install.sh">https://raw.githubusercontent.com/creationix/nvm/v0.31.2/install.sh</a> | bash</p>
</li>
</ul>
<h4 id="安装">安装</h4>
<ul>
<li>在命令行中运行命令，安装当前最新的稳定版。
<code>nvm install stable</code></li>
<li>运行命令，指明版本，安装早期的版本0.12.4。
<code>nvm install 0.12.4</code></li>
<li>安装后，当前使用的node版本默认为最后一次安装的版本，在命令行中运行命令可查看当前版本。
<code>nvm current</code></li>
<li>切换node版本
<code>nvm use 6</code></li>
<li>显示所有安装的版本
<code>nvm ls</code></li>
<li>设置默认使用的版本
<code>nvm alias default version</code></li>
</ul>
<h4 id="卸载">卸载</h4>
<ul>
<li>
<p>删除引用</p>
<p><code>nvm deactivate</code></p>
</li>
<li>
<p>卸载</p>
<p><code>nvm uninstall 7</code></p>
</li>
<li>
<ul>
<li>*安装全局组件</li>
</ul>
</li>
</ul>
<p>非nvm管理的情况下，全局组件是安装到/usr/local/lib/node_modules下，然后通过软连接的方式把包中bin目录下的可执行文件链接到/usr/local/bin。不管用什么版本都装到这些目录下，多版本就没法玩了。</p>
<p>在nvm管理下，以沙箱的方式，全局组件会装到.nvm目录的当前版本node下，也就是装在nvm这个沙箱里，跟在指定版本的node下，当前有什么版本的node，就有对应的全局组件。这是nvm强大的地方，在多运行环境的管理和切换极为好用。</p>
<p>使用.nvmrc文件运行</p>
<p>在服务器上很多时候会运行多个应用系统，每个应用系统使用的node版本是不一样的，老系统用0.12.x甚至0.10.x，新系统用了新特新所以用最新的node版本，都很实际很正常。</p>
<p>为了让不同的应用系统使用各自所需的node版本运行，我们只需在各应用系统内的根目录里生成一个.nvmrc文件，在其内写一个版本号，利用nvm run &lt;系统启动文件&gt;的方式运行系统，即可完成要求。<strong>详情请看文章开头链接。</strong><!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>二十四种常见的逻辑谬误</title>
			<link>https://blog.v5u.win/posts/life/life-24-logic-error/</link>
			<pubDate>Tue, 07 Feb 2017 13:52:49 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/life/life-24-logic-error/</guid>
			<description>二十四种常见的逻辑谬误 第一条：稻草人 第二条：错误归因 第三条：诉诸感情 第四条：谬误谬误 第五条：滑坡谬误 第六条：人身攻击 第七条：诉诸虚伪 第八条：</description>
			<content type="html"><![CDATA[<p>二十四种常见的逻辑谬误</p>
<blockquote>
<p>第一条：稻草人
第二条：错误归因
第三条：诉诸感情
第四条：谬误谬误
第五条：滑坡谬误
第六条：人身攻击
第七条：诉诸虚伪
第八条：个人怀疑
第九条：片面谬误
第十条：诱导性问题
第十一条：举证责任
第十二条：语义模糊
第十三条：赌徒谬误
第十四条：乐队花车
第十五条：诉诸权威
第十六条：合成谬误
第十七条：没有真正的苏格兰人
第十八条：基因谬误
第十九条：非黑即白
第二十条：窃取论点
第二十一条：诉诸自然
第二十二条：轶事证据
第二十三条：德克萨斯神枪手
第二十四条：中间立场</p>
</blockquote>
<h3 id="第一条稻草人">第一条：稻草人</h3>
<p>你歪曲了别人的观点，使你自己能够更加轻松的攻击别人。  你夸张、歪曲，甚至凭空创造了别人的观点，来让你本身的观点显得更加合理。这是一种极端不诚实的行为，这不但影响了理性的讨论，也影响了你自己观点的可信度。因为如果你可以负面的歪曲别人的观点，你就有可能从正面歪曲自己的观点。  例子：小明说国家应该投入更多的预算来发展教育行业，小红回复到：“想不到你这么不爱国，居然想减少国防开支，让外国列强有机可乘。” 小红就犯了稻草人谬误。</p>
<hr>
<h3 id="第二条错误归因">第二条：错误归因</h3>
<p>你从两个事物可能存在相关性，就得出一个事物是造成另一个事物的原因。  你看到了两个事物同时存在，就觉得其中一个事物是另一个的起因。你的错误在于，同时存在的两个事物未必有因果关系，可能这两个事物有共同的起因，或者两个事物根本没有因果关系，它们直接的共存只是
2  巧合。一个事情比另一个事情先发生同样不能说明两个事物肯定存在因果性。  例子：小红指出，过去几个世纪全球海盗数量减少，全球温度在升高，从而得出是海盗的数量的减少造成了气候变化，海盗能够降低全球温度。小红犯了错误归因的谬误.</p>
<hr>
<h3 id="第三条诉诸感情">第三条：诉诸感情</h3>
<p>你试图通过操作别人的感情来取代一个有力的论述。  你操作的感情可能包括恐惧、嫉妒、怜悯、骄傲等等。一个逻辑严谨的论述可能激起别人的情感波动，但是如果只用感情操作而不用逻辑论述，那你就犯了诉诸感情的错误。每个心智健康的人都会受感情影响，所以这种谬误很有效，但这也是为什么这种谬误是低级和不诚实的手段。  例子：小红在饭店看到小明吃狗肉，于是上前训斥：“你怎么可以吃狗肉，小狗多么可爱，就像小朋友一样，你忍心伤害小朋友吗？” 小红犯了诉诸感情的谬误。</p>
<hr>
<h3 id="第四条谬误谬误">第四条：谬误谬误</h3>
<p>你看到别人的论述水平很低，或者别人的论述里面有谬误，就认为别人的观点一定是错误的。  很多时候，辩论的赢家获胜并不是因为观点正确，而是因为辩论技巧更好。作为一个理性的人，你不能因为别人的论述中存在谬误或者错误，就认为别人的观点一定是错误的。  例子：一个提倡健康饮食的人在电视上发表了很荒唐的饮食理论来推广健康饮食理念，小红看后觉得健康饮食就是骗人的，于是开始每天暴饮暴食。小红犯了谬误谬误</p>
<hr>
<h3 id="第五条滑坡谬误">第五条：滑坡谬误</h3>
<p>你搞得好像如果A发生了，那么Z也一定会发生会，以此来表示A不应该发生。  你不讨论现下的事物(A)，而是把讨论重心转移到了意淫出来的极端事物(Z)。因为你没能给出任何证据来证明A的发生一定会造成极端事物Z的发生，所以这是一种诉诸恐惧的谬误，也影响了人们讨论A时候的客观性。  例子：小红反对同性恋婚姻，因为她认为如果我们允许同性恋结婚，那么就会有人想要和桌子、椅子结婚。小红犯了滑坡谬论。</p>
<hr>
<h3 id="第六条人身攻击">第六条：人身攻击</h3>
<p>你讨论时针对对方的人格、动机、态度、地位、阶级或处境等，而进行攻击或评论，并以此当作提出了理据去驳斥对方的论证或去支持自己的论点  人身攻击时不一定是直接进行攻击，也可能是通过背后捅刀子、暗示听众等等方式来造成对对方人格的质疑。你试图用你对别人人格的攻击来取代一个有力的论述。更多关于人身攻击。  例子：当小明提出了一个很合理的关于基础设施建设的提议的时候吗，小红说她不相信任何小明说的话，因为小明不爱国，经常批评政府，不懂得感恩。小红犯了人身攻击的谬误。</p>
<hr>
<h3 id="第七条诉诸虚伪">第七条：诉诸虚伪</h3>
<p>你不正面回应别人对你的批评，而是用批评别人作为你的回复——“你不也曾经&hellip;..”  你想要把通过用批评回应批评的方式，免去你为自己辩护的责任。你通过这种方法来暗示对方是个虚伪的人，但是不管别人虚伪与否，你都只是在回避别人对你的批评。  例子：小明在和小红争论的时候指出小红犯了一个逻辑谬误，小红不正面捍卫自己，反而回应：“你之前也犯了逻辑谬误。” 小红在这里犯了诉诸虚伪的谬误</p>
<hr>
<h3 id="第八条个人怀疑">第八条：个人怀疑</h3>
<p>你因为自己不明白或者知识水平不够，就得出一个事物可能是假的。  一些很复杂的概念，比如生物进化等等需要一些基本的理解和知识。有些人因为不理解这些复杂的概念，而觉得这些东西是错误的。  例子：小红指着块石头说：“你说进化论是真的，那你让这块石头进化人给我看看。”小红犯了个人怀疑的谬误</p>
<hr>
<h3 id="第九条片面谬误">第九条：片面谬误</h3>
<p>当你的观点被证明是错误的时候，你用特例来给自己开脱。  人类都不喜欢被证明是错的，所以当他们被证明是错的时候总会想办法给自己开脱。人总是觉得自己以前觉得正确的东西必须是正确的吗，所以总能找到理由让自己阿Q一下。只有诚实和勇敢的人才能面对自己的错误，并且承认自己犯错了。  例子：小红说自己有特异功能，能用塔罗牌算出未出生小孩的性别，但是孩子生下来后发现猜错了，于是她就说是算命的人缺乏信仰。小红犯了片面谬误。</p>
<hr>
<h3 id="第十条诱导性问题">第十条：诱导性问题</h3>
<p>你在提出问题的时候加入了诱导的成分，使得对方只能按着你的意思来回答。 你试图用诱导性的问题来逼对方回答你提出的低级问题，从而破坏理性的讨论。  例子：小红怀疑自己的丈夫孙越搞外遇，为了一探究竟，于是就问他：“陈轩的屁股上是不是有个胎记？”小红使用的就是诱导性问题。</p>
<hr>
<h3 id="第十一条举证责任">第十一条：举证责任</h3>
<p>你认为举证责任不在提出观点的人，而在于质疑观点的人。  当有人提出一个观点结果被人质疑后，你认为举证的责任不在提出观点的人，而在质疑者。不能证伪一个事物，或者举出反例，并不能证明这个事物的合理性。当然，如果只因为没有足够的证据说明一个事物是合理的并不能肯定的说明它是不合理的。  例子：小红说他相信宇宙是一个叫KengDie的全知全能神创造的，因为没有人能证明KengDie不存在，所以KengDie是存在的。小红犯了举证责任的谬误。</p>
<hr>
<h3 id="第十二条语义模糊">第十二条：语义模糊</h3>
<p>你用双关语或者意思存有歧义的语言来歪曲事实。  你使用双关语或者意思存有歧义的语言，当你被别人批评的时候又利用这些有歧义的语言作为自己的挡箭牌。  例子：地上一个猴，树上qi个猴，一共几个猴？</p>
<hr>
<h3 id="第十三条赌徒谬误">第十三条：赌徒谬误</h3>
<p>你认为随机事物的发生和之前发生的事情是有相关性的。  有人在看到独立的随机事件（比如抛硬币）时，总觉得会和前面的事情有相关性（前面连着五个正面，下一个肯定要是反面了。）</p>
<hr>
<h3 id="第十四条乐队花车">第十四条：乐队花车</h3>
<p>你试图说明因为很多人都在做同一件事情/相信同一件事物，这件事情就是对的。  一个事物/观点的流行程度和它本身是否合理没有关系。地球是球形的，在人们相信地球是平的时代地球也是球形的，地球才不管你信不信它呢。  例子：看到《货币战争》怎么那么畅销，小红相信一定是罗斯柴尔德和共济会在背后操纵着整个世界。小红犯了乐队花车谬误。</p>
<hr>
<h3 id="第十五条诉诸权威">第十五条：诉诸权威</h3>
<p>你利用一个权威人物/机构的观点来取代一个有力的论述。  要证明一个观点，只是摘录别人的观点是不够的， 至少要知道所提到的权威为什么有那样的观点。因为权威人物/机构也是会犯错误的，所以不能无条件的假设合理性。当然，权威人物/机构的观点有可能是对的，所以不能只因为对方使用了诉诸权威的谬误就认定这个观点肯定是错的。  例子：小红不知道怎么反驳进化论，于是就说：“我老公孙越是大科学家，他觉得进化论是错的。”小红犯了诉诸权威的额谬误。</p>
<hr>
<h3 id="第十六条合成谬误">第十六条：合成谬误</h3>
<p>你认为一个总体的组成部分所具有的特性，对于这个总体的其它部分也是普适的。  很多时候，对于一个组成部分存在合理性的事物，对于其它组成部分并不具有合理性。我们常能观察到事物之间的一致性，所以当一致性不存在的时候也会偏见的认为有一致性。  例子：小红买了辆自行车，当她看到自行车的车座是人造革的时候，她就觉得自行车的其它部位也是人造革的。</p>
<hr>
<p>###第十七条：没有真正的苏格兰人</p>
<p>你提出了一个观点，并收到了别人的批评，你试图用“诉诸纯洁”的方式来捍卫自己的观点。 你试图通过马后炮和修改标准的方式来维护自己那有缺陷的观点。 例子：  小红：“所有荷兰人都喜欢喝胡辣汤”。  小明：“孙越就是荷兰人，他就不喜欢喝胡辣汤。”  小红：“好吧，所有【真正的】荷兰人都喜欢喝胡辣汤。”&lt;——小红这里就犯了“没有真正的苏格兰人”的谬误</p>
<hr>
<h3 id="第十八条基因谬误">第十八条：基因谬误</h3>
<p>你通过一个事物的出身来判断它的好坏。  你试图逃避正面的讨论，而转而讨论事物的出处。这种做法和本文第六条“人身攻击”类似，都是想试图通过已有的负面印象来从侧面攻击对方，却不能正面的回应对方的论述。 例子：  小明：“孙越不喜欢喝胡辣汤。”  小红：“孙越是荷兰人，怎么会不喜欢喝胡辣汤？”&lt;——小红这里就犯了基因谬误</p>
<hr>
<h3 id="第十九条非黑即白">第十九条：非黑即白</h3>
<p>你把黑和白作为仅有的可能，却忽略了其它可能性的存在。  你使用了简单粗暴的假二分法，来掩盖其它可能性的存在。你想通过非黑即白的选择来误导讨论，破坏辩论的建设性。  例子：在谈到反恐战争时，总统说如果你不支持反恐战争，你就是支持恐怖分子。总统这里犯了非黑即白的谬误。</p>
<hr>
<h3 id="第二十条窃取论点">第二十条：窃取论点</h3>
<p>你采用循环论证的方法来证明一个被包含在前提里面的观点。  这是一种逻辑智商破产的谬误，因为你把你的前提假设默认为真的，然后利用循环论证的方式来证明它。 例子：KengDie教的经文《KengDie Sutra》里面说的东西都是真理，因为在《KengDie Sutra》第一章第二段里面提到了“KengDie所述都是真理。”</p>
<hr>
<h3 id="第二十一条诉诸自然">第二十一条：诉诸自然</h3>
<p>你认为一个事物是“自然”的，所以它是合理、必然并且更好的。  一个事物是自然的并不一定代表它就更好。互相杀戮是大自然中普遍存在的现象，但是大多数人都认为我们不应该互相屠杀。  例子：小红认为吃草药肯定比吃人工制造的药有效，因为草药更加“自然”。小红犯了诉诸自然的谬误</p>
<hr>
<h3 id="第二十二条轶事证据">第二十二条：轶事证据</h3>
<p>你试图用个人经验或者单独事例来取代逻辑论述或者有力的证据。  比起复杂而确凿的证据来说，轶事证据更容易获得，但是却要粗浅很多。在绝大多数情况下，量化衡量的科学数据/确凿证据比个人经验/轶事要更加可信。  例子：小红爷爷是个30年的老烟枪，现在80多岁身体还很健康，小红依次得出吸烟对身体无害的结论。小红犯了轶事证据的谬误。</p>
<hr>
<h3 id="第二十三条德克萨斯神枪手">第二十三条：德克萨斯神枪手</h3>
<p>你在大量的数据/证据中小心的挑选出对自己的观点有利的证据，而不使用那些对自己不利的数据/证据。 你先开了一枪，然后在子弹击中的地方画上靶心，搞得自己真是个神枪手一样。你先决定了自己的立场，然后才开始找证据，并且你只找对自己有利的，而对于那些对自己不利的就选择性忽略。  例子：红X字会为了证明自己尽到了职责，到处宣传自己拨出了XXXX的善款，却只字不提自己公款消费的奢侈无度。红X字会犯了“德克萨斯神枪手”谬误</p>
<hr>
<h3 id="第二十四条中间立场">第二十四条：中间立场</h3>
<p>你觉得两个极端观点的妥协，或者说中间立场，肯定是对的。  虽然大多数时候，真理确实存在于两种极端的中间地带，但是你不能轻易的认为只要是处于中间立场的观点就一定是正确的。谎言和实话的中间地带依然是谎言。  例子：小红认为疫苗会造成儿童自闭症，孙越从科学研究的结论中得出结论认为疫苗不会造成儿童自闭症，小明认为两者观点的妥协——疫苗会造成儿童自闭症，但不是全部的儿童自闭症——才是正确的。小明犯了中间立场的谬误.</p>
]]></content>
		</item>
		
		<item>
			<title>二十四种常见的逻辑谬误</title>
			<link>https://blog.v5u.win/%E4%BA%8C%E5%8D%81%E5%9B%9B%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E9%80%BB%E8%BE%91%E8%B0%AC%E8%AF%AF/</link>
			<pubDate>Tue, 07 Feb 2017 05:52:49 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E4%BA%8C%E5%8D%81%E5%9B%9B%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E9%80%BB%E8%BE%91%E8%B0%AC%E8%AF%AF/</guid>
			<description>二十四种常见的逻辑谬误 第一条：稻草人&amp;lt;br /&amp;gt; 第二条：错误归因&amp;lt;br /&amp;gt; 第三条：诉诸感情&amp;lt;br /&amp;gt; 第四条：谬误谬误&amp;lt;br /&amp;gt;</description>
			<content type="html"><![CDATA[<p>二十四种常见的逻辑谬误</p>
<p><code>第一条：稻草人&lt;br /&gt; 第二条：错误归因&lt;br /&gt; 第三条：诉诸感情&lt;br /&gt; 第四条：谬误谬误&lt;br /&gt; 第五条：滑坡谬误&lt;br /&gt; 第六条：人身攻击&lt;br /&gt; 第七条：诉诸虚伪&lt;br /&gt; 第八条：个人怀疑&lt;br /&gt; 第九条：片面谬误&lt;br /&gt; 第十条：诱导性问题&lt;br /&gt; 第十一条：举证责任&lt;br /&gt; 第十二条：语义模糊&lt;br /&gt; 第十三条：赌徒谬误&lt;br /&gt; 第十四条：乐队花车&lt;br /&gt; 第十五条：诉诸权威&lt;br /&gt; 第十六条：合成谬误&lt;br /&gt; 第十七条：没有真正的苏格兰人&lt;br /&gt; 第十八条：基因谬误&lt;br /&gt; 第十九条：非黑即白&lt;br /&gt; 第二十条：窃取论点&lt;br /&gt; 第二十一条：诉诸自然&lt;br /&gt; 第二十二条：轶事证据&lt;br /&gt; 第二十三条：德克萨斯神枪手&lt;br /&gt; 第二十四条：中间立场</code></p>
<h3 id="第一条稻草人">第一条：稻草人</h3>
<p>你歪曲了别人的观点，使你自己能够更加轻松的攻击别人。 你夸张、歪曲，甚至凭空创造了别人的观点，来让你本身的观点显得更加合理。这是一种极端不诚实的行为，这不但影响了理性的讨论，也影响了你自己观点的可信度。因为如果你可以负面的歪曲别人的观点，你就有可能从正面歪曲自己的观点。 例子：小明说国家应该投入更多的预算来发展教育行业，小红回复到：“想不到你这么不爱国，居然想减少国防开支，让外国列强有机可乘。” 小红就犯了稻草人谬误。</p>
<hr>
<h3 id="第二条错误归因">第二条：错误归因</h3>
<p>你从两个事物可能存在相关性，就得出一个事物是造成另一个事物的原因。 你看到了两个事物同时存在，就觉得其中一个事物是另一个的起因。你的错误在于，同时存在的两个事物未必有因果关系，可能这两个事物有共同的起因，或者两个事物根本没有因果关系，它们直接的共存只是</p>
<p>2 巧合。一个事情比另一个事情先发生同样不能说明两个事物肯定存在因果性。 例子：小红指出，过去几个世纪全球海盗数量减少，全球温度在升高，从而得出是海盗的数量的减少造成了气候变化，海盗能够降低全球温度。小红犯了错误归因的谬误.</p>
<hr>
<h3 id="第三条诉诸感情">第三条：诉诸感情</h3>
<p>你试图通过操作别人的感情来取代一个有力的论述。 你操作的感情可能包括恐惧、嫉妒、怜悯、骄傲等等。一个逻辑严谨的论述可能激起别人的情感波动，但是如果只用感情操作而不用逻辑论述，那你就犯了诉诸感情的错误。每个心智健康的人都会受感情影响，所以这种谬误很有效，但这也是为什么这种谬误是低级和不诚实的手段。 例子：小红在饭店看到小明吃狗肉，于是上前训斥：“你怎么可以吃狗肉，小狗多么可爱，就像小朋友一样，你忍心伤害小朋友吗？” 小红犯了诉诸感情的谬误。</p>
<hr>
<h3 id="第四条谬误谬误">第四条：谬误谬误</h3>
<p>你看到别人的论述水平很低，或者别人的论述里面有谬误，就认为别人的观点一定是错误的。 很多时候，辩论的赢家获胜并不是因为观点正确，而是因为辩论技巧更好。作为一个理性的人，你不能因为别人的论述中存在谬误或者错误，就认为别人的观点一定是错误的。 例子：一个提倡健康饮食的人在电视上发表了很荒唐的饮食理论来推广健康饮食理念，小红看后觉得健康饮食就是骗人的，于是开始每天暴饮暴食。小红犯了谬误谬误</p>
<hr>
<h3 id="第五条滑坡谬误">第五条：滑坡谬误</h3>
<p>你搞得好像如果A发生了，那么Z也一定会发生会，以此来表示A不应该发生。 你不讨论现下的事物(A)，而是把讨论重心转移到了意淫出来的极端事物(Z)。因为你没能给出任何证据来证明A的发生一定会造成极端事物Z的发生，所以这是一种诉诸恐惧的谬误，也影响了人们讨论A时候的客观性。 例子：小红反对同性恋婚姻，因为她认为如果我们允许同性恋结婚，那么就会有人想要和桌子、椅子结婚。小红犯了滑坡谬论。</p>
<hr>
<h3 id="第六条人身攻击">第六条：人身攻击</h3>
<p>你讨论时针对对方的人格、动机、态度、地位、阶级或处境等，而进行攻击或评论，并以此当作提出了理据去驳斥对方的论证或去支持自己的论点 人身攻击时不一定是直接进行攻击，也可能是通过背后捅刀子、暗示听众等等方式来造成对对方人格的质疑。你试图用你对别人人格的攻击来取代一个有力的论述。更多关于人身攻击。 例子：当小明提出了一个很合理的关于基础设施建设的提议的时候吗，小红说她不相信任何小明说的话，因为小明不爱国，经常批评政府，不懂得感恩。小红犯了人身攻击的谬误。</p>
<hr>
<h3 id="第七条诉诸虚伪">第七条：诉诸虚伪</h3>
<p>你不正面回应别人对你的批评，而是用批评别人作为你的回复——“你不也曾经…..” 你想要把通过用批评回应批评的方式，免去你为自己辩护的责任。你通过这种方法来暗示对方是个虚伪的人，但是不管别人虚伪与否，你都只是在回避别人对你的批评。 例子：小明在和小红争论的时候指出小红犯了一个逻辑谬误，小红不正面捍卫自己，反而回应：“你之前也犯了逻辑谬误。” 小红在这里犯了诉诸虚伪的谬误</p>
<hr>
<h3 id="第八条个人怀疑">第八条：个人怀疑</h3>
<p>你因为自己不明白或者知识水平不够，就得出一个事物可能是假的。 一些很复杂的概念，比如生物进化等等需要一些基本的理解和知识。有些人因为不理解这些复杂的概念，而觉得这些东西是错误的。 例子：小红指着块石头说：“你说进化论是真的，那你让这块石头进化人给我看看。”小红犯了个人怀疑的谬误</p>
<hr>
<h3 id="第九条片面谬误">第九条：片面谬误</h3>
<p>当你的观点被证明是错误的时候，你用特例来给自己开脱。 人类都不喜欢被证明是错的，所以当他们被证明是错的时候总会想办法给自己开脱。人总是觉得自己以前觉得正确的东西必须是正确的吗，所以总能找到理由让自己阿Q一下。只有诚实和勇敢的人才能面对自己的错误，并且承认自己犯错了。 例子：小红说自己有特异功能，能用塔罗牌算出未出生小孩的性别，但是孩子生下来后发现猜错了，于是她就说是算命的人缺乏信仰。小红犯了片面谬误。</p>
<hr>
<h3 id="第十条诱导性问题">第十条：诱导性问题</h3>
<p>你在提出问题的时候加入了诱导的成分，使得对方只能按着你的意思来回答。 你试图用诱导性的问题来逼对方回答你提出的低级问题，从而破坏理性的讨论。 例子：小红怀疑自己的丈夫孙越搞外遇，为了一探究竟，于是就问他：“陈轩的屁股上是不是有个胎记？”小红使用的就是诱导性问题。</p>
<hr>
<h3 id="第十一条举证责任">第十一条：举证责任</h3>
<p>你认为举证责任不在提出观点的人，而在于质疑观点的人。 当有人提出一个观点结果被人质疑后，你认为举证的责任不在提出观点的人，而在质疑者。不能证伪一个事物，或者举出反例，并不能证明这个事物的合理性。当然，如果只因为没有足够的证据说明一个事物是合理的并不能肯定的说明它是不合理的。 例子：小红说他相信宇宙是一个叫KengDie的全知全能神创造的，因为没有人能证明KengDie不存在，所以KengDie是存在的。小红犯了举证责任的谬误。</p>
<hr>
<h3 id="第十二条语义模糊">第十二条：语义模糊</h3>
<p>你用双关语或者意思存有歧义的语言来歪曲事实。 你使用双关语或者意思存有歧义的语言，当你被别人批评的时候又利用这些有歧义的语言作为自己的挡箭牌。 例子：地上一个猴，树上qi个猴，一共几个猴？</p>
<hr>
<h3 id="第十三条赌徒谬误">第十三条：赌徒谬误</h3>
<p>你认为随机事物的发生和之前发生的事情是有相关性的。 有人在看到独立的随机事件（比如抛硬币）时，总觉得会和前面的事情有相关性（前面连着五个正面，下一个肯定要是反面了。）</p>
<hr>
<h3 id="第十四条乐队花车">第十四条：乐队花车</h3>
<p>你试图说明因为很多人都在做同一件事情/相信同一件事物，这件事情就是对的。 一个事物/观点的流行程度和它本身是否合理没有关系。地球是球形的，在人们相信地球是平的时代地球也是球形的，地球才不管你信不信它呢。 例子：看到《货币战争》怎么那么畅销，小红相信一定是罗斯柴尔德和共济会在背后操纵着整个世界。小红犯了乐队花车谬误。</p>
<hr>
<h3 id="第十五条诉诸权威">第十五条：诉诸权威</h3>
<p>你利用一个权威人物/机构的观点来取代一个有力的论述。 要证明一个观点，只是摘录别人的观点是不够的， 至少要知道所提到的权威为什么有那样的观点。因为权威人物/机构也是会犯错误的，所以不能无条件的假设合理性。当然，权威人物/机构的观点有可能是对的，所以不能只因为对方使用了诉诸权威的谬误就认定这个观点肯定是错的。 例子：小红不知道怎么反驳进化论，于是就说：“我老公孙越是大科学家，他觉得进化论是错的。”小红犯了诉诸权威的额谬误。</p>
<hr>
<h3 id="第十六条合成谬误">第十六条：合成谬误</h3>
<p>你认为一个总体的组成部分所具有的特性，对于这个总体的其它部分也是普适的。 很多时候，对于一个组成部分存在合理性的事物，对于其它组成部分并不具有合理性。我们常能观察到事物之间的一致性，所以当一致性不存在的时候也会偏见的认为有一致性。 例子：小红买了辆自行车，当她看到自行车的车座是人造革的时候，她就觉得自行车的其它部位也是人造革的。</p>
<ul>
<li>
<ul>
<li>*###第十七条：没有真正的苏格兰人</li>
</ul>
</li>
</ul>
<p>你提出了一个观点，并收到了别人的批评，你试图用“诉诸纯洁”的方式来捍卫自己的观点。 你试图通过马后炮和修改标准的方式来维护自己那有缺陷的观点。 例子： 小红：“所有荷兰人都喜欢喝胡辣汤”。 小明：“孙越就是荷兰人，他就不喜欢喝胡辣汤。” 小红：“好吧，所有【真正的】荷兰人都喜欢喝胡辣汤。”&lt;——小红这里就犯了“没有真正的苏格兰人”的谬误<!-- raw HTML omitted --></p>
<hr>
<h3 id="第十八条基因谬误">第十八条：基因谬误</h3>
<p>你通过一个事物的出身来判断它的好坏。 你试图逃避正面的讨论，而转而讨论事物的出处。这种做法和本文第六条“人身攻击”类似，都是想试图通过已有的负面印象来从侧面攻击对方，却不能正面的回应对方的论述。 例子： 小明：“孙越不喜欢喝胡辣汤。” 小红：“孙越是荷兰人，怎么会不喜欢喝胡辣汤？”&lt;——小红这里就犯了基因谬误</p>
<hr>
<h3 id="第十九条非黑即白">第十九条：非黑即白</h3>
<p>你把黑和白作为仅有的可能，却忽略了其它可能性的存在。 你使用了简单粗暴的假二分法，来掩盖其它可能性的存在。你想通过非黑即白的选择来误导讨论，破坏辩论的建设性。 例子：在谈到反恐战争时，总统说如果你不支持反恐战争，你就是支持恐怖分子。总统这里犯了非黑即白的谬误。</p>
<hr>
<h3 id="第二十条窃取论点">第二十条：窃取论点</h3>
<p>你采用循环论证的方法来证明一个被包含在前提里面的观点。 这是一种逻辑智商破产的谬误，因为你把你的前提假设默认为真的，然后利用循环论证的方式来证明它。 例子：KengDie教的经文《KengDie Sutra》里面说的东西都是真理，因为在《KengDie Sutra》第一章第二段里面提到了“KengDie所述都是真理。”</p>
<hr>
<h3 id="第二十一条诉诸自然">第二十一条：诉诸自然</h3>
<p>你认为一个事物是“自然”的，所以它是合理、必然并且更好的。 一个事物是自然的并不一定代表它就更好。互相杀戮是大自然中普遍存在的现象，但是大多数人都认为我们不应该互相屠杀。 例子：小红认为吃草药肯定比吃人工制造的药有效，因为草药更加“自然”。小红犯了诉诸自然的谬误</p>
<hr>
<h3 id="第二十二条轶事证据">第二十二条：轶事证据</h3>
<p>你试图用个人经验或者单独事例来取代逻辑论述或者有力的证据。 比起复杂而确凿的证据来说，轶事证据更容易获得，但是却要粗浅很多。在绝大多数情况下，量化衡量的科学数据/确凿证据比个人经验/轶事要更加可信。 例子：小红爷爷是个30年的老烟枪，现在80多岁身体还很健康，小红依次得出吸烟对身体无害的结论。小红犯了轶事证据的谬误。</p>
<hr>
<h3 id="第二十三条德克萨斯神枪手">第二十三条：德克萨斯神枪手</h3>
<p>你在大量的数据/证据中小心的挑选出对自己的观点有利的证据，而不使用那些对自己不利的数据/证据。 你先开了一枪，然后在子弹击中的地方画上靶心，搞得自己真是个神枪手一样。你先决定了自己的立场，然后才开始找证据，并且你只找对自己有利的，而对于那些对自己不利的就选择性忽略。 例子：红X字会为了证明自己尽到了职责，到处宣传自己拨出了XXXX的善款，却只字不提自己公款消费的奢侈无度。红X字会犯了“德克萨斯神枪手”谬误</p>
<hr>
<h3 id="第二十四条中间立场">第二十四条：中间立场</h3>
<p>你觉得两个极端观点的妥协，或者说中间立场，肯定是对的。 虽然大多数时候，真理确实存在于两种极端的中间地带，但是你不能轻易的认为只要是处于中间立场的观点就一定是正确的。谎言和实话的中间地带依然是谎言。 例子：小红认为疫苗会造成儿童自闭症，孙越从科学研究的结论中得出结论认为疫苗不会造成儿童自闭症，小明认为两者观点的妥协——疫苗会造成儿童自闭症，但不是全部的儿童自闭症——才是正确的。小明犯了中间立场的谬误.</p>
]]></content>
		</item>
		
		<item>
			<title>mac 如何使用wget</title>
			<link>https://blog.v5u.win/posts/system/system-wget/</link>
			<pubDate>Sat, 21 Jan 2017 23:38:52 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-wget/</guid>
			<description>下载单个文件， 为什么不用mac原生自带的工具：curl &amp;ldquo;网址链接&amp;rdquo; -o &amp;ldquo;输出文件名&amp;rdquo; 解释一下，</description>
			<content type="html"><![CDATA[<p>下载单个文件，
为什么不用mac原生自带的工具：curl &ldquo;网址链接&rdquo; -o &ldquo;输出文件名&rdquo;
解释一下，wget是Linux下自带的文件下载工具非常好用，mac下还是推荐使用原生。
呵呵哒，也许我是一片假的教程文章。</p>
]]></content>
		</item>
		
		<item>
			<title>mac 如何使用wget</title>
			<link>https://blog.v5u.win/mac-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8wget/</link>
			<pubDate>Sat, 21 Jan 2017 15:38:52 +0000</pubDate>
			
			<guid>https://blog.v5u.win/mac-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8wget/</guid>
			<description>下载单个文件， 为什么不用mac原生自带的工具：curl “网址链接” -o “输出文件名” 解释一下，wget是Linux下自带的文件下载工具非常好用</description>
			<content type="html"><![CDATA[<p>下载单个文件，</p>
<p>为什么不用mac原生自带的工具：curl “网址链接” -o “输出文件名”</p>
<p>解释一下，wget是Linux下自带的文件下载工具非常好用，mac下还是推荐使用原生。</p>
<p>呵呵哒，也许我是一片假的教程文章。</p>
]]></content>
		</item>
		
		<item>
			<title>抓包调试工具mitmproxy</title>
			<link>https://blog.v5u.win/posts/tools/tools-%E6%8A%93%E5%8C%85%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7mitmproxy/</link>
			<pubDate>Tue, 27 Dec 2016 10:39:15 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/tools/tools-%E6%8A%93%E5%8C%85%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7mitmproxy/</guid>
			<description>安装：brew install mitmproxy 其他安装方式: http://docs.mitmproxy.org/en/latest/install.html 启动：mitmproxy -p 8080(监听端口号) 设置代理，具体设置方法请自行查找 抓取https：用 iPhone 打开 Safari</description>
			<content type="html"><![CDATA[<p>安装：brew install mitmproxy</p>
<p>其他安装方式: <a href="http://docs.mitmproxy.org/en/latest/install.html">http://docs.mitmproxy.org/en/latest/install.html</a></p>
<p>启动：mitmproxy -p 8080(监听端口号)</p>
<p>设置代理，具体设置方法请自行查找</p>
<p>抓取https：用 iPhone 打开 Safari 浏览器并输入 mitm.it，安装信任证书</p>
<p>使用：键盘上下移动，Enter 键进入查看详情，按 Tab 键切换顶部导航栏</p>
<p>拦截修改 request 和 response：</p>
<p>输入 i，然后输入 ~s 再按回车键，这时候就进入了 response 拦截模式。如果输入 ~q 则进入 request 的拦截模式，更多的命令可以输入 ？ 查看。</p>
<p>其中橘红色的表示请求正被拦截，这时 Enter 进入后 再按 e 就可以修改 request 或者 response。修改时是用 vim 进行编辑的，修改完成后按 a 将请求放行，如果要放行所有请求输入 A 即可</p>
]]></content>
		</item>
		
		<item>
			<title>MySQL 数据库迁移</title>
			<link>https://blog.v5u.win/mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB/</link>
			<pubDate>Thu, 15 Dec 2016 06:21:18 +0000</pubDate>
			
			<guid>https://blog.v5u.win/mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB/</guid>
			<description>mac 下迁移数据库的结构和内容 迁移准备：数据库文件（可用工具导出Mysql文件） 注意：由于文件权限的问题 可能不能进入Mysql的data文件内 进</description>
			<content type="html"><![CDATA[<h3 id="mac-下迁移数据库的结构和内容">mac 下迁移数据库的结构和内容</h3>
<p>迁移准备：数据库文件（可用工具导出Mysql文件）</p>
<h5 id="注意由于文件权限的问题-可能不能进入mysql的data文件内">注意：由于文件权限的问题 可能不能进入Mysql的data文件内</h5>
<ol>
<li>进入文件 /usr/local/mysql/data</li>
</ol>
<pre><code>如果打不开，修改文件访问权限，（右击，显示简介，修改文件读写权限）
</code></pre>
<ol start="2">
<li>将相应的文件(如：MYD,MYI,frm) copy进合适的数据库内（文件夹）</li>
<li>打开数据库，查看迁移情况</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>OpenShift的使用</title>
			<link>https://blog.v5u.win/posts/web/web-openshift%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
			<pubDate>Wed, 14 Dec 2016 17:56:33 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/web/web-openshift%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
			<description>注册完成后如何使用命令行连接服务器 登录OpenShift网站，进入app的详情页，找到隐藏的ssh连接，不是下载地址的ssh连接，拷贝后直接</description>
			<content type="html"><![CDATA[<ol>
<li>注册完成后如何使用命令行连接服务器</li>
</ol>
<pre><code>登录OpenShift网站，进入app的详情页，找到隐藏的ssh连接，不是下载地址的ssh连接，拷贝后直接在终端打开就行，无需密码</code></pre>
]]></content>
		</item>
		
		<item>
			<title>swift 关键字篇</title>
			<link>https://blog.v5u.win/posts/swift/swift-%E5%85%B3%E9%94%AE%E5%AD%97%E7%AF%87/</link>
			<pubDate>Tue, 13 Dec 2016 15:45:27 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/swift/swift-%E5%85%B3%E9%94%AE%E5%AD%97%E7%AF%87/</guid>
			<description>@noescape：no escape(没有逃脱) 用来修饰闭包，含义为非逃逸闭包。 当闭包作为参数传递进函数时，如果这个闭包只在函数中被使用，则</description>
			<content type="html"><![CDATA[<p>@noescape：no escape(没有逃脱)</p>
<p>用来修饰闭包，含义为非逃逸闭包。</p>
<p>当闭包作为参数传递进函数时，如果这个闭包只在函数中被使用，则开发者可以将这个闭包声明成非逃逸的，即告诉系统当此函数结束后，这个闭包的生命周期也将结束，这样做的好处是可以提高代码性能，将闭包声明成非逃逸的类型使用@noescape关键字。</p>
<p>(1) 默认，swift 3.0 弃用，函数结束后，这个闭包的生命周期也将结束。</p>
<p>(2) 在其内部如果需要使用self这个关键字，self可以被省略。</p>
<p>@escaping 逃逸闭包</p>
<p>逃逸的闭包常用于异步的操作，这类函数会在异步操作开始之后立刻返回，但是闭包直到异步操作结束后才会被调用。例如这个闭包是异步处理一个网络请求，只有当请求结束后，闭包的生命周期才结束。当闭包作为函数的参数传入时，很有可能这个闭包在函数返回之后才会被执行。</p>
<p>@autoclosure 自动闭包</p>
<p>(1)默认非逃逸</p>
<p>(2)闭包也可以被自动的生成，这种闭包被称为自动闭包，自动闭包自动将表达式封装成闭包。</p>
<p>(3)自动闭包不接收任何参数，被调用时会返回被包装在其中的表达式的值。</p>
<p>(4)当闭包作为函数参数时，可以将参数标记 @autoclosure 来接收自动闭包。</p>
<p>(5)自动闭包能够延迟求值,因为代码段不会被执行直到你调用这个闭包。</p>
<p>(6)自动闭包默认是非逃逸的，如果要使用逃逸的闭包，需要手动声明: @autoclosure @escaping 旧版本：@autoclosure(escaping)</p>
<p>//(a)自动闭包演示</p>
<p>var students = [“A”,”B”,”C”]</p>
<p>let studentsProvider = { students.remove(at: 0) } //自动闭包自动将表达式封装成闭包</p>
<p>studentsProvider()//(b)自动闭包演示</p>
<p>var list = [1,2,3,4,5,6]</p>
<p>//创建一个显式闭包</p>
<p>let closures = {</p>
<p>list.append(7)</p>
<p>}</p>
<p>print(list)//将打印[1,2,3,4,5,6]</p>
<p>closures()</p>
<p>print(list)//引用传递，将打印[1,2,3,4,5,6,7]</p>
<p>func func1(closure: ()-&gt;Void) -&gt; Void {</p>
<p>//执行显式的闭包</p>
<p>closures()</p>
<p>}</p>
<p>func func2(auto: @autoclosure ()-&gt;Void) -&gt; Void {</p>
<p>//执行自动闭包</p>
<p>auto()</p>
<p>}</p>
<p>//显式闭包</p>
<p>func1(closure: closures)</p>
<p>print(list) //将打印[1,2,3,4,5,6,7,7]</p>
<p>//将表达式自动生成闭包</p>
<p>func2(auto: list.append(8))</p>
<p>print(list)//将打印[1,2,3,4,5,6,7,7,8]</p>
]]></content>
		</item>
		
		<item>
			<title>如何对2型糖尿病进行中医的辨证论治呢？</title>
			<link>https://blog.v5u.win/posts/life/life-%E5%A6%82%E4%BD%95%E5%AF%B92%E5%9E%8B%E7%B3%96%E5%B0%BF%E7%97%85%E8%BF%9B%E8%A1%8C%E4%B8%AD%E5%8C%BB%E7%9A%84%E8%BE%A8%E8%AF%81%E8%AE%BA%E6%B2%BB%E5%91%A2/</link>
			<pubDate>Mon, 12 Dec 2016 13:50:17 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/life/life-%E5%A6%82%E4%BD%95%E5%AF%B92%E5%9E%8B%E7%B3%96%E5%B0%BF%E7%97%85%E8%BF%9B%E8%A1%8C%E4%B8%AD%E5%8C%BB%E7%9A%84%E8%BE%A8%E8%AF%81%E8%AE%BA%E6%B2%BB%E5%91%A2/</guid>
			<description>如何对2型糖尿病进行中医的辨证论治呢？ 2型糖尿病是因为胃肠吸收来的糖不能及时送到四肢、皮肤等外周部位，这些部位的细胞不能正常消耗血糖，最后导</description>
			<content type="html"><![CDATA[<p>如何对2型糖尿病进行中医的辨证论治呢？
2型糖尿病是因为胃肠吸收来的糖不能及时送到四肢、皮肤等外周部位，这些部位的细胞不能正常消耗血糖，最后导致血糖升高。机体内的营养输送和利用由中医的脾来主管，当脾功能衰退或者脾负担过重时候，脾都不能正常地把营养运输到全身，所以，2型糖尿病人可以分为两个大类：脾功能衰退、脾负担过重。在具体用药的时候，还要根据病人体质的寒热来选择药物，寒性体质的要用温性药物，热性体质的要用寒性药物。所以，每个大类中又要分为寒热两个小类。运用中医药治疗2型糖尿病，辨证时必须分为四类。
根据自己的经验，我把2型糖尿病的辨证过程进行了简单化和条理化的整理，具体可以按照下面的方法来操作：</p>
<p>第一步：辨“功能衰退”还是“负担过重”
1、凡有口苦（早上起床时明显），舌苔黄腻，或黑腻等现象，就一定是脾负担过重。
2、凡有胸胁胀闷、肝区或右上腹胀闷疼等现象，属于脾负担过重。
3、只有血糖值升高，而没有任何症状的2型糖尿病人可以根据脉象加以判断：</p>
<ol>
<li>在没有服用强心药或扩血管药情况下，脉搏有力的是脾负担过重，脉搏弱，软而无力，重按脉搏力道不增加的为脾功能衰退。</li>
<li>脉搏细而有力为脾负担过重，大而无力为脾功能衰退。</li>
<li>左手脉强劲有力，右手脉稍弱，但重按力道增大的属于脾负担过重。</li>
<li>左手脉软而无力，重按力道更小，右手脉即使有一定的力量，也属脾功能衰退。</li>
<li>服用强心药或者扩血管药会改变脉象，因此，给这类2型糖尿病人诊脉，应该选在早上还没有服药的时候，这样才能掌握真实的脉象。
4、体重情况不能作为分型判断的标准，胖人不一定就是脾肺负担过重型。
5、值得注意的是，2型糖尿病人大多数是中老年人，经常既有脾功能衰退的情况，又有脾功能负担过重的情况，就如同汽车既有发动机老化问题，又存在着负担过重的问题一样。</li>
</ol>
<p>第二步：辨“寒”和“热”
1、判断寒热，首先问诊。“平时怕冷还是怕热？”
2、第二步看舌。
1）如果病人舌质红，舌苔黄或无苔，回答怕热，肯定属热性体质；
2）如果病人舌质红，舌苔白或者黄或者无苔，回答怕冷，平时手足发凉，属内热体质。
（注意黯红和紫红的区别。黯红如放久了的猪肝的颜色，甚至有的微微带龙胆紫的颜色，舌上面必然有水滑，这种情况属于寒性体质；紫红色比暗红色鲜艳，属于热性体质。）
3）如果病人舌质淡，回答“怕冷”，肯定属于寒性体质。
4）如果病人舌质淡，但回答“怕热”，或者“没有注意，无感觉”，这时候就要参考脉象，如果脉沉，重按才能摸到，属于寒性体质；如果脉轻按重按都很有力，属于热性体质，是因为过多使用苦瓜、石膏、知母等寒性药伤了胃阳，全身还是属于热性体质。</p>
<p>正确分清2型糖尿病病人的功能衰退、负担过重，寒热之后，无论是用中药治疗还是平时的饮食、运动都应该有针对性地进行。
功能衰退和负担过重的病人，运动方案不能一样。有的2型糖尿病人运动以后，疲劳乏力、心脏早搏等症状减轻，有的运动后觉得更累，好几天恢复不过来。所以，运动方案不能千篇一律。
现在西医提出了许多糖尿病人食品，比如苦瓜、荞麦、南瓜、薏苡仁等等。有的病人吃了感觉状态转好，但是很多病人吃后不但没有感觉到好，而且，吃出新的疾病。我经常看到吃南瓜吃成了黄疸，吃苦瓜、荞麦吃出胃病的。这些所谓的糖尿病人食品并不是适合所有糖尿病人的，应该“辨证择食”。</p>
<p>本文来源中医纪元的博客 <a href="http://blog.sina.com.cn/s/blog_45f8d4f80100hit9.html">http://blog.sina.com.cn/s/blog_45f8d4f80100hit9.html</a></p>
]]></content>
		</item>
		
		<item>
			<title>IT公司项目实现流程</title>
			<link>https://blog.v5u.win/it%E5%85%AC%E5%8F%B8%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B/</link>
			<pubDate>Mon, 21 Nov 2016 02:29:52 +0000</pubDate>
			
			<guid>https://blog.v5u.win/it%E5%85%AC%E5%8F%B8%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B/</guid>
			<description>注册公司，注册账号和其他所需资料（apple账号，第三方平台账号，合作平台资料） 市场调查，验证idea 项目立项，搜集需求 设计UE，确定需求 需</description>
			<content type="html"><![CDATA[<ol>
<li>注册公司，注册账号和其他所需资料（apple账号，第三方平台账号，合作平台资料）</li>
<li>市场调查，验证idea</li>
<li>项目立项，搜集需求</li>
<li>设计UE，确定需求</li>
<li>需求评审，完善需求，里程碑计划。</li>
<li>UI设计，设计接口</li>
<li>后台实现，前端实现</li>
<li>测试调试</li>
<li>部署上线</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>pyquery 解析网页乱码</title>
			<link>https://blog.v5u.win/posts/python/python-pyquery-%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E4%B9%B1%E7%A0%81/</link>
			<pubDate>Fri, 18 Nov 2016 10:08:22 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/python/python-pyquery-%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E4%B9%B1%E7%A0%81/</guid>
			<description>pyquery 解析网页乱码 问题：使用pyquery直接请求的网页，解析中文出现一半乱码，一般正常的情况 花了半天的时间也没找到解决办法，第二天早上无意间点</description>
			<content type="html"><![CDATA[<h3 id="pyquery-解析网页乱码">pyquery 解析网页乱码</h3>
<p><code>问题：使用pyquery直接请求的网页，解析中文出现一半乱码，一般正常的情况</code></p>
<h5 id="花了半天的时间也没找到解决办法第二天早上无意间点开一个搜索结果链接经验证完美解决问题立字为证">花了半天的时间也没找到解决办法，第二天早上无意间点开一个搜索结果链接，经验证，完美解决问题，立字为证。</h5>
<pre><code>1. 确认encode设置正确
2. 根据知乎@actberw 的解释：pyquery的源码，http 请求使用的是requests，如果没有就调用标准库urllib2
3. requests可以很好的处理返回的html编码问题，而urllib2不能
4. 如果安装了requests还是不行的话，requests是有一个bug（2016年3月数据），有两种解决办法：
1). 构建pq对象的时候把encoding参数传进去 d=pq(url='xxx', encoding=&quot;gbk&quot;)
2). 把pyquery/openers.py 的_requests 函数中的 if encoding: resp.encoding = encoding 这两行换成 resp.encoding = encoding or None, 或者把 requests中get_encoding_from_headers 函数的后两行删除掉。
3)（我的情况正好就是没有requests库，然后选择了方法一解决了问题）</code></pre>
]]></content>
		</item>
		
		<item>
			<title>命名规范</title>
			<link>https://blog.v5u.win/posts/system/system-%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</link>
			<pubDate>Tue, 08 Nov 2016 14:39:03 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</guid>
			<description>http://yemengying.com/2016/06/25/cleanCode4naming/</description>
			<content type="html"><![CDATA[<p><a href="http://yemengying.com/2016/06/25/cleanCode4naming/">http://yemengying.com/2016/06/25/cleanCode4naming/</a></p>
]]></content>
		</item>
		
		<item>
			<title>命名规范</title>
			<link>https://blog.v5u.win/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</link>
			<pubDate>Tue, 08 Nov 2016 06:39:03 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</guid>
			<description>http://yemengying.com/2016/06/25/cleanCode4naming/</description>
			<content type="html"><![CDATA[<p><a href="http://yemengying.com/2016/06/25/cleanCode4naming/">http://yemengying.com/2016/06/25/cleanCode4naming/</a></p>
]]></content>
		</item>
		
		<item>
			<title>数据结构</title>
			<link>https://blog.v5u.win/posts/system/system-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
			<pubDate>Mon, 07 Nov 2016 22:13:26 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
			<description>顺序表 链表 栈和队列 散列表 树结构 适合表述层次关系 图结构</description>
			<content type="html"><![CDATA[<ul>
<li>
<p>顺序表</p>
</li>
<li>
<p>链表</p>
</li>
<li>
<p>栈和队列</p>
</li>
<li>
<p>散列表</p>
</li>
<li>
<p>树结构</p>
<p>适合表述层次关系</p>
</li>
<li>
<p>图结构</p>
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>数据结构</title>
			<link>https://blog.v5u.win/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
			<pubDate>Mon, 07 Nov 2016 14:13:26 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
			<description>顺序表 链表 栈和队列 散列表 树结构 适合表述层次关系 图结构</description>
			<content type="html"><![CDATA[<ul>
<li>
<p>顺序表</p>
</li>
<li>
<p>链表</p>
</li>
<li>
<p>栈和队列</p>
</li>
<li>
<p>散列表</p>
</li>
<li>
<p>树结构</p>
<p>适合表述层次关系</p>
</li>
<li>
<p>图结构</p>
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Python_pyspider</title>
			<link>https://blog.v5u.win/posts/python/python-pyspider/</link>
			<pubDate>Wed, 02 Nov 2016 10:34:41 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/python/python-pyspider/</guid>
			<description>mac 下pyspider的安装 安装环境：OS X EI Capitan 版本 10.11.6 Python2.7 此文章书写原因：经过简单命令pip install pyspider安装失败后，各种解决问题不胜其烦，</description>
			<content type="html"><![CDATA[<h3 id="mac-下pyspider的安装">mac 下pyspider的安装</h3>
<p>安装环境：<code>OS X EI Capitan 版本 10.11.6    Python2.7</code></p>
<p>此文章书写原因：<code>经过简单命令pip install pyspider安装失败后，各种解决问题不胜其烦，问题不断。</code></p>
<p>失败原因：<code>EI Capitan 引入了SIP机制（System Integrity Protection）默认下系统启动SIP系统完整性保护机制，无论是对于硬盘还是运行时的进程 限制对系统目录的写操作</code></p>
<p>安装成功命令：<code>pip install pyspider —user -U (基于用户的权限来安装模块包)</code></p>
<p>我最终还是放弃了pyspider的使用，对于一名Python小白来说，花在安装爬虫环境的时间太多了，问题也太多，时间效率很不合算。</p>
<p>现在转而使用了一些简单的库BeautifulSoup和PyQuery，两个都是很优秀的html解析库。</p>
<p>熟悉jQuery语法的人推荐使用PyQuery,PyQuery据说是严格按照jQuery语法实现的一套Python解析库。</p>
<p>其他人可以尝试一下BeautifulSoup，简洁而强大。</p>
]]></content>
		</item>
		
		<item>
			<title>AnyBidirectionalCollection</title>
			<link>https://blog.v5u.win/posts/swift/swift-anybidirectionalcollection/</link>
			<pubDate>Thu, 27 Oct 2016 20:01:25 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/swift/swift-anybidirectionalcollection/</guid>
			<description>A type-erased wrapper over any collection with indices that support bidirectional traversal. 一种类型擦除的集合(索引支持双向遍历)</description>
			<content type="html"><![CDATA[<p>A type-erased wrapper over any collection with indices that support bidirectional traversal.</p>
<p>一种类型擦除的集合(索引支持双向遍历)</p>
]]></content>
		</item>
		
		<item>
			<title>as as! as?</title>
			<link>https://blog.v5u.win/posts/swift/swift-as/</link>
			<pubDate>Wed, 26 Oct 2016 13:52:46 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/swift/swift-as/</guid>
			<description>*title: as as! as? date: 2016-10-26 13:52:46 tags: as categories: Swiftid: 2 Swift开发之 is、 as、as!、as?三种类型转换操作符 1，as使用场合 （1）从派生类转换为基类，向上转型（up</description>
			<content type="html"><![CDATA[<ul>
<li>
<ul>
<li>*title: as as! as?</li>
</ul>
</li>
</ul>
<p>date: 2016-10-26 13:52:46</p>
<p>tags: as</p>
<p>categories: Swift<!-- raw HTML omitted --></p>
<h2 id="id-2">id: 2</h2>
<p>Swift开发之 is、 as、as!、as?三种类型转换操作符</p>
<p>1，as使用场合</p>
<p>（1）从派生类转换为基类，向上转型（upcasts）</p>
<p>class Animal {}</p>
<p>class Cat: Animal {}</p>
<p>let cat = Cat()</p>
<p>let animal = cat as Animal</p>
<p>（2）消除二义性，数值类型转换</p>
<p>let num1 = 42 as CGFloat</p>
<p>let num2 = 42 as Int</p>
<p>let num3 = 42.5 as Int</p>
<p>let num4 = (42 / 2) as Double</p>
<p>（3）switch 语句中进行模式匹配</p>
<p>如果不知道一个对象是什么类型，你可以通过switch语法检测它的类型，并且尝试在不同的情况下使用对应的类型进行相应的处理。</p>
<p>switch animal {</p>
<p>case let cat as Cat:</p>
<p>    print(“如果是Cat类型对象，则做相应处理”)</p>
<p>case let dog as Dog:</p>
<p>    print(“如果是Dog类型对象，则做相应处理”)</p>
<p>default: break</p>
<p>}</p>
<p>2，as!使用场合</p>
<p>向下转型（Downcasting）时使用。由于是强制类型转换，如果转换失败会报 runtime 运行错误。</p>
<p>class Animal {}</p>
<p>class Cat: Animal {}</p>
<p>let animal :Animal  = Cat()</p>
<p>let cat = animal as! Cat</p>
<p>3，as?使用场合</p>
<p>as? 和 as! 操作符的转换规则完全一样。但 as? 如果转换不成功的时候便会返回一个 nil 对象。成功的话返回可选类型值（optional），需要我们拆包使用。</p>
<p>由于 as? 在转换失败的时候也不会出现错误，所以对于如果能确保100%会成功的转换则可使用 as!，否则使用 as?</p>
<p>let animal:Animal = Cat()</p>
<p>if let cat = animal as? Cat{</p>
<p>    print(“cat is not nil”)</p>
<p>} else {</p>
<p>    print(“cat is nil”)</p>
<p>}</p>
<p>4，is使用场合</p>
<p>用类型检查操作符（<code>is</code>）来检查一个实例是否属于特定子类型。若实例属于那个子类型，类型检查操作符返回 <code>true</code>，否则返回 <code>false</code>。</p>
]]></content>
		</item>
		
		<item>
			<title>swift Enum</title>
			<link>https://blog.v5u.win/posts/swift/swift-enum/</link>
			<pubDate>Tue, 25 Oct 2016 19:50:02 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/swift/swift-enum/</guid>
			<description>普通创建 enum SomeEnum: NSInteger { case A case B case C } 可以在Objective-C中使用的（添加@objc 关键字） @objc enum Bear: Int { case Black, Grizzly, Polar }</description>
			<content type="html"><![CDATA[<p>普通创建</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span><span style="color:#66d9ef">enum</span> <span style="color:#a6e22e">SomeEnum</span>: NSInteger
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> A
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> B
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> C
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>可以在Objective-C中使用的（添加@objc 关键字）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span><span style="color:#66d9ef">@objc</span> <span style="color:#66d9ef">enum</span> <span style="color:#a6e22e">Bear</span>: Int {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> Black, Grizzly, Polar
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>MySQL</title>
			<link>https://blog.v5u.win/posts/database/db-mysql/</link>
			<pubDate>Fri, 21 Oct 2016 13:27:06 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/database/db-mysql/</guid>
			<description>MYSQL 经常使用tips terminal登录：路径 -u 用户名 -p //mac下 /usr/local/mysql/bin/mysql -u root -p 更改初始密码：set password for &amp;lsquo;root&amp;rsquo;@&amp;rsquo;localhost&amp;rsquo; = password(&amp;rsquo;newPassword&amp;rsquo;); db 操作 * show databases; * create NEW_DB; * drop NEW_DB; * use DBname; table 操作</description>
			<content type="html"><![CDATA[<h3 id="mysql-经常使用tips">MYSQL 经常使用tips</h3>
<ul>
<li>terminal登录：路径 -u 用户名 -p //mac下 /usr/local/mysql/bin/mysql -u root -p</li>
<li>更改初始密码：set password for &lsquo;root&rsquo;@&rsquo;localhost&rsquo; = password(&rsquo;newPassword&rsquo;);</li>
</ul>
<h4 id="db-操作">db 操作</h4>
<pre tabindex="0"><code>* show databases;
* create NEW_DB;
* drop NEW_DB;
* use DBname;
</code></pre><h4 id="table-操作">table 操作</h4>
<pre tabindex="0"><code>* CREATE TABLE table_name (column_name column_type);
* DROP TABLE table_name ;
* INSERT INTO table_name ( field1, field2,...fieldN )
                       VALUES
                       ( value1, value2,...valueN );
* SELECT column_name,column_name
FROM table_name
[WHERE Clause]
[OFFSET M ][LIMIT N]
* DELETE FROM table_name [WHERE Clause]
</code></pre><h4 id="brew安装mysql后的提示">brew安装MySQL后的提示</h4>
<pre tabindex="0"><code>==&gt; ./mysql-test-run.pl status --vardir=/tmp/d20171222-28458-qrce7m
mysql的安装地址在这里
==&gt; /usr/local/homebrew/Cellar/mysql/5.7.20/bin/mysqld --initialize-insecure --user=fanjinlong --basedir=/usr/
==&gt; Caveats
我们已经为你安装了 MySQL数据库，有一个没有密码的root账户，如果要设置的话运行：
We&#39;ve installed your MySQL database without a root password. To secure it run:
    mysql_secure_installation
MySQL配置的默认只允许从本地连接，连接的换运行命令：mysql -uroot
MySQL is configured to only allow connections from localhost by default

To connect run:
    mysql -uroot
启动mysql 重新restart：
To have launchd start mysql now and restart at login:
  brew services start mysql
  或者如果你不想、不需要一个后台服务你可以只运行：
Or, if you don&#39;t want/need a background service you can just run:
  mysql.server start
==&gt; Summary
</code></pre><p>创建my.cnf配置文件</p>
<p>1.首先需要知道系统是按如下顺序去找my.cnf：</p>
<p>i.    /etc/my.cnf
ii.   /etc/mysql/my.cnf
iii.  /usr/local/etc/my.cnf
iv.  ~/.my.cnf</p>
<p>2.所以就在/etc下创建my.cnf</p>
<p>$ cd /etc</p>
<p>$ sudo vim my.cnf</p>
<p>配置文件内容如下：</p>
<p><a href="https://www.mmcaijing.com/2076.html">www.mmcaijing.com/2076.html</a></p>
<h4 id="navicat-无法连接通过brew-安装的-mysql">Navicat 无法连接通过brew 安装的 mysql</h4>
<p>提醒一句：如果直接 mysql 是 镜像市场直接下载的 记得配置：</p>
<p>​    MYSQL_ROOT_PASSWORD：你的密码</p>
<p>错误：</p>
<p>Client does not support authentication protocol requested by server; consider upgrading MySQL client</p>
<p>解决方案</p>
<ol>
<li>先登录：</li>
</ol>
<pre tabindex="0"><code>终端执行
mysql -u root -p
#接着输入你的密码
</code></pre><ol start="2">
<li>解决：</li>
</ol>
<pre tabindex="0"><code>ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;你的密码&#39;;

ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;你的密码&#39;;

SELECT plugin FROM mysql.user WHERE User = &#39;root&#39;;
</code></pre>]]></content>
		</item>
		
		<item>
			<title>如何选择编程语言</title>
			<link>https://blog.v5u.win/posts/system/system-%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link>
			<pubDate>Wed, 19 Oct 2016 10:20:13 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</guid>
			<description>学习某个技能，不是单纯为了哪个技能更有前途，而是因为以下几种原因： 解决问题需要用到他； 自己在这方面有天赋能很快的掌握它，技不压身； 学习他能获</description>
			<content type="html"><![CDATA[<p>学习某个技能，不是单纯为了哪个技能更有前途，而是因为以下几种原因：</p>
<ol>
<li>
<p>解决问题需要用到他；</p>
</li>
<li>
<p>自己在这方面有天赋能很快的掌握它，技不压身；</p>
</li>
<li>
<p>学习他能获得对自己有益的一种新的思路；</p>
</li>
<li>
<p>自己爱用他</p>
</li>
</ol>
<p>想做web界面，学HTML,CSS,JavaScript</p>
<p>想做小成本网站，学php/MySQL (或 ROR)</p>
<p>想入门编程，学python (Stanford 的选择)</p>
<p>想做企业级开发，学JEE</p>
<p>想做iOS开发，学objC和cocoa</p>
<p>想做系统开发，学linux/shell/c/cpp</p>
<p>想做DBA，折腾DBMS 和各种sql</p>
]]></content>
		</item>
		
		<item>
			<title>Xcode实用快捷键收集</title>
			<link>https://blog.v5u.win/posts/xcode/xcode-%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
			<pubDate>Tue, 20 Sep 2016 13:51:51 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/xcode/xcode-%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
			<description>整行移动 option+commend+[] 当前页快速定位：ctl+6 项目中file间快速定位：shift+cmd+o 删除光标右边的字符：Ctrl+D 删除本行：Ctrl+K 光</description>
			<content type="html"><![CDATA[<pre tabindex="0"><code>整行移动 option+commend+[]
当前页快速定位：ctl+6
项目中file间快速定位：shift+cmd+o
删除光标右边的字符：Ctrl+D
删除本行：Ctrl+K
光标移动到上一行：Ctrl+P
移动光标到下一行：Ctrl + N
折叠全部方法实现：shift+option+commend+left
显示自动提示：ESC
</code></pre>]]></content>
		</item>
		
		<item>
			<title>weak-unowned</title>
			<link>https://blog.v5u.win/posts/swift/swift-weak-unowned/</link>
			<pubDate>Mon, 19 Sep 2016 18:11:47 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/swift/swift-weak-unowned/</guid>
			<description>swift weak和unowned 的区别 unowned 设置以后即使它原来引用的内容已经被释放了，它仍然会保持对被已经释放了的对象的一个 &amp;ldquo;无效的&amp;rd</description>
			<content type="html"><![CDATA[<h3 id="swift-weak和unowned-的区别">swift weak和unowned 的区别</h3>
<p><code>unowned</code> 设置以后即使它原来引用的内容已经被释放了，它仍然会保持对被已经释放了的对象的一个 &ldquo;无效的&rdquo; 引用，它不能是 Optional 值，也不会被指向 <code>nil</code>。如果你尝试调用这个引用的方法或者访问成员属性的话，程序就会崩溃。而 <code>weak</code> 则友好一些，在引用的内容被释放后，标记为 <code>weak</code> 的成员将会自动地变成 <code>nil</code> (因此被标记为 @<code>weak</code> 的变量一定需要是 Optional 值)。关于两者使用的选择，Apple 给我们的建议是如果能够确定在访问时不会已被释放的话，尽量使用 <code>unowned</code>，如果存在被释放的可能，那就选择用 <code>weak</code>。</p>
]]></content>
		</item>
		
		<item>
			<title>Swift3更改</title>
			<link>https://blog.v5u.win/posts/swift/swift-swift3%E6%9B%B4%E6%94%B9/</link>
			<pubDate>Sun, 18 Sep 2016 13:51:51 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/swift/swift-swift3%E6%9B%B4%E6%94%B9/</guid>
			<description>升级Swift3后代码的更改差异 before after error as NSError error UIColor().blackColor() UIColor().balck xxx.hidden xxx.isHidden 所有的bool属性，都+前缀：is private fileprivate NSBundle Bundle func fetchInfo(complete: () -&amp;gt; ()) {} func fetchInfo(_ complete: () -&amp;gt; ()) {} function的参</description>
			<content type="html"><![CDATA[<h3 id="升级swift3后代码的更改差异">升级Swift3后代码的更改差异</h3>
<table>
<thead>
<tr>
<th style="text-align:left">before</th>
<th style="text-align:left">after</th>
<th style="text-align:right"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">error as NSError</td>
<td style="text-align:left">error</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">UIColor().blackColor()</td>
<td style="text-align:left">UIColor().balck</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">xxx.hidden</td>
<td style="text-align:left">xxx.isHidden</td>
<td style="text-align:right">所有的bool属性，都+前缀：is</td>
</tr>
<tr>
<td style="text-align:left">private</td>
<td style="text-align:left">fileprivate</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">NSBundle</td>
<td style="text-align:left">Bundle</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">func fetchInfo(complete: () -&gt; ()) {}</td>
<td style="text-align:left">func fetchInfo(_ complete: () -&gt; ()) {}</td>
<td style="text-align:right">function的参数命名必需添加外部访问参数名或_</td>
</tr>
<tr>
<td style="text-align:left">setValuesForKeysWithDictionary</td>
<td style="text-align:left">setValuesForKeys</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">MBProgressHUD.hideHUDForView()</td>
<td style="text-align:left">MBProgressHUD.hide(for:)</td>
<td style="text-align:right">for ,with ,of,in 等方法名缩短为(xxx:) 形式</td>
</tr>
<tr>
<td style="text-align:left">registerClass()</td>
<td style="text-align:left">register()</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">CGRectMake</td>
<td style="text-align:left">CGRect()</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">forControlEvents: .TouchUpInside)</td>
<td style="text-align:left">for: .touchUpInside)</td>
<td style="text-align:right">精简命名</td>
</tr>
<tr>
<td style="text-align:left">NSIndexPath</td>
<td style="text-align:left">IndexPath</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:right"></td>
</tr>
</tbody>
</table>
]]></content>
		</item>
		
		<item>
			<title>Sublime Text3 使用心得</title>
			<link>https://blog.v5u.win/posts/tools/tools-sublime-text3-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/</link>
			<pubDate>Fri, 09 Sep 2016 14:45:12 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/tools/tools-sublime-text3-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/</guid>
			<description>build nodejs项目 sublime text 3自带build的系统，只需要在tools-&amp;gt;build system-&amp;gt; new build system&amp;amp;#8230; { &amp;quot;shell_cmd&amp;quot;: &amp;quot;node $file&amp;quot;, &amp;quot;selector&amp;quot;: &amp;quot;source.js&amp;quot; } 保存为 node.sublime-b</description>
			<content type="html"><![CDATA[<ol>
<li>build nodejs项目</li>
</ol>
<pre><code>sublime text 3自带build的系统，只需要在tools-&gt;build system-&gt; new build system&amp;#8230;

{
  &quot;shell_cmd&quot;: &quot;node $file&quot;,
  &quot;selector&quot;: &quot;source.js&quot;
}
</code></pre>
<p>保存为 node.sublime-build，就可以使用cmd+shift+b调出窗口选择node编译.</p>
<p>在keymap绑定按键：</p>
<pre><code>{
    &quot;keys&quot;: [&quot;ctrl+c&quot;],
    &quot;command&quot;: &quot;exec&quot;,
    &quot;args&quot;: {
      &quot;kill&quot;: true
    }
  }
</code></pre>
<p>就可以使用快捷键ctrl+c关闭，或者手动点选tools-&gt; cancel build中断。</p>
<p>需要编译es6的代码的话可以考虑用babel，build tools替换成</p>
<pre><code>{
  &quot;shell_cmd&quot;: &quot;babel-node  $file&quot;,
  &quot;selector&quot;: &quot;source.js&quot;
}
</code></pre>
<h3 id="插件安装">插件安装</h3>
<p>shift+commend+p 输入install敲return/Enter，查找插件</p>
<p>我安装的插件：</p>
<ul>
<li>
<p>Babel <code>ES2015语法转化器</code></p>
</li>
<li>
<p>EJS <code>WEB所使用的模板引擎之一</code></p>
</li>
<li>
<p>emmet <code>提高HTML &amp; CSS3编写速度</code></p>
</li>
<li>
<p>ConvertToUTF8 <code>UTF8转换</code></p>
</li>
<li></li>
</ul>
<p>插件使用教程：</p>
<p>emmet : <a href="http://www.w3cplus.com/tools/using-emmet-speed-front-end-web-development.html">http://www.w3cplus.com/tools/using-emmet-speed-front-end-web-development.html</a></p>
]]></content>
		</item>
		
		<item>
			<title>Sublime Texts使用tips</title>
			<link>https://blog.v5u.win/posts/tools/tools-sublime-tips/</link>
			<pubDate>Sun, 04 Sep 2016 00:07:07 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/tools/tools-sublime-tips/</guid>
			<description>多行编辑：control + 点击各行编辑位置 全局修改所有单词：双击单词，comment+control+G 选中一个单词：Command + D 选中</description>
			<content type="html"><![CDATA[<ul>
<li>多行编辑：control + 点击各行编辑位置</li>
<li>全局修改所有单词：双击单词，comment+control+G</li>
<li>选中一个单词：Command + D 选中一个单词及下一个同样的单词</li>
<li>包管理工具：control package ,快捷键：shift+commend+P</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>jekyll using standards 使用规范</title>
			<link>https://blog.v5u.win/posts/blog/blog-jekyll/</link>
			<pubDate>Sat, 03 Sep 2016 15:47:05 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/blog/blog-jekyll/</guid>
			<description>jekyll using standards 使用规范 file命名格式：文章就是普通的文本文件，文件名假定为2012-08-25-hello-world.html。 (注意，文件名必</description>
			<content type="html"><![CDATA[<h2 id="jekyll-using-standards-使用规范">jekyll using standards 使用规范</h2>
<ol>
<li>
<p>file命名格式：文章就是普通的文本文件，文件名假定为2012-08-25-hello-world.html。
(注意，文件名必须为&quot;年-月-日-文章标题.后缀名&quot;的格式。如果网页代码采用html格式，后缀名为html；如果采用markdown格式，后缀名为md。）</p>
</li>
<li>
<p>demo示例：在该文件中，填入以下内容：（注意，行首不能有空格）</p>
</li>
</ol>
<pre tabindex="0"><code>    ---
	layout: default
	title: 你好，世界
	---
	&lt;h2&gt;{{ page.title }}&lt;/h2&gt;
	&lt;p&gt;我的第一篇文章&lt;/p&gt;
    &lt;p&gt;{{ page.date | date_to_string }}&lt;/p&gt;
　　
</code></pre><ol start="3">
<li>
<p>元数据：每篇文章的头部，必须有一个yaml文件头，用来设置一些元数据。
它用三根短划线&quot;&mdash;&quot;，标记开始和结束，里面每一行设置一种元数据。&ldquo;layout:default&rdquo;，表示该文章的模板使用_layouts目录下的default.html文件；&ldquo;title: 你好，世界&rdquo;，表示该文章的标题是&quot;你好，世界&quot;，
如果不设置这个值，默认使用嵌入文件名的标题，即&quot;hello world&quot;。</p>
<p>每个页面都可以有自己的头信息，可以覆盖Jekyll和_config.yml里面的值</p>
<pre tabindex="0"><code>---
layout: post
title: 一步一步创建Jekyll主题
categories: [jekyll github markdown rouge]
date: 2016-9-3 15:47:05
excerpt: &#34;&#34;   # 覆盖清掉文章的摘要
pid: &#34;&#34;       # 新建一个pid的字符串变量
---
</code></pre></li>
<li>
<p>使用模板变量</p>
</li>
</ol>
<pre tabindex="0"><code>	在yaml文件头后面，就是文章的正式内容，里面可以使用模板变量。	{{ page.title }}就是文件头中设置的&#34;你好，世界&#34;，	{{ page.date }}则是嵌入文件名的日期（也可以在文件头重新定义date变量），&#34;| date_to_string&#34;表示将page.date变量转化成人类可读的格式。
</code></pre><ol start="5">
<li>发布</li>
</ol>
<p>前置条件：本地已经安装了jekyll程序。</p>
<pre tabindex="0"><code>本地安装jekyll
sudo gem install jekyll
本地预览：jekyll serve
gh-pages分支push jekyll源文件
master分支push `jekyll build` 后_site文件夹中的文件
GitHub pages服务器并不会自动帮你发布，也不会额外处理什么。
</code></pre><p>注意
config中baseurl根目录不要添加/，post.url解析出来的格式为 /2016/07/25/VPS.html</p>
<p><code>ps: 本地也需要安装builder工具，so 那为什么不用hexo？</code></p>
<p>文章参考:</p>
<p><a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">阮一峰的网络日志</a></p>
<p><a href="http://gitgj.oschina.io/2016/09/03/how-to-create-the-jekyll-theme.html">一步一步创建Jekyll主题</a></p>
]]></content>
		</item>
		
		<item>
			<title>objective-c代码规范</title>
			<link>https://blog.v5u.win/posts/ios/ios-oc-code-style/</link>
			<pubDate>Thu, 25 Aug 2016 16:45:01 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-oc-code-style/</guid>
			<description>Objective-C代码规范 前言 Apple公司提供了一些代码规范文档。如果有内容未在此文档中提及，请参考如下内容： The Objective-C Programming Language Cocoa Fundamentals Guide Coding Guidelines for Cocoa iOS</description>
			<content type="html"><![CDATA[<h1 id="objective-c代码规范">Objective-C代码规范</h1>
<h2 id="前言">前言</h2>
<p>Apple公司提供了一些代码规范文档。如果有内容未在此文档中提及，请参考如下内容：</p>
<ul>
<li><a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjectiveC/Introduction/introObjectiveC.html">The Objective-C Programming Language</a></li>
<li><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CocoaFundamentals/Introduction/Introduction.html">Cocoa Fundamentals Guide</a></li>
<li><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html">Coding Guidelines for Cocoa</a></li>
<li><a href="http://developer.apple.com/library/ios/#documentation/iphone/conceptual/iphoneosprogrammingguide/Introduction/Introduction.html">iOS App Programming Guide</a></li>
</ul>
<h2 id="适用范围">适用范围</h2>
<p>所有适用Objective-C语言开发的项目。 在这里我们希望以类似断言的方式,大家逐条对比写出的代码和下列规范是否吻合,以达到预期的代码的可读性。</p>
<h2 id="代码规范">代码规范</h2>
<h3 id="命名">命名</h3>
<p>基于iOS objective-c项目对于命名，目前分为变量名和函数名两类</p>
<h4 id="变量名">变量名</h4>
<p>在这里我们把描述一个事物或者抽象事物的描述符统称为变量名。变量名目前分为几类: 类名，协议名，组合名，oc类内部变量，全局变量，枚举类型，block类型，结构体类型。
以下分别例举了几种类型的例子。</p>
<h5 id="类名">类名</h5>
<ol>
<li>
<p>使用类前缀</p>
</li>
<li>
<p>需要包含一个名词用来表示这个类是什么,比如 NSString, NSDate, NSScanner等。</p>
<p>@interface MKUserTrackingBarButtonItem : UIBarButtonItem
`<!-- raw HTML omitted --></p>
<h5 id="协议名">协议名</h5>
</li>
<li>
<p>使用类前缀</p>
</li>
<li>
<p>在这里我们需要考虑一个重要的问题,不要滥用关键字,。面列了两个协议，&ldquo;delegate&quot;通常用于实现委托功能,而第二个用于实现的重载。</p>
</li>
<li>
<p>大部分协议实际是包括一组功能相关的函数，并且和具体用于实现的类没有特别紧密的联系。这时候命名要考虑和具体实现类区分开，比如起名为NSLocking而不是NSLock。</p>
</li>
<li>
<p>还有一些协议实际上囊括了很多不相关的功能（或者说像是很多个子协议的组合），这时候就可以和具体的实现类保持一致的名字，比如NSObject。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h5 id="组合名">组合名</h5>
</li>
<li>
<p>需要类前缀</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h5 id="oc类内部变量">oc类内部变量</h5>
</li>
<li>
<p>无需类前缀</p>
</li>
<li>
<p>尽可能使用property定义变量</p>
</li>
<li>
<p>.对于一些BOOL型变量表示状态的一般是动词+时态来表示一个名词,比如loading和selected。有趣的是,他们的getter方法都写成了 is+变量名,这样用起来的时候就更加接近自然语言。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h5 id="全局变量">全局变量</h5>
</li>
<li>
<p>必须添加类前缀</p>
</li>
<li>
<p>对于全局通知,我们需要遵守一个标准结构：“[Name of associated class] + [Did | Will] + [UniquePartOfName] + Notification”</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h5 id="枚举">枚举</h5>
</li>
<li>
<p>类型名及枚举值均需要添加类前缀</p>
</li>
<li>
<p>枚举的具体值的名字为 枚举名+名词3.  使用<code>enum</code>枚举，因为它支持强类型检查及自动完成。SDK现在也支持枚举定义宏<code>NS_ENUm()</code>和<code>NS_OPTION()</code>，前者的各个选项是互斥的，而后者可以通过按位或<code>|</code>来组合使用。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h5 id="block">block</h5>
</li>
<li>
<p>形参名无需前缀，类型名需要添加前缀</p>
</li>
<li>
<p>苹果的习惯是以handler结尾表示他的功能</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h5 id="结构体">结构体</h5>
</li>
<li>
<p>形参名无需前缀，类型名需要添加前缀</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h5 id="通用规则">通用规则</h5>
</li>
<li>
<p>禁止使用小写下划线形式（snake_case）</p>
</li>
<li>
<p>关于类前缀这件事情，对于全局可见的变量需要添加，而对于类的内部变量和结构体内部变量则不需要添加。我们归纳一个原则，即变量的从属关系。对于可以全局可见的类型(类名，协议名，组合名，全局变量，枚举类型，block类型，结构体名)从属于项目名下,由于项目本身无法添加命名空间,即所有属于他名下的变量名需要添加前缀。而类的内部变量从属于他的所属类，结构体内部变量从属于结构体本身。</p>
</li>
<li>
<p>这个原则是讨论在考虑层级的原则下如何给变量名起一个合适的名字。上面我们讨论了从属规则,为了统一原则，我们将有从属的变量和他的从属合并。比如MKUserTrackingBarButtonItem类内部有个NSString变量叫title，我们就合并为MKUserTrackingBarButtonItemTitle。对于绝大部分事物我们都可以认为他是名词或者形容词加名词,在这里诸如userTracking,barButtonItem,title，在一个项目中为了准确的标示一个变量是什么就需要从他的前缀开始逐层向下看他的每个层级是否能准确的标示这个层级是什么。就像上述例子，userTracking是全局唯一的事物，这里的barButtonItem只属于userTracking，而这里的headline又只属于UserTrackingBarButtonItem，这样我们可以很明显的看出这个title准确的标示着什么。</p>
</li>
<li>
<p>这里讨论一下关于单个层级的命名原则，上面论述过可以把变量拆分为几个层级。对于每个层级来说我们倾向于为一个名词或者名词词组，在使用词组时不添加介词，比如写成nameLabel而不是labelForName。在描述一个层级的时候需要考虑几个问题，是什么，实现什么功能，在什么情况下实现这个功能。然后反序写出来 会变成：限定词+功能+类型 这样一种组合方式。当然这三部分在某些情况下都可以缺省，这个放到后面论述。</p>
</li>
<li>
<p>这里讨论在选择用来命名的单词的问题。其实到这里才到了真正的关键点，命名用词的选择！依据apple官方的要求，这里总结了几点。
######清晰
1.官方对于清晰的要求是不要滥用缩写 比如destinationSelection 不要写成destSel。至于何时能用缩写我们下面讨论。
2.注意用词是否有一个明确的含义,当诸如object,data,flag单独作为变量出现的时候，肯定让人无所适从。
######一致
当很多个类有同样作用的变量时，应该保证他们使用同一个变量名。比如tag用于NSView, NSCell, NSControl中。
######使用缩写
在前面的“清晰”的要求中提出了不要滥用缩写，那什么时候推荐用缩写呢？这里有一个准则是使用大家默认的缩写，在apple的官方文档中有一个例子（见下方链接【apple使用的缩写】）。 当然这里不要求所有非一下词汇不可使用缩写，我们这里希望达成几个准则为：
1.缩写不会和别的词汇产生混淆和冲突, 假设我们把Matrix简写成mtx就很容易和其他词(比如max,mix)产生混淆。
2.在项目中要足够常用
3.如果使用就保持全局统一使用,不要同时出现全称和缩写
4.和团队成员达成统一</p>
<p><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/APIAbbreviations.html#//apple_ref/doc/uid/20001285-BCIHCGAE">apple使用的缩写</a></p>
<p>######一些习惯
1.上述我们说一个层级变量起名为 限定词+功能+类型。这里我们有个例外的地方，对于NSString, NSArray, NSNumber, BOOL类型我们无需指定类型。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><a href="http://static.oschina.net/uploads/space/2015/0129/165430_PlEG_1386081.png">一些习惯的例子</a></p>
<h4 id="函数名">函数名</h4>
<p>oc语言实际上很贴近自然语言。先抛开通常作为全局函数用的c/cpp函数，oc的类内部函数通常看起来就像是一个句子。在这个命名规范里不去结合语法分析这个了，一下会根据函数常有的功能去做个分类。</p>
<p>#####以动词开头方法</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>#####以名词开头方法</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>#####回调函数</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>#####一些通用规则和建议
1.参数冒号之前用名词指代明确的参数类型
2.多个参数不需要用and连接
3.一些介词有助于提升函数名的可读性，比如：for，with，from，in，on，at等。</p>
<p>####处理魔术变量
使用常量而非内联的字串literal或魔术数，因为这样能更方便地修改它们。</p>
<p>使用<code>static const</code>常量，禁止使用<code>#define</code>宏来定义变量，使用宏没有类型检查，并易被覆盖定义而很难检测。</p>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>Not:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="dot-notation">Dot-notation</h4>
<p>使用dot-notation(.表示法)来获取/更改property。 Bracket notation([]表示法)适用于其他领域。</p>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>Not:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="property-ampamp-ivar">@property &amp;&amp; ivar</h4>
<p>只能在初始化方法、析构方法和自定义getter/setter里面，直接访问实例变量(ivar)，其他情况只能通过dot-notation访问property。更多内容参见 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmPractical.html#//apple_ref/doc/uid/TP40004447-SW6">here</a>.
不要直接声明实例变量，声明property即可。</p>
<h3 id="格式">格式</h3>
<h4 id="工具">工具</h4>
<p>使用<a href="https://github.com/benoitsan/BBUncrustifyPlugin-Xcode">BBUncrustify</a>来格式化代码，formatter使用Clang，配置文件见<a href=".clang-format">.clang-format</a></p>
<h4 id="spacing">Spacing</h4>
</li>
</ol>
<ul>
<li>
<p>使用4个空格而非tab符缩进，并检查其是否为Xcode预设值。</p>
</li>
<li>
<p>方法的大括号另起一行打开(<code>{</code>)，另起一行关闭(<code>}</code>)</p>
</li>
<li>
<p>其他大括号 (<code>if</code>/<code>else</code>/<code>switch</code>/<code>while</code>/<code>block</code> etc.)在当前行打开，另起一行关闭</p>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
</li>
<li>
<p>方法之间隔一个空行。方法内依据功能的不同，用空行隔开，或者将其提取到新方法内。</p>
</li>
<li>
<p>每个<code>@dynamic</code>或<code>@synthesize</code>占据一行，Xcode4.4以后省略<code>@synthesize</code>。</p>
<h4 id="条件语句">条件语句</h4>
<p>条件语句的body必须被括号包含，即使只有一行。这样便于在body内新增操作而不会出错，同时可读性更强。</p>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>Not:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>or</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="方法">方法</h4>
<p>OC的方法，需要在符号+/-后添加一个空格。前一个参数和后一个中缀之间有且仅有一个空格，比如下方示例的text参数和image中缀之间。</p>
<p><strong>For Example</strong>:</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="变量">变量</h4>
<p>指针变量的*与指针类型中间隔一个空格，与变量名中间无空格，e.g., <code>NSString *text</code> not <code>NSString* text</code> or <code>NSString * text</code>。</p>
<h3 id="注释">注释</h3>
<h4 id="原则">原则</h4>
<p>对外接口必须写注释</p>
<h4 id="注释的类型">注释的类型</h4>
<p>注释可以采用<code>/* */</code>和<code>//</code>两种注释符号，涉及到多行注释时，尽量使用<code>/* */</code>。方法里的注释只能使用<code>//</code>，因为嵌套<code>/**/</code>很可能带来无法预知的问题。</p>
<h4 id="类">类</h4>
<p>Xcode会生成一段默认注释，我们需要在此基础上扩充，加入功能描述和修改记录部分。虽然svn/git能够看到完整的修改记录以及通过blame查找责任人，但是commit太多的时候很难定位。</p>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="方法-1">方法</h4>
<p>方法注释一般出现在.h文件里，.m文件里尽量保持简洁，使用方法名完整描述功能和参数。方法注释使用<a href="https://github.com/onevcat/VVDocumenter-Xcode">VVDocument</a>插件生成，并在每次修改后及时更新。</p>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="其他">其他</h4>
<p>尽量不要出现方法内注释，如有可能将相关代码Extract到新方法里，使用方法名描述其功能。如果必须要要使用方法内注释，使用<code>//</code>注释在所要描述的代码前一行或者同一行末尾。</p>
<h3 id="最佳实践">最佳实践</h3>
<h4 id="interface">@interface</h4>
<p>.h文件中只暴露目前被其他类使用的接口、属性。内部使用的接口、属性在extension（匿名category）中定义，比如IBOutlet等。</p>
<p>在.h实现protocol亦是如此，会暴露该protocol包含的接口。如果外部无需使用相关接口，则移到extesion中。</p>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>Not:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="三目运算符">三目运算符</h4>
<p>只有当能够提高代码的可读性时，才应该使用三目运算符?:，比如单一判断条件。如果有多个判断条件，使用if会更好些。</p>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>Not:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="错误处理">错误处理</h4>
<p>当方法使用引用返回表示错误的参数时，使用返回值判断，而非该错误变量。</p>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>Not:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>在成功的情况下，Apple的一些API会将奇怪的值而非nil写入错误参数，所以不要使用该错误变量来判断。</p>
<h4 id="literals">Literals</h4>
<p><code>NSString</code>, <code>NSDictionary</code>, <code>NSArray</code>和<code>NSNumber</code>的immutable实例应该使用literal来创建，mutable实例也建议通过这种方式及mutableCopy方法来创建。需要注意的是需要做nil检测。</p>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>Not:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="cgrect-functions">CGRect Functions</h4>
<p>使用<a href="http://developer.apple.com/library/ios/#documentation/graphicsimaging/reference/CGGeometry/Reference/reference.html"><code>CGGeometry</code> functions</a>而非结构体的数据成员来获取<code>x</code>, <code>y</code>, <code>width</code>, or <code>height</code>的值。From Apple&rsquo;s <code>CGGeometry</code> reference:</p>
<blockquote>
<p>All functions described in this reference that take CGRect data structures as inputs implicitly standardize those rectangles before calculating their results. For this reason, your applications should avoid directly reading and writing the data stored in the CGRect data structure. Instead, use the functions described here to manipulate rectangles and to retrieve their characteristics.</p>
</blockquote>
</li>
</ul>
<blockquote>
<pre><code>  所有在这里定义、使用CGRect结构体作为输入参数的方法，先对这些矩形做标准化操作，再计算它们的方绘制。所以我们应该直接通过这些方法，而非访问结构体的数据成员来获得这些矩形的属性。
</code></pre>
</blockquote>
<pre><code>**For example:**

&lt;pre&gt;`CGRect frame = self.view.frame;

CGFloat x = CGRectGetMinX(frame);
CGFloat y = CGRectGetMinY(frame);
CGFloat width = CGRectGetWidth(frame);
CGFloat height = CGRectGetHeight(frame);
`&lt;/pre&gt;

**Not:**

&lt;pre&gt;`CGRect frame = self.view.frame;

CGFloat x = frame.origin.x;
CGFloat y = frame.origin.y;
CGFloat width = frame.size.width;
CGFloat height = frame.size.height;
`&lt;/pre&gt;

#### 私有Properties

私有property应该定义在类扩展（匿名类别）中。这样有个好处是，当你需要将其暴露给外部，直接command+x、command+v到.h文件中即可。

**For example:**

&lt;pre&gt;`@interface ZDAdvertisement ()

@property (nonatomic, strong) GADBannerView *googleAdView;
@property (nonatomic, strong) ADBannerView *iAdView;
@property (nonatomic, strong) UIWebView *adXWebView;

@end
`&lt;/pre&gt;

#### 单例

在OC中，使用如下线程安全的方式来创建单例

&lt;pre&gt;`+ (instancetype)sharedInstance {
   static id sharedInstance = nil;

   static dispatch_once_t onceToken;
   dispatch_once(&amp;amp;onceToken, ^{
      sharedInstance = [[self alloc] init];
   });

   return sharedInstance;
}
`&lt;/pre&gt;

这种方式可以防止 [可能的崩溃](http://cocoasamurai.blogspot.com/2011/04/singletons-your-doing-them-wrong.html).

#### 代码组织

函数长度（行数）不应超过2/3屏幕，禁止超过70行。

例外：对于顺序执行的初始化函数，如果其中的过程没有提取为独立方法的必要，则不必限制长度。
</code></pre>
<ul>
<li>
<p>单个文件方法数不应超过30个</p>
</li>
<li>
<p>不要按类别排序（如把IBAction放在一块），应按任务把相关的组合在一起</p>
</li>
<li>
<p>禁止出现超过两层循环的代码，用函数或block替代。</p>
<p>尽早返回错误：</p>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>Not:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h3 id="文件组织">文件组织</h3>
<h4 id="原则-1">原则</h4>
</li>
</ul>
<ol>
<li>
<p>使用group而非folder</p>
</li>
<li>
<p>每个文件按照其类型寻找对应的根group</p>
</li>
<li>
<p>当根group里的文件数量逐渐变多，并出现两种或以上不同功能/类型的文件时，根据功能/类型新建不同的group
例如：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>默认的group结构如下：</p>
<!-- raw HTML omitted -->
</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>objective-c代码规范</title>
			<link>https://blog.v5u.win/objective-c%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</link>
			<pubDate>Thu, 25 Aug 2016 08:45:01 +0000</pubDate>
			
			<guid>https://blog.v5u.win/objective-c%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</guid>
			<description>Objective-C代码规范 前言 Apple公司提供了一些代码规范文档。如果有内容未在此文档中提及，请参考如下内容： The Objective-C Programming Language Cocoa Fundamentals Guide Coding Guidelines for Cocoa iOS</description>
			<content type="html"><![CDATA[<h1 id="objective-c代码规范">Objective-C代码规范</h1>
<h2 id="前言">前言</h2>
<p>Apple公司提供了一些代码规范文档。如果有内容未在此文档中提及，请参考如下内容：</p>
<ul>
<li><a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjectiveC/Introduction/introObjectiveC.html">The Objective-C Programming Language</a></li>
<li><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CocoaFundamentals/Introduction/Introduction.html">Cocoa Fundamentals Guide</a></li>
<li><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html">Coding Guidelines for Cocoa</a></li>
<li><a href="http://developer.apple.com/library/ios/#documentation/iphone/conceptual/iphoneosprogrammingguide/Introduction/Introduction.html">iOS App Programming Guide</a></li>
</ul>
<h2 id="适用范围">适用范围</h2>
<p>所有适用Objective-C语言开发的项目。 在这里我们希望以类似断言的方式,大家逐条对比写出的代码和下列规范是否吻合,以达到预期的代码的可读性。</p>
<h2 id="代码规范">代码规范</h2>
<h3 id="命名">命名</h3>
<p>基于iOS objective-c项目对于命名，目前分为变量名和函数名两类</p>
<h4 id="变量名">变量名</h4>
<p>在这里我们把描述一个事物或者抽象事物的描述符统称为变量名。变量名目前分为几类: 类名，协议名，组合名，oc类内部变量，全局变量，枚举类型，block类型，结构体类型。</p>
<p>以下分别例举了几种类型的例子。</p>
<h5 id="类名">类名</h5>
<ol>
<li>使用类前缀</li>
<li>需要包含一个名词用来表示这个类是什么,比如 NSString, NSDate, NSScanner等。</li>
</ol>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h5 id="协议名">协议名</h5>
<ol>
<li>使用类前缀</li>
<li>在这里我们需要考虑一个重要的问题,不要滥用关键字,。面列了两个协议，”delegate”通常用于实现委托功能,而第二个用于实现的重载。</li>
<li>大部分协议实际是包括一组功能相关的函数，并且和具体用于实现的类没有特别紧密的联系。这时候命名要考虑和具体实现类区分开，比如起名为NSLocking而不是NSLock。</li>
<li>还有一些协议实际上囊括了很多不相关的功能（或者说像是很多个子协议的组合），这时候就可以和具体的实现类保持一致的名字，比如NSObject。</li>
</ol>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h5 id="组合名">组合名</h5>
<ol>
<li>需要类前缀</li>
</ol>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h5 id="oc类内部变量">oc类内部变量</h5>
<ol>
<li>无需类前缀</li>
<li>尽可能使用property定义变量</li>
<li>.对于一些BOOL型变量表示状态的一般是动词+时态来表示一个名词,比如loading和selected。有趣的是,他们的getter方法都写成了 is+变量名,这样用起来的时候就更加接近自然语言。</li>
</ol>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h5 id="全局变量">全局变量</h5>
<ol>
<li>必须添加类前缀</li>
<li>对于全局通知,我们需要遵守一个标准结构：“[Name of associated class] + [Did | Will] + [UniquePartOfName] + Notification”</li>
</ol>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h5 id="枚举">枚举</h5>
<ol>
<li>类型名及枚举值均需要添加类前缀</li>
<li>枚举的具体值的名字为 枚举名+名词</li>
<li>使用<code>enum</code>枚举，因为它支持强类型检查及自动完成。SDK现在也支持枚举定义宏<code>NS_ENUm()</code>和<code>NS_OPTION()</code>，前者的各个选项是互斥的，而后者可以通过按位或<code>|</code>来组合使用。</li>
</ol>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h5 id="block">block</h5>
<ol>
<li>形参名无需前缀，类型名需要添加前缀</li>
<li>苹果的习惯是以handler结尾表示他的功能</li>
</ol>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h5 id="结构体">结构体</h5>
<ol>
<li>形参名无需前缀，类型名需要添加前缀</li>
</ol>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h5 id="通用规则">通用规则</h5>
<ol>
<li>禁止使用小写下划线形式（snake_case）</li>
<li>关于类前缀这件事情，对于全局可见的变量需要添加，而对于类的内部变量和结构体内部变量则不需要添加。我们归纳一个原则，即变量的从属关系。对于可以全局可见的类型(类名，协议名，组合名，全局变量，枚举类型，block类型，结构体名)从属于项目名下,由于项目本身无法添加命名空间,即所有属于他名下的变量名需要添加前缀。而类的内部变量从属于他的所属类，结构体内部变量从属于结构体本身。</li>
<li>这个原则是讨论在考虑层级的原则下如何给变量名起一个合适的名字。上面我们讨论了从属规则,为了统一原则，我们将有从属的变量和他的从属合并。比如MKUserTrackingBarButtonItem类内部有个NSString变量叫title，我们就合并为MKUserTrackingBarButtonItemTitle。对于绝大部分事物我们都可以认为他是名词或者形容词加名词,在这里诸如userTracking,barButtonItem,title，在一个项目中为了准确的标示一个变量是什么就需要从他的前缀开始逐层向下看他的每个层级是否能准确的标示这个层级是什么。就像上述例子，userTracking是全局唯一的事物，这里的barButtonItem只属于userTracking，而这里的headline又只属于UserTrackingBarButtonItem，这样我们可以很明显的看出这个title准确的标示着什么。</li>
<li>这里讨论一下关于单个层级的命名原则，上面论述过可以把变量拆分为几个层级。对于每个层级来说我们倾向于为一个名词或者名词词组，在使用词组时不添加介词，比如写成nameLabel而不是labelForName。在描述一个层级的时候需要考虑几个问题，是什么，实现什么功能，在什么情况下实现这个功能。然后反序写出来 会变成：限定词+功能+类型 这样一种组合方式。当然这三部分在某些情况下都可以缺省，这个放到后面论述。</li>
<li>这里讨论在选择用来命名的单词的问题。其实到这里才到了真正的关键点，命名用词的选择！依据apple官方的要求，这里总结了几点。</li>
</ol>
<pre><code>######清晰

1.官方对于清晰的要求是不要滥用缩写 比如destinationSelection 不要写成destSel。至于何时能用缩写我们下面讨论。

2.注意用词是否有一个明确的含义,当诸如object,data,flag单独作为变量出现的时候，肯定让人无所适从。

######一致

当很多个类有同样作用的变量时，应该保证他们使用同一个变量名。比如tag用于NSView, NSCell, NSControl中。

######使用缩写

在前面的“清晰”的要求中提出了不要滥用缩写，那什么时候推荐用缩写呢？这里有一个准则是使用大家默认的缩写，在apple的官方文档中有一个例子（见下方链接【apple使用的缩写】）。 当然这里不要求所有非一下词汇不可使用缩写，我们这里希望达成几个准则为：

1.缩写不会和别的词汇产生混淆和冲突, 假设我们把Matrix简写成mtx就很容易和其他词(比如max,mix)产生混淆。

2.在项目中要足够常用

3.如果使用就保持全局统一使用,不要同时出现全称和缩写

4.和团队成员达成统一
</code></pre>
<p><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/APIAbbreviations.html#//apple_ref/doc/uid/20001285-BCIHCGAE">apple使用的缩写</a></p>
<p>######一些习惯</p>
<p>1.上述我们说一个层级变量起名为 限定词+功能+类型。这里我们有个例外的地方，对于NSString, NSArray, NSNumber, BOOL类型我们无需指定类型。</p>
<pre><code>2.对于命名一个复数形式的变量,如果它不是NSArray或者NSSet最好指定类型。
3.对于其他类型,比如Image, Indicator这样的特殊类型或UI组件在变量命名的后半部分指定它的类型是有必要的。 尤其对于XXXManager类型的变量写成比如fontManager是必须的,否则无法理解它的含义。
</code></pre>
<p><a href="http://static.oschina.net/uploads/space/2015/0129/165430_PlEG_1386081.png">一些习惯的例子</a></p>
<h4 id="函数名">函数名</h4>
<p>oc语言实际上很贴近自然语言。先抛开通常作为全局函数用的c/cpp函数，oc的类内部函数通常看起来就像是一个句子。在这个命名规范里不去结合语法分析这个了，一下会根据函数常有的功能去做个分类。</p>
<p>#####以动词开头方法</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<pre><code>1.对于以动词开头的函数,表示去执行某一个任务。
2.我们一般定义他的返回值为void, 当需要得到他是否执行成功的状态时可以以BOOL作为返回值
3.有一个例外是init开头一般是用于构造，返回一个构造的实例。
</code></pre>
<p>#####以名词开头方法</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<pre><code>1.对于以动词开头的函数,表示返回某一个具体事物。
2.当函数作为回调函数存在时，它是例外的
</code></pre>
<p>#####回调函数</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<pre><code>1.消息发送者必须作为参数。如果函数参数只有消息发送者本身，将他放到函数最后。如果有2个及以上参数则放到第一位。
2.did和will经常用在回调函数当做标记'已经发生'或者'将要发生'。
3.'should'应用场景通常是询问代理行为是否应该发生,通常返回BOOL。
4.通过通知的回调一般来说所有数据都放在notification内部，所以不需要返回值以及其他参数
5.所有回调函数均以名词开头,标示是什么引发的回调。我们可以认为去掉开头的名词和调用者参数，基本和我们之前定的规范一致。
</code></pre>
<p>#####一些通用规则和建议</p>
<p>1.参数冒号之前用名词指代明确的参数类型</p>
<p>2.多个参数不需要用and连接</p>
<p>3.一些介词有助于提升函数名的可读性，比如：for，with，from，in，on，at等。</p>
<p>####处理魔术变量</p>
<p>使用常量而非内联的字串literal或魔术数，因为这样能更方便地修改它们。</p>
<p>使用<code>static const</code>常量，禁止使用<code>#define</code>宏来定义变量，使用宏没有类型检查，并易被覆盖定义而很难检测。</p>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>Not:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="dot-notation">Dot-notation</h4>
<p>使用dot-notation(.表示法)来获取/更改property。 Bracket notation([]表示法)适用于其他领域。</p>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>Not:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="property--ivar">@property &amp;&amp; ivar</h4>
<p>只能在初始化方法、析构方法和自定义getter/setter里面，直接访问实例变量(ivar)，其他情况只能通过dot-notation访问property。更多内容参见 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmPractical.html#//apple_ref/doc/uid/TP40004447-SW6">here</a>.</p>
<p>不要直接声明实例变量，声明property即可。</p>
<h3 id="格式">格式</h3>
<h4 id="工具">工具</h4>
<p>使用<a href="https://github.com/benoitsan/BBUncrustifyPlugin-Xcode">BBUncrustify</a>来格式化代码，formatter使用Clang，配置文件见&lt;.clang-format&gt;</p>
<h4 id="spacing">Spacing</h4>
<ul>
<li>使用4个空格而非tab符缩进，并检查其是否为Xcode预设值。</li>
<li>方法的大括号另起一行打开(<code>{</code>)，另起一行关闭(<code>}</code>)</li>
<li>其他大括号 (<code>if</code>/<code>else</code>/<code>switch</code>/<code>while</code>/<code>block</code> etc.)在当前行打开，另起一行关闭</li>
</ul>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<ul>
<li>方法之间隔一个空行。方法内依据功能的不同，用空行隔开，或者将其提取到新方法内。</li>
<li>每个<code>@dynamic</code>或<code>@synthesize</code>占据一行，Xcode4.4以后省略<code>@synthesize</code>。</li>
</ul>
<h4 id="条件语句">条件语句</h4>
<p>条件语句的body必须被括号包含，即使只有一行。这样便于在body内新增操作而不会出错，同时可读性更强。</p>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>Not:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>or</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="方法">方法</h4>
<p>OC的方法，需要在符号+/-后添加一个空格。前一个参数和后一个中缀之间有且仅有一个空格，比如下方示例的text参数和image中缀之间。</p>
<p><strong>For Example</strong>:</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="变量">变量</h4>
<p>指针变量的*与指针类型中间隔一个空格，与变量名中间无空格，e.g., <code>NSString *text</code> not <code>NSString* text</code> or <code>NSString * text</code>。</p>
<h3 id="注释">注释</h3>
<h4 id="原则">原则</h4>
<p>对外接口必须写注释</p>
<h4 id="注释的类型">注释的类型</h4>
<p>注释可以采用<code>/* */</code>和<code>//</code>两种注释符号，涉及到多行注释时，尽量使用<code>/* */</code>。方法里的注释只能使用<code>//</code>，因为嵌套<code>/**/</code>很可能带来无法预知的问题。</p>
<h4 id="类">类</h4>
<p>Xcode会生成一段默认注释，我们需要在此基础上扩充，加入功能描述和修改记录部分。虽然svn/git能够看到完整的修改记录以及通过blame查找责任人，但是commit太多的时候很难定位。</p>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="方法-1">方法</h4>
<p>方法注释一般出现在.h文件里，.m文件里尽量保持简洁，使用方法名完整描述功能和参数。方法注释使用<a href="https://github.com/onevcat/VVDocumenter-Xcode">VVDocument</a>插件生成，并在每次修改后及时更新。</p>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="其他">其他</h4>
<p>尽量不要出现方法内注释，如有可能将相关代码Extract到新方法里，使用方法名描述其功能。如果必须要要使用方法内注释，使用<code>//</code>注释在所要描述的代码前一行或者同一行末尾。</p>
<h3 id="最佳实践">最佳实践</h3>
<h4 id="interface">@interface</h4>
<p>.h文件中只暴露目前被其他类使用的接口、属性。内部使用的接口、属性在extension（匿名category）中定义，比如IBOutlet等。</p>
<p>在.h实现protocol亦是如此，会暴露该protocol包含的接口。如果外部无需使用相关接口，则移到extesion中。</p>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>Not:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="三目运算符">三目运算符</h4>
<p>只有当能够提高代码的可读性时，才应该使用三目运算符?:，比如单一判断条件。如果有多个判断条件，使用if会更好些。</p>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>Not:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="错误处理">错误处理</h4>
<p>当方法使用引用返回表示错误的参数时，使用返回值判断，而非该错误变量。</p>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>Not:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>在成功的情况下，Apple的一些API会将奇怪的值而非nil写入错误参数，所以不要使用该错误变量来判断。</p>
<h4 id="literals">Literals</h4>
<p><code>NSString</code>, <code>NSDictionary</code>, <code>NSArray</code>和<code>NSNumber</code>的immutable实例应该使用literal来创建，mutable实例也建议通过这种方式及mutableCopy方法来创建。需要注意的是需要做nil检测。</p>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>Not:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="cgrect-functions">CGRect Functions</h4>
<p>使用<a href="http://developer.apple.com/library/ios/#documentation/graphicsimaging/reference/CGGeometry/Reference/reference.html"><code>CGGeometry</code> functions</a>而非结构体的数据成员来获取<code>x</code>, <code>y</code>, <code>width</code>, or <code>height</code>的值。From Apple’s <code>CGGeometry</code> reference:</p>
<blockquote>
<p>All functions described in this reference that take CGRect data structures as inputs implicitly standardize those rectangles before calculating their results. For this reason, your applications should avoid directly reading and writing the data stored in the CGRect data structure. Instead, use the functions described here to manipulate rectangles and to retrieve their characteristics.</p>
</blockquote>
<blockquote>
<p>所有在这里定义、使用CGRect结构体作为输入参数的方法，先对这些矩形做标准化操作，再计算它们的方绘制。所以我们应该直接通过这些方法，而非访问结构体的数据成员来获得这些矩形的属性。</p>
</blockquote>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>Not:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="私有properties">私有Properties</h4>
<p>私有property应该定义在类扩展（匿名类别）中。这样有个好处是，当你需要将其暴露给外部，直接command+x、command+v到.h文件中即可。</p>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h4 id="单例">单例</h4>
<p>在OC中，使用如下线程安全的方式来创建单例</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>这种方式可以防止 <a href="http://cocoasamurai.blogspot.com/2011/04/singletons-your-doing-them-wrong.html">可能的崩溃</a>.</p>
<h4 id="代码组织">代码组织</h4>
<p>函数长度（行数）不应超过2/3屏幕，禁止超过70行。</p>
<p>例外：对于顺序执行的初始化函数，如果其中的过程没有提取为独立方法的必要，则不必限制长度。</p>
<ul>
<li>单个文件方法数不应超过30个</li>
<li>不要按类别排序（如把IBAction放在一块），应按任务把相关的组合在一起</li>
<li>禁止出现超过两层循环的代码，用函数或block替代。</li>
</ul>
<p>尽早返回错误：</p>
<p><strong>For example:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>Not:</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h3 id="文件组织">文件组织</h3>
<h4 id="原则-1">原则</h4>
<ol>
<li>使用group而非folder</li>
<li>每个文件按照其类型寻找对应的根group</li>
<li>当根group里的文件数量逐渐变多，并出现两种或以上不同功能/类型的文件时，根据功能/类型新建不同的group</li>
</ol>
<pre><code>例如：

/Resources/main_background@2x.png
=&gt;/Resources/Main/main_background@2x.png
或者
/Library/Recommend/RecommendData.m
=&gt;/Library/Recommend/Model/RecommendData.m
</code></pre>
<p>默认的group结构如下：</p>
<pre><code>├── Application//应用相关，包括AppDelegate、Info.plist、main.m、.pch
├── Library//纯逻辑代码
│   └── Categories//存放类别
├── Models//应用级别的model，模块级别的放在对应的逻辑代码抽离的group里面
├── Resources//资源，常见的如图片、字体、数据、DataModel
│   └── Images//图片
│       └── App//启动封面、icon
└── ViewControllers//存放ViewController及对应的xib或storyboard
</code></pre>
]]></content>
		</item>
		
		<item>
			<title>Express</title>
			<link>https://blog.v5u.win/posts/nodejs/nodejs-express/</link>
			<pubDate>Wed, 17 Aug 2016 11:05:24 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/nodejs/nodejs-express/</guid>
			<description>*title: Express date: 2016-08-17 11:05:24 tags: express category: Expressid: 5 nodejs + express 学习记录 设置入口文件 app.use(express.static(__dirname + &#39;/public&#39;)); ###use方法 use是express注册中间件的方法，它返回一个函数。 中间件（midd</description>
			<content type="html"><![CDATA[<ul>
<li>
<ul>
<li>*title: Express</li>
</ul>
</li>
</ul>
<p>date: 2016-08-17 11:05:24</p>
<p>tags: express</p>
<p>category: Express<!-- raw HTML omitted --></p>
<h2 id="id-5">id: 5</h2>
<p>nodejs + express 学习记录</p>
<p>设置入口文件</p>
<p><code>app.use(express.static(__dirname + '/public'));</code></p>
<p>###use方法</p>
<p>use是express注册中间件的方法，它返回一个函数。</p>
<p>中间件（middleware）就是处理HTTP请求的函数。它最大的特点就是，一个中间件处理完，再传递给下一个中间件。App实例在运行过程中，会调用一系列的中间件。</p>
<h3 id="set方法用于指定变量的值">set方法用于指定变量的值。</h3>
<p>app.set(“views”, __dirname + “/views”)</p>
<p>为系统变量views指定值</p>
<p>app.set(“view engine”, “jade”)</p>
]]></content>
		</item>
		
		<item>
			<title>struct 和class的区别</title>
			<link>https://blog.v5u.win/posts/swift/swift-struct-%E5%92%8Cclass%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
			<pubDate>Mon, 15 Aug 2016 15:58:34 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/swift/swift-struct-%E5%92%8Cclass%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
			<description>struct是值类型，值类型在传递和赋值时将进行复制。 class是`引用类型`，引用类型只会使用引用对象的一个『指向』&amp;lt;/p&amp;gt; c</description>
			<content type="html"><![CDATA[<ol>
<li>struct是<code>值类型</code>，值类型在传递和赋值时将进行复制。</li>
</ol>
<pre><code>class是`引用类型`，引用类型只会使用引用对象的一个『指向』&lt;/p&gt; 
</code></pre>
<ol start="2">
<li>class有这几个功能struct没有的：</li>
</ol>
<pre><code>class可以继承，这样子类可以使用父类的特性和方法
类型转换可以在runtime的时候检查和解释一个实例的类型
可以用deinit来释放资源
一个类可以被多次引用
</code></pre>
<p>struct也有这样几个优势：</p>
<pre><code>结构较小，适用于复制操作，相比于一个class的实例被多次引用更加安全
无须担心内存memory leak或者多线程冲突问题
</code></pre>
<p>顺便提一下，array在swift中是用struct实现的。Apple重写过一次array，然后复制就是深度拷贝了。猜测复制是类似参照那样，通过栈上指向堆上位置的指针来实现的。而对于它的复制操作，也是在相对空间较为宽裕的堆上来完成的，所以性能上还是不错的。</p>
]]></content>
		</item>
		
		<item>
			<title>use sublime Text</title>
			<link>https://blog.v5u.win/posts/tools/tools-sublime-setting/</link>
			<pubDate>Wed, 10 Aug 2016 00:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/tools/tools-sublime-setting/</guid>
			<description>如何设置折行 &amp;lsquo;将配置文件里 添加word_wrap:true 字段&amp;rsquo; { &amp;#34;color_scheme&amp;#34;: &amp;#34;Packages/Color Scheme - Default/Monokai.tmTheme&amp;#34;, &amp;#34;font_size&amp;#34;: 13, &amp;#34;word_wrap&amp;#34;: true, &amp;#34;ignored_packages&amp;#34;: [ &amp;#34;Vintage&amp;#34; ] } 痛点1：每次编写完Py</description>
			<content type="html"><![CDATA[<h3 id="如何设置折行">如何设置折行</h3>
<p>&lsquo;将配置文件里 添加word_wrap:true 字段&rsquo;</p>
<pre tabindex="0"><code>{
	&#34;color_scheme&#34;: &#34;Packages/Color Scheme - Default/Monokai.tmTheme&#34;,
	&#34;font_size&#34;: 13,
	&#34;word_wrap&#34;: true,
	&#34;ignored_packages&#34;:
	[
		&#34;Vintage&#34;
	]
}
</code></pre><pre tabindex="0"><code>痛点1：每次编写完Python文件后都要切到terminal下输入python fileName.py命令执行文件。
解决：mac版sublime text编辑器使用shift+command+b选择Python 直接执行文件
</code></pre><pre tabindex="0"><code>痛点2：sublime默认执行的Python版本是系统默认的，不能直接使用Python3来执行Python文件
解决：Tools--&gt;Build System--&gt;New Build System 写入：
{
	&#34;shell_cmd&#34;: &#34;/usr/local/homebrew/bin/python3 ${file}&#34;,
	&#34;selector&#34; :&#34;source.python&#34;,
	&#34;file_regex&#34;:&#34;^(...*?):[0-9]:?([0-9]*)&#34;,
	&#34;working_dir&#34;:&#34;${file_path}&#34;,
	&#34;env&#34;: {&#34;PYTHONIOENCODING&#34;: &#34;utf8&#34;},
}
保存为/Packages/User/python3.sublime-build
然后选择环境为python3即可

ps: `env` //设置编码格式
`shell_cmd` 使用的路径，通过在terminal中执行which Python3 获得
</code></pre>]]></content>
		</item>
		
		<item>
			<title>函数式编程</title>
			<link>https://blog.v5u.win/posts/system/system-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
			<pubDate>Fri, 05 Aug 2016 10:46:42 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
			<description>函数式编程的三大特性： •immutable data 不可变数据： 像Clojure一样，默认上变量是不可变的，如果你要改变变量，你需要把变量copy出</description>
			<content type="html"><![CDATA[<h3 id="函数式编程的三大特性">函数式编程的三大特性：</h3>
<p>•immutable data 不可变数据：</p>
<p>像Clojure一样，默认上变量是不可变的，如果你要改变变量，你需要把变量copy出去修改。这样一来，可以让你的程序少很多Bug。因为，程序中的状态不好维护，在并发的时候更不好维护。（你可以试想一下如果你的程序有个复杂的状态，当以后别人改你代码的时候，是很容易出bug的，在并行中这样的问题就更多了）</p>
<p>•first class functions：</p>
<p>这个技术可以让你的函数就像变量一样来使用。也就是说，你的函数可以像变量一样被创建，修改，并当成变量一样传递，返回或是在函数中嵌套函数。这个有点像Javascript的Prototype（参看Javascript的面向对象编程）</p>
<p>•尾递归优化：</p>
<p>我们知道递归的害处，那就是如果递归很深的话，stack受不了，并会导致性能大幅度下降。所以，我们使用尾递归优化技术——每次递归时都会重用stack，这样一来能够提升性能，当然，这需要语言或编译器的支持。Python就不支持。</p>
<hr>
<p>函数式编程的准则：<strong>不依赖于外部的数据，而且也不改变外部数据的值，而是返回一个新的值给你。</strong></p>
<p>函数式编程的理念：<strong>把函数当成变量来用，关注于描述问题而不是怎么实现</strong>，这样可以让代码更易读。</p>
<p><strong>把代码逻辑封装成了函数后，我们就相当于给每个相对独立的程序逻辑取了个名字，于是代码成了自解释的。</strong></p>
<p>**但是这些函数间必需知道其它函数是怎么修改它们之间的共享变量的，所以，这些函数是有状态的。**解决办法就是Functional Programming 的编程范式</p>
<hr>
<p>函数式编程有如下好处：</p>
<p>1.代码更简单了。</p>
<p>2.数据集，操作，返回值都放到了一起。</p>
<p>3.你在读代码的时候，没有了循环体，于是就可以少了些临时变量，以及变量倒来倒去逻辑。</p>
<p>4.你的代码变成了在描述你要干什么，而不是怎么去干。</p>
<hr>
<p>避免使用程序状态和可变对象,是降低程序复杂度的有效方式之一,而这也正是函数式编程的精髓。 函数式编程强调执行的结果,而非执行的过程。</p>
<blockquote>
<p>我们先构建一系列简单却具有一定功能的小函数,然后再将这些函数进行组装以实现完整的逻辑和复杂的运算,这是函数式编程的基本思想。</p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>函数式编程</title>
			<link>https://blog.v5u.win/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
			<pubDate>Fri, 05 Aug 2016 02:46:42 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
			<description>避免使用程序状态和可变对象,是降低程序复杂度的有效方式之一,而这也正是函数式编程的精髓。 函数式编程强调执行的结果,而非执行的过程。 我们先构建</description>
			<content type="html"><![CDATA[<p>避免使用程序状态和可变对象,是降低程序复杂度的有效方式之一,而这也正是函数式编程的精髓。 函数式编程强调执行的结果,而非执行的过程。</p>
<pre><code>我们先构建一系列简单却具有一定功能的小函数,然后再将这些函数进行组装以实现完整的逻辑和复杂的运算,这是函数式编程的基本思想。</code></pre>
]]></content>
		</item>
		
		<item>
			<title>swiftError</title>
			<link>https://blog.v5u.win/posts/swift/swift-swifterror/</link>
			<pubDate>Fri, 29 Jul 2016 11:46:10 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/swift/swift-swifterror/</guid>
			<description>value of type &amp;lsquo;UILable&amp;rsquo; has no member &amp;rsquo;then&amp;rsquo; UILable 没有扩展 then的协议 fix： extension UIView: Then{}</description>
			<content type="html"><![CDATA[<p>value of type &lsquo;UILable&rsquo; has no member &rsquo;then&rsquo;</p>
<p>UILable 没有扩展 then的协议
fix：
extension UIView: Then{}</p>
]]></content>
		</item>
		
		<item>
			<title>穷爸爸富爸爸读后感</title>
			<link>https://blog.v5u.win/posts/read/read-%E5%AF%8C%E7%88%B8%E7%88%B8/</link>
			<pubDate>Thu, 28 Jul 2016 09:24:11 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/read/read-%E5%AF%8C%E7%88%B8%E7%88%B8/</guid>
			<description>年轻退休 1. 心智的杠杆 词语是杠杆 2. 计划的杠杆 3. 行动的杠杆</description>
			<content type="html"><![CDATA[<ul>
<li>年轻退休</li>
</ul>
<pre tabindex="0"><code>1. 心智的杠杆
	词语是杠杆
2. 计划的杠杆
3. 行动的杠杆
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Workspace的使用方法</title>
			<link>https://blog.v5u.win/posts/xcode/xcode-workspace/</link>
			<pubDate>Thu, 21 Jul 2016 16:39:53 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/xcode/xcode-workspace/</guid>
			<description>更改 xcode-&amp;gt; Preference -&amp;gt; Location -&amp;gt; Advanced -&amp;gt; Custom -&amp;gt; Relative to Workspace 新建Workspace 新建项目或静态库，选择 add workspace name 引入路径依赖，User Header Search Paths 设为 $(BUILT_PRODUCTS_DIR) 选择递归搜索 recursive 检查 scheme manage 中的项</description>
			<content type="html"><![CDATA[<ol>
<li>更改 xcode-&gt; Preference -&gt; Location -&gt; Advanced -&gt; Custom -&gt; Relative to Workspace</li>
<li>新建Workspace</li>
<li>新建项目或静态库，选择 add workspace name</li>
<li>引入路径依赖，User Header Search Paths 设为 $(BUILT_PRODUCTS_DIR) 选择递归搜索 recursive</li>
<li>检查 scheme manage 中的项目依赖</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>mac下MongoDB</title>
			<link>https://blog.v5u.win/posts/database/db-mongodb/</link>
			<pubDate>Mon, 18 Jul 2016 18:16:11 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/database/db-mongodb/</guid>
			<description>1. 安装 1.1 解压缩mongo文件，将解压缩后的文件移动到自己喜欢的目录下 1.2 由于没有配置环境变量，先测试使用。 终端进入mongodb的安装路径，在</description>
			<content type="html"><![CDATA[<h3 id="1-安装">1. 安装</h3>
<p>1.1 解压缩mongo文件，将解压缩后的文件移动到自己喜欢的目录下
1.2 由于没有配置环境变量，先测试使用。 终端进入mongodb的安装路径，在bin路径下，执行./mongod启动数据库</p>
<p>有可能报错 exception in initAndListen: 29 Data directory /data/db not found
这是因为/data/db 目录不存在，若启动时，不指定任何参数， MongoDB 会默认使用 /data/db 目录存储数据，
我们可以使用 &ndash;dbpath 来指定其它的路径，比如我使用的是下面这样的命令启动的：
<code>./mongod --dbpath ../data/db</code>
新开一个终端，在bin路径下执行./mongo启动mongodb管理</p>
<h3 id="2-使用">2. 使用</h3>
<p><code>show dbs 显示 数据库s use dbName 切换数据库 show collections 数据库下的显示表 db.表明.find() 显示表中数据</code></p>
]]></content>
		</item>
		
		<item>
			<title>FF的Git使用整理</title>
			<link>https://blog.v5u.win/posts/system/system-git_use/</link>
			<pubDate>Tue, 05 Jul 2016 14:47:35 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-git_use/</guid>
			<description>创建 Git仓库命令：(进入将要管理的Git文件夹地址下) git init 查看当前Git管理状态 git status 添加Git文件 git add * 提交文件到仓库 git commit -m &amp;ldquo;</description>
			<content type="html"><![CDATA[<p>创建 Git仓库命令：(进入将要管理的Git文件夹地址下) git init
查看当前Git管理状态 git status
添加Git文件    git add *
提交文件到仓库 git commit  -m &ldquo;加入注释&rdquo;
推送文件到远程仓库     git push origin master
参考文章：<!-- raw HTML omitted -->Git简易使用指南<!-- raw HTML omitted --> <a href="http://www.bootcss.com/p/git-guide/">http://www.bootcss.com/p/git-guide/</a></p>
<h3 id="git-命令行常用命令">git 命令行常用命令</h3>
<table>
<thead>
<tr>
<th style="text-align:left">git 作用</th>
<th style="text-align:center">命令</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">检查更新状态</td>
<td style="text-align:center">git status</td>
</tr>
<tr>
<td style="text-align:left">将文件添加进更新列表</td>
<td style="text-align:center">git add *</td>
</tr>
<tr>
<td style="text-align:left">commit 提交</td>
<td style="text-align:center">git commit * -m &ldquo;add some(not null非空)&rdquo;</td>
</tr>
<tr>
<td style="text-align:left">发布到服务器</td>
<td style="text-align:center">use &ldquo;git push&rdquo; to publish your local commits</td>
</tr>
<tr>
<td style="text-align:left">发布到主线</td>
<td style="text-align:center">git push origin master</td>
</tr>
<tr>
<td style="text-align:left">发布tag release版本</td>
<td style="text-align:center">git tag</td>
</tr>
<tr>
<td style="text-align:left">add tag</td>
<td style="text-align:center">git tag -m &ldquo;first release&rdquo; 0.1.0</td>
</tr>
<tr>
<td style="text-align:left">git push</td>
<td style="text-align:center">git push &ndash;tags</td>
</tr>
<tr>
<td style="text-align:left">delete 远程tag</td>
<td style="text-align:center">git push origin &ndash;delete tag</td>
</tr>
<tr>
<td style="text-align:left">检出远程分支文件</td>
<td style="text-align:center">git checkout -b dev origin/dev</td>
</tr>
<tr>
<td style="text-align:left">公钥加入本地ssh</td>
<td style="text-align:center">ssh-add ~/.ssh/id_rse</td>
</tr>
<tr>
<td style="text-align:left">查看某域是否有ssh公钥，私钥</td>
<td style="text-align:center">ssh -T <a href="mailto:git@git.oschina.net">git@git.oschina.net</a></td>
</tr>
</tbody>
</table>
<p>level 2</p>
<table>
<thead>
<tr>
<th>git 作用</th>
<th>命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>指定分支克隆</td>
<td>git clone -b dev <a href="https://github.com/jinyuyoulong/Go-learn.git">https://github.com/jinyuyoulong/Go-learn.git</a></td>
</tr>
<tr>
<td>查询所有分支</td>
<td>git branch -a</td>
</tr>
<tr>
<td>移除Git对文件的管理</td>
<td>git rm -rf –cached public</td>
</tr>
</tbody>
</table>
]]></content>
		</item>
		
		<item>
			<title>ghost是什么</title>
			<link>https://blog.v5u.win/posts/blog/blog-ghost/</link>
			<pubDate>Mon, 04 Jul 2016 14:39:44 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/blog/blog-ghost/</guid>
			<description>ghost是什么？ ghost是WordPress前雇员跳槽出来，创业做的个人博客项目。开源，免费，nodejs技术栈，专注个人博客领域。有别</description>
			<content type="html"><![CDATA[<h1 id="ghost是什么">ghost是什么？</h1>
<p>ghost是WordPress前雇员跳槽出来，创业做的个人博客项目。开源，免费，nodejs技术栈，专注个人博客领域。有别于WordPress。现在WordPress已经成为一个庞大的CMS内容管理项目。不在专注个人博客。ghost就是恢复初心之作。</p>
<h2 id="如何搭建">如何搭建</h2>
<p>待完善</p>
<h2 id="使用心得最佳实践">使用心得，最佳实践</h2>
<p>待完善</p>
<h3 id="我遇到的问题">我遇到的问题</h3>
<h5 id="如何进入ghostblog的管理后台">如何进入ghostblog的管理后台？</h5>
<p>在域名后面加上/ghost
进入网站空间下的ghost路径下就行</p>
]]></content>
		</item>
		
		<item>
			<title>使用hexo的第一篇文章</title>
			<link>https://blog.v5u.win/posts/blog/blog-hexo/</link>
			<pubDate>Thu, 30 Jun 2016 17:40:48 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/blog/blog-hexo/</guid>
			<description>hexo建站之后如何使用 1.如何写文章 hexo 需要配合git使用 创建文章：需要在terminal 输入命令 hexo new “文章名” 创建好的”文件名.md” 文件</description>
			<content type="html"><![CDATA[<h3 id="hexo建站之后如何使用">hexo建站之后如何使用</h3>
<h4 id="1如何写文章">1.如何写文章</h4>
<p>hexo 需要配合git使用</p>
<p>创建文章：需要在terminal 输入命令 hexo new “文章名”</p>
<p>创建好的”文件名.md” 文件会放在站点目录 ./source/_posts/ 下</p>
<p>注意：资源文件都放在source/_posts文件下（不要创建其他目录，否则解析的时候可能会报错）</p>
<h4 id="2如何发布文章">2.如何发布文章</h4>
<p>每次发布文章都需要执行命令：</p>
<p>hexo generate</p>
<p>hexo deploy</p>
<h4 id="3本地启动hexo-查看网站更新">3.本地启动hexo 查看网站更新</h4>
<p>hexo server</p>
<h4 id="4设置新建文章的模板">4.设置新建文章的模板</h4>
<p>创建新文件: hexo new passageName</p>
<p>默认创建在source/_post目录下，使用scaffolds/post.md作为模板</p>
<p>文章filename根据_config.yml配置自动创建为new_post_name: :year-:month-:day-:title.md</p>
]]></content>
		</item>
		
		<item>
			<title>NodeJS 文件系统</title>
			<link>https://blog.v5u.win/posts/nodejs/nodejs-filesystem/</link>
			<pubDate>Thu, 30 Jun 2016 11:39:32 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/nodejs/nodejs-filesystem/</guid>
			<description>文件加载顺序： st=&amp;amp;gt;start: 开始require isfc=&amp;amp;gt;condition: 是否在文件缓冲区 isnf=&amp;amp;gt;condition: 是否是原生模块 ff=&amp;amp;gt;operation: 查找文件模块 lfm=&amp;amp;gt;operation: 根据扩展名载入模块 cfm=&amp;amp;gt;operation: 缓存文件模块 isnc=&amp;amp;gt;condition: 是否在原生模块缓存区中</description>
			<content type="html"><![CDATA[<p>文件加载顺序：</p>
<pre><code>st=&amp;gt;start: 开始require
isfc=&amp;gt;condition: 是否在文件缓冲区
isnf=&amp;gt;condition: 是否是原生模块
ff=&amp;gt;operation: 查找文件模块
lfm=&amp;gt;operation: 根据扩展名载入模块
cfm=&amp;gt;operation: 缓存文件模块
isnc=&amp;gt;condition: 是否在原生模块缓存区中
lnf=&amp;gt;operation: 加载原生模块
cnf=&amp;gt;operation: 缓存原生模块
e=&amp;gt;end: 返回exports

st-&amp;gt;isfc
isfc(yes)-&amp;gt;e
isfc(no)-&amp;gt;isnf(no)-&amp;gt;ff-&amp;gt;lfm-&amp;gt;cfm-&amp;gt;e
isnf(yes)-&amp;gt;isnc(yes)-&amp;gt;lnf-&amp;gt;cnf-&amp;gt;e
isnc(no)-&amp;gt;e
</code></pre>
<p>require方法接受以下几种参数的传递：
http、fs、path等，原生模块。
./mod或../mod，相对路径的文件模块。
/pathtomodule/mod，绝对路径的文件模块。
mod，非原生模块的文件模块。</p>
]]></content>
		</item>
		
		<item>
			<title>NodeJS 文件系统</title>
			<link>https://blog.v5u.win/nodejs-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</link>
			<pubDate>Thu, 30 Jun 2016 03:39:32 +0000</pubDate>
			
			<guid>https://blog.v5u.win/nodejs-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</guid>
			<description>文件加载顺序： require方法接受以下几种参数的传递： http、fs、path等，原生模块。 ./mod或../mod，相对路径的文件模块。</description>
			<content type="html"><![CDATA[<p>文件加载顺序：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>require方法接受以下几种参数的传递：</p>
<p>http、fs、path等，原生模块。</p>
<p>./mod或../mod，相对路径的文件模块。</p>
<p>/pathtomodule/mod，绝对路径的文件模块。</p>
<p>mod，非原生模块的文件模块。</p>
]]></content>
		</item>
		
		<item>
			<title>Swift与Objective-C的兼容方法:@objc和Dynamic</title>
			<link>https://blog.v5u.win/swift%E4%B8%8Eobjective-c%E7%9A%84%E5%85%BC%E5%AE%B9%E6%96%B9%E6%B3%95objc%E5%92%8Cdynamic/</link>
			<pubDate>Tue, 07 Jun 2016 02:02:09 +0000</pubDate>
			
			<guid>https://blog.v5u.win/swift%E4%B8%8Eobjective-c%E7%9A%84%E5%85%BC%E5%AE%B9%E6%96%B9%E6%B3%95objc%E5%92%8Cdynamic/</guid>
			<description>Swift必须考虑与Objective-C的兼容。 首先通过添加{product-module-name}-Bridging-Header.h</description>
			<content type="html"><![CDATA[<p>Swift必须考虑与Objective-C的兼容。</p>
<p>首先通过添加{product-module-name}-Bridging-Header.h文件，并在其中填写想要使用的头文件名称，我们就可以很容易地在Swift中使用Objective-C代码了。Xcode为了简化这个设定，甚至在Swift项目中第一次导入Objective-C文件时会主动弹框进行询问是否要自动创建这个文件，可以说是非常方便。</p>
<p>但是如果想要在Objective-C中使用Swift的类型的时候，事情就复杂一些。如果是来自外部的框架，那么这个框架与Objective-C项目肯定不是处在同一个target中的，我们需要对外部的Swift module进行导入。这个其实和使用Objective-C的原来的Framework是一样的，对于一个项目来说，外界框架是由Swift写的还是Objective-C写的，两者并没有太大区别。我们通过使用2013年新引入的@import来引入module：</p>
<p>[cpp] view plaincopy在CODE上查看代码片派生到我的代码片</p>
<p>@import MySwiftKit;</p>
<p>之后就可以正常使用这个Swift写的框架了。</p>
<p>如果想要在Objective-C里使用的是同一个项目中的Swift的源文件的话，可以直接导入自动生成的头文件{product-module-name}-Swift.h来完成。比如项目的target叫做MyApp的话，我们就需要在Objective-C文件中写：</p>
<p>[cpp] view plaincopy在CODE上查看代码片派生到我的代码片</p>
<p>#import “MyApp-Swift.h”</p>
<p>但这只是故事的开始。Objective-C和Swift在底层使用的是两套完全不同的机制，Cocoa中的Objective-C对象是基于运行时的，它从骨子里遵循了KVC（Key-Value Coding，通过类似字典的方式存储对象信息）以及动态派发（Dynamic Dispatch，在运行调用时再决定实际调用的具体实现）。而Swift为了追求性能，如果没有特殊需要的话，是不会在运行时再来决定这些的。也就是说，Swift类型的成员或者方法在编译时就已经决定，而运行时便不再需要经过一次查找，而可以直接使用。</p>
<p>显而易见，这带来的问题是如果我们要使用Objective-C的代码或者特性来调用纯Swift的类型时候，我们会因为找不到所需要的这些运行时信息，而导致失败。解决起来也很简单，在Swift类型文件中，我们可以将需要暴露给Objective-C使用的任何地方（包括类，属性和方法等）的声明前面加上@objc修饰符。注意这个步骤只需要对那些不是继承自NSObject的类型进行，如果你用Swift写的class是继承自NSObject的话，Swift会默认自动为所有的非private的类和成员加上@objc。这就是说，对一个NSObject的子类，你只需要导入相应的头文件就可以在Objective-C里使用这个类了。</p>
<p>@objc修饰符的另一个作用是为Objective-C侧重新声明方法或者变量的名字。虽然绝大部分时候自动转换的方法名已经足够好用（比如会将Swift中类似init(name: String) 的方法转换成-initWithName:(NSString *)name这样），但是有时候我们还是期望Objective-C里使用和Swift中不一样的方法名或者类的名字，比如Swift里这样的一个类：</p>
<p>[cpp] view plaincopy在CODE上查看代码片派生到我的代码片</p>
<p>class 我的类 {</p>
<p>func 打招呼(名字: String) {</p>
<p>println(“哈喽，(名字)”)</p>
<p>}</p>
<p>}</p>
<p>我的类().打招呼(“小明”)</p>
<p>Objective-C的话是无法使用中文来进行调用的，因此我们必须使用@objc将其转为ASCII才能在Objective-C里访问：</p>
<p>[cpp] view plaincopy在CODE上查看代码片派生到我的代码片</p>
<p>@objc(MyClass)</p>
<p>class 我的类 {</p>
<p>@objc(greeting:)</p>
<p>func 打招呼(名字: String) {</p>
<p>println(“哈喽，(名字)”)</p>
<p>}</p>
<p>}</p>
<p>这样，我们在Objective-C里就能调用 [[MyClass new] greeting:@”XiaoMing”] 这样的代码了（虽然比起原来一点都不好玩了）。另外，正如上面所说的以及在Selector一节中所提到的，即使是NSObject的子类，Swift也不会在被标记为private的方法或成员上自动加@objc。如果我们需要使用这些内容的动态特性的话，我们需要手动给它们加上@objc修饰。</p>
<p>添加@objc修饰符并不意味着这个方法或者属性会变成动态派发，Swift依然可能会将其优化为静态调用。如果你需要和Objective-C里动态调用时相同的运行时特性的话，你需要使用的修饰符是dynamic。一般情况下在做App开发时应该用不上，但是在施展一些像动态替换方法或者运行时再决定实现这样的 “黑魔法” 的时候，我们就需要用到dynamic修饰符了。在之后的KVO一节中，我们还会提到一个关于使用dynamic的实例。</p>
]]></content>
		</item>
		
		<item>
			<title>swift 中初始化ViewController</title>
			<link>https://blog.v5u.win/posts/swift/swift-%E4%B8%AD%E5%88%9D%E5%A7%8B%E5%8C%96viewcontroller/</link>
			<pubDate>Mon, 06 Jun 2016 18:25:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/swift/swift-%E4%B8%AD%E5%88%9D%E5%A7%8B%E5%8C%96viewcontroller/</guid>
			<description>let vc = NameVC() init(title: String){ super.init(nibName: nil, bundle: nil) self.title = title } required init?(coder aDecoder: NSCoder) { fatalError(&amp;quot;init(coder:) has not been implemented&amp;quot;) }</description>
			<content type="html"><![CDATA[<p>let vc = NameVC()</p>
<pre><code>init(title: String){
      super.init(nibName: nil, bundle: nil)
        self.title = title
    }
    required init?(coder aDecoder: NSCoder) {
        fatalError(&quot;init(coder:) has not been implemented&quot;)
    }</code></pre>
]]></content>
		</item>
		
		<item>
			<title>Xcode插件XcodeColors的使用</title>
			<link>https://blog.v5u.win/posts/xcode/xcode-%E6%8F%92%E4%BB%B6xcodecolors%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
			<pubDate>Fri, 27 May 2016 12:51:27 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/xcode/xcode-%E6%8F%92%E4%BB%B6xcodecolors%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
			<description>安装： 在 管理器中搜索 下载 Xcodecolors 重启Xcode 选择load boundle 使用： 配置环境变量－&amp;gt; 打开Product -&amp;gt; Edit Scheme 选择Run-&amp;gt;”Argume</description>
			<content type="html"><![CDATA[<p>安装：</p>
<p>在 管理器中搜索 下载 Xcodecolors</p>
<p>重启Xcode</p>
<p>选择load boundle</p>
<p>使用：</p>
<p>配置环境变量－&gt;</p>
<p>打开Product -&gt; Edit Scheme</p>
<p>选择Run-&gt;”Arguments” tab</p>
<p>增加一个新的Environment Variable ，命名为”XcodeColors”，值赋为YES</p>
<p>代码中添加：</p>
<pre><code>#define XCODE_COLORS_ESCAPE @&quot;\033[&quot;
#define XCODE_COLORS_RESET     XCODE_COLORS_ESCAPE @&quot;;&quot;   // Clear any foreground or background color
char * xcode_colors = getenv(&quot;XcodeColors&quot;);
if (xcode_colors &amp;&amp; (strcmp(xcode_colors, &quot;YES&quot;)) == 0) {
        NSLog(XCODE_COLORS_ESCAPE @&quot;fg0,0,255;&quot; @&quot;Blue text&quot; XCODE_COLORS_RESET);
}
</code></pre>
<p>说明：getenv()方法为c库中的获取环境变量内容方法。</p>
]]></content>
		</item>
		
		<item>
			<title>mac下wireshark的使用方法</title>
			<link>https://blog.v5u.win/posts/system/system-mac%E4%B8%8Bwireshark%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</link>
			<pubDate>Wed, 18 May 2016 18:47:09 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-mac%E4%B8%8Bwireshark%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
			<description>Wireshark是mac下一款非常好的抓包工具，安装我就不说了，下面我重点来说说如何使用。 1.打开终端 2.rvictl -s // 创建一个虚拟接口 3.打开Wir</description>
			<content type="html"><![CDATA[<p>Wireshark是mac下一款非常好的抓包工具，安装我就不说了，下面我重点来说说如何使用。</p>
<p>1.打开终端</p>
<p>2.rvictl -s <!-- raw HTML omitted --> // 创建一个虚拟接口</p>
<p>3.打开Wireshark，点击设置按钮，选择rvi0接口</p>
<p>4.开始调试</p>
<h4 id="通过-rvi-抓取-iphone-数据包">通过 RVI 抓取 iPhone 数据包</h4>
<p>（1）RVI 简介</p>
<p>使用 Mac 抓取 iPhone 数据包可通过共享和代理两种方式：</p>
<p>使用 Mac 的网络共享功能将 Mac 的网络通过 WiFi 共享给 iPhone 连接；</p>
<p>使用代理软件（例如 Charles）在Mac上建立HTTP代理服务器。</p>
<p>这两种方式都是将 iPhone 的网络流量导入到 Mac 电脑中，通过 Mac 连接互联网。这就要求 Mac 本身是联网的，对于网络共享的方式还要求 Mac 本身的网络不能使用 WiFi，而且在 iPhone 上只能使用 WiFi 连接，无法抓取到 xG（2G/3G/4G） 网络包。</p>
<p>苹果在 iOS 5 中新引入了“远程虚拟接口（Remote Virtual Interface,RVI）”的特性，可以在 Mac 中建立一个虚拟网络接口来作为 iOS 设备的网络栈，这样所有经过 iOS 设备的流量都会经过此虚拟接口。此虚拟接口只是监听 iOS 设备本身的协议栈（但并没有将网络流量中转到 Mac 本身的网络连接上），所有网络连接都是 iOS 设备本身的，与 Mac 电脑本身联不联网或者联网类型无关。iOS设备本身可以为任意网络类型（WiFi/xG），这样在 Mac 电脑上使用任意抓包工具（tcpdump、Wireshark、CPA）抓取 RVI 接口上的数据包就实现了对 iPhone 的抓包。</p>
<h1 id="mac-os-x-对-rvi-的支持是通过终端命令-rvictl-提供的在终端terminal中输入-rvictl--命令可查看帮助">Mac OS X 对 RVI 的支持是通过终端命令 rvictl 提供的，在终端（Terminal）中输入“ rvictl ? ”命令可查看帮助：</h1>
<p>rvictl Options:</p>
<p>-l, -L List currently active devices</p>
<p>-s, -S Start a device or set of devices</p>
<h1 id="-x--x-stop-a-device-or-set-of-devices">-x, -X Stop a device or set of devices</h1>
<p>（2）使用 “ rvictl -s ”命令创建虚拟接口</p>
<p>首先，通过 MFI USB 数据线将 iPhone 连接到安装了 Mac OS+Xcode 4.2(or later) 的 Mac 机上。iOS 7 以上需要搭配 Xcode 5.0（or later），抓包过程中必须保持连接。</p>
<p>然后，通过 iTunes-&gt;Summary 或者 Xcode-&gt;Organizer-&gt;Devices 获取 iPhone 的 UDID（identifier）。</p>
<h1 id="接着使用rvictl--s命令创建-rvi-接口使用-iphone-的-udid-作为参数">接着，使用“rvictl -s”命令创建 RVI 接口，使用 iPhone 的 UDID 作为参数。</h1>
<h1 id="rvictl--s-udid">$rvictl -s <!-- raw HTML omitted --></h1>
<p>创建成功后，在终端通过 ifconfig 命令可以看到多了一个 rvi0 接口。当有多个 iOS 设备连接 iMac 时，依次是 rvi1,rvi2…，使用“ rvictl -l ”命令可以列出所有挂接的虚拟接口。</p>
<p>在 Wireshark 首页选择 rvi0，使用默认的 Capture Options 即可开始对 iPhone 进行抓包。</p>
]]></content>
		</item>
		
		<item>
			<title>JavaScriptCore</title>
			<link>https://blog.v5u.win/posts/ios/ios-javascriptcore/</link>
			<pubDate>Fri, 29 Apr 2016 17:43:54 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-javascriptcore/</guid>
			<description>JavaScript 和OC原生交互 &amp;lt;br /&amp;gt;- (void)ocCallJSFunction{ JSContext context = [[JSContext alloc]init]; JSValue jsValue = [context evaluateScript:@&amp;quot;21+7&amp;quot;]; int iVal = [jsValue toInt32]; NSLog(@&amp;quot;js value=%@,int=%d&amp;quot;,jsValue, iVal); [context evaluateScript:@&amp;quot;var arr = [21, 7, &#39;fanyiqing.com&#39;];&amp;quot;]; JSValue jsArr = context[@&amp;quot;arr&amp;quot;]; NSLog(@&amp;quot;JS Array:%@ length:%@&amp;quot;,jsArr,jsArr[@&amp;quot;length&amp;quot;]); jsArr[1] = @&amp;quot;blog&amp;quot;; jsArr[7] = @7; NSLog(@&amp;quot;JS Array:%@, length:%d&amp;quot;,jsArr,[jsArr[@&amp;quot;length&amp;quot;] toInt32]); NSArray nsarray = [jsArr toArray]; NSLog(@&amp;quot;nsarray:%@&amp;quot;,nsarray); }</description>
			<content type="html"><![CDATA[<p>JavaScript 和OC原生交互</p>
<pre><code>&lt;br /&gt;- (void)ocCallJSFunction{
JSContext context = [[JSContext alloc]init];
JSValue jsValue = [context evaluateScript:@&quot;21+7&quot;];
int iVal = [jsValue toInt32];
NSLog(@&quot;js value=%@,int=%d&quot;,jsValue, iVal);
[context evaluateScript:@&quot;var arr = [21, 7, 'fanyiqing.com'];&quot;];
JSValue jsArr = context[@&quot;arr&quot;];
NSLog(@&quot;JS Array:%@ length:%@&quot;,jsArr,jsArr[@&quot;length&quot;]);
jsArr[1] = @&quot;blog&quot;;
jsArr[7] = @7;
NSLog(@&quot;JS Array:%@, length:%d&quot;,jsArr,[jsArr[@&quot;length&quot;] toInt32]);
NSArray nsarray = [jsArr toArray];
NSLog(@&quot;nsarray:%@&quot;,nsarray);
}</code></pre>
]]></content>
		</item>
		
		<item>
			<title>class xxx has no initializers</title>
			<link>https://blog.v5u.win/posts/swift/swift-class-xxx-has-no-initializers/</link>
			<pubDate>Mon, 25 Apr 2016 17:09:01 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/swift/swift-class-xxx-has-no-initializers/</guid>
			<description>error: class xxx has no initializers 这是说变量没有初始化，比如 var label:UILabel 应该写成 var label:UILabel?</description>
			<content type="html"><![CDATA[<p>error: class xxx has no initializers
这是说变量没有初始化，比如
var label:UILabel
应该写成
var label:UILabel?</p>
]]></content>
		</item>
		
		<item>
			<title>vim</title>
			<link>https://blog.v5u.win/posts/system/system-vim/</link>
			<pubDate>Mon, 18 Apr 2016 17:26:21 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-vim/</guid>
			<description>Vim 自带教程 终端输入 vimtutor 两种模式状态 命令模式 编辑模式 命令模式下的操作 dd 删除一行;三行：3dd y复制 d()剪切 p(paste)粘贴 :wq 或 ZZ 或 保存退出</description>
			<content type="html"><![CDATA[<p>Vim</p>
<p>自带教程 终端输入 <code>vimtutor</code></p>
<p>两种模式状态</p>
<ol>
<li>命令模式</li>
<li>编辑模式</li>
</ol>
<h3 id="命令模式下的操作">命令模式下的操作</h3>
<ul>
<li>dd 删除一行;三行：3dd</li>
<li>y复制</li>
<li>d()剪切</li>
<li>p(paste)粘贴</li>
<li>:wq 或 ZZ 或 保存退出 :q! 强制退出</li>
<li>/ 搜索   命令模式下 <code>/user</code> 搜索 user 关键字</li>
<li>i 所有非hjkl的字符 进入编辑模式</li>
</ul>
<h3 id="编辑模式">编辑模式</h3>
<p>文字编辑器</p>
]]></content>
		</item>
		
		<item>
			<title>iOS GCD dispatch barrier</title>
			<link>https://blog.v5u.win/posts/ios/ios-gcd-dispatch-barrier/</link>
			<pubDate>Fri, 15 Apr 2016 10:15:25 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-gcd-dispatch-barrier/</guid>
			<description>需求： 两个线程并行执行，当两线程都执行完后，在执行另一个线程，然后在执行并行多线程 thread1 thread4 --&amp;gt; thread3 --&amp;gt; thread2 thread5 一个dispatch barrier 允许在一个并发队列中创</description>
			<content type="html"><![CDATA[<p>需求：</p>
<p>两个线程并行执行，当两线程都执行完后，在执行另一个线程，然后在执行并行多线程</p>
<pre><code>thread1                                thread4
              --&gt; thread3 --&gt;
thread2                                 thread5
</code></pre>
<p>一个dispatch barrier 允许在一个并发队列中创建一个同步点。当在并发队列中遇到一个barrier, 他会延迟执行barrier的block,等待所有在barrier之前提交的blocks执行结束。 这时，barrier block自己开始执行。 之后， 队列继续正常的执行操作。</p>
<p>调用这个函数总是在barrier block被提交之后立即返回，不会等到block被执行。当barrier block到并发队列的最前端，他不会立即执行。相反，队列会等到所有当前正在执行的blocks结束执行。到这时，barrier才开始自己执行。所有在barrier block之后提交的blocks会等到barrier block结束之后才执行。</p>
<p>这里指定的并发队列应该是自己通过dispatch_queue_create函数创建的。如果你传的是一个串行队列或者全局并发队列，这个函数等同于dispatch_async函数。</p>
]]></content>
		</item>
		
		<item>
			<title>Xcode7.3 cannot create __weak reference in file using</title>
			<link>https://blog.v5u.win/posts/xcode/xcode-xcode7-3-cannot-create-weak-reference-in-file-using/</link>
			<pubDate>Fri, 08 Apr 2016 16:26:43 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/xcode/xcode-xcode7-3-cannot-create-weak-reference-in-file-using/</guid>
			<description>升级xcode7.3后项目编译不通过 error：cannot create __weak reference in file using manual reference counting 解决办法： Set Build Settings -&amp;gt; Apple LLVM 7.1 - Language - Objective C -&amp;gt; Weak References in Manual Retain Release to YES.</description>
			<content type="html"><![CDATA[<p>升级xcode7.3后项目编译不通过
<code>error：cannot create __weak reference in file using manual reference counting</code>
解决办法：
Set Build Settings -&gt; Apple LLVM 7.1 - Language - Objective C -&gt; Weak References in Manual Retain Release to YES.</p>
]]></content>
		</item>
		
		<item>
			<title>flex属性</title>
			<link>https://blog.v5u.win/posts/web/web-flex/</link>
			<pubDate>Fri, 08 Apr 2016 10:56:38 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/web/web-flex/</guid>
			<description></description>
			<content type="html"><![CDATA[<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>Xcode7 恢复代码折叠功能</title>
			<link>https://blog.v5u.win/xcode7-%E6%81%A2%E5%A4%8D%E4%BB%A3%E7%A0%81%E6%8A%98%E5%8F%A0%E5%8A%9F%E8%83%BD/</link>
			<pubDate>Fri, 08 Apr 2016 10:14:53 +0000</pubDate>
			
			<guid>https://blog.v5u.win/xcode7-%E6%81%A2%E5%A4%8D%E4%BB%A3%E7%A0%81%E6%8A%98%E5%8F%A0%E5%8A%9F%E8%83%BD/</guid>
			<description>升级到Xcode7后，发现代码折叠功能不见了！！！ 苹果默认把这个功能禁掉了：在Xcode菜单里选择Preference——Text Editi</description>
			<content type="html"><![CDATA[<p>升级到Xcode7后，发现代码折叠功能不见了！！！</p>
<p>苹果默认把这个功能禁掉了：在Xcode菜单里选择Preference——Text Editing，你会发现里面有一个“code folding ribbon”，勾选它就能恢复代码折叠功能了。</p>
<p>然后通过菜单Editor——Code Folding，你就可以使用你需要的折叠功能。</p>
<table>
<thead>
<tr>
<th>相关快捷键：</th>
</tr>
</thead>
<tbody>
<tr>
<td>局部折叠（折叠一个函数） ：Command+Option+Left/Right</td>
</tr>
<tr>
<td>全局折叠（折叠当前文件下的全部函数）：Shift+Command+Option+Left/Right</td>
</tr>
<tr>
<td>折叠注释块：（/* */之间的文字） ： Ctrl+Shift+Command+Left/Right</td>
</tr>
</tbody>
</table>
]]></content>
		</item>
		
		<item>
			<title>Xcode7.3 cannot create __weak reference in file using</title>
			<link>https://blog.v5u.win/xcode7-3-cannot-create-__weak-reference-in-file-using/</link>
			<pubDate>Fri, 08 Apr 2016 08:26:43 +0000</pubDate>
			
			<guid>https://blog.v5u.win/xcode7-3-cannot-create-__weak-reference-in-file-using/</guid>
			<description>升级xcode7.3后项目编译不通过 error：cannot create __weak reference in file using manual reference counting 解决办法： Set Build Settings -&amp;gt; Apple LLVM 7.1 – Language – Objective C -&amp;gt; Weak References in Manual Retain Release to YES.</description>
			<content type="html"><![CDATA[<p>升级xcode7.3后项目编译不通过</p>
<p><code>error：cannot create __weak reference in file using manual reference counting</code></p>
<p>解决办法：</p>
<p>Set Build Settings -&gt; Apple LLVM 7.1 – Language – Objective C -&gt; Weak References in Manual Retain Release to YES.</p>
]]></content>
		</item>
		
		<item>
			<title>react JS style样式设置总结</title>
			<link>https://blog.v5u.win/react-js-style%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE%E6%80%BB%E7%BB%93/</link>
			<pubDate>Fri, 08 Apr 2016 06:29:04 +0000</pubDate>
			
			<guid>https://blog.v5u.win/react-js-style%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE%E6%80%BB%E7%BB%93/</guid>
			<description>const styles = StyleSheet.create({ style_0:{ flex:1, borderColor: &#39;red&#39;, borderWidth:1, }, &amp;lt;View style={styles.style_0}&amp;gt; &amp;lt;View style={[styles.view, styles.center]}&amp;gt;&amp;lt;Text&amp;gt;自由摆放&amp;lt;/Text&amp;gt;&amp;lt;/Vie</description>
			<content type="html"><![CDATA[<pre><code>const styles = StyleSheet.create({
  style_0:{
      flex:1,
      borderColor: 'red',
      borderWidth:1,
  },
&lt;View style={styles.style_0}&gt;
&lt;View style={[styles.view, styles.center]}&gt;&lt;Text&gt;自由摆放&lt;/Text&gt;&lt;/View&gt;
&lt;View style={[styles.style_1, {flexDirection: 'column'}]}&gt;
&lt;Text style={{marginTop:40, fontSize:25}}&gt;1／4高&lt;/Text&gt;</code></pre>
]]></content>
		</item>
		
		<item>
			<title>sketch使用tips</title>
			<link>https://blog.v5u.win/sketch%E4%BD%BF%E7%94%A8tips/</link>
			<pubDate>Wed, 06 Apr 2016 11:20:55 +0000</pubDate>
			
			<guid>https://blog.v5u.win/sketch%E4%BD%BF%E7%94%A8tips/</guid>
			<description>记录sketch使用心得 1. 打开设计模板：file–&amp;gt; New from Template –&amp;gt;选择需要的模板库（Android Icon Design，iOS APP Icon，</description>
			<content type="html"><![CDATA[<table>
<thead>
<tr>
<th>记录sketch使用心得</th>
</tr>
</thead>
<tbody>
<tr>
<td>1. 打开设计模板：file–&gt; New from Template –&gt;选择需要的模板库（Android Icon Design，iOS APP Icon，iOS UI Design等）</td>
</tr>
<tr>
<td>2. 导出资源文件：右下角Make Exportable + –&gt; 选择导出图片规格 –&gt; Export xxx</td>
</tr>
<tr>
<td>3. 固定图层（加锁）：按住Option+鼠标点击需要加锁的图层</td>
</tr>
</tbody>
</table>
]]></content>
		</item>
		
		<item>
			<title>xcode设置允许访问http请求</title>
			<link>https://blog.v5u.win/posts/xcode/xcode-http/</link>
			<pubDate>Sun, 03 Apr 2016 14:30:54 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/xcode/xcode-http/</guid>
			<description>项目的info.plist文件添加一下值： App Transport Security Settings Allow Arbitrary Loads 设为YES</description>
			<content type="html"><![CDATA[<p>项目的info.plist文件添加一下值：
App Transport Security Settings
Allow Arbitrary Loads 设为YES</p>
]]></content>
		</item>
		
		<item>
			<title>iOS老应用显示不完全</title>
			<link>https://blog.v5u.win/posts/ios/ios-%E8%80%81%E5%BA%94%E7%94%A8%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%AE%8C%E5%85%A8/</link>
			<pubDate>Sun, 03 Apr 2016 13:55:06 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-%E8%80%81%E5%BA%94%E7%94%A8%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%AE%8C%E5%85%A8/</guid>
			<description>解决 ： 新建launchScreen文件 设置plist文件，添加Launch screen interface file base name字段 并将value值设为刚刚新建文件的文件名 删除模</description>
			<content type="html"><![CDATA[<p>解决 ：</p>
<ul>
<li>
<p>新建launchScreen文件</p>
</li>
<li>
<p>设置plist文件，添加Launch screen interface file base name字段 并将value值设为刚刚新建文件的文件名</p>
</li>
<li>
<p>删除模拟器或真机上的app重新编译运行</p>
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>八大算法思想</title>
			<link>https://blog.v5u.win/posts/system/system-%E5%85%AB%E5%A4%A7%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/</link>
			<pubDate>Wed, 23 Mar 2016 10:31:32 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-%E5%85%AB%E5%A4%A7%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/</guid>
			<description>枚举 递推 递归 分治 贪心 试探 动态迭代 模拟</description>
			<content type="html"><![CDATA[<ol>
<li>枚举</li>
<li>递推</li>
<li>递归</li>
<li>分治</li>
<li>贪心</li>
<li>试探</li>
<li>动态迭代</li>
<li>模拟</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>八大算法思想</title>
			<link>https://blog.v5u.win/%E5%85%AB%E5%A4%A7%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/</link>
			<pubDate>Wed, 23 Mar 2016 02:31:32 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E5%85%AB%E5%A4%A7%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/</guid>
			<description>枚举 递推 递归 分治 贪心 试探 动态迭代 模拟</description>
			<content type="html"><![CDATA[<ol>
<li>枚举</li>
<li>递推</li>
<li>递归</li>
<li>分治</li>
<li>贪心</li>
<li>试探</li>
<li>动态迭代</li>
<li>模拟</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>react-native:unexpected token error</title>
			<link>https://blog.v5u.win/posts/reactnative/reactnative-unexpected-token-error/</link>
			<pubDate>Tue, 22 Mar 2016 17:11:47 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/reactnative/reactnative-unexpected-token-error/</guid>
			<description>react-native新建的项目默认使用ES6写法，所以如果你在用到 componentWillMount:function()这样的代码时</description>
			<content type="html"><![CDATA[<p>react-native新建的项目默认使用ES6写法，所以如果你在用到
componentWillMount:function()这样的代码时会运行出错
解决：改成ES6写法componentWillMount(){}
其他几种方式都改为ES6写法
如果你是使用这种方式
class wyq extends Component {}定义一个组件
那么应该这样定义方法：componentWillMount(){}
如果使用这种方式定义组件
var MovieScreen =  React.createClass({}）
那么应该使用这种方式定义方法：render: function() {}</p>
<p>请使用ES6的新写法</p>
]]></content>
		</item>
		
		<item>
			<title>ReactNative如何真机测试</title>
			<link>https://blog.v5u.win/posts/reactnative/reactnative%E5%A6%82%E4%BD%95%E7%9C%9F%E6%9C%BA%E6%B5%8B%E8%AF%95/</link>
			<pubDate>Fri, 18 Mar 2016 13:24:28 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/reactnative/reactnative%E5%A6%82%E4%BD%95%E7%9C%9F%E6%9C%BA%E6%B5%8B%E8%AF%95/</guid>
			<description>初始学习ReactNative 最想现在真机上一睹为快，对于非零基础的程序员，最重要的是先搞明白整个工程的创建到完结的流程，对于编程语言来说从</description>
			<content type="html"><![CDATA[<p>初始学习ReactNative 最想现在真机上一睹为快，对于非零基础的程序员，最重要的是先搞明白整个工程的创建到完结的流程，对于编程语言来说从hello world，对于一个完整的项目开发平台，则从一个最简单的dome项目开始。</p>
<p>iOS 真机调试</p>
<p>方法一：（从设备访问开发服务器）</p>
<p>首先，你的笔记本电脑和你的手机必须处于相同的 wifi 网络中。</p>
<p>打开 iOS 项目的 AppDelegate.m 文件</p>
<p>更改 jsCodeLocation 中的 localhost 改成你电脑的局域网IP地址</p>
<p>在 Xcode 中，选择你的手机作为目标设备，Run 即可</p>
<p>可以通过晃动设备来打开开发菜单(重载、调试等)</p>
<p>方法二：（使用离线包）</p>
<p>你也可以将应用程序本身的所有 JavaScript 代码打包。这样你可以在开发服务器没有运行时测试它，并把应用程序提交到到 AppStore。</p>
<p>打开 iOS / AppDelegate.m</p>
<p>遵循“选项 2”的说明：</p>
<p>取消 jsCodeLocation = [[NSBundle mainBundle] URLForResource:@”main” withExtension:@”jsbundle”];</p>
<p>在你应用程序的根目录的终端运行给定 curl 命令 （$ curl “http://localhost:8081/Game2048.bundle?platform=ios” -o main.jsbundle ）//此时应该先在本地启动服务(react-native start)</p>
<p>//打包项目的根目录下的 js 文件到 main.jsbundle (可以直接使用上述 curl 方法打包 javascript 即可) $ react-native bundle [–minify]</p>
<p>Packager 支持几个选项：</p>
<p>dev(默认的 true)——设置了 <strong>DEV</strong> 变量的值。当是 true 时，它会打开一堆有用的警告。对于产品，它建议使用 dev = false。</p>
<p>minify(默认的 false)——只要不通过 UglifyJS 传输 JS 代码。</p>
<p>故障排除</p>
<p>如果 curl 命令失败，确保 packager 在运行。也尝试在它的结尾添加 ——ipv4 标志。</p>
<p>如果你刚刚开始了你的项目，main.jsbundle 可能不会被包含到 Xcode 项目中。要想添加它,右键单击你的项目目录，然后单击“添加文件……”——选择生成的 main.jsbundle 文件。</p>
<p>本文参考Jack008的blog: <a href="http://my.oschina.net/jack088/blog/515248">http://my.oschina.net/jack088/blog/515248</a></p>
]]></content>
		</item>
		
		<item>
			<title>React-Native 初次安装环境报错及解决记录</title>
			<link>https://blog.v5u.win/posts/reactnative/react-native-%E5%88%9D%E6%AC%A1%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83%E6%8A%A5%E9%94%99%E5%8F%8A%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/</link>
			<pubDate>Tue, 15 Mar 2016 16:38:19 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/reactnative/react-native-%E5%88%9D%E6%AC%A1%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83%E6%8A%A5%E9%94%99%E5%8F%8A%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/</guid>
			<description>创建第一个项目后，打开xcode运行，terminal报错 Watchman: watchman–no-pretty get-sockname returned with exit code null dyld: Library not loaded: /usr/local/opt/pcre/lib/libpcre.1.dylib 解决方案：终端输入 brew link</description>
			<content type="html"><![CDATA[<p>创建第一个项目后，打开xcode运行，terminal报错</p>
<p>Watchman: watchman–no-pretty get-sockname returned with exit code null dyld: Library not loaded: /usr/local/opt/pcre/lib/libpcre.1.dylib</p>
<pre><code>    解决方案：终端输入 brew link pcre，
    如果报错没有写入权限（Could not symlink lib/libpcre.1.dylib
    /usr/local/lib is not writable.）
    则授权给该文件 sudo chown -R $(whoami) /usr/local/lib</code></pre>
]]></content>
		</item>
		
		<item>
			<title>正确的使用KVO</title>
			<link>https://blog.v5u.win/posts/ios/ios-kvo/</link>
			<pubDate>Tue, 15 Mar 2016 11:02:37 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-kvo/</guid>
			<description>KVO，全称为Key-Value Observing，是iOS中的一种设计模式，用于检测对象的某些属性的实时变化情况并作出响应。网上广为流传普</description>
			<content type="html"><![CDATA[<p>KVO，全称为Key-Value Observing，是iOS中的一种设计模式，用于检测对象的某些属性的实时变化情况并作出响应。网上广为流传普及的一个例子是利用KVO检测股票价格的变动，例如这里。这个例子作为扫盲入门还是可以的，但是当应用场景比较复杂时，里面的一些细节还是需要改进的，里面有多个地方存在crash的危险。本文旨在逐步递进深入地探讨出一种目前比较健壮稳定的KVO实现方案，弥补网上大部分教程的不足！</p>
<p>首先，假设我们的目标是在一个UITableViewController内对tableview的contentOffset进行实时监测，很容易地使用KVO来实现为。
在初始化方法中加入：</p>
<pre><code>[_tableView addObserver:self forKeyPath:@&quot;contentOffset&quot; options:NSKeyValueObservingOptionNew context:nil];
`&lt;/pre&gt;

在dealloc中移除KVO监听：

&lt;pre&gt;`[_tableView removeObserver:self forKeyPath:@&quot;contentOffset&quot; context:nil];
`&lt;/pre&gt;

添加默认的响应回调方法：

&lt;pre&gt;`- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object
                        change:(NSDictionary *)change context:(void *)context
{
       [self doSomethingWhenContentOffsetChanges];
}
`&lt;/pre&gt;

好了，KVO实现就到此完美结束了，拜拜。。。开个玩笑，肯定没这么简单的，这样的代码太粗糙了，当你在controller中添加多个KVO时，所有的回调都是走同上述函数，那就必须对触发回调函数的来源进行判断。判断如下：

&lt;pre&gt;`- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object
                        change:(NSDictionary *)change context:(void *)context
{
    if (object == _tableView &amp;amp;&amp;amp; [keyPath isEqualToString:@&quot;contentOffset&quot;]) {

[self doSomethingWhenContentOffsetChanges];

} }
`&lt;/pre&gt;

你以为这样就结束了吗？答案是否定的！我们假设当前类(在例子中为UITableViewController)还有父类，并且父类也有自己绑定了一些其他KVO呢？我们看到，上述回调函数体中只有一个判断，如果这个if不成立，这次KVO事件的触发就会到此中断了。但事实上，若当前类无法捕捉到这个KVO，那很有可能是在他的superClass，或者super-superClass...中，上述处理砍断了这个链。合理的处理方式应该是这样的：

&lt;pre&gt;`- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object
                        change:(NSDictionary *)change context:(void *)context
{
    if (object == _tableView &amp;amp;&amp;amp; [keyPath isEqualToString:@&quot;contentOffset&quot;]) {
        [self doSomethingWhenContentOffsetChanges];
} else {
        [super observeValueForKeyPath:keyPath ofObject:object change:change context:context];
}
}
</code></pre>
<p>这样就结束了吗？答案仍旧是否定的。潜在的问题有可能出现在dealloc中对KVO的注销上。KVO的一种缺陷(其实不能称为缺陷，应该称为特性)是，当对同一个keypath进行两次removeObserver时会导致程序crash，这种情况常常出现在父类有一个kvo，父类在dealloc中remove了一次，子类又remove了一次的情况下。不要以为这种情况很少出现！当你封装framework开源给别人用或者多人协作开发时是有可能出现的，而且这种crash很难发现。不知道你发现没，目前的代码中context字段都是nil，那能否利用该字段来标识出到底kvo是superClass注册的，还是self注册的？</p>
<p>回答是可以的。我们可以分别在父类以及本类中定义各自的context字符串，比如在本类中定义context为@&ldquo;ThisIsMyKVOContextNotSuper&rdquo;;然后在dealloc中remove observer时指定移除的自身添加的observer。这样iOS就能知道移除的是自己的kvo，而不是父类中的kvo，避免二次remove造成crash。
文章转自<code>http://www.finalshares.com/read-6914</code> 只为收藏，方便查阅。</p>
]]></content>
		</item>
		
		<item>
			<title>正确的使用KVO</title>
			<link>https://blog.v5u.win/%E6%AD%A3%E7%A1%AE%E7%9A%84%E4%BD%BF%E7%94%A8kvo/</link>
			<pubDate>Tue, 15 Mar 2016 03:02:37 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E6%AD%A3%E7%A1%AE%E7%9A%84%E4%BD%BF%E7%94%A8kvo/</guid>
			<description>KVO，全称为Key-Value Observing，是一种设计模式，用于检测对象的某些属性的实时变化情况并作出响应。网上广为流传普及的一个例</description>
			<content type="html"><![CDATA[<p>KVO，全称为Key-Value Observing，是一种设计模式，用于检测对象的某些属性的实时变化情况并作出响应。网上广为流传普及的一个例子是利用KVO检测股票价格的变动，例如这里。这个例子作为扫盲入门还是可以的，但是当应用场景比较复杂时，里面的一些细节还是需要改进的，里面有多个地方存在crash的危险。本文旨在逐步递进深入地探讨出一种目前比较健壮稳定的KVO实现方案，弥补网上大部分教程的不足！</p>
<p>首先，假设我们的目标是在一个UITableViewController内对tableview的contentOffset进行实时监测，很容易地使用KVO来实现为。</p>
<p>在初始化方法中加入：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>在dealloc中移除KVO监听：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>添加默认的响应回调方法：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>好了，KVO实现就到此完美结束了，拜拜。。。开个玩笑，肯定没这么简单的，这样的代码太粗糙了，当你在controller中添加多个KVO时，所有的回调都是走同上述函数，那就必须对触发回调函数的来源进行判断。判断如下：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>你以为这样就结束了吗？答案是否定的！我们假设当前类(在例子中为UITableViewController)还有父类，并且父类也有自己绑定了一些其他KVO呢？我们看到，上述回调函数体中只有一个判断，如果这个if不成立，这次KVO事件的触发就会到此中断了。但事实上，若当前类无法捕捉到这个KVO，那很有可能是在他的superClass，或者super-superClass…中，上述处理砍断了这个链。合理的处理方式应该是这样的：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>这样就结束了吗？答案仍旧是否定的。潜在的问题有可能出现在dealloc中对KVO的注销上。KVO的一种缺陷(其实不能称为缺陷，应该称为特性)是，当对同一个keypath进行两次removeObserver时会导致程序crash，这种情况常常出现在父类有一个kvo，父类在dealloc中remove了一次，子类又remove了一次的情况下。不要以为这种情况很少出现！当你封装framework开源给别人用或者多人协作开发时是有可能出现的，而且这种crash很难发现。不知道你发现没，目前的代码中context字段都是nil，那能否利用该字段来标识出到底kvo是superClass注册的，还是self注册的？</p>
<p>回答是可以的。我们可以分别在父类以及本类中定义各自的context字符串，比如在本类中定义context为@”ThisIsMyKVOContextNotSuper”;然后在dealloc中remove observer时指定移除的自身添加的observer。这样iOS就能知道移除的是自己的kvo，而不是父类中的kvo，避免二次remove造成crash。</p>
<p>文章转自<code>http://www.finalshares.com/read-6914</code> 只为收藏，方便查阅。</p>
]]></content>
		</item>
		
		<item>
			<title>iOS权限使用说明</title>
			<link>https://blog.v5u.win/posts/ios/ios-rightalert/</link>
			<pubDate>Mon, 07 Mar 2016 18:28:25 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-rightalert/</guid>
			<description>举个栗子: 我想访问用户的照片，第一次时会弹出alert框询问用户是否将该权限开放给APP 这时为了增加用户友好度，我们有必要在询问的时候加一些</description>
			<content type="html"><![CDATA[<p>举个栗子:
我想访问用户的照片，第一次时会弹出alert框询问用户是否将该权限开放给APP
这时为了增加用户友好度，我们有必要在询问的时候加一些解释和说明。
那么，如何添加呢？
我们在info.plist文件里面设置
info.plist文件&ndash;&gt;添加字段Privacy - Photo Library Usage Description&ndash;&gt;填写说明文字
<a href="http://blog-fansrss.rhcloud.com/wp-content/uploads/2016/03/photoRightDescription.png"><img src="http://fanjinlong.xyz/wp-content/uploads/2016/03/photoRightDescription-300x16.png" alt="photoRightDescription"></a></p>
]]></content>
		</item>
		
		<item>
			<title>UIView何时创建加载subview比较合适？</title>
			<link>https://blog.v5u.win/posts/ios/ios-uiview%E4%BD%95%E6%97%B6%E5%88%9B%E5%BB%BA%E5%8A%A0%E8%BD%BDsubview%E6%AF%94%E8%BE%83%E5%90%88%E9%80%82/</link>
			<pubDate>Mon, 07 Mar 2016 15:38:43 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-uiview%E4%BD%95%E6%97%B6%E5%88%9B%E5%BB%BA%E5%8A%A0%E8%BD%BDsubview%E6%AF%94%E8%BE%83%E5%90%88%E9%80%82/</guid>
			<description>当我们使用ViewController的时候有ViewDidLoad方法保证数据或UI只加载一次 但是在UIView中 没有这样的生命周期函数 如</description>
			<content type="html"><![CDATA[<p>当我们使用ViewController的时候有ViewDidLoad方法保证数据或UI只加载一次</p>
<p>但是在UIView中 没有这样的生命周期函数 如果你的subview的创建是这样写的</p>
<pre><code>- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self makeView];
    }
    return self;
}
</code></pre>
<p>那么恭喜你 你的代码很可能会出问题 因为我发现 <code>initWithFrame</code>会调用两次，不要问我为什么，我也不知道</p>
<p>所以应该在哪里创建呢？</p>
<p>这时我想起来了tableView的delegate方法，是一组按顺序执行的接口方法，啊哈，这是个很好的解决方案。</p>
<p>我们可以对外暴露一个方法， 当View初始化完成之后 在调用创建subview的方法</p>
<p>想在那里执行就在那里执行，想什么时候创建就什么时候创建</p>
]]></content>
		</item>
		
		<item>
			<title>Xcode7如何给新建的类名自动添加前缀</title>
			<link>https://blog.v5u.win/posts/xcode/xcode-xcode7-prefix/</link>
			<pubDate>Thu, 03 Mar 2016 15:03:01 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/xcode/xcode-xcode7-prefix/</guid>
			<description>Xcode7如何给新建的类名自动添加前缀 一直想给新创建类的时候自动添加前缀比如这样:FFObject Xcode5之前是可以在项目刚创建的时候</description>
			<content type="html"><![CDATA[<h3 id="xcode7如何给新建的类名自动添加前缀">Xcode7如何给新建的类名自动添加前缀</h3>
<p>一直想给新创建类的时候自动添加前缀比如这样:FFObject
Xcode5之前是可以在项目刚创建的时候填写的 Class Prefix
Xcode6之后默认没有了，那么在哪里能找到去添加呢，在这里：</p>
<ul>
<li>Project&ndash;&gt;Target&ndash;&gt;Class Prefix</li>
<li><a href="http://blog-fansrss.rhcloud.com/wp-content/uploads/2016/03/class_prefix.png"><img src="http://fanjinlong.xyz/wp-content/uploads/2016/03/class_prefix-300x72.png" alt="class_prefix"></a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Xcode注释</title>
			<link>https://blog.v5u.win/posts/xcode/xcode-notes/</link>
			<pubDate>Wed, 02 Mar 2016 15:49:43 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/xcode/xcode-notes/</guid>
			<description>Xcode注释 在所有的编程环境中 有几种通用的注释方式我们默认遵守他们的规则 它们是：TODO, FIXME, XXX, ??? , !!! 它们分别代表什么意思？ TODO: + 说明： 说明在</description>
			<content type="html"><![CDATA[<h2 id="xcode注释">Xcode注释</h2>
<h4 id="在所有的编程环境中-有几种通用的注释方式我们默认遵守他们的规则">在所有的编程环境中 有几种通用的注释方式我们默认遵守他们的规则</h4>
<p>它们是：TODO, FIXME, XXX, ??? , !!!</p>
<ul>
<li>它们分别代表什么意思？</li>
</ul>
<blockquote>
<p>TODO: + 说明：
说明在标识处有功能代码待编写，待实现的功能在说明中会简略说明。
对那些临时的, 短期的解决方案, 或已经够好但仍不完美的代码使用 TODO 注释.</p>
<p>FIXME: + 说明：
说明标识处代码需要修正，甚至代码是错误的，不能工作，需要修复，如何修正会在说明中简略说明。</p>
<p>XXX: + 说明：
说明标识处代码虽然实现了功能，但是实现的方法有待商榷，希望将来能改进，要改进的地方会在说明中简略说明。</p>
</blockquote>
<ul>
<li>关于用法
TODO 注释要使用全大写的字符串 TODO, 在随后的圆括号里写上你的大名, 邮件地址, 或其它身份标识. 冒号是可选的. 主要目的是让添加注释的人 (也是可以请求提供更多细节的人) 可根据规范的 TODO 格式进行查找. 添加 TODO 注释并不意味着你要自己来修正.</li>
</ul>
<p>// TODO(<a href="mailto:kl@gmail.com">kl@gmail.com</a>): Use a &ldquo;*&rdquo; here for concatenation operator.
// TODO(Zeke) change this to use relations.
如果加 TODO 是为了在 “将来某一天做某事”, 可以附上一个非常明确的时间 “Fix by November 2005”), 或者一个明确的事项 (“Remove this code when all clients can handle XML responses.”).</p>
<ul>
<li>如何让Xcode识别这些注释，以便于我们更好的查看？</li>
</ul>
<ol>
<li>TARGETS–&gt;(项目名称)–&gt;Build Phases–&gt;选择左上角”+”符号，添加”New Run Script Phase“</li>
<li>在脚本框中添加
KEYWORDS=”TODO:|FIXME:|???:|!!!:”
find “${SRCROOT}” ( -name “.h” -or -name “.m” ) -print0 | xargs -0 egrep –with-filename –line-number –only-matching “($KEYWORDS).*$&quot; | perl -p -e &ldquo;s/($KEYWORDS)/ warning: $1/”</li>
<li>每次编译Xcode时，在Xcode左侧的”show the issue navigator”面板中就能看到你的注释信息</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Xcode注释</title>
			<link>https://blog.v5u.win/xcode%E6%B3%A8%E9%87%8A/</link>
			<pubDate>Wed, 02 Mar 2016 07:49:43 +0000</pubDate>
			
			<guid>https://blog.v5u.win/xcode%E6%B3%A8%E9%87%8A/</guid>
			<description>Xcode注释 类与协议 /** 文档B. * * 文档B的详细描述. */ @interface DocB : NSObject /// 文档A. @interface DocA : NSObject 文本链接 /** * - [文档B](DocB) : 类的链接文本.（仅a</description>
			<content type="html"><![CDATA[<h2 id="xcode注释">Xcode注释</h2>
<p>类与协议</p>
<pre><code>/** 文档B.
 *
 * 文档B的详细描述.
 */
@interface DocB : NSObject
/// 文档A.
@interface DocA : NSObject
</code></pre>
<p>文本链接</p>
<pre><code>/**
 * - [文档B](DocB) : 类的链接文本.（仅appledoc）
 */
</code></pre>
<p>单行注释</p>
<pre><code>///# 标题1
///## 标题2
///hello oc，下面的空行是为了换行
///
///hello swift
/// - 这里使用了无序列表
/// - 使用加粗 **this**， 使用斜体 _this_
/// - 添加一个链接: [百度](http://www.baidu.com)
/// - 添加一个图片:![swift picture](http://img0.imgtn.bdimg.com/it/u=14209024,814391630&amp;fm=21&amp;gp=0.jpg )
</code></pre>
<p>多行注释文档</p>
<pre><code>/**
    多行注释文档相比于普通多行注释多了一个星号。
    在这里可以使用markDown语法，书写各种提示信息
    如：显示一个有序列表
    1. 有序列表
    2. 有序列表
    3. 有序列表
*/
</code></pre>
<p>方法/函数的注释</p>
<p>方法的注释包括传入参数、返回值、和异常等说明</p>
<pre><code>/**
 初始化 数据和颜色值
 @param frame      frame
 @param dataItems  数据集
 @param colorItems 色值集
 @return self
 */
 - (id)initWithFrame:(CGRect)frame dataItems:(NSArray*)dataItems colorItems:(NSArray*)colorItems;
</code></pre>
<h4 id="在所有的编程环境中-有几种通用的注释方式我们默认遵守他们的规则">在所有的编程环境中 有几种通用的注释方式我们默认遵守他们的规则</h4>
<p>它们是：TODO, FIXME, XXX, ??? , !!!</p>
<ul>
<li>它们分别代表什么意思？</li>
</ul>
<blockquote>
<p>TODO: + 说明：</p>
</blockquote>
<blockquote>
<p>说明在标识处有功能代码待编写，待实现的功能在说明中会简略说明。</p>
</blockquote>
<blockquote>
<p>对那些临时的, 短期的解决方案, 或已经够好但仍不完美的代码使用 TODO 注释.</p>
</blockquote>
<blockquote>
<p>FIXME: + 说明：</p>
</blockquote>
<blockquote>
<p>说明标识处代码需要修正，甚至代码是错误的，不能工作，需要修复，如何修正会在说明中简略说明。</p>
</blockquote>
<blockquote>
<p>XXX: + 说明：</p>
</blockquote>
<blockquote>
<p>说明标识处代码虽然实现了功能，但是实现的方法有待商榷，希望将来能改进，要改进的地方会在说明中简略说明。</p>
</blockquote>
<ul>
<li>
<p>关于用法</p>
<p>TODO 注释要使用全大写的字符串 TODO, 在随后的圆括号里写上你的大名, 邮件地址, 或其它身份标识. 冒号是可选的. 主要目的是让添加注释的人 (也是可以请求提供更多细节的人) 可根据规范的 TODO 格式进行查找. 添加 TODO 注释并不意味着你要自己来修正.</p>
</li>
</ul>
<p>// TODO(<a href="mailto:kl@gmail.com">kl@gmail.com</a>): Use a “*” here for concatenation operator.</p>
<p>// TODO(Zeke) change this to use relations.</p>
<p>如果加 TODO 是为了在 “将来某一天做某事”, 可以附上一个非常明确的时间 “Fix by November 2005”), 或者一个明确的事项 (“Remove this code when all clients can handle XML responses.”).</p>
<ul>
<li>如何让Xcode识别这些注释，以便于我们更好的查看？</li>
</ul>
<ol>
<li>TARGETS–&gt;(项目名称)–&gt;Build Phases–&gt;选择左上角”+”符号，添加”New Run Script Phase“</li>
<li>在脚本框中添加</li>
</ol>
<pre><code>KEYWORDS=”TODO:|FIXME:|???:|!!!:”

find “${SRCROOT}” &amp;#40; -name “.h” -or -name “.m” &amp;#41; -print0 | xargs -0 egrep –with-filename –line-number –only-matching “($KEYWORDS).*$&amp;#8221; | perl -p -e &amp;#8220;s/($KEYWORDS)/ warning: $1/”
</code></pre>
<ol start="3">
<li>每次编译Xcode时，在Xcode左侧的”show the issue navigator”面板中就能看到你的注释信息</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>braced block of statements is an unused closure</title>
			<link>https://blog.v5u.win/posts/swift/swift-braced-block-of-statements-is-an-unused-closure/</link>
			<pubDate>Tue, 01 Mar 2016 15:31:45 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/swift/swift-braced-block-of-statements-is-an-unused-closure/</guid>
			<description>使用swift写dome时xcode报一下错误： braced block of statements is an unused closure 原因及收获： for循环的条件语句不能有空格，如：for i=0; i&amp;lt;3; i++ {} 其他控制语句也</description>
			<content type="html"><![CDATA[<p>使用swift写dome时xcode报一下错误：
braced block of statements is an unused closure</p>
<p>原因及收获：
for循环的条件语句不能有空格，如：for i=0; i&lt;3; i++ {}
其他控制语句也一样不能有空格</p>
]]></content>
		</item>
		
		<item>
			<title>SSH</title>
			<link>https://blog.v5u.win/posts/system/system-ssh/</link>
			<pubDate>Wed, 24 Feb 2016 16:02:58 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-ssh/</guid>
			<description>[TOC] 解释 Secure Shell（安全外壳协议，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境[1]。 SSH通过在网</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h4 id="解释">解释</h4>
<blockquote>
<p>Secure Shell（安全外壳协议，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境[1]。
SSH通过在网络中创建安全隧道来实现SSH客户端与服务器之间的连接[2]。
虽然任何网络服务都可以通过SSH实现安全传输，SSH最常见的用途是远程登录系统，人们通常利用SSH来传输命令行界面和远程执行命令。
使用频率最高的场合类Unix系统，但是Windows操作系统也能有限度地使用SSH。2015年，微软宣布将在未来的操作系统中提供原生SSH协议支持(摘自wikipedia)</p>
</blockquote>
<h4 id="生成">生成</h4>
<p>下面是Mac生成方法：</p>
<p>1 ：打开终端 输入    ssh-keygen</p>
<p>然后系统提示输入文件保存位置等信息，连续敲三次回车即可，生成的SSH key文件保存在中～/.ssh/id_rsa.pub</p>
<p>2 然后用文本编辑工具打开该文件，我用的是vim,所以命令是：
vim ~/.ssh/id_rsa.pub`</p>
<h4 id="禁忌">禁忌</h4>
<p>同一个网站，多个账户之间 不能共用同一个ssh公钥，这会造成服务器无法判断提交者的身份，所以如果有多个账户在同一个网站的话，还是创建多个ssh证书分别管理比较好。</p>
<h4 id="多证书管理">多证书管理</h4>
<p>生成 指定文件名</p>
<p>`ssh-keygen -t rsa -f ~/.ssh/id_rsa.name -C &ldquo;ssh_name&rdquo;</p>
<p>创建配置文件</p>
<p>vi ~/.ssh/config</p>
<pre tabindex="0"><code>Host aaa.github.com
    HostName git@github.com:aaa
    IdentityFile ~/.ssh/id_rsa.aaa
    User git

    HostName bbb@github.com
    IdentityFile ~/.ssh/id_rsa
    User git
 
</code></pre><p>检测是否配置成功</p>
<pre tabindex="0"><code>//查看当前rsa list
ssh-add -l 

//如果列表中没有新增的rsa， 添加identifile 把专用密钥添加到 ssh-agent 的高速缓存中：
ssh-add ~/.ssh/test_id_rsa
</code></pre><p>注： ssh-add 命令是把专用密钥添加到ssh-agent的高速缓存中。是把指定的私钥添加到 ssh-agent 所管理的一个 session 当中。而 ssh-agent 是一个用于存储私钥的临时性的 session 服务，重启之后，ssh-agent 服务也就重置了，session 会话也就失效了。</p>
<p>git 修改config</p>
<table>
<thead>
<tr>
<th>before</th>
<th>after</th>
</tr>
</thead>
<tbody>
<tr>
<td>url = <a href="mailto:git@github.com">git@github.com</a>:fanyubing/xxx.git</td>
<td>url = <a href="mailto:git@fanyubing.github.com">git@fanyubing.github.com</a>:fanyubing/xxx.git</td>
</tr>
</tbody>
</table>
<p>上传到远端设备<code>~  ssh-copy-id -i .ssh/id_rsa.pub root@172.xx.yy.zzz</code></p>
<p>参考：https://my.oschina.net/meilihao/blog/157716</p>
]]></content>
		</item>
		
		<item>
			<title>资深程序员是如何用五年时间攒够100万的–阅后总结</title>
			<link>https://blog.v5u.win/%E8%B5%84%E6%B7%B1%E7%A8%8B%E5%BA%8F%E5%91%98%E6%98%AF%E5%A6%82%E4%BD%95%E7%94%A8%E4%BA%94%E5%B9%B4%E6%97%B6%E9%97%B4%E6%94%92%E5%A4%9F100%E4%B8%87%E7%9A%84-%E9%98%85%E5%90%8E%E6%80%BB%E7%BB%93/</link>
			<pubDate>Wed, 24 Feb 2016 07:37:17 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E8%B5%84%E6%B7%B1%E7%A8%8B%E5%BA%8F%E5%91%98%E6%98%AF%E5%A6%82%E4%BD%95%E7%94%A8%E4%BA%94%E5%B9%B4%E6%97%B6%E9%97%B4%E6%94%92%E5%A4%9F100%E4%B8%87%E7%9A%84-%E9%98%85%E5%90%8E%E6%80%BB%E7%BB%93/</guid>
			<description>资深程序员是如何用五年时间攒够100万的–阅后总结 做好职业规划，先选职位，再选行业，最后是公司 内省：职业已选 iOS开发，行业未选 目标：金融或</description>
			<content type="html"><![CDATA[<h3 id="a-hrefhttpsmpweixinqqcoms__bizmjm5otm0mziwmqmid404028589idx1sn0dc1a41d4d6d99ad8bdc52ac8fecc637scene1srcid0223obmj9xvpqwd4wtx30cr2key710a5d99946419d99242c51055699b0ae6e57acad3946a9714ffdecf10a8f21d712f33465bc65a0d10675c781b2c664dascene0uinmji2ntc5njq0ma3d3ddevicetypeimacmacbookpro112c1osxosx10113build15d21version11020201pass_ticketohwhxxqjk3vkluhyifyr2eryezixmoy3e2b0pl5jb3hbtgfldj2ewrqt4nji6nt2fo-target_blank-relnoopener-noreferrer资深程序员是如何用五年时间攒够100万的a8211阅后总结"><!-- raw HTML omitted -->资深程序员是如何用五年时间攒够100万的<!-- raw HTML omitted -->–阅后总结</h3>
<ol>
<li>做好职业规划，先选职位，再选行业，最后是公司</li>
</ol>
<blockquote>
<p>内省：职业已选 iOS开发，行业未选 目标：金融或医疗，公司看机遇</p>
</blockquote>
<blockquote>
<p>注意：聚焦 坚定 不被周围的人影响</p>
</blockquote>
<ol>
<li>|积累人脉|寻找机会|发掘其他赚钱途径|</li>
</ol>
<pre><code>&gt; |待加强 |在寻找 |兼职 |
</code></pre>
<ol start="2">
<li>理财可出风险资本数：1-年龄28/100 = 72%;</li>
</ol>
<pre><code>&gt; 理财方向：一线城市房产抵押标的，互联网金融， 保险理财业务，货币基金
</code></pre>
<ol start="3">
<li>养成记账习惯 APP推荐：随手记， 财智</li>
</ol>
<pre><code>&gt; 目的：知晓每天/月 开销 重点是——分析，找出不必要的开销，合理配比资金
</code></pre>
<ol start="4">
<li>合理用钱，消费分为：投资性消费和一般性消费</li>
</ol>
<pre><code>&gt; 投资性消费包括：教育消费，健康消费，理财消费，衣物消费（投资自己）

&gt; 一般性消费要注意性价比，通常情况下，昂贵优质的商品是最好的选择
</code></pre>
<ol start="5">
<li>找一个好老婆，价值不可估量。</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>OC Quartz2D 绘图</title>
			<link>https://blog.v5u.win/posts/ios/ios-oc-quartz2d-%E7%BB%98%E5%9B%BE/</link>
			<pubDate>Tue, 23 Feb 2016 12:07:20 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-oc-quartz2d-%E7%BB%98%E5%9B%BE/</guid>
			<description>如何利用Quartz2D绘制东西到view上? 首先,得有图形上下文,因为它能保存绘图信息,并且决定着绘制到什么地方去 其次,那个图形上下⽂必须</description>
			<content type="html"><![CDATA[<p>如何利用Quartz2D绘制东西到view上?</p>
<p>首先,得有图形上下文,因为它能保存绘图信息,并且决定着绘制到什么地方去</p>
<p>其次,那个图形上下⽂必须跟view相关联,才能将内容绘制到view上面</p>
<p>⾃定义view的步骤:</p>
<p>(1)新建⼀个类,继承自UIView</p>
<p>(2)实现-(void)drawRect:(CGRect)rect⽅法.然后在这个⽅方法中 :</p>
<p>1)取得跟当前view相关联的图形上下文;</p>
<p>2)绘制相应的图形内容</p>
<p>3)利用图形上下文将绘制的所有内容渲染显示到view上面</p>
<p>1.drawRect:</p>
<p>（1）为什么要实现drawRect:⽅法才能绘图到view上?</p>
<p>因为在drawRect:⽅法中才能取得跟view相关联的图形上下文</p>
<p>（2）drawRect:⽅法在什么时候被调用?</p>
<p>当view第一次显示到屏幕上时(被加到UIWindow上显示出来)</p>
<p>调用view的setNeedsDisplay或者setNeedsDisplayInRect:时</p>
]]></content>
		</item>
		
		<item>
			<title>iOS创建.a静态库文件</title>
			<link>https://blog.v5u.win/posts/ios/ios-%E5%88%9B%E5%BB%BA-a%E9%9D%99%E6%80%81%E5%BA%93%E6%96%87%E4%BB%B6/</link>
			<pubDate>Mon, 22 Feb 2016 16:01:04 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-%E5%88%9B%E5%BB%BA-a%E9%9D%99%E6%80%81%E5%BA%93%E6%96%87%E4%BB%B6/</guid>
			<description>步骤： 1.创建项目（选择Framework&amp;amp;Library） 2.删除无用文件，加入希望编译的文件 3.edit scheme –&amp;gt;release 4.编译</description>
			<content type="html"><![CDATA[<p>步骤：</p>
<p>1.创建项目（选择Framework&amp;Library）</p>
<p>2.删除无用文件，加入希望编译的文件</p>
<p>3.edit scheme –&gt;release</p>
<p>4.编译真机平台文件：选择ios device</p>
<p>5.编译模拟器平台文件：选择一个模拟器，run运行程序</p>
<p>6.找到编译后的.a文件：选中项目中的.a文件，show in finder</p>
<p>7.将两个文件合并成一个文件：lipo -create 文件路径1 文件路径2 -output 路径3</p>
]]></content>
		</item>
		
		<item>
			<title>iOS 各类作用</title>
			<link>https://blog.v5u.win/posts/ios/ios-classes/</link>
			<pubDate>Tue, 16 Feb 2016 16:23:17 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-classes/</guid>
			<description>UIMenuController &amp;mdash;&amp;ndash;定制剪切，复制，粘贴组件。 UILabel &amp;mdash;&amp;mdash;&amp;ndash;文本显示 UIButton &amp;mdash;&amp;mdash;&amp;</description>
			<content type="html"><![CDATA[<p>UIMenuController &mdash;&ndash;定制剪切，复制，粘贴组件。</p>
<p>UILabel   &mdash;&mdash;&ndash;文本显示</p>
<p>UIButton   &mdash;&mdash;&mdash;按钮</p>
<p> </p>
]]></content>
		</item>
		
		<item>
			<title>iOS 各类作用</title>
			<link>https://blog.v5u.win/ios-%E5%90%84%E7%B1%BB%E4%BD%9C%E7%94%A8/</link>
			<pubDate>Tue, 16 Feb 2016 08:23:17 +0000</pubDate>
			
			<guid>https://blog.v5u.win/ios-%E5%90%84%E7%B1%BB%E4%BD%9C%E7%94%A8/</guid>
			<description>UIMenuController —–定制剪切，复制，粘贴组件。 UILabel ——–文本显示 UIButton ———按钮</description>
			<content type="html"><![CDATA[<p>UIMenuController —–定制剪切，复制，粘贴组件。</p>
<p>UILabel   ——–文本显示</p>
<p>UIButton   ———按钮</p>
<p> </p>
]]></content>
		</item>
		
		<item>
			<title>编程原则-参数处理</title>
			<link>https://blog.v5u.win/posts/design/design-%E7%BC%96%E7%A8%8B%E5%8E%9F%E5%88%99-%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86/</link>
			<pubDate>Sun, 14 Feb 2016 12:03:13 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/design/design-%E7%BC%96%E7%A8%8B%E5%8E%9F%E5%88%99-%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86/</guid>
			<description>参数处理原则 软件开发过程当中，需要传递数据作为参数，很多时候我们需要的数据是要经过处理的，这时作为参数传递的部分尽量传递源数据，数据处理放在</description>
			<content type="html"><![CDATA[<h1 id="参数处理原则">参数处理原则</h1>
<p>软件开发过程当中，需要传递数据作为参数，很多时候我们需要的数据是要经过处理的，这时作为参数传递的部分尽量传递源数据，数据处理放在数据接收之后，因为有时可能我们需要的数据现在不用，以后又用了，所以不要过早的对数据进行处理，数据应该是在用的时候再进行处理。</p>
]]></content>
		</item>
		
		<item>
			<title>ios copy 和 mutableCopy</title>
			<link>https://blog.v5u.win/posts/ios/ios-copy-%E5%92%8C-mutablecopy/</link>
			<pubDate>Mon, 18 Jan 2016 19:39:17 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-copy-%E5%92%8C-mutablecopy/</guid>
			<description>通过copy方法可以创建可变对象或不可变对象的不可变副本，对于不可变副本，其对象的值不可以改变。 通过mutableCopy方法可以创建可变对</description>
			<content type="html"><![CDATA[<p>通过copy方法可以创建可变对象或不可变对象的不可变副本，对于不可变副本，其对象的值不可以改变。</p>
<p>通过mutableCopy方法可以创建可变对象或不可变对象的可变副本，对于可变副本其对象是可变的。</p>
<p>当我们要给一个copy一个对象的时候，经常需要使用copy方法，可是copy有两种方法：</p>
]]></content>
		</item>
		
		<item>
			<title>NSString 位数不足补0</title>
			<link>https://blog.v5u.win/nsstring-%E4%BD%8D%E6%95%B0%E4%B8%8D%E8%B6%B3%E8%A1%A50/</link>
			<pubDate>Fri, 15 Jan 2016 08:22:44 +0000</pubDate>
			
			<guid>https://blog.v5u.win/nsstring-%E4%BD%8D%E6%95%B0%E4%B8%8D%E8%B6%B3%E8%A1%A50/</guid>
			<description></description>
			<content type="html"><![CDATA[<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>如何改变xcode 源文件的目录位置</title>
			<link>https://blog.v5u.win/posts/xcode/xcode-%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98xcode-%E6%BA%90%E6%96%87%E4%BB%B6%E7%9A%84%E7%9B%AE%E5%BD%95%E4%BD%8D%E7%BD%AE/</link>
			<pubDate>Mon, 11 Jan 2016 11:10:16 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/xcode/xcode-%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98xcode-%E6%BA%90%E6%96%87%E4%BB%B6%E7%9A%84%E7%9B%AE%E5%BD%95%E4%BD%8D%E7%BD%AE/</guid>
			<description>很多时候会遇到这样的问题，项目中的文件，需要改变目录路径，但是呢，如果仅仅是将本地的文件移到目标目录下，重新编译项目会发现有很多的warnn</description>
			<content type="html"><![CDATA[<p>很多时候会遇到这样的问题，项目中的文件，需要改变目录路径，但是呢，如果仅仅是将本地的文件移到目标目录下，重新编译项目会发现有很多的warnning警告，看着极不舒服，本着优雅的原则，怎么移动文件才是正确的移动方式，不会产生警告呢，那么我(fans)总结的方法如下:</p>
<p><!-- raw HTML omitted -->xcode <!-- raw HTML omitted -->源文件移动方式:</p>
<p>1.复制源文件</p>
<p>2.从Xcode删除文件，到垃圾桶</p>
<p>3.将文件重新添加到项目当中</p>
]]></content>
		</item>
		
		<item>
			<title>孔曰成仁，孟曰取义出处</title>
			<link>https://blog.v5u.win/posts/life/life-%E5%AD%94%E6%9B%B0%E6%88%90%E4%BB%81%E5%AD%9F%E6%9B%B0%E5%8F%96%E4%B9%89%E5%87%BA%E5%A4%84/</link>
			<pubDate>Wed, 23 Dec 2015 12:15:29 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/life/life-%E5%AD%94%E6%9B%B0%E6%88%90%E4%BB%81%E5%AD%9F%E6%9B%B0%E5%8F%96%E4%B9%89%E5%87%BA%E5%A4%84/</guid>
			<description>文天祥就义前的绝笔中写道：“孔曰成仁，孟曰取义，唯其义尽，所以仁至。读圣贤书，所学何事？而今而后，庶几无愧。”</description>
			<content type="html"><![CDATA[<p><!-- raw HTML omitted -->文天祥<!-- raw HTML omitted --><!-- raw HTML omitted -->就义前的绝笔中写道：<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->“孔曰成仁，孟曰取义，唯其义尽，所以仁至。读圣贤书，所学何事？而今而后，庶几无愧。” <!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>孔曰成仁，孟曰取义出处</title>
			<link>https://blog.v5u.win/%E5%AD%94%E6%9B%B0%E6%88%90%E4%BB%81%EF%BC%8C%E5%AD%9F%E6%9B%B0%E5%8F%96%E4%B9%89%E5%87%BA%E5%A4%84/</link>
			<pubDate>Wed, 23 Dec 2015 04:15:29 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E5%AD%94%E6%9B%B0%E6%88%90%E4%BB%81%EF%BC%8C%E5%AD%9F%E6%9B%B0%E5%8F%96%E4%B9%89%E5%87%BA%E5%A4%84/</guid>
			<description></description>
			<content type="html"><![CDATA[<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>儒道至圣</title>
			<link>https://blog.v5u.win/posts/read/read-%E5%84%92%E9%81%93%E8%87%B3%E5%9C%A3/</link>
			<pubDate>Mon, 21 Dec 2015 15:19:40 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/read/read-%E5%84%92%E9%81%93%E8%87%B3%E5%9C%A3/</guid>
			<description>该书文笔很好，构思巧妙，值得一读。 以下为该书简介： 这是一个读书人掌握天地之力的世界。 才气在身，诗可杀敌，词能灭军，文章安天下。 秀才提笔，纸上</description>
			<content type="html"><![CDATA[<p>该书文笔很好，构思巧妙，值得一读。</p>
<p>以下为该书简介：</p>
<p>这是一个读书人掌握天地之力的世界。</p>
<p>才气在身，诗可杀敌，词能灭军，文章安天下。</p>
<p>秀才提笔，纸上谈兵；举人杀敌，出口成章；进士一怒，唇枪舌剑。</p>
<p>圣人驾临，口诛笔伐，可诛人，可判天子无道，以一敌国。</p>
<p>此时，圣院把持文位，国君掌官位，十国相争，蛮族虎视，群妖作乱。</p>
<p>此时，无唐诗大兴，无宋词鼎盛，无创新文章，百年无新圣。</p>
<p>一个默默无闻的寒门子弟，被人砸破头后，挟传世诗词，书惊圣文章，踏上至圣之路。</p>
<p>。。。</p>
]]></content>
		</item>
		
		<item>
			<title>mac 文件如何校验</title>
			<link>https://blog.v5u.win/posts/mac/mac-%E6%96%87%E4%BB%B6%E5%A6%82%E4%BD%95%E6%A0%A1%E9%AA%8C/</link>
			<pubDate>Thu, 17 Dec 2015 11:08:37 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/mac/mac-%E6%96%87%E4%BB%B6%E5%A6%82%E4%BD%95%E6%A0%A1%E9%AA%8C/</guid>
			<description>mac 自带文件校验工具，已经内置在终端(Terminal)下了 输入md5 空格后面加上要校验的文件路径（将文件拖到Terminal窗口就行）回车 或</description>
			<content type="html"><![CDATA[<p>mac 自带文件校验工具，已经内置在终端(Terminal)下了</p>
<p>输入md5 空格后面加上要校验的文件路径（将文件拖到Terminal窗口就行）回车</p>
<p>或</p>
<p>输入shasum 后面加上文件路径 回车皆可得到一串校验码</p>
]]></content>
		</item>
		
		<item>
			<title>计算中国农历</title>
			<link>https://blog.v5u.win/posts/system/system-%E8%AE%A1%E7%AE%97%E5%86%9C%E5%8E%86/</link>
			<pubDate>Sun, 13 Dec 2015 15:14:46 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-%E8%AE%A1%E7%AE%97%E5%86%9C%E5%8E%86/</guid>
			<description>文章请查看：http://blog.csdn.net/orbit/article/details/9210413</description>
			<content type="html"><![CDATA[<p>文章请查看：http://blog.csdn.net/orbit/article/details/9210413</p>
]]></content>
		</item>
		
		<item>
			<title>计算中国农历</title>
			<link>https://blog.v5u.win/%E8%AE%A1%E7%AE%97%E4%B8%AD%E5%9B%BD%E5%86%9C%E5%8E%86/</link>
			<pubDate>Sun, 13 Dec 2015 07:14:46 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E8%AE%A1%E7%AE%97%E4%B8%AD%E5%9B%BD%E5%86%9C%E5%8E%86/</guid>
			<description>文章请查看：http://blog.csdn.net/orbit/article/details/9210413</description>
			<content type="html"><![CDATA[<p>文章请查看：http://blog.csdn.net/orbit/article/details/9210413</p>
]]></content>
		</item>
		
		<item>
			<title>iOS键盘高度的官方获取方法</title>
			<link>https://blog.v5u.win/posts/ios/ios-keyboard-height/</link>
			<pubDate>Wed, 02 Dec 2015 14:54:36 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-keyboard-height/</guid>
			<description>处理键盘事件的正确方法是这样的：（包括获取键盘的高度以及键盘弹出和消失动画的时间） 1）在要使用键盘的视图控制器中，接收键盘事件的通知： [[NSNotificationCenter defaultCenter] addObserver:self</description>
			<content type="html"><![CDATA[<p>处理键盘事件的正确方法是这样的：（包括获取键盘的高度以及键盘弹出和消失动画的时间）</p>
<p>1）在要使用键盘的视图控制器中，接收键盘事件的通知：</p>
<!-- raw HTML omitted -->
<pre><code>        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillShow:) name:UIKeyboardWillShowNotification object:nil];

       [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillHide:) name:UIKeyboardWillHideNotification object:nil];`

`        // 键盘高度变化通知，ios5.0新增的
#ifdef __IPHONE_5_0
        float version = [[[UIDevice currentDevice] systemVersion] floatValue];
        if (version &amp;gt;= 5.0) {
            [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillShow:) name:UIKeyboardWillChangeFrameNotification object:nil];
        }
#endif`&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;　　2）然后添加键盘事件的处理代码：&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
获取到当前keyboard的高度以及动画时间，然后对视图进行对应的操作即可。
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;
&lt;pre&gt;`#pragma mark - #pragma mark Responding to keyboard events
- (void)keyboardWillShow:(NSNotification *)notification {
/* Reduce the size of the text view so that it's not obscured by the keyboard. Animate the resize so that it's in sync with the appearance of the keyboard. */

 NSDictionary *userInfo = [notification userInfo];

// Get the origin of the keyboard when it's displayed.
 NSValue* aValue = [userInfo objectForKey:UIKeyboardFrameEndUserInfoKey];

// Get the top of the keyboard as the y coordinate of its origin in self's view's coordinate system. The bottom of the text view's frame should align with the top of the keyboard's final position.

 CGRect keyboardRect = [aValue CGRectValue];

// Get the duration of the animation.

 NSValue *animationDurationValue = [userInfo objectForKey:UIKeyboardAnimationDurationUserInfoKey];
 NSTimeInterval animationDuration;
 [animationDurationValue getValue:&amp;amp;animationDuration];

// Animate the resize of the text view's frame in sync with the keyboard's appearance.
 [self moveInputBarWithKeyboardHeight:keyboardRect.size.height withDuration:animationDuration];
}

- (void)keyboardWillHide:(NSNotification *)notification {

 NSDictionary* userInfo = [notification userInfo];

/* Restore the size of the text view (fill self's view). Animate the resize so that it's in sync with the disappearance of the keyboard. */

 NSValue *animationDurationValue = [userInfo  objectForKey:UIKeyboardAnimationDurationUserInfoKey];
 NSTimeInterval animationDuration;
 [animationDurationValue getValue:&amp;amp;animationDuration];
 [self moveInputBarWithKeyboardHeight:0.0 withDuration:animationDuration];
}
</code></pre>
<!-- raw HTML omitted -->
<p>ios5隐藏功能分享——“字典”功能（英英字典）：</p>
<p>在任何输入框中选中一个英文单词，此时会有选择项“复制”，“删除”&hellip;等，还有一个向右的箭头，点击这个向右的箭头后，就会出现“定义”选项，点击这个“定义”按钮即会弹出这个英语单词的英文解释。</p>
<p>原文链接</p>
<p><a href="http://www.cnblogs.com/zhulin/archive/2011/10/15/2213687.html">http://www.cnblogs.com/zhulin/archive/2011/10/15/2213687.html</a></p>
]]></content>
		</item>
		
		<item>
			<title>iOS键盘高度的官方获取方法</title>
			<link>https://blog.v5u.win/ios%E9%94%AE%E7%9B%98%E9%AB%98%E5%BA%A6%E7%9A%84%E5%AE%98%E6%96%B9%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95/</link>
			<pubDate>Wed, 02 Dec 2015 06:54:36 +0000</pubDate>
			
			<guid>https://blog.v5u.win/ios%E9%94%AE%E7%9B%98%E9%AB%98%E5%BA%A6%E7%9A%84%E5%AE%98%E6%96%B9%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95/</guid>
			<description>处理键盘事件的正确方法是这样的：（包括获取键盘的高度以及键盘弹出和消失动画的时间） 1）在要使用键盘的视图控制器中，接收键盘事件的通知： 获取到</description>
			<content type="html"><![CDATA[<p>处理键盘事件的正确方法是这样的：（包括获取键盘的高度以及键盘弹出和消失动画的时间）</p>
<p>1）在要使用键盘的视图控制器中，接收键盘事件的通知：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>获取到当前keyboard的高度以及动画时间，然后对视图进行对应的操作即可。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>ps:</p>
<p>ios5隐藏功能分享——“字典”功能（英英字典）：</p>
<p>在任何输入框中选中一个英文单词，此时会有选择项“复制”，“删除”…等，还有一个向右的箭头，点击这个向右的箭头后，就会出现“定义”选项，点击这个“定义”按钮即会弹出这个英语单词的英文解释。</p>
<p>原文链接</p>
<p><a href="http://www.cnblogs.com/zhulin/archive/2011/10/15/2213687.html">http://www.cnblogs.com/zhulin/archive/2011/10/15/2213687.html</a></p>
]]></content>
		</item>
		
		<item>
			<title>gem 包管理器</title>
			<link>https://blog.v5u.win/posts/system/system-gem%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/</link>
			<pubDate>Thu, 12 Nov 2015 15:33:43 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-gem%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/</guid>
			<description>gem 常用命令 查看软件源 gem source -l,不能翻墙的，建议改成国内的源 https://gems.ruby-china.com 移除某个源 gem sources --remove https://ruby.taobao.org/ 添加新的源 gem sources -a https://gems.ruby-china.com/ 安装 gem install [name] gem install cocoapods 卸载指定版本 sudo gem uninstall cocoapods --version=1.5.3 查看 gem</description>
			<content type="html"><![CDATA[<p>gem 常用命令</p>
<p>查看软件源 <code>gem source -l</code>,不能翻墙的，建议改成国内的源 <a href="https://gems.ruby-china.com">https://gems.ruby-china.com</a></p>
<p>移除某个源 <code>gem sources --remove https://ruby.taobao.org/</code></p>
<p>添加新的源 <code>gem sources -a https://gems.ruby-china.com/ </code></p>
<p>安装 gem install [name] <code>gem install cocoapods</code></p>
<p>卸载指定版本 <code>sudo gem uninstall cocoapods --version=1.5.3</code></p>
<p>查看 <code>gem list</code> cocoapods (1.7.4, 1.7.1, 1.5.3) 代表当前安装有三个版本，版本号是()里面的。</p>
<p>sudo 安装的包是安装在系统目录下 /Library/Ruby/Gems/2.3.0/gems</p>
<p>推荐不使用sudo命令,此时 gem的安装目录为 ~/.gem/</p>
<p>教程学习来这里 <a href="https://guides.rubygems.org/">https://guides.rubygems.org/</a></p>
]]></content>
		</item>
		
		<item>
			<title>SEL如何保存到NSArray数组中</title>
			<link>https://blog.v5u.win/posts/ios/ios-sel%E5%A6%82%E4%BD%95%E4%BF%9D%E5%AD%98%E5%88%B0nsarray%E6%95%B0%E7%BB%84%E4%B8%AD/</link>
			<pubDate>Wed, 04 Nov 2015 11:09:43 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-sel%E5%A6%82%E4%BD%95%E4%BF%9D%E5%AD%98%E5%88%B0nsarray%E6%95%B0%E7%BB%84%E4%B8%AD/</guid>
			<description>首先，SEL是不可以保存到array数组中去的。 其次，SEL有两种创建方法： NSArray无法保存SEL，但是可以保存NSString。 所以</description>
			<content type="html"><![CDATA[<p>首先，SEL是不可以保存到array数组中去的。</p>
<p>其次，SEL有两种创建方法：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>NSArray无法保存SEL，但是可以保存NSString。</p>
<p>所以我们利用第二种创建方法，讲SEL的方法名以字符串的方式保存到NSArray数组中即可。</p>
<p>举个栗子：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>HTML&amp;CSS</title>
			<link>https://blog.v5u.win/posts/web/web-html-css/</link>
			<pubDate>Sun, 25 Oct 2015 17:48:49 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/web/web-html-css/</guid>
			<description>&amp;lt;p&amp;gt; paragragh 段落 &amp;lt;em&amp;gt; emphasize 强调(显示为斜体) &amp;lt;span&amp;gt; 样式 &amp;lt;q&amp;gt; quote [kwot] 引用，引号(显示默认添加双引号，故不用再次添加“ ”) &amp;lt;blockquote&amp;gt; 引用块 ，长文本引用(显示默认为缩进，左右都缩</description>
			<content type="html"><![CDATA[<p>&lt;p&gt; paragragh 段落</p>
<p>&lt;em&gt; emphasize 强调(显示为斜体)</p>
<p>&lt;span&gt; 样式</p>
<p>&lt;q&gt; quote [kwot] 引用，引号(显示默认添加双引号，故不用再次添加“ ”)</p>
<p>&lt;blockquote&gt; 引用块 ，长文本引用(显示默认为缩进，左右都缩进)</p>
<p>&lt;br /&gt; break 换行 &amp;nbsp; 空格占位符</p>
<p>&lt;hr /&gt; horizontal rule 水平分割线</p>
<p>&lt;address&gt; 地址标签(默认显示为斜体)</p>
<p>&lt;code&gt; 一行代码</p>
<p>&lt;pre&gt; predefined 预定义，多行代码,预格式化的文本。被包围在 pre 元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体.</p>
<p>&lt;ul&gt; unordered list 定义无序列表 (前方显示一个小圆点)</p>
<p>&lt;li&gt; list 列表</p>
<p>&lt;ol&gt; orderly list 定义有序列表 (前方显示123等数字)</p>
<p>创建表格的四个元素：table、tbody、tr、th、td</p>
<p>&lt;tbody&gt; table body 表格体</p>
<p>&lt;tr&gt; table row 表格，行</p>
<p>&lt;td&gt; table data 表格数据</p>
<p>&lt;th&gt; table head 表格头</p>
<p>&lt;caption&gt; 表格标题</p>
<p>&lt;table summary=&quot;表格简介文本&quot;&gt;</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->&lt;a&gt; action 目标 ，添加超链接 例: &lt;a href=&quot;目标网址&quot; title=&quot;鼠标滑过显示的文本&quot;&gt;链接显示的文本&lt;/a&gt;<!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted --> rel 属性用于指定当前文档与被链接文档的关系 relative 相对关系<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->&lt;span id=&quot;setGreen&quot;&gt;公开课&lt;/span&gt;<!-- raw HTML omitted --></p>
<p>#setGreen{</p>
<p>   color:green;</p>
<p>}</p>
<p><!-- raw HTML omitted -->CSS id选择器<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->.类选器名称{css样式代码;}<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->注意：<!-- raw HTML omitted --></p>
<p>1、英文圆点开头</p>
<p>2、其中类选器名称可以任意起名</p>
<p>&lt;span id=&quot;setGreen&quot;&gt;公开课&lt;/span&gt; </p>
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted -->.food&gt;li{border:1px solid red;}<!-- raw HTML omitted --> <!-- raw HTML omitted -->大于符号(&gt;),用于选择指定标签元素的第一代子元素。<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->solid：表示单线<!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted -->包含选择器，即加入空格,用于选择指定标签元素下的后辈元素。如右侧代码编辑器中的代码：<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->.first  span{color:red;}<!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted -->伪类选择符，它允许给html不存在的标签（标签的某种状态）设置样式 🅰️hover{color:red;}<!-- raw HTML omitted --></p>
<p>上面一行代码就是为 a 标签鼠标滑过的状态设置字体颜色变红。</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->分组选择符：h1,span{color:red;}<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->它相当于下面两行代码：<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>h1{color:red;} span{color:red;}</p>
]]></content>
		</item>
		
		<item>
			<title>Xcode 删除 Provisioning profile 证书</title>
			<link>https://blog.v5u.win/xcode-%E5%88%A0%E9%99%A4-provisioning-profile-%E8%AF%81%E4%B9%A6/</link>
			<pubDate>Sat, 24 Oct 2015 12:09:12 +0000</pubDate>
			
			<guid>https://blog.v5u.win/xcode-%E5%88%A0%E9%99%A4-provisioning-profile-%E8%AF%81%E4%B9%A6/</guid>
			<description></description>
			<content type="html"><![CDATA[<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p> </p>
]]></content>
		</item>
		
		<item>
			<title>.gitignore文件使用说明</title>
			<link>https://blog.v5u.win/posts/system/system-git-gitignore/</link>
			<pubDate>Fri, 09 Oct 2015 13:25:58 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-git-gitignore/</guid>
			<description>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。通常都是些自动生成的文件，像是日志或者编译过程中创建的等等。我们可</description>
			<content type="html"><![CDATA[<p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。通常都是些自动生成的文件，像是日志或者编译过程中创建的等等。我们可以创建一个名为 <!-- raw HTML omitted --><code>.gitignore</code> <!-- raw HTML omitted -->的文件，列出要忽略的文件模式，来看一个简单的例子：</p>
<!-- raw HTML omitted -->
<p>第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的，我们用不着跟踪它们的版本。第二行告诉 Git 忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。要养成一开始就设置好 <!-- raw HTML omitted --><code>.gitignore</code> <!-- raw HTML omitted -->文件的习惯，以免将来误提交这类无用的文件。</p>
<p>文件 <!-- raw HTML omitted --><code>.gitignore</code> <!-- raw HTML omitted -->的格式规范如下：</p>
<ul>
<li>
<p>所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。</p>
</li>
<li>
<p>可以使用标准的 glob 模式匹配。</p>
</li>
<li>
<p>匹配模式最后跟反斜杠（/）说明要忽略的是目录。</p>
</li>
<li>
<p>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</p>
</li>
</ul>
<p>所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。</p>
<p>我们再看一个 <!-- raw HTML omitted --><code>.gitignore</code> <!-- raw HTML omitted -->文件的例子：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<blockquote>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>用 Xcode 编写 C/C&#43;&#43; 的 Hello World！</title>
			<link>https://blog.v5u.win/posts/xcode/xcode-cc&#43;&#43;/</link>
			<pubDate>Fri, 25 Sep 2015 12:24:51 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/xcode/xcode-cc&#43;&#43;/</guid>
			<description>操作步骤： 打开Xcode，在欢迎界面点击Create a new Xcode project。 在左侧栏选择Mac OS X分类的Application，右侧选择Com</description>
			<content type="html"><![CDATA[<p>操作步骤：</p>
<ol>
<li>
<p>打开Xcode，在欢迎界面点击Create a new Xcode project。</p>
</li>
<li>
<p>在左侧栏选择Mac OS X分类的Application，右侧选择Command Line Tool(命令行程序)，点击Next。</p>
</li>
<li>
<p>在Product Name填写项目名称，如HelloMac，其余默认即可（type里也可以选择C或C++），点击Next后选择路径并点击Create完成项目创建。</p>
</li>
<li>
<p>在Xcode主界面左侧点击main.m，把代码替换成C/C++的代码，点击左上角的Run按钮即可编译运行，界面下方会弹出控制台显示运行结果。</p>
</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Cannot find interface declaration for &#39;ClassA&#39;, superclass of &#39;ClassB&#39;</title>
			<link>https://blog.v5u.win/posts/ios/ios-cannot-find-interface-declaration-for-classa-superclass-of-classb/</link>
			<pubDate>Tue, 22 Sep 2015 11:49:57 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-cannot-find-interface-declaration-for-classa-superclass-of-classb/</guid>
			<description>这个error 是由于 头文件循环引用的原因，导致的。 只要删除其中一个class的头文件中的＃import引用，就会解决这个问题</description>
			<content type="html"><![CDATA[<p>这个error 是由于 头文件循环引用的原因，导致的。</p>
<p>只要删除其中一个class的头文件中的＃import引用，就会解决这个问题</p>
]]></content>
		</item>
		
		<item>
			<title>宏定义</title>
			<link>https://blog.v5u.win/posts/system/system-%E5%AE%8F%E5%AE%9A%E4%B9%89/</link>
			<pubDate>Fri, 18 Sep 2015 15:50:23 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-%E5%AE%8F%E5%AE%9A%E4%B9%89/</guid>
			<description>#define DLOG( s, &amp;hellip; ) NSLog(@&amp;quot;&amp;lt; %@: (%d) &amp;gt; %@&amp;quot;,[[NSString stringWithUTF8String:FILE] lastPathComponent], LINE, [NSString stringWithFormat:(s), ##VA_ARGS])这个宏定义是用来在打印log的时候，调试使用，可以显示当前log所在的controlle</description>
			<content type="html"><![CDATA[<p><!-- raw HTML omitted -->#define DLOG( s, &hellip; ) NSLog(@<!-- raw HTML omitted --><!-- raw HTML omitted -->&quot;&lt; %@: (%d) &gt; %@&quot;<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->,[[NSString stringWithUTF8String:<strong>FILE</strong>] lastPathComponent], <strong>LINE</strong>, [NSString stringWithFormat:(s), ##<strong>VA_ARGS</strong>])<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>这个宏定义是用来在打印log的时候，调试使用，可以显示当前log所在的controller名字。</p>
<p>先写出来，原理以后查看了再来补，</p>
]]></content>
		</item>
		
		<item>
			<title>宏定义</title>
			<link>https://blog.v5u.win/%E5%AE%8F%E5%AE%9A%E4%B9%89/</link>
			<pubDate>Fri, 18 Sep 2015 07:50:23 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E5%AE%8F%E5%AE%9A%E4%B9%89/</guid>
			<description></description>
			<content type="html"><![CDATA[<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>Objective-c NSClassFromString 使用方法</title>
			<link>https://blog.v5u.win/posts/ios/ios-oc-nsclassfromstring/</link>
			<pubDate>Mon, 14 Sep 2015 11:58:58 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-oc-nsclassfromstring/</guid>
			<description>NSClassFromString 是一个很有用的东西，尤其在进行 iPhone toolchain 的开发上。 正常来说， 和 是一样的。但是，如果你的程序中并不存在 MySpecialClass 这个类，下面的写法会出错，而上面的写法只是</description>
			<content type="html"><![CDATA[<p>NSClassFromString 是一个很有用的东西，尤其在进行 iPhone toolchain 的开发上。</p>
<p>正常来说，</p>
<!-- raw HTML omitted -->
<p>和</p>
<!-- raw HTML omitted -->
<p>是一样的。但是，如果你的程序中并不存在 MySpecialClass 这个类，下面的写法会出错，而上面的写法只是返回一个空对象而已。</p>
<p>因此，在某些情况下，可以使用 <code>NSClassFromString</code> 来进行你不确定的类的初始化。</p>
<p>比如在 iPhone 中，NSTask 可能就会出现这种情况，所以在你需要使用 NSTask 时，最好使用：</p>
<!-- raw HTML omitted -->
<p>而不要直接使用 <code>[NSTask ...]</code> 这种写法。</p>
<p>NSClassFromString 的好处是：</p>
<ol>
<li>
<p>弱化连接，因此并不会把没有的 Framework 也 link 到程序中。</p>
</li>
<li>
<p>不需要使用 import，因为类是动态加载的，只要存在就可以加载。因此如果你的 toolchain 中没有某个类的头文件定义，而你确信这个类是可以用的，那么也可以用这种方法</p>
</li>
</ol>
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted -->Posted by <!-- raw HTML omitted -->陈斌彬<!-- raw HTML omitted --><!-- raw HTML omitted --> &lt;time class=&ldquo;entry-date&rdquo; datetime=&ldquo;2015-07-02T09:30:24+08:00&rdquo; style=&quot;</p>
<p>margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-family: inherit; font-size: 15.64px; vertical-align: baseline;&quot;&gt;<!-- raw HTML omitted --><!-- raw HTML omitted -->Jul<!-- raw HTML omitted --> <!-- raw HTML omitted -->2<!-- raw HTML omitted --><!-- raw HTML omitted -->nd<!-- raw HTML omitted -->, <!-- raw HTML omitted -->2015<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->9:30 am<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --> <a href="http://cnbin.github.io/blog/categories/objective-c/">objective-c</a><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>Objective-c NSClassFromString 使用方法</title>
			<link>https://blog.v5u.win/objective-c-nsclassfromstring-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</link>
			<pubDate>Mon, 14 Sep 2015 03:58:58 +0000</pubDate>
			
			<guid>https://blog.v5u.win/objective-c-nsclassfromstring-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
			<description>NSClassFromString 是一个很有用的东西，尤其在进行 iPhone toolchain 的开发上。 正常来说， id myObj = [[NSClassFromString(@&amp;#34;MySpecialClass&amp;#34;) alloc] init]; 和 id myObj = [[MySpecialClass alloc] init]; 是一样的。但是，如果你的程序中并不存在 MySpecialClass 这个类，下面的写法</description>
			<content type="html"><![CDATA[<p>NSClassFromString 是一个很有用的东西，尤其在进行 iPhone toolchain 的开发上。</p>
<p>正常来说，</p>
<pre tabindex="0"><code>id myObj = [[NSClassFromString(@&#34;MySpecialClass&#34;) alloc] init];
</code></pre><p>和</p>
<pre tabindex="0"><code>id myObj = [[MySpecialClass alloc] init];
</code></pre><p>是一样的。但是，如果你的程序中并不存在 MySpecialClass 这个类，下面的写法会出错，而上面的写法只是返回一个空对象而已。</p>
<p>因此，在某些情况下，可以使用 NSClassFromString 来进行你不确定的类的初始化。</p>
<p>比如在 iPhone 中，NSTask 可能就会出现这种情况，所以在你需要使用 NSTask 时，最好使用：</p>
<pre tabindex="0"><code>[[NSClassFromString(@&#34;NSTask&#34;) .....]]
</code></pre><p>而不要直接使用 [NSTask &hellip;] 这种写法。</p>
<p><strong>NSClassFromString 的好处是：</strong></p>
<p>弱化连接，因此并不会把没有的 Framework 也 link 到程序中。</p>
<p>不需要使用 import，因为类是动态加载的，只要存在就可以加载。因此如果你的 toolchain 中没有某个类的头文件定义，而你确信这个类是可以用的，那么也可以用这种方法</p>
]]></content>
		</item>
		
		<item>
			<title>NSDate和时间戳互转</title>
			<link>https://blog.v5u.win/posts/ios/ios-nsdate2timenumber/</link>
			<pubDate>Fri, 28 Aug 2015 16:53:17 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-nsdate2timenumber/</guid>
			<description>iOS 将时间NSDate转化为毫秒时间戳 对于将NSDate类型转换为时间戳，相信大家肯定都会，这样的示例代码，在百度等搜索引擎上面一搜索就是一大</description>
			<content type="html"><![CDATA[<h2 id="ios-将时间nsdate转化为毫秒时间戳">iOS 将时间NSDate转化为毫秒时间戳</h2>
<p>对于将NSDate类型转换为时间戳，相信大家肯定都会，这样的示例代码，在百度等搜索引擎上面一搜索就是一大篇的东西，但是，大家有没有注意到的是 通过那些方法转换得到的时间戳是 10位的数值，这个数值在转化为 NSDate类型的时候，就会出点儿错，你会发现，每一个时间的 毫秒都是为000的； </p>
<p>而正确的应该是下面这样的输出： </p>
<p>    好了，接下来就是问题所在了：其实呢，并不是我们代码出错了，而是因为 [[NSDate date] timeIntervalSince1970] 虽然可以获取到后面的毫秒、微秒 ，但是在保存的时候省略掉了。如一个时间戳不省略的情况下为 1395399556.862046 ，省略掉后为一般所见 1395399556 。所以想取得毫秒时用获取到的时间戳 *1000 ，想取得微秒时 用取到的时间戳 * 1000 * 1000 。这样就解释了上面的10位数值的问题，当你取毫秒的时候，就会变成13位数值了。我想这样大家应该明白了吧！ 
    当然，说了 这么多理论性的东西，为的就是我们接下来会附上的代码的： 
将这段代码写在 你需要获取时间戳和转换的地方，而我因为是简单示范，就放在-viewDidload里面的。 </p>
<p>long long time = [self getDateTimeTOMilliSeconds:[NSDate date]];
NSLog(@&quot;%llu&quot;,time);</p>
<p>NSDate *dat = [self getDateTimeFromMilliSeconds:time];
NSDateFormatter * formatter = [[NSDateFormatter alloc ] init];
[formatter setDateFormat:@&quot;YYYY-MM-dd hh:mm:ss.SSS&quot;];
NSString *date = [formatter stringFromDate:dat];
NSString *timeLocal = [[NSString alloc] initWithFormat:@&quot;%@&quot;, date];
NSLog(@&quot;n%@&quot;, timeLocal);</p>
<p>里面包含了自己写出来了2个小函数，这2个函数呢，是互逆的： </p>
<p>//将时间戳转换为NSDate类型
-(NSDate *)getDateTimeFromMilliSeconds:(long long) miliSeconds
{
NSTimeInterval tempMilli = miliSeconds;
NSTimeInterval seconds = tempMilli/1000.0;//这里的.0一定要加上，不然除下来的数据会被截断导致时间不一致
NSLog(@&quot;传入的时间戳=%f&quot;,seconds);
return [NSDate dateWithTimeIntervalSince1970:seconds];
}</p>
<p>//将NSDate类型的时间转换为时间戳,从1970/1/1开始
-(long long)getDateTimeTOMilliSeconds:(NSDate <em>)datetime
{
NSTimeInterval interval = [datetime timeIntervalSince1970];
NSLog(@&quot;转换的时间戳=%f&quot;,interval);
long long totalMilliseconds = interval</em>1000 ;
NSLog(@&quot;totalMilliseconds=%llu&quot;,totalMilliseconds);
return totalMilliseconds;
}</p>
<p>这样，你就可以得到你想要的13位时间戳，并且从这个时间戳里面获取正确的时间（精确到毫秒哟！）。 </p>
<p>本文转自晓龙歌：http://longlinyisheng.lofter.com/post/3ca1cc_59c458a</p>
]]></content>
		</item>
		
		<item>
			<title>Unknown Class **** in Interface Builder file</title>
			<link>https://blog.v5u.win/posts/ios/ios-unknown-class-in-interface-builder-file/</link>
			<pubDate>Mon, 24 Aug 2015 10:44:12 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-unknown-class-in-interface-builder-file/</guid>
			<description>I added a UIView xib file using the root class of MyView. I created it in the wrong place and so moved it in the project. Same project just a different folder/group. I then had a problem when running saying&amp;hellip; Unknown Class MyView in Interface Builder file I couldn&#39;t work out what was wrong so I have now deleted the files both from the project and from the directory. I&#39;ve</description>
			<content type="html"><![CDATA[<p>I added a UIView xib file using the root class of <code>MyView</code>.</p>
<p>I created it in the wrong place and so moved it in the project. Same project just a different folder/group.</p>
<p>I then had a problem when running saying&hellip;</p>
<p><code>Unknown Class MyView in Interface Builder file</code></p>
<p>I couldn't work out what was wrong so I have now deleted the files both from the project and from the directory.</p>
<p>I've done a search using SublimeText2 for the string &quot;MyView&quot; and it doesn't exist anywhere in the project.</p>
<p>I've reset the simulator, cleaned the project and the build folder and deleted derived data.</p>
<p>Still getting the same error.</p>
<p>Any ideas what I can do now?</p>
<p>范子遇到的问题也是这样的，这个问题的产生过程一模一样：</p>
<p>开始建了一个xib后来发现设计不行，就有删除了，啊啊啊，从此噩梦开始了。。。</p>
<p>只要一运行就崩溃，清楚缓存，不行，删除项目，不行；后来看到据说这是Xcode5的一个bug，但是大哥，我的Xcode版本是6啊，怎么还不解决！只能使用真机测试没问题，也就只能这样了。如此过了几日。</p>
<p>但是机智的我会被这点小困难打倒吗，终于有一天我决定解决这个问题（其实是因为，忘带数据线，没办法真机测试了*——*），于是到处Google，哈哈，功夫不负有心人，我从一篇答案中获得了灵感，触类旁通，忽然想到，我的ViewController当初常见的时候使用的是init方法，虽然一般系统默认调用init方法会检查有无nib有的话会调用nib但是希望不能寄托在Xcode身上，我断定就是这里出了问题，于是返回代码试验，将init方法改为initWithNibName方法，command+R 运行OK，</p>
<p>至此问题解决，噢耶！</p>
]]></content>
		</item>
		
		<item>
			<title>文字上添加删除线</title>
			<link>https://blog.v5u.win/posts/ios/ios-%E6%96%87%E5%AD%97%E4%B8%8A%E6%B7%BB%E5%8A%A0%E5%88%A0%E9%99%A4%E7%BA%BF/</link>
			<pubDate>Fri, 21 Aug 2015 17:10:49 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-%E6%96%87%E5%AD%97%E4%B8%8A%E6%B7%BB%E5%8A%A0%E5%88%A0%E9%99%A4%E7%BA%BF/</guid>
			<description>NSString * str = @&amp;quot;ABCDEFG HIJKLMN&amp;quot;; UILabel * aLab = [[UILabel alloc]initWithFrame:CGRectMake(10, 100, 300, 300)]; aLab.text = str;NSMutableAttributedString * testAttriString = [[NSMutableAttributedString alloc] initWithString:str]; [testAttriString addAttribute:NSStrikethroughStyleAttributeName value:[NSNumber numberWithInt:NSUnderlineStyleSingle] range:NSMakeRange(0, testAttriString.length)]; aLab.attributedText = testAttriString;[self.view addSubview:aLab];</description>
			<content type="html"><![CDATA[<p><img src="http://images.cnitblog.com/blog/685490/201412/221956443439449.png" alt=""></p>
<p>    NSString * str = @&quot;ABCDEFG HIJKLMN&quot;;</p>
<p>    UILabel * aLab = [[UILabel alloc]initWithFrame:CGRectMake(10, 100, 300, 300)];</p>
<p><!-- raw HTML omitted -->    aLab.text = str;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    NSMutableAttributedString * testAttriString = [[NSMutableAttributedString alloc] initWithString:str];<!-- raw HTML omitted --></p>
<p>   [testAttriString addAttribute:NSStrikethroughStyleAttributeName value:[NSNumber numberWithInt:NSUnderlineStyleSingle] range:NSMakeRange(0, testAttriString.length)];</p>
<p><!-- raw HTML omitted -->    aLab.attributedText = testAttriString;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    [self.view addSubview:aLab];<!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>App Store上架前的准备</title>
			<link>https://blog.v5u.win/posts/ios/ios-appstore_public_before/</link>
			<pubDate>Fri, 21 Aug 2015 17:10:11 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-appstore_public_before/</guid>
			<description>一、制作ipa发布包 1、所需装备 1）一个distribution发布版证书 2）Xcode，iTunes，完成的项目，这都不用说了 开始配置Xc</description>
			<content type="html"><![CDATA[<p>一、制作ipa发布包</p>
<p>1、所需装备</p>
<p>1）一个distribution发布版证书</p>
<p>2）Xcode，iTunes，完成的项目，这都不用说了</p>
<p>开始配置Xcode</p>
<ol>
<li>
<p>Build Setting &mdash;&gt; code signing &mdash;&gt; Provisioning profile 设为发布证书</p>
</li>
<li>
<p>Build Setting &mdash;&gt; Architectures &mdash;&gt; build active Architectures Only 设为NO </p>
</li>
</ol>
<p>  3.  Product&mdash;&gt;scheme&mdash;-&gt; edit scheme&mdash;&gt;build configration 改为release</p>
<p>然后：shift+command+k clean项目 &mdash;&gt;command+B build新项目</p>
<p>将Xcode里面的项目app拖到iTunes的应用里面，再将项目拖出 ，到文件里面，至此成功，可以准备提交到iTunes connection了。</p>
]]></content>
		</item>
		
		<item>
			<title>WordPress中各个全局函数的含义和应用</title>
			<link>https://blog.v5u.win/wordpress%E4%B8%AD%E5%90%84%E4%B8%AA%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0%E7%9A%84%E5%90%AB%E4%B9%89%E5%92%8C%E5%BA%94%E7%94%A8/</link>
			<pubDate>Tue, 18 Aug 2015 02:10:38 +0000</pubDate>
			
			<guid>https://blog.v5u.win/wordpress%E4%B8%AD%E5%90%84%E4%B8%AA%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0%E7%9A%84%E5%90%AB%E4%B9%89%E5%92%8C%E5%BA%94%E7%94%A8/</guid>
			<description></description>
			<content type="html"><![CDATA[<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>iOS自动布局解决警告Automatic Preferred Max Layout Width is not available on iOS versions prior to 8.0</title>
			<link>https://blog.v5u.win/ios%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80%E8%A7%A3%E5%86%B3%E8%AD%A6%E5%91%8Aautomatic-preferred-max-layout-width-is-not-available-on-ios-versions-prior-to-8-0/</link>
			<pubDate>Sun, 16 Aug 2015 04:33:07 +0000</pubDate>
			
			<guid>https://blog.v5u.win/ios%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80%E8%A7%A3%E5%86%B3%E8%AD%A6%E5%91%8Aautomatic-preferred-max-layout-width-is-not-available-on-ios-versions-prior-to-8-0/</guid>
			<description></description>
			<content type="html"><![CDATA[<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>主动退出iOS程序</title>
			<link>https://blog.v5u.win/posts/ios/ios-force-exit/</link>
			<pubDate>Mon, 10 Aug 2015 12:05:51 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-force-exit/</guid>
			<description>exit(0); 只有这个API可以通过AppStore。</description>
			<content type="html"><![CDATA[<p>exit(0);</p>
<p>只有这个API可以通过AppStore。</p>
]]></content>
		</item>
		
		<item>
			<title>主动退出iOS程序</title>
			<link>https://blog.v5u.win/%E4%B8%BB%E5%8A%A8%E9%80%80%E5%87%BAios%E7%A8%8B%E5%BA%8F/</link>
			<pubDate>Mon, 10 Aug 2015 04:05:51 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E4%B8%BB%E5%8A%A8%E9%80%80%E5%87%BAios%E7%A8%8B%E5%BA%8F/</guid>
			<description>exit(0); 只有这个API可以通过AppStore。</description>
			<content type="html"><![CDATA[<p>exit(0);</p>
<p>只有这个API可以通过AppStore。</p>
]]></content>
		</item>
		
		<item>
			<title>iOS7之后如何获得APP唯一的身份标识</title>
			<link>https://blog.v5u.win/posts/ios/ios-uuid/</link>
			<pubDate>Sun, 09 Aug 2015 11:24:34 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-uuid/</guid>
			<description>历史： iOS 5.0以前，iOS 2.0版本以后UIDevice提供一个获取设备唯一标识符的方法uniqueIdentifier，因为该唯一标识符与</description>
			<content type="html"><![CDATA[<p><strong>历史：</strong></p>
<ol>
<li>iOS 5.0以前，iOS 2.0版本以后UIDevice提供一个获取设备唯一标识符的方法uniqueIdentifier，因为该唯一标识符与手机一一对应，苹果觉得可能会泄露用户隐私，所以在 iOS 5.0之后该方法就被废弃掉了。</li>
</ol>
<p>2）iOS 6.0系统新增了两个用于替换uniqueIdentifier的接口，分别是：identifierForVendor，advertisingIdentifier。</p>
<p>但是APP删除重装后会变化，所以使用WiFi的mac地址来取代已经废弃了的uniqueIdentifier方法。具体的方法晚上有很多，大家感兴趣的可以自己找找，这儿提供一个网址: <a href="http://stackoverflow.com/questions/677530/how-can-i-programmatically-get-the-mac-address-of-an-iphone">http://stackoverflow.com/questions/677530/how-can-i-programmatically-get-the-mac-address-of-an-iphone</a></p>
<p>3）iOS 7中苹果再一次无情的封杀mac地址，使用之前的方法获取到的mac地址全部都变成了02:00:00:00:00:00。有问题总的解决啊，于是四处查资料，终于有了思路是否可以使用KeyChain来保存获取到的唯一标示符呢，这样以后即使APP删了再装回来，也可以从KeyChain中读取回来。</p>
<p><strong>OK 正题来了。。。</strong></p>
<p><strong>KeyChain介绍</strong></p>
<p>　　我们搞iOS开发，一定都知道OS X里面的KeyChain(钥匙串)，通常要乡镇及调试的话，都得安装证书之类的，这些证书就是保存在KeyChain中，还有我们平时浏览网页记录的账号密码也都是记录在KeyChain中。iOS中的KeyChain相比OS X比较简单，整个系统只有一个KeyChain，每个程序都可以往KeyChain中记录数据，而且只能读取到自己程序记录在KeyChain中的数据。iOS中Security.framework框架提供了四个主要的方法来操作KeyChain:</p>
<p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p>
<pre tabindex="0"><code>// 查询
OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result);

// 添加
OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result);

// 更新KeyChain中的Item
OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate);

// 删除KeyChain中的Item
OSStatus SecItemDelete(CFDictionaryRef query)
</code></pre><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p>
<p>　　这四个方法参数比较复杂，一旦传错就会导致操作KeyChain失败，这块儿文档中介绍的比较详细，大家可以查查官方文档<a href="https://developer.apple.com/library/ios/documentation/Security/Reference/keychainservices/Reference/reference.html#//apple_ref/doc/uid/TP30000898">Keychain Services Reference</a>。</p>
<p>　　前面提到了每个APP只允许访问自己在KeyChain中记录的数据，那么是不是就没有别的办法访问其他APP存在KeyChain的数据了？</p>
<p>　　苹果提供了一个方法允许同一个发商的多个APP访问各APP之间的途径，即在调SecItemAdd添加数据的时候指定AccessGroup，即访问组。一个APP可以属于同事属于多个分组，添加KeyChain数据访问组需要做一下两件事情:</p>
<p>　　a、在APP target的bulibSetting里面设置Code Signing Entitlements，指向包含AceessGroup的分组信息的plist文件。该文件必须和工程文件在同一个目录下，我在添加访问分组的时候就因为plist文件位置问题，操作KeyChain失败，查找这个问题还花了好久的时间。</p>
<p><img src="http://images.cnitblog.com/blog/302680/201308/30004633-f6d30ed8a07d4e5f909e24a94e0b298e.png" alt="img"></p>
<p>　　b、在工程目录下新建一个KeychainAccessGroups.plist文件，该文件的结构中最顶层的节点必须是一个名为“keychain-access-groups”的Array，并且该Array中每一项都是一个描述分组的NSString。<strong>对于String的格式也有相应要求，格式为:&ldquo;AppIdentifier.com.*</strong>&quot;，其中APPIdentifier就是你的开发者帐号对应的ID。**</p>
<p>　　c、在代码中往KeyChain中Add数据的时候，设置kSecAttrAccessGroup，代码如下:</p>
<p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p>
<pre tabindex="0"><code>　　 NSString *accessGroup = [NSString stringWithUTF8String:&#34;APPIdentifier.com.cnblogs.smileEvday&#34;];
    if (accessGroup != nil)
    {
#if TARGET_IPHONE_SIMULATOR
        // Ignore the access group if running on the iPhone simulator.
        //
        // Apps that are built for the simulator aren&#39;t signed, so there&#39;s no keychain access group
        // for the simulator to check. This means that all apps can see all keychain items when run
        // on the simulator.
        //
        // If a SecItem contains an access group attribute, SecItemAdd and SecItemUpdate on the
        // simulator will return -25243 (errSecNoAccessForItem).
#else
        [dictForQuery setObject:accessGroup forKey:(id)kSecAttrAccessGroup];
#endif
    }
</code></pre><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p>
<p>　　这段代码是从官方的Demo中直接拷贝过来的，根据注释我们可以看到，模拟器是不支持AccessGroup的，所以才行了预编译宏来选择性添加。</p>
<p>　　<strong>注：appIdentifer就是开发者帐号的那一串标识，如下图所示：</strong></p>
<p>　　<img src="http://images.cnitblog.com/blog/302680/201310/09212447-ebd65550015647b788d6d6711b0bb90a.png" alt="img"></p>
<p>　　打开xcode的Organizer，选择Device选项卡，连接设备就可以看到设备上安装的开发者账号描述文件列表，其中第五列最开始的10个字符即为App Identifier，这块儿前面写的不是很清楚，好多朋友加我qq问我，今天特地补上。</p>
<p><strong>三、使用KeyChain保存和获取UDID</strong></p>
<p>　　</p>
<p>　　说了这么多终于进入正题了，如何在iOS 7上面获取到不变的UDID。我们将第二部分所讲的知识直接应用进来就可以了轻松达到我们要的效果了，下面我们先看看往如何将获取到的identifierForVendor添加到KeyChain中的代码。</p>
<p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p>
<pre tabindex="0"><code>+ (BOOL)settUDIDToKeyChain:(NSString*)udid
{
    NSMutableDictionary *dictForAdd = [[NSMutableDictionary alloc] init];
    
    [dictForAdd setValue:(id)kSecClassGenericPassword forKey:(id)kSecClass];
    [dictForAdd setValue:[NSString stringWithUTF8String:kKeychainUDIDItemIdentifier] forKey:kSecAttrDescription];
    
    [dictForAdd setValue:@&#34;UUID&#34; forKey:(id)kSecAttrGeneric];    
    // Default attributes for keychain item.
    [dictForAdd setObject:@&#34;&#34; forKey:(id)kSecAttrAccount];
    [dictForAdd setObject:@&#34;&#34; forKey:(id)kSecAttrLabel];    
    // The keychain access group attribute determines if this item can be shared    // amongst multiple apps whose code signing entitlements contain the same keychain access group.
    NSString *accessGroup = [NSString stringWithUTF8String:kKeyChainUDIDAccessGroup];    if (accessGroup != nil)
    {#if TARGET_IPHONE_SIMULATOR        // Ignore the access group if running on the iPhone simulator.        //
        // Apps that are built for the simulator aren&#39;t signed, so there&#39;s no keychain access group        // for the simulator to check. This means that all apps can see all keychain items when run        // on the simulator.        //
        // If a SecItem contains an access group attribute, SecItemAdd and SecItemUpdate on the        // simulator will return -25243 (errSecNoAccessForItem).#else
        [dictForAdd setObject:accessGroup forKey:(id)kSecAttrAccessGroup];#endif
    }    const char *udidStr = [udid UTF8String];
    NSData *keyChainItemValue = [NSData dataWithBytes:udidStr length:strlen(udidStr)];
    [dictForAdd setValue:keyChainItemValue forKey:(id)kSecValueData];
    
    OSStatus writeErr = noErr;    if ([SvUDIDTools getUDIDFromKeyChain]) {        // there is item in keychain        [SvUDIDTools updateUDIDInKeyChain:udid];
        [dictForAdd release];        return YES;
    }    else {          // add item to keychain
        writeErr = SecItemAdd((CFDictionaryRef)dictForAdd, NULL);        if (writeErr != errSecSuccess) {
            NSLog(@&#34;Add KeyChain Item Error!!! Error Code:%ld&#34;, writeErr);
            
            [dictForAdd release];            return NO;
        }        else {
            NSLog(@&#34;Add KeyChain Item Success!!!&#34;);
            [dictForAdd release];            return YES;
        }
    }
    
    [dictForAdd release];    return NO;
}
</code></pre><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p>
<p>　　上面代码中，首先构建一个要添加到KeyChain中数据的Dictionary，包含一些基本的KeyChain Item的数据类型，描述，访问分组以及最重要的数据等信息，最后通过调用SecItemAdd方法将我们需要保存的UUID保存到KeyChain中。</p>
<p>　　获取KeyChain中相应数据的代码如下:</p>
<p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p>
<pre tabindex="0"><code>+ (NSString*)getUDIDFromKeyChain
{
    NSMutableDictionary *dictForQuery = [[NSMutableDictionary alloc] init];
    [dictForQuery setValue:(id)kSecClassGenericPassword forKey:(id)kSecClass];    
    // set Attr Description for query    [dictForQuery setValue:[NSString stringWithUTF8String:kKeychainUDIDItemIdentifier]
                    forKey:kSecAttrDescription];    
    // set Attr Identity for query
    NSData *keychainItemID = [NSData dataWithBytes:kKeychainUDIDItemIdentifier
                                            length:strlen(kKeychainUDIDItemIdentifier)];
    [dictForQuery setObject:keychainItemID forKey:(id)kSecAttrGeneric];    
    // The keychain access group attribute determines if this item can be shared    // amongst multiple apps whose code signing entitlements contain the same keychain access group.
    NSString *accessGroup = [NSString stringWithUTF8String:kKeyChainUDIDAccessGroup];    if (accessGroup != nil)
    {#if TARGET_IPHONE_SIMULATOR        // Ignore the access group if running on the iPhone simulator.        //
        // Apps that are built for the simulator aren&#39;t signed, so there&#39;s no keychain access group        // for the simulator to check. This means that all apps can see all keychain items when run        // on the simulator.        //
        // If a SecItem contains an access group attribute, SecItemAdd and SecItemUpdate on the        // simulator will return -25243 (errSecNoAccessForItem).#else
        [dictForQuery setObject:accessGroup forKey:(id)kSecAttrAccessGroup];#endif
    }
    
    [dictForQuery setValue:(id)kCFBooleanTrue forKey:(id)kSecMatchCaseInsensitive];
    [dictForQuery setValue:(id)kSecMatchLimitOne forKey:(id)kSecMatchLimit];
    [dictForQuery setValue:(id)kCFBooleanTrue forKey:(id)kSecReturnData];
    
    OSStatus queryErr   = noErr;
    NSData   *udidValue = nil;
    NSString *udid      = nil;
    queryErr = SecItemCopyMatching((CFDictionaryRef)dictForQuery, (CFTypeRef*)&amp;udidValue);
    
    NSMutableDictionary *dict = nil;
    [dictForQuery setValue:(id)kCFBooleanTrue forKey:(id)kSecReturnAttributes];
    queryErr = SecItemCopyMatching((CFDictionaryRef)dictForQuery, (CFTypeRef*)&amp;dict);    
    if (queryErr == errSecItemNotFound) {
        NSLog(@&#34;KeyChain Item: %@ not found!!!&#34;, [NSString stringWithUTF8String:kKeychainUDIDItemIdentifier]);
    }    else if (queryErr != errSecSuccess) {
        NSLog(@&#34;KeyChain Item query Error!!! Error code:%ld&#34;, queryErr);
    }    if (queryErr == errSecSuccess) {
        NSLog(@&#34;KeyChain Item: %@&#34;, udidValue);        
        if (udidValue) {
            udid = [NSString stringWithUTF8String:udidValue.bytes];
        }
    }
    
    [dictForQuery release];    return udid;
}
</code></pre><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p>
<p>　　上面代码的流程也差不多一样，首先创建一个Dictionary，其中设置一下查找条件，然后通过SecItemCopyMatching方法获取到我们之前保存到KeyChain中的数据。</p>
<p>　　</p>
<p><strong>四、总结</strong></p>
<p>　　本文介绍了使用KeyChain实现APP删除后依然可以获取到相同的UDID信息的解决方法。</p>
<p>　　你可能有疑问，如果系统升级以后，是否仍然可以获取到之前记录的UDID数据？</p>
<p>　　答案是肯定的，这一点我专门做了测试。就算我们程序删除掉，系统经过升级以后再安装回来，依旧可以获取到与之前一致的UDID。但是当我们把整个系统还原以后是否还能获取到之前记录的UDID，这一点我觉得应该不行，不过手机里面数据太多，没有测试，如果大家有兴趣可以测试一下，验证一下我的猜想。</p>
<p>　　</p>
<p>　　完整代码地址: <a href="https://github.com/smileEvday/SvUDID">https://github.com/smileEvday/SvUDID</a></p>
<p>　　大家如果要在真机运行时，需要替换两个地方:</p>
<p>　　第一个地方是plist文件中的accessGroup中的APPIdentifier。</p>
<p>　　第二个地方是SvUDIDTools.m中的kKeyChainUDIDAccessGroup的APPIdentity为你所使用的profile的APPIdentifier。</p>
<p>　　文章和代码中如果有什么不对的地方，欢迎指正，在这儿先谢过了。</p>
<p>文章由<a href="http://www.cnblogs.com/smileEvday/p/UDID.html#commentform">一片枫叶的博客</a>修改而来</p>
]]></content>
		</item>
		
		<item>
			<title>MAC系统XAMPP 中 MySQL命令行客户端配置使用</title>
			<link>https://blog.v5u.win/posts/php/php-xampp/</link>
			<pubDate>Fri, 07 Aug 2015 23:42:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/php/php-xampp/</guid>
			<description>MySQL客户端 MySQL安装包里面，在一个名为bin的文件夹，放置了很多工具包，但是使用他们的方式是命令行（ps：最近上瘾了）。在MAC系</description>
			<content type="html"><![CDATA[<p><strong><!-- raw HTML omitted -->MySQL客户端<!-- raw HTML omitted --></strong></p>
<p><!-- raw HTML omitted -->     <!-- raw HTML omitted --><!-- raw HTML omitted -->MySQL安装包里面，在一个名为bin的文件夹，放置了很多工具包，但是使用他们的方式是命令行（ps：最近上瘾了）。<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->      在MAC系统，使用命令行的工具可以使用系统自带的Terminal:<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->      <img src="http://img.blog.csdn.net/20140616161819640?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvanNfZGFkYQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->      顺便在这提一下，笔者使用的php＋mysql环境是MAC版的XAMPP，MySQL的客户端工具就放置在XAMPP里面的bin文件夹。<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->      但是如何才能使用这客户端？<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->      在Terminal进入到XAMPP的bin文件夹，输入命令：<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<ol>
<li><!-- raw HTML omitted --><!-- raw HTML omitted -->mysql -u root -p  <!-- raw HTML omitted --><!-- raw HTML omitted --></li>
</ol>
<p><!-- raw HTML omitted -->      并没有笔者想要的结果，应该是提示输入密码的呀？？？？？？<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->      在Terminal反馈给我的确是 : command not found<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted -->what ? 明明就在面前，如何not found，这下苦逼了！好吧，看来需要花点时间找找问题所在了。</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted -->经过很长很长很长&hellip;&hellip;&hellip;&hellip;&hellip;的时间里，终于&hellip;.</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted -->原来当你输入命令的时间，系统会在/usr/bin这个位置里寻找你输入的命令，如果你没有把命令引入到这个位置，无论你直接cd到工具具体的位置调用，也是白费</p>
<p>        功夫的。只要把这个工具的绝对位置引入到/usr/bin，所有的问题就迎刃而解了，只要我们把这条命令执行：</p>
<ol>
<li><!-- raw HTML omitted --><!-- raw HTML omitted -->ln -s /applications/xampp/bin/mysql /usr/bin  <!-- raw HTML omitted --><!-- raw HTML omitted --></li>
</ol>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted -->这个时候，我们再输入链接数据库命令，然后：</p>
<p>       <img src="http://img.blog.csdn.net/20140616163422578?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvanNfZGFkYQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>sqlite3的使用</title>
			<link>https://blog.v5u.win/posts/system/system-sqlite3/</link>
			<pubDate>Fri, 07 Aug 2015 23:38:47 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/system/system-sqlite3/</guid>
			<description>新建数据库sqlite3 databasefilename检查databasefilename是否存在，如果不存在就创建并进入数据库（如果直接</description>
			<content type="html"><![CDATA[<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->新建数据库<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->sqlite3 databasefilename<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->检查databasefilename是否存在，如果不存在就创建并进入数据库（如果直接退出，数据库文件不会创建）  如果已经存在直接进入数据库 对数据库进行操作<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted -->
<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->创建表<!-- raw HTML omitted -->：</p>
<p><!-- raw HTML omitted -->create table if not exists UserList(id integer primary key autoincrement,firstName[not null],lastName[not null],sex,birthday,remark[not null],resumeNum[not null])<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>该表已经创建了主键，可以自增ID</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>terminal命令行使用sqlite3</p>
<p>打开或创建：进入到文件所在目录下，输入sqlite3 filename</p>
<p>1、显示数据库中所有的表：.tables</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>2、显示表头：.head on 然后执行 select * from tableName</p>
<p>sqlite中命令:
以.开头,大小写敏感（数据库对象名称是大小写不敏感的）
.exit
.help 查看帮助 针对命令
.database 显示数据库信息；包含当前数据库的位置
.tables 或者 .table 显示表名称  没有表则不显示
.schema 命令可以查看创建数据对象时的SQL命令；
.schema databaseobjectname查看创建该数据库对象时的SQL的命令；如果没有这个数据库对象就不显示内容，不会有错误提示</p>
<p>.read FILENAME 执行指定文件中的SQL语句
.headers on/off  显示表头 默认off</p>
<p>.mode list|column|insert|line|tabs|tcl|csv   改变输出格式，具体如下</p>
<p>sqlite&gt; .mode list
sqlite&gt; select * from emp;
7369|SMITH|CLERK|7902|17-12-1980|800||20
7499|ALLEN|SALESMAN|7698|20-02-1981|1600|300|30
如果字段值为NULL 默认不显示 也就是显示空字符串</p>
<p>sqlite&gt; .mode column
sqlite&gt; select * from emp;
7369        SMITH       CLERK       7902        17-12-1980  800                     20        
7499        ALLEN       SALESMAN    7698        20-02-1981  1600        300         30        
7521        WARD        SALESMAN    7698        22-02-1981  1250        500         30 </p>
<p>sqlite&gt; .mode insert
sqlite&gt; select * from dept;
INSERT INTO table VALUES(10,'ACCOUNTING','NEW YORK');
INSERT INTO table VALUES(20,'RESEARCH','DALLAS');
INSERT INTO table VALUES(30,'SALES','CHICAGO');
INSERT INTO table VALUES(40,'OPERATIONS','BOSTON');</p>
<p>sqlite&gt; .mode line
sqlite&gt; select * from dept;
DEPTNO = 10
 DNAME = ACCOUNTING
   LOC = NEW YORK</p>
<p>DEPTNO = 20
 DNAME = RESEARCH
   LOC = DALLAS</p>
<p>DEPTNO = 30
 DNAME = SALES
   LOC = CHICAGO</p>
<p>DEPTNO = 40
 DNAME = OPERATIONS
   LOC = BOSTON</p>
<p>sqlite&gt; .mode tabs
sqlite&gt; select * from dept;
10<!-- raw HTML omitted --> <!-- raw HTML omitted -->ACCOUNTING<!-- raw HTML omitted --> <!-- raw HTML omitted --> NEW YORK
20<!-- raw HTML omitted --> <!-- raw HTML omitted -->RESEARCH<!-- raw HTML omitted --> <!-- raw HTML omitted --> DALLAS
30<!-- raw HTML omitted --> <!-- raw HTML omitted -->SALES<!-- raw HTML omitted --> <!-- raw HTML omitted --> CHICAGO
40<!-- raw HTML omitted --> <!-- raw HTML omitted -->OPERATIONS<!-- raw HTML omitted --> <!-- raw HTML omitted --> BOSTON</p>
<p>sqlite&gt; .mode tcl
sqlite&gt; select * from dept;
&quot;10&quot;<!-- raw HTML omitted --> <!-- raw HTML omitted -->&quot;ACCOUNTING&quot;<!-- raw HTML omitted --><!-- raw HTML omitted -->&quot;NEW YORK&quot;<!-- raw HTML omitted --><!-- raw HTML omitted -->
&quot;20&quot;<!-- raw HTML omitted --> <!-- raw HTML omitted -->&quot;RESEARCH&quot;<!-- raw HTML omitted --><!-- raw HTML omitted -->&quot;DALLAS&quot;<!-- raw HTML omitted --><!-- raw HTML omitted -->
&quot;30&quot;<!-- raw HTML omitted --> <!-- raw HTML omitted -->&quot;SALES&quot;<!-- raw HTML omitted --> <!-- raw HTML omitted --> &quot;CHICAGO&quot;<!-- raw HTML omitted --> <!-- raw HTML omitted -->
&quot;40&quot;<!-- raw HTML omitted --> <!-- raw HTML omitted -->&quot;OPERATIONS&quot;<!-- raw HTML omitted --><!-- raw HTML omitted -->&quot;BOSTON&quot;<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>sqlite&gt; .mode csv
sqlite&gt; select * from dept;
10,ACCOUNTING,&quot;NEW YORK&quot;
20,RESEARCH,DALLAS
30,SALES,CHICAGO
40,OPERATIONS,BOSTON</p>
<p>.separator &quot;X&quot; 更改分界符号为X
sqlite&gt; .separator '<strong>'  
sqlite&gt; select * from dept;
10</strong>ACCOUNTING**&quot;NEW YORK&quot;
20<strong>RESEARCH</strong>DALLAS
30<strong>SALES</strong>CHICAGO
40<strong>OPERATIONS</strong>BOSTON</p>
<p>.dump ?TABLE?            生成形成数据库表的SQL脚本
.dump 生成整个数据库的脚本在终端显示
.output stdout           将输出打印到屏幕  默认
.output filename  将输出打印到文件（.dump  .output 结合可将数据库以sql语句的形式导出到文件中）
.nullvalue STRING        查询时用指定的串代替输出的NULL串 默认为.nullvalue ''</p>
<p>字段类型：</p>
<p>数据库中存储的每个值都有一个类型,都属于下面所列类型中的一种,(被数据库引擎所控制)
NULL: 这个值为空值
INTEGER: 值被标识为整数,依据值的大小可以依次被存储为1,2,3,4,5,6,7,8个字节
REAL: 所有值都是浮动的数值,被存储为8字节的IEEE浮动标记序号.
TEXT: 文本. 值为文本字符串,使用数据库编码存储(TUTF-8, UTF-16BE or UTF-16-LE).
BLOB: 值是BLOB数据,如何输入就如何存储,不改变格式.</p>
<p>值被定义为什么类型只和值自身有关,和列没有关系,和变量也没有关系.所以sqlite被称作 弱类型 数据库
数据库引擎将在执行时检查、解析类型，并进行数字存储类型(整数和实数)和文本类型之间的转换.
SQL语句中部分的带双引号或单引号的文字被定义为文本,
如果文字没带引号并没有小数点或指数则被定义为整数,
如果文字没带引号但有小数点或指数则被定义为实数, 
如果值是空则被定义为空值.
BLOB数据使用符号X'ABCD'来标识.</p>
<p>但实际上，sqlite3也接受如下的数据类型： 
smallint 16位的整数。 
interger 32位的整数。 
decimal(p,s) 精确值p是指全部有几个十进制数,s是指小数点后可以有几位小数。如果没有特别指定，则系统会默认为p=5 s=0 。 
float  32位元的实数。 
double  64位元的实数。 </p>
<p>char(n)  n 长度的字串，n不能超过 254。 
varchar(n) 长度不固定且其最大长度为 n 的字串，n不能超过 4000。 
graphic(n) 和 char(n) 一样，不过其单位是两个字节， n不能超过127。这个形态是为了支持两个字节长度的字体，如中文字。 
vargraphic(n) 可变长度且其最大长度为n的双字元字串，n不能超过2000 
date  包含了 年份、月份、日期。 
time  包含了 小时、分钟、秒。 
timestamp 包含了 年、月、日、时、分、秒、千分之一秒。</p>
<p>SQLite包含了如下时间/日期函数： 
datetime() 产生日期和时间    无参数表示获得当前时间和日期
sqlite&gt; select datetime();
2012-01-07 12:01:32
有字符串参数则把字符串转换成日期
sqlite&gt; select datetime('2012-01-07 12:01:30'); 
2012-01-07 12:01:30</p>
<p>select date('2012-01-08','+1 day','+1 year');
2013-01-09</p>
<p>select datetime('2012-01-08 00:20:00','+1 hour','-12 minute');
2012-01-08 01:08:00</p>
<p>select datetime('now','start of year');
2012-01-01 00:00:00</p>
<p>select datetime('now','start of month');
2012-01-01 00:00:00</p>
<p>select datetime('now','start of day');
2012-01-08 00:00:00</p>
<p>select datetime('now','start of week');错误</p>
<p>select datetime('now','localtime');
结果：2006-10-17 21:21:47</p>
<p>date()产生日期    
sqlite&gt; select date('2012-01-07 12:01:30'); 
2012-01-07
同理 有参和无参
select date('now','start of year');
2012-01-01</p>
<p>select date('2012-01-08','+1 month');
2012-02-08</p>
<p>time() 产生时间 
select time();
03:14:30</p>
<p>select time('23:18:59');
23:18:59</p>
<p>select time('23:18:59','start of day');
00:00:00</p>
<p>select time('23:18:59','end of day');错误</p>
<p>在时间/日期函数里可以使用如下格式的字符串作为参数： 
YYYY-MM-DD 
YYYY-MM-DD HH:MM 
YYYY-MM-DD HH:MM:SS 
YYYY-MM-DD HH:MM:SS.SSS 
HH:MM 
HH:MM:SS 
HH:MM:SS.SSS 
now 
其中now是产生现在的时间。</p>
<p>日期不能正确比较大小,会按字符串比较，日期默认格式 dd-mm-yyyy
select hiredate from emp order by hiredate;</p>
<p>17-11-1981
17-12-1980
19-04-1987
20-02-1981
22-02-1981</p>
<p>strftime() 对以上三个函数产生的日期和时间进行格式化
strftime()函数可以把YYYY-MM-DD HH:MM:SS格式的日期字符串转换成其它形式的字符串。 strftime(格式, 日期/时间, 修正符, 修正符, …)  select strftime('%d',datetime());
它可以用以下的符号对日期和时间进行格式化： 
%d 在该月中的第几天, 01-31 
%f 小数形式的秒，SS.SSS 
%H 小时, 00-23 
%j 算出某一天是该年的第几天，001-366 
%m 月份，00-12 
%M 分钟, 00-59 
%s 从1970年1月1日到现在的秒数 
%S 秒, 00-59 
%w 星期, 0-6 (0是星期天) 
%W 算出某一天属于该年的第几周, 01-53 
%Y 年, YYYY 
%% 百分号</p>
<p>select strftime('%Y.%m.%d %H:%M:%S','now'); 
select strftime('%Y.%m.%d %H:%M:%S','now','localtime'); 
结果：2006.10.17 21:41:09</p>
<p>select hiredate from emp 
order by strftime('%Y.%m.%d %H:%M:%S',hiredate); 正确</p>
<p>select strftime('%Y.%m.%d %H:%M:%S',hiredate) from emp 
order by strftime('%Y.%m.%d %H:%M:%S',hiredate); 错误</p>
<p>算术函数 
abs(X) 返回给定数字表达式的绝对值。 
max(X,Y[,&hellip;]) 返回表达式的最大值。  组函数 max(列名)
sqlite&gt; select max(2,3,4,5,6,7,12);
12</p>
<p>min(X,Y[,&hellip;]) 返回表达式的最小值。 
random() 返回随机数。
sqlite&gt; select random();
3224224213599993831
 
round(X[,Y]) 返回数字表达式并四舍五入为指定的长度或精度。 </p>
<p>字符处理函数 
length(X) 返回给定字符串表达式的字符个数。 
lower(X) 将大写字符数据转换为小写字符数据后返回字符表达式。 
upper(X) 返回将小写字符数据转换为大写的字符表达式。 
substr(X,Y,Z) 返回表达式的一部分。  从Y开始读Z个字符  Y最小值1
sqlite&gt; select substr('abcdef',3,3);            
cde</p>
<p>quote(A) 给字符串加引号
 sqlite&gt; select quote('aaa');
'aaa'</p>
<p>条件判断函数 
ifnull(X,Y)  如果X为null 返回Y
select ifnull(comm,0) from emp;
0
300
500
0
1400</p>
<p>集合函数 
avg(X) 返回组中值的平均值。 
count(X) 返回组中项目的数量。 
max(X) 返回组中值的最大值。 
min(X) 返回组中值的最小值。 
sum(X) 返回表达式中所有值的和。 </p>
<p>其他函数 
typeof(X) 返回数据的类型。 
sqlite&gt; select typeof(111);
integer
sqlite&gt; select typeof('233');
text
sqlite&gt; select typeof('2012-12-12');
text
sqlite&gt; select typeof('223.44');
text
sqlite&gt; select typeof(223.44);
real</p>
<p>last_insert_rowid() 返回最后插入的数据的ID。 
sqlite_version() 返回SQLite的版本。 
sqlite&gt; select sqlite_version();
3.7.9</p>
<p>change_count() 返回受上一语句影响的行数。 
last_statement_change_count()</p>
<p>create table emp_bak select * from EMP;不能在sqlite中使用</p>
<p>插入记录
insert into table_name values (field1, field2, field3&hellip;);
查询
select * from table_name;查看table_name表中所有记录；
select * from table_name where field1='xxxxx'; 查询符合指定条件的记录；</p>
<p>select &hellip;.. <!-- raw HTML omitted --><!-- raw HTML omitted -->
from table_name[,table_name2,&hellip;]
where &hellip;..<!-- raw HTML omitted --> <!-- raw HTML omitted -->
group by&hellip;.<!-- raw HTML omitted --> <!-- raw HTML omitted -->
having &hellip;.<!-- raw HTML omitted --> <!-- raw HTML omitted -->
order by &hellip;</p>
<p>select &hellip;.. <!-- raw HTML omitted --><!-- raw HTML omitted -->
from table_name  inner join | left outer join | right outer join table_name2
on &hellip;
where &hellip;..<!-- raw HTML omitted --> <!-- raw HTML omitted -->
group by&hellip;.<!-- raw HTML omitted --> <!-- raw HTML omitted -->
having &hellip;.<!-- raw HTML omitted --> <!-- raw HTML omitted -->
order by &hellip;</p>
<p>子查询：
select * 
from EMP m
where SAL&gt;
(select avg(SAL) from EMP where DEPTNO=m.DEPTNO);<!-- raw HTML omitted --> <!-- raw HTML omitted --> </p>
<p>支持case when then 语法
update EMP
set SAL=
(
case
when DEPTNO=10 and JOB='MANAGER' then SAL<em>1.1
when DEPTNO=20 and JOB='CLERK' then SAL</em>1.2
when DEPTNO=30  then SAL<em>1.1
when DEPTNO=40  then SAL</em>1.2
else SAL
END
);</p>
<p>select ENAME, 
case DEPTNO
when 10 then '后勤部'
when 20 then '财务部'
when 30 then '内务部门'
else '其他部门'
end as dept
from EMP;</p>
<p>支持关联子查询  in后面的语法中可以有limit（mysql不可以）
select *
from emp e
where e.EMPNO in 
(
select empno  
from EMP
where deptno=e.DEPTNO
order by SAL desc
limit 0,2
);</p>
<p>支持表和表之间的数据合并等操作
union 去重复  union all 不去掉重复
select deptno from emp
union 
select deptno from dept;</p>
<p>select deptno from emp
union all
select deptno from dept;</p>
<p>在列名前加distinct也是去重复
sqlite&gt; select distinct deptno from emp;</p>
<p>删除
delete from table_name where &hellip;</p>
<p>删除表
drop table_name;     删除表；
drop index_name;     删除索引；</p>
<p>修改
update table_name
set xxx=value[, xxx=value,&hellip;]
where &hellip;</p>
<p>建立索引</p>
<p>如果资料表有相当多的资料，我们便会建立索引来加快速度。好比说：</p>
<p>create index film_title_index on film(title);
意思是针对film资料表的name字段，建立一个名叫film_name_index的索引。这个指令的语法为</p>
<p>CREATE [ UNIQUE ]  NONCLUSTERED  INDEX index_name
    ON { table | view } ( column [ ASC | DESC ] [ ,&hellip;n ] )
create index index_name on table_name(field_to_be_indexed);
一旦建立了索引，sqlite3会在针对该字段作查询时，自动使用该索引。这一切的操作都是在幕后自动发生的，无须使用者特别指令。</p>
<p>其他sqlite的特别用法</p>
<p>sqlite可以在shell底下直接执行命令：
sqlite3 film.db &quot;select * from emp;&quot;</p>
<p>输出 HTML 表格：
sqlite3 -html film.db &quot;select * from film;&quot;
将数据库「倒出来」：</p>
<p>sqlite3 film.db &quot;.dump&quot; &gt; output.sql
利用输出的资料，建立一个一模一样的数据库（加上以上指令，就是标准的SQL数据库备份了）：</p>
<p>sqlite3 film.db &lt; output.sql
在大量插入资料时，你可能会需要先打这个指令：</p>
<p>begin;
插入完资料后要记得打这个指令，资料才会写进数据库中：
commit;</p>
<p>sqlite&gt; begin;
sqlite&gt; insert into aaaa values('aaa','333');
sqlite&gt; select * from aaaa;
2|sdfds
sdfsd|9
2012-12-12|13:13:13
aaa|333
sqlite&gt; rollback;
sqlite&gt; select * from aaaa;
2|sdfds
sdfsd|9
2012-12-12|13:13:13</p>
<p>创建和删除视图
CREATE VIEW view_name AS
SELECT column_name(s)
FROM table_name
WHERE condition
DROP VIEW view_name</p>
<p>create view  e as
select avg(SAL) avgsal,DEPTNO
from EMP
group by DEPTNO;</p>
<p>select ENAME,EMP.DEPTNO,SAL,avgsal
from EMP inner join e
on EMP.DEPTNO=e.DEPTNO
where SAL&gt;avgsal;</p>
<p>练习员工表：</p>
<p>PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE DEPT
(
DEPTNO int(2) not null,
DNAME varchar(14),
LOC    varchar(13)
);
INSERT INTO &quot;DEPT&quot; VALUES(10,'ACCOUNTING','NEW YORK');
INSERT INTO &quot;DEPT&quot; VALUES(20,'RESEARCH','DALLAS');
INSERT INTO &quot;DEPT&quot; VALUES(30,'SALES','CHICAGO');
INSERT INTO &quot;DEPT&quot; VALUES(40,'OPERATIONS','BOSTON');
CREATE TABLE EMP
(
EMPNO    int(4) not null,
ENAME    varchar(10),
JOB      varchar(9),
MGR      int(4),
HIREDATE date,
SAL      int(7 ),
COMM     int(7 ),
DEPTNO   int(2)
);
INSERT INTO &quot;EMP&quot; VALUES(7369,'SMITH','CLERK',7902,'17-12-1980',800,NULL,20);
INSERT INTO &quot;EMP&quot; VALUES(7499,'ALLEN','SALESMAN',7698,'20-02-1981',1600,300,30);
INSERT INTO &quot;EMP&quot; VALUES(7521,'WARD','SALESMAN',7698,'22-02-1981',1250,500,30);
INSERT INTO &quot;EMP&quot; VALUES(7566,'JONES','MANAGER',7839,'02-04-1981',2975,NULL,20);
INSERT INTO &quot;EMP&quot; VALUES(7654,'MARTIN','SALESMAN',7698,'28-09-1981',1250,1400,30);
INSERT INTO &quot;EMP&quot; VALUES(7698,'BLAKE','MANAGER',7839,'01-05-1981',2850,NULL,30);
INSERT INTO &quot;EMP&quot; VALUES(7782,'CLARK','MANAGER',7839,'09-06-1981',2450,NULL,10);
INSERT INTO &quot;EMP&quot; VALUES(7788,'SCOTT','ANALYST',7566,'19-04-1987',3000,NULL,20);
INSERT INTO &quot;EMP&quot; VALUES(7839,'KING','PRESIDENT',NULL,'17-11-1981',5000,NULL,10);
INSERT INTO &quot;EMP&quot; VALUES(7844,'TURNER','SALESMAN',7698,'08-09-1981',1500,0,30);
INSERT INTO &quot;EMP&quot; VALUES(7876,'ADAMS','CLERK',7788,'23-05-1987',1100,NULL,20);
INSERT INTO &quot;EMP&quot; VALUES(7900,'JAMES','CLERK',7698,'03-12-1981',950,NULL,30);
INSERT INTO &quot;EMP&quot; VALUES(7902,'FORD','ANALYST',7566,'03-12-1981',3000,NULL,20);
INSERT INTO &quot;EMP&quot; VALUES(7934,'MILLER','CLERK',7782,'23-01-1982',1300,NULL,10);
CREATE TABLE SALGRADE
(
GRADE int,
LOSAL int,
HISAL int
);
INSERT INTO &quot;SALGRADE&quot; VALUES(1,700,1200);
INSERT INTO &quot;SALGRADE&quot; VALUES(2,1201,1400);
INSERT INTO &quot;SALGRADE&quot; VALUES(3,1401,2000);
INSERT INTO &quot;SALGRADE&quot; VALUES(4,2001,3000);
INSERT INTO &quot;SALGRADE&quot; VALUES(5,3001,9999);
COMMIT;</p>
]]></content>
		</item>
		
		<item>
			<title>获取tableviewCell在当前屏幕中的坐标值</title>
			<link>https://blog.v5u.win/posts/ios/ios-%E8%8E%B7%E5%8F%96tableviewcell%E5%9C%A8%E5%BD%93%E5%89%8D%E5%B1%8F%E5%B9%95%E4%B8%AD%E7%9A%84%E5%9D%90%E6%A0%87%E5%80%BC/</link>
			<pubDate>Fri, 07 Aug 2015 13:28:36 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-%E8%8E%B7%E5%8F%96tableviewcell%E5%9C%A8%E5%BD%93%E5%89%8D%E5%B1%8F%E5%B9%95%E4%B8%AD%E7%9A%84%E5%9D%90%E6%A0%87%E5%80%BC/</guid>
			<description>获得当前cell对于当前屏幕的位置 CGRect rectInTableView = [tableViewrectForRowAtIndexPath:indexPath]; CGRect rect = [tableViewconvertRect:rectInTableViewtoView:[tableViewsuperview]];</description>
			<content type="html"><![CDATA[<p>获得当前cell对于当前屏幕的位置</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted -->CGRect rectInTableView = [tableView<!-- raw HTML omitted --><!-- raw HTML omitted --> rectForRowAtIndexPath<!-- raw HTML omitted --><!-- raw HTML omitted -->:indexPath];   <!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->CGRect rect = [tableView<!-- raw HTML omitted --> convertRect<!-- raw HTML omitted --><!-- raw HTML omitted -->:rectInTableView<!-- raw HTML omitted --><!-- raw HTML omitted --> toView<!-- raw HTML omitted --><!-- raw HTML omitted -->:[tableView<!-- raw HTML omitted --><!-- raw HTML omitted --> superview<!-- raw HTML omitted --><!-- raw HTML omitted -->]];<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>自定义back按钮无法使用系统pop interactive gesture 问题</title>
			<link>https://blog.v5u.win/posts/ios/ios-backbutton-pop-interactive-gesture/</link>
			<pubDate>Thu, 06 Aug 2015 18:50:01 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-backbutton-pop-interactive-gesture/</guid>
			<description>两种解决办法： 方法一： A，我的应用是自定义的返回按钮图标(默认返回按钮样式不会出现问题3)，为了保险，写了这句代码[self.navigat</description>
			<content type="html"><![CDATA[<p>两种解决办法：</p>
<p>方法一：</p>
<p>A，我的应用是自定义的返回按钮图标(默认返回按钮样式不会出现问题3)，为了保险，写了这句代码[self.navigationItem setHidesBackButton:YES]。 由于自定义返回按钮，所以iOS7自带返回手势无效。在需要的页面加上navigationController.interactivePopGestureRecognizer.delegate = self 返回手势好用了。</p>
<p>B，于是出现了第二个问题。 在一级视图中，iOS样式返回的手势滑动一下，然后进入二级视图，发现，画面卡住了，按Home键转入后台，再返回应用，发现并没有Crash掉，而是直 接跳到了二级视图里，运行正常了，大家知道push和pop的原理是用进栈出栈完成的，可能因为在一级视图中滑动那一下，影响了视图在栈中的位置。 好，先解决一下这个问题，一级视图中一定要加入self.navigationController.interactivePopGestureRecognizer.enabled = NO;，先把iOS7手势返回屏蔽掉，到二级视图再用self.navigationController.interactivePopGestureRecognizer.enabled = YES打开。就Ok了。</p>
<p>C，好，第三个问题相继出现（其实是跟第二个一起出来的）。 手势返回拖动一半，放手，navigationBar上会出现三个小蓝点，而且位置不规律，可以肯定这个不是项目代码或者图片搞出来的东西，一定是SDK自己蹦出來的。 后台尝试发现UIBarButtonItem的title如果是nil的话，就会有这个问题。 解决方案：把[self.navigationItem setHidesBackButton:YES];去掉，然後把假装成返回按钮的UIBarButtonItem的title设置成@&quot;&quot;。</p>
<p>方法二：</p>
<!-- raw HTML omitted -->
<p> - (      self.interactivePopGestureRecognizer. =     self. =<!-- raw HTML omitted --><!-- raw HTML omitted -->
<!-- raw HTML omitted -->    [super dealloc];
   
<!-- raw HTML omitted --> <!-- raw HTML omitted -->}</p>
<p><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->
  mark - View lifecycle<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->
 - (                     self.interactivePopGestureRecognizer. =         self. =    - (<!-- raw HTML omitted --><!-- raw HTML omitted -->  mark - Override<!-- raw HTML omitted --><!-- raw HTML omitted --> - ()pushViewController:(UIViewController <em>                    self.interactivePopGestureRecognizer.enabled =         mark - UINavigationControllerDelegate<!-- raw HTML omitted --><!-- raw HTML omitted -->  - ()navigationController:(UINavigationController </em>       didShowViewController:(UIViewController *                navigationController.interactivePopGestureRecognizer.enabled =<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->
<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->@end<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p> </p>
<p>3、Pop interactive gesture冲突，造成页面假死问题</p>
<p>我遇到的情况是，Push/Pop页面时，没有立即得到想要的效果，页面没有显出出来，NavigationController的didShowViewController:回调方法也没有调用。</p>
<p>页面布局情况是这样的：视图A，有一个Pan手势；视图B是TabBarController，其ViewControllers都是NavigationController。视图B是视图A的子视图。</p>
<p>后来找到原因是：navigationController的interactive pop手势与视图A的pan手势冲突。</p>
<p>具体原因是：rootViewController加载时，调用了didShowViewController:，设置interactivePopGestureRecognizer可用，其实我们并不需要在root的时候也触发这个手势。所以稍加优化如下：</p>
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>自定义back按钮无法使用系统pop interactive gesture 问题</title>
			<link>https://blog.v5u.win/%E8%87%AA%E5%AE%9A%E4%B9%89back%E6%8C%89%E9%92%AE%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%B3%BB%E7%BB%9Fpop-interactive-gesture-%E9%97%AE%E9%A2%98/</link>
			<pubDate>Thu, 06 Aug 2015 10:50:01 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E8%87%AA%E5%AE%9A%E4%B9%89back%E6%8C%89%E9%92%AE%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%B3%BB%E7%BB%9Fpop-interactive-gesture-%E9%97%AE%E9%A2%98/</guid>
			<description>两种解决办法： 方法一：</description>
			<content type="html"><![CDATA[<p>两种解决办法：</p>
<p>方法一：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>text/html &amp; text/plain的区别</title>
			<link>https://blog.v5u.win/posts/web/web-texthtml-textplain%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
			<pubDate>Fri, 24 Jul 2015 16:55:05 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/web/web-texthtml-textplain%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
			<description>需要了解的概念 Content-Type：用于定义用户的浏览器或相关设备如何显示将要加载的数据，或者如何处理将要加载的数据 MIME：MIME类</description>
			<content type="html"><![CDATA[<h4 id="需要了解的概念">需要了解的概念</h4>
<p>　　Content-Type：用于定义用户的浏览器或相关设备如何显示将要加载的数据，或者如何处理将要加载的数据</p>
<p>　　MIME：MIME类型就是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。</p>
<p> </p>
<p>text/html的意思是将文件的content-type设置为text/html的形式，浏览器在获取到这种文件时会自动调用html的解析器对文件进行相应的处理。</p>
<p>text/plain的意思是将文件设置为纯文本的形式，浏览器在获取到这种文件时并不会对其进行处理。</p>
]]></content>
		</item>
		
		<item>
			<title>如何使用Xcode--切换tap栏</title>
			<link>https://blog.v5u.win/posts/xcode/xcode-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8xcode--%E5%88%87%E6%8D%A2tap%E6%A0%8F/</link>
			<pubDate>Thu, 16 Jul 2015 11:10:27 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/xcode/xcode-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8xcode--%E5%88%87%E6%8D%A2tap%E6%A0%8F/</guid>
			<description>切换tap栏快捷键：commend+Shift+[,] ，此方法通用于其他APP上的tap栏切换 以下为转载 转自http://m.blog.cs</description>
			<content type="html"><![CDATA[<p>切换tap栏快捷键：commend+Shift+[,] ，此方法通用于其他APP上的tap栏切换</p>
<p>以下为转载</p>
<p>转自<a href="http://m.blog.csdn.net/blog/okmyang/38734063#" title="http://m.blog.csdn.net/blog/okmyang/38734063#">http://m.blog.csdn.net/blog/okmyang/38734063#</a></p>
<p>这次我来说说怎么设置Tab来提高在xCode的工作效率。</p>
<h1 id="我是如何使用tab来提高效率的">我是如何使用Tab来提高效率的</h1>
<h2 id="xcode的tab是什么">xCode的Tab是什么</h2>
<p>诺，就是这一个东西。</p>
<p><img src="http://ww4.sinaimg.cn/large/686e6613jw1e5b26nmyqij20oq00v0sp.jpg" alt=""></p>
<p>使用过各种浏览器的你一定不会陌生。对在xCode里面我们也可以开出多个页面。而且每一个页面的状态是单独保存的。</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<h2 id="如何提高效率">如何提高效率</h2>
<p>因为在实际的代码编写过程中，我们可能需要来回的查找和阅读代码。会很自然的在多个文件中跳转编辑。这时候单个编辑页面明显拖累了速度。所以我们需要多个页面来回切换就会很爽。</p>
<p>如上图所示。我习惯性长开着这几个Tab。</p>
<h2 id="ui">UI</h2>
<p><img src="http://ww3.sinaimg.cn/large/686e6613jw1e5b1quy5pij207409wt99.jpg" alt=""></p>
<p>如图所示，我们可以在圈起来的地方设置关键词过滤显示的文件
这样我的名为UI的Tab就只会显示storyboard。这样改UI点击起来会很方便</p>
<h2 id="data">Data</h2>
<p>同理可得这个表情用来显示data model的。</p>
<p><img src="http://ww2.sinaimg.cn/large/686e6613jw1e5b1uqa7yhj207w094mxd.jpg" alt=""></p>
<h2 id="vc">VC</h2>
<p>显示ViewController的</p>
<p><img src="http://ww2.sinaimg.cn/large/686e6613jw1e5b1v4lkuyj207x0933z6.jpg" alt=""></p>
<h2 id="debug">Debug</h2>
<p>Debug这个Tab有些特殊。并不是我手动创建的。而且我配置了编译行为出来的。
这样每次Run的时候都会跳到这个名为Debug的Tab里面。这样做的原因是，我改了一个地方的代码。运行以后可能在其他地方挂掉了（或者在其他地方打了断点）。然后跟着进去看了看。然后想回到之前改代码的地方就会很麻烦。</p>
<p><img src="http://ww4.sinaimg.cn/large/686e6613jw1e5b1ws3qu9j20ku0f8mzu.jpg" alt=""></p>
<p>这样设置了以后，就没有上述烦恼了。</p>
<h1 id="顺便说一句">顺便说一句</h1>
<p>希望这些对你有所帮助。</p>
<p>顺便说一句：Tab直接的切换可以使用快捷键 Command + Shift + ([, ]) 其实这个快捷键适用于绝大部分有Tab的App。 都可以完成切换功能</p>
<p>再顺便说一句： xCode本身内存消耗很大，开Tab。感觉很是消耗内存。如果内存吃紧的话。应该去升级内存了。不然开多个Tab只会降低工作效率并不会提高。</p>
]]></content>
		</item>
		
		<item>
			<title>iOS 开发error/debug</title>
			<link>https://blog.v5u.win/posts/ios/ios-%E5%BC%80%E5%8F%91errordebug/</link>
			<pubDate>Tue, 14 Jul 2015 21:36:20 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-%E5%BC%80%E5%8F%91errordebug/</guid>
			<description>error:property with ‘retain(strong)’ attribute must be of object type cause: 没有包含相应地头文件，造成变量引用错误，指针指向未知</description>
			<content type="html"><![CDATA[<p>error:property with ‘retain(strong)’ attribute must be of object type </p>
<p>cause: 没有包含相应地头文件，造成变量引用错误，指针指向未知</p>
]]></content>
		</item>
		
		<item>
			<title>iOS端App的icon和Launch Image规格实时更新</title>
			<link>https://blog.v5u.win/posts/ios/ios-launch-image/</link>
			<pubDate>Tue, 14 Jul 2015 17:45:49 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-launch-image/</guid>
			<description>启动影像 ： iPhone：320 x 480 640 x 960 6401136 7501334 1242*2208 iPad：768 x 1004 1536 x 2008 APP图标： iPhone：120 x 120180 x 180iPad：76 x 76 152 x 152</description>
			<content type="html"><![CDATA[<ul>
<li>
<p>启动影像 ： <!-- raw HTML omitted -->iPhone<!-- raw HTML omitted --> ：320 x 480 640 x 960 640<em>1136 750</em>1334 1242*2208  <!-- raw HTML omitted -->iPad<!-- raw HTML omitted --> ：768 x 1004 1536 x 2008</p>
</li>
<li>
<p>APP图标： <!-- raw HTML omitted -->iPhone<!-- raw HTML omitted -->：<!-- raw HTML omitted -->120 x 120<!-- raw HTML omitted --> <!-- raw HTML omitted -->180 x 180<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->iPad<!-- raw HTML omitted -->：<!-- raw HTML omitted -->76 x 76 152 x 152<!-- raw HTML omitted --></p>
</li>
<li>
<p>App Store商店：1024 x 1024</p>
</li>
<li>
<p>Spotlight搜索小图标： <!-- raw HTML omitted -->iPhone<!-- raw HTML omitted -->：<!-- raw HTML omitted -->80 x 80<!-- raw HTML omitted --> <!-- raw HTML omitted -->120 x 120<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->iPad<!-- raw HTML omitted -->：50 x 50、29 x 29  100 x 100、58 x 58</p>
</li>
<li>
<p>文档图标： <!-- raw HTML omitted -->iPhone<!-- raw HTML omitted -->：22 x 29 44 x 58 <!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->iPad<!-- raw HTML omitted -->：64 x 64、320 x 320  128 x 128、640 x 640</p>
</li>
<li>
<p>Web Clip图标 ：<!-- raw HTML omitted -->iPhone<!-- raw HTML omitted -->： 57 x 57 114 x 114 <!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->iPad<!-- raw HTML omitted -->：72 x 72 144 x 144</p>
</li>
<li>
<p>工具栏和导航栏图标 ：<!-- raw HTML omitted -->iPhone&amp;iPad<!-- raw HTML omitted -->： 约20 x 20 / 约40 x 40</p>
</li>
<li>
<p>标签栏的图标：<!-- raw HTML omitted -->iPhone&amp;iPad<!-- raw HTML omitted -->：约60 x 60</p>
</li>
<li>
<p>报刊杂志：最长的边缘1024像素（最小）</p>
</li>
</ul>
<p><a href="http://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/MobileHIG/IconsImages/IconsImages.html#//apple_ref/doc/uid/TP40006556-CH14-SW1">http://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/MobileHIG/IconsImages/IconsImages.html#//apple_ref/doc/uid/TP40006556-CH14-SW1</a></p>
<p><a href="http://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/MobileHIG/IconsImages/IconsImages.html#//apple_ref/doc/uid/TP40006556-CH14-SW1"></a><!-- raw HTML omitted -->更新： <!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<p>Asset</p>
<!-- raw HTML omitted -->
<p>iPhone 6 Plus (@3x)</p>
<!-- raw HTML omitted -->
<p>iPhone 6 and iPhone 5 (@2x)</p>
<!-- raw HTML omitted -->
<p>iPhone 4s (@2x)</p>
<!-- raw HTML omitted -->
<p>iPad and iPad mini (@2x)</p>
<!-- raw HTML omitted -->
<p>iPad 2 and iPad mini (@1x)</p>
<!-- raw HTML omitted -->
<p>align: baseline;&quot;&gt;<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>App icon (<!-- raw HTML omitted -->required<!-- raw HTML omitted --> for all apps)</p>
<!-- raw HTML omitted -->
<p>180 x 180</p>
<!-- raw HTML omitted -->
<p>120 x 120</p>
<!-- raw HTML omitted -->
<p>120 x 120</p>
<!-- raw HTML omitted -->
<p>152 x 152</p>
<!-- raw HTML omitted -->
<p>76 x 76</p>
<!-- raw HTML omitted -->
<p>App icon for the App Store (<!-- raw HTML omitted -->required<!-- raw HTML omitted --> for all apps)</p>
<!-- raw HTML omitted -->
<p>1024 x 1024</p>
<!-- raw HTML omitted -->
<p>1024 x 1024</p>
<!-- raw HTML omitted -->
<p>1024 x 1024</p>
<!-- raw HTML omitted -->
<p>1024 x 1024</p>
<!-- raw HTML omitted -->
<p>1024 x 1024</p>
<!-- raw HTML omitted -->
<p>Launch file or image (<!-- raw HTML omitted -->required<!-- raw HTML omitted --> for all apps)</p>
<!-- raw HTML omitted -->
<p>Use a launch file (see <!-- raw HTML omitted --><a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/LaunchImages.html#//apple_ref/doc/uid/TP40006556-CH22-SW1">Launch Images</a><!-- raw HTML omitted -->)</p>
<!-- raw HTML omitted -->
<p>For iPhone 6, use a launch file (see <!-- raw HTML omitted --><a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/LaunchImages.html#//apple_ref/doc/uid/TP40006556-CH22-SW1">Launch Images</a><!-- raw HTML omitted -->)</p>
<p>For iPhone 5, 640 x 1136</p>
<!-- raw HTML omitted -->
<p>640 x 960</p>
<!-- raw HTML omitted -->
<p>1536 x 2048 (portrait)</p>
<p>2048 x 1536 (landscape)</p>
<!-- raw HTML omitted -->
<p>rtical-align: middle; max-width: 260px;&quot;&gt;</p>
<p>768 x 1024 (portrait)</p>
<p>1024 x 768 (landscape)</p>
<!-- raw HTML omitted -->
<p>Spotlight search results icon (recommended)</p>
<!-- raw HTML omitted -->
<p>120 x 120</p>
<!-- raw HTML omitted -->
<p>80 x 80</p>
<!-- raw HTML omitted -->
<p>80 x 80</p>
<!-- raw HTML omitted -->
<p>80 x 80</p>
<!-- raw HTML omitted -->
<p>40 x 40</p>
<!-- raw HTML omitted -->
<p>Settings icon (recommended)</p>
<!-- raw HTML omitted -->
<p>87 x 87</p>
<!-- raw HTML omitted -->
<p>58 x 58</p>
<!-- raw HTML omitted -->
<p>58 x 58</p>
<!-- raw HTML omitted -->
<p>58 x 58</p>
<!-- raw HTML omitted -->
<p>29 x 29</p>
<!-- raw HTML omitted -->
<p>Toolbar and navigation bar icon (optional)</p>
<!-- raw HTML omitted -->
<p>About 66 x 66</p>
<!-- raw HTML omitted -->
<p>About 44 x 44</p>
<!-- raw HTML omitted -->
<p>About 44 x 44</p>
<!-- raw HTML omitted -->
<p>About 44 x 44</p>
<!-- raw HTML omitted -->
<p>About 22 x 22</p>
<!-- raw HTML omitted -->
<p>Tab bar icon (optional)</p>
<!-- raw HTML omitted -->
<p>About 75 x 75 (maximum: 144 x 96)</p>
<!-- raw HTML omitted -->
<p>About 50 x 50 (maximum: 96 x 64)</p>
<!-- raw HTML omitted -->
<p>About 50 x 50 (maximum: 96 x 64)</p>
<!-- raw HTML omitted -->
<p>About 50 x 50 (maximum: 96 x 64)</p>
<!-- raw HTML omitted -->
<p>About 25 x 25 (maximum: 48 x 32)</p>
<!-- raw HTML omitted -->
<p>Default Newsstand cover icon for the App Store (<!-- raw HTML omitted -->required<!-- raw HTML omitted --> for Newsstand apps)</p>
<!-- raw HTML omitted -->
<p>At least 1024 pixels on the longest edge</p>
<!-- raw HTML omitted -->
<p>At least 1024 pixels on the longest edge</p>
<!-- raw HTML omitted -->
<p>At least 1024 pixels on the longest edge</p>
<!-- raw HTML omitted -->
<p>At least 1024 pixels on the longest edge</p>
<!-- raw HTML omitted -->
<p>At least 512 pixels on the longest edge</p>
<!-- raw HTML omitted -->
<p>Web clip icon (recommended for web apps and websites)</p>
<!-- raw HTML omitted -->
<p>180 x 180</p>
<!-- raw HTML omitted -->
<p>120 x 120</p>
<!-- raw HTML omitted -->
<p>120 x 120</p>
<!-- raw HTML omitted -->
<p>152 x 152</p>
<!-- raw HTML omitted -->
<p>76 x 76</p>
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted -->版权声明：本文为博主原创文章，未经博主允许不得转载。<!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>Xcode如何添加pch文件</title>
			<link>https://blog.v5u.win/posts/xcode/xcode-pch/</link>
			<pubDate>Tue, 14 Jul 2015 11:31:06 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/xcode/xcode-pch/</guid>
			<description>Xcode6.0之后去掉了Precompile Prefix Header 文件，主要原因可能在于Prefix Header大大的增加了Build的时间。没有了Pref</description>
			<content type="html"><![CDATA[<p>Xcode6.0之后去掉了Precompile Prefix Header 文件，<!-- raw HTML omitted -->主要原因可能在于Prefix Header大大的增加了Build的时间。没有了Prefix Header之后就要通过手动@import来手动导入头文件了，在失去了编程便利性的同时也降低了Build的时间。具体原因<!-- raw HTML omitted --></p>
<p>StackOverFlow上讨论的已经比较清晰了</p>
<p><a href="http://stackoverflow.com/questions/24158648/why-isnt-projectname-prefix-pch-created-automatically-in-xcode-6">StackOverFlow:为什么xcode6没有自动创建pch文件呢？</a></p>
<h3 id="那么如何在xcode6中添加pchprecompile-prefix-header">那么如何在Xcode6中添加pch（Precompile Prefix Header）？</h3>
<p>1，Command+N，打开新建文件窗口：ios-&gt;other-&gt;PCH file，创建一个pch文件：“工程名-Prefix.pch”</p>
<p><!-- raw HTML omitted -->    2，将building setting中的precompile header选项的路径添加“$(SRCROOT)/项目名称/pch文件名”（例如：$(SRCROOT)/LotteryFive/LotteryFive-Prefix.pch）,<!-- raw HTML omitted --><!-- raw HTML omitted -->编译一下程序，如果有错误检查一下添加的路径是否正确。<!-- raw HTML omitted --></p>
<p>&lt;</p>
<p>p style=&ldquo;margin-top: 0px; margin-bottom: 0.75em; line-height: 27.200000762939453px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &lsquo;Helvetica Neue&rsquo;, Helvetica, Tahoma, Arial, STXihei, &lsquo;Microsoft YaHei&rsquo;, 微软雅黑, sans-serif; white-space: normal;&quot;&gt;3，将Precompile Prefix Header为YES，预编译后的pch文件会被缓存起来，可以提高编译速度</p>
<p> </p>
<p>[caption id=&ldquo;attachment_403&rdquo; align=&ldquo;alignleft&rdquo; width=&ldquo;600&rdquo;]<a href="http://blog-fansrss.rhcloud.com/wp-content/uploads/2015/07/PCH%E6%96%87%E4%BB%B6.png"><img src="http://fanjinlong.xyz/wp-content/uploads/2016/04/PCH%E6%96%87%E4%BB%B6-1024x475.png" alt="pch文件build settings"></a> pch文件build settings[/caption]</p>
]]></content>
		</item>
		
		<item>
			<title>iOS端App的icon和Launch Image规格实时更新</title>
			<link>https://blog.v5u.win/ios%E7%AB%AFapp%E7%9A%84icon%E5%92%8Claunch-image%E8%A7%84%E6%A0%BC%E5%AE%9E%E6%97%B6%E6%9B%B4%E6%96%B0/</link>
			<pubDate>Tue, 14 Jul 2015 09:45:49 +0000</pubDate>
			
			<guid>https://blog.v5u.win/ios%E7%AB%AFapp%E7%9A%84icon%E5%92%8Claunch-image%E8%A7%84%E6%A0%BC%E5%AE%9E%E6%97%B6%E6%9B%B4%E6%96%B0/</guid>
			<description>&amp;lt;th scope=&amp;quot;col&amp;quot; class=&amp;quot;TableHeading_TableRow_TableCell&amp;quot; style=&amp;quot;background-color: rgb(249, 249, 249); border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-color: rgb(233, 233, 233); margin: 0px; outline: 0px; vertical-align: baseline; font-weight: 400;&amp;quot;&amp;gt; &amp;lt;p class=&amp;quot;para&amp;quot; style=&amp;quot;background-color: transparent; border: 0px; font-size: 1.4em; margin-top: 0px; margin-bottom: 0px; outline: 0px; padding-top: 0px; padding-bottom: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&amp;quot;&amp;gt; iPhone 6 Plus (@3x) &amp;lt;/p&amp;gt; &amp;lt;/th&amp;gt; &amp;lt;th scope=&amp;quot;col&amp;quot; class=&amp;quot;TableHeading_TableRow_TableCell&amp;quot; style=&amp;quot;background-color: rgb(249, 249, 249); border-top-width: 0px;</description>
			<content type="html"><![CDATA[<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<pre><code>&lt;th scope=&quot;col&quot; class=&quot;TableHeading_TableRow_TableCell&quot; style=&quot;background-color: rgb(249, 249, 249); border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-color: rgb(233, 233, 233); margin: 0px; outline: 0px; vertical-align: baseline; font-weight: 400;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;background-color: transparent; border: 0px; font-size: 1.4em; margin-top: 0px; margin-bottom: 0px; outline: 0px; padding-top: 0px; padding-bottom: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    iPhone 6 Plus (@3x)
  &lt;/p&gt;
&lt;/th&gt;

&lt;th scope=&quot;col&quot; class=&quot;TableHeading_TableRow_TableCell&quot; style=&quot;background-color: rgb(249, 249, 249); border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-color: rgb(233, 233, 233); margin: 0px; outline: 0px; vertical-align: baseline; font-weight: 400;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;background-color: transparent; border: 0px; font-size: 1.4em; margin-top: 0px; margin-bottom: 0px; outline: 0px; padding-top: 0px; padding-bottom: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    iPhone 6 and iPhone 5 (@2x)
  &lt;/p&gt;
&lt;/th&gt;

&lt;th scope=&quot;col&quot; class=&quot;TableHeading_TableRow_TableCell&quot; style=&quot;background-color: rgb(249, 249, 249); border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-color: rgb(233, 233, 233); margin: 0px; outline: 0px; vertical-align: baseline; font-weight: 400;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;background-color: transparent; border: 0px; font-size: 1.4em; margin-top: 0px; margin-bottom: 0px; outline: 0px; padding-top: 0px; padding-bottom: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    iPhone 4s (@2x)
  &lt;/p&gt;
&lt;/th&gt;

&lt;th scope=&quot;col&quot; class=&quot;TableHeading_TableRow_TableCell&quot; style=&quot;background-color: rgb(249, 249, 249); border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-color: rgb(233, 233, 233); margin: 0px; outline: 0px; vertical-align: baseline; font-weight: 400;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;background-color: transparent; border: 0px; font-size: 1.4em; margin-top: 0px; margin-bottom: 0px; outline: 0px; padding-top: 0px; padding-bottom: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    iPad and iPad mini (@2x)
  &lt;/p&gt;
&lt;/th&gt;

&lt;th scope=&quot;col&quot; class=&quot;TableHeading_TableRow_TableCell&quot; style=&quot;background-color: rgb(249, 249, 249); border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-color: rgb(233, 233, 233); margin: 0px; outline: 0px; vertical-align: baseline; font-weight: 400;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;background-color: transparent; border: 0px; font-size: 1.4em; margin-top: 0px; margin-bottom: 0px; outline: 0px; padding-top: 0px; padding-bottom: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    iPad 2 and iPad mini (@1x)
  &lt;/p&gt;
&lt;/th&gt;
</code></pre>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<pre><code>&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    180 x 180
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    120 x 120
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    120 x 120
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    152 x 152
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    76 x 76
  &lt;/p&gt;
&lt;/td&gt;
</code></pre>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<pre><code>&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    1024 x 1024
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    1024 x 1024
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    1024 x 1024
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    1024 x 1024
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    1024 x 1024
  &lt;/p&gt;
&lt;/td&gt;
</code></pre>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<pre><code>&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    Use a launch file (see&amp;nbsp;&lt;span class=&quot;x-name&quot; style=&quot;border: 0px; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline;&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/LaunchImages.html#//apple_ref/doc/uid/TP40006556-CH22-SW1&quot; style=&quot;color: rgb(0, 136, 204); text-decoration: none; border: 0px; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline;&quot; rel=&quot;noopener noreferrer&quot;&gt;Launch Images&lt;/a&gt;&lt;/span&gt;)
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    For iPhone 6, use a launch file (see&amp;nbsp;&lt;span class=&quot;x-name&quot; style=&quot;border: 0px; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline;&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/LaunchImages.html#//apple_ref/doc/uid/TP40006556-CH22-SW1&quot; style=&quot;color: rgb(0, 136, 204); text-decoration: none; border: 0px; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline;&quot; rel=&quot;noopener noreferrer&quot;&gt;Launch Images&lt;/a&gt;&lt;/span&gt;)
  &lt;/p&gt;
  
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    For iPhone 5, 640 x 1136
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    640 x 960
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    1536 x 2048 (portrait)
  &lt;/p&gt;
  
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    2048 x 1536 (landscape)
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; ve
</code></pre>
<p>rtical-align: middle; max-width: 260px;&quot;&gt;
<!-- raw HTML omitted --></p>
<pre><code>  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    768 x 1024 (portrait)
  &lt;/p&gt;
  
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    1024 x 768 (landscape)
  &lt;/p&gt;
&lt;/td&gt;
</code></pre>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<pre><code>&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    120 x 120
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    80 x 80
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    80 x 80
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    80 x 80
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    40 x 40
  &lt;/p&gt;
&lt;/td&gt;
</code></pre>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<pre><code>&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    87 x 87
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    58 x 58
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    58 x 58
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    58 x 58
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    29 x 29
  &lt;/p&gt;
&lt;/td&gt;
</code></pre>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<pre><code>&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    About 66 x 66
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    About 44 x 44
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    About 44 x 44
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    About 44 x 44
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    About 22 x 22
  &lt;/p&gt;
&lt;/td&gt;
</code></pre>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<pre><code>&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    About 75 x 75 (maximum: 144 x 96)
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;bord
</code></pre>
<p>er: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
About 50 x 50 (maximum: 96 x 64)
<!-- raw HTML omitted -->
<!-- raw HTML omitted --></p>
<pre><code>&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    About 50 x 50 (maximum: 96 x 64)
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    About 50 x 50 (maximum: 96 x 64)
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    About 25 x 25 (maximum: 48 x 32)
  &lt;/p&gt;
&lt;/td&gt;
</code></pre>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<pre><code>&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    At least 1024 pixels on the longest edge
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    At least 1024 pixels on the longest edge
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    At least 1024 pixels on the longest edge
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    At least 1024 pixels on the longest edge
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    At least 512 pixels on the longest edge
  &lt;/p&gt;
&lt;/td&gt;
</code></pre>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<pre><code>&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    180 x 180
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    120 x 120
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    120 x 120
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    152 x 152
  &lt;/p&gt;
&lt;/td&gt;

&lt;td style=&quot;border-color: rgb(233, 233, 233); margin: 0px; outline: 0px; padding-right: 25px; vertical-align: middle; max-width: 260px;&quot;&gt;
  &lt;p class=&quot;para&quot; style=&quot;border: 0px; font-size: 1.4em; outline: 0px; vertical-align: baseline; color: rgb(65, 65, 65); line-height: 20.299999237060547px; word-break: break-word; min-width: 50px;&quot;&gt;
    76 x 76
  &lt;/p&gt;
&lt;/td&gt;
</code></pre>
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted -->版权声明：本文为博主原创文章，未经博主允许不得转载。<!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>Xcode如何添加pch文件</title>
			<link>https://blog.v5u.win/%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0pch%E6%96%87%E4%BB%B6/</link>
			<pubDate>Tue, 14 Jul 2015 03:31:06 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0pch%E6%96%87%E4%BB%B6/</guid>
			<description>Xcode6.0之后去掉了Precompile Prefix Header 文件，主要原因可能在于Prefix Header大大的增加了Build的时间。没有了Pref</description>
			<content type="html"><![CDATA[<p>Xcode6.0之后去掉了Precompile Prefix Header 文件，<!-- raw HTML omitted -->主要原因可能在于Prefix Header大大的增加了Build的时间。没有了Prefix Header之后就要通过手动@import来手动导入头文件了，在失去了编程便利性的同时也降低了Build的时间。具体原因<!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted -->    2，将building setting中的precompile header选项的路径添加“$(SRCROOT)/项目名称/pch文件名”（例如：$(SRCROOT)/LotteryFive/LotteryFive-Prefix.pch）,<!-- raw HTML omitted --><!-- raw HTML omitted -->编译一下程序，如果有错误检查一下添加的路径是否正确。<!-- raw HTML omitted --></p>
<p>&lt;</p>
<p>p style=”margin-top: 0px; margin-bottom: 0.75em; line-height: 27.200000762939453px; text-indent: 1em; color: rgb(51, 51, 51); font-family: ‘Helvetica Neue’, Helvetica, Tahoma, Arial, STXihei, ‘Microsoft YaHei’, 微软雅黑, sans-serif; white-space: normal;”&gt;3，将Precompile Prefix Header为YES，预编译后的pch文件会被缓存起来，可以提高编译速度</p>
<p> </p>
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>iOS如何判断应用是否开启摄像头权限</title>
			<link>https://blog.v5u.win/posts/ios/ios-camera-right/</link>
			<pubDate>Fri, 19 Jun 2015 11:25:28 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-camera-right/</guid>
			<description>NSString* mediaType = AVMediaTypeVideo; AVAuthorizationStatusauthorizationStatus = [AVCaptureDeviceauthorizationStatusForMediaType:mediaType]; if(authorizationStatus == AVAuthorizationStatusRestricted|| authorizationStatus == AVAuthorizationStatusDenied) { UIAlertController* alertC = [UIAlertControlleralertControllerWithTitle:@&amp;quot;摄像头</description>
			<content type="html"><![CDATA[<p><!-- raw HTML omitted -->NSString<!-- raw HTML omitted --> * mediaType = <!-- raw HTML omitted -->AVMediaTypeVideo<!-- raw HTML omitted -->;</p>
<p>    <!-- raw HTML omitted -->AVAuthorizationStatus<!-- raw HTML omitted -->  authorizationStatus = [<!-- raw HTML omitted -->AVCaptureDevice<!-- raw HTML omitted --> <!-- raw HTML omitted -->authorizationStatusForMediaType<!-- raw HTML omitted -->:mediaType];</p>
<p>    <!-- raw HTML omitted -->if<!-- raw HTML omitted --> (authorizationStatus == <!-- raw HTML omitted -->AVAuthorizationStatusRestricted<!-- raw HTML omitted --> || authorizationStatus == <!-- raw HTML omitted -->AVAuthorizationStatusDenied<!-- raw HTML omitted -->) {</p>
<p><!-- raw HTML omitted -->        <!-- raw HTML omitted --><!-- raw HTML omitted -->UIAlertController<!-- raw HTML omitted --><!-- raw HTML omitted --> * alertC = [<!-- raw HTML omitted --><!-- raw HTML omitted -->UIAlertController<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->alertControllerWithTitle<!-- raw HTML omitted -->:<!-- raw HTML omitted --><!-- raw HTML omitted -->@&quot;<!-- raw HTML omitted --><!-- raw HTML omitted -->摄像头访问受限<!-- raw HTML omitted --><!-- raw HTML omitted -->&quot;<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->message<!-- raw HTML omitted -->:<!-- raw HTML omitted --><!-- raw HTML omitted -->nil<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->preferredStyle<!-- raw HTML omitted -->:<!-- raw HTML omitted -->UIAlertControllerStyleAlert<!-- raw HTML omitted -->];<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->        [<!-- raw HTML omitted --><!-- raw HTML omitted -->self<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->presentViewController<!-- raw HTML omitted -->:alertC <!-- raw HTML omitted -->animated<!-- raw HTML omitted -->:<!-- raw HTML omitted --><!-- raw HTML omitted -->YES<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->completion<!-- raw HTML omitted -->:<!-- raw HTML omitted --><!-- raw HTML omitted -->nil<!-- raw HTML omitted --><!-- raw HTML omitted -->];<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->        <!-- raw HTML omitted --><!-- raw HTML omitted -->UIAlertAction<!-- raw HTML omitted --><!-- raw HTML omitted --> * action = [<!-- raw HTML omitted --><!-- raw HTML omitted -->UIAlertAction<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->actionWithTitle<!-- raw HTML omitted -->:<!-- raw HTML omitted --><!-- raw HTML omitted -->@&quot;<!-- raw HTML omitted --><!-- raw HTML omitted -->取消<!-- raw HTML omitted --><!-- raw HTML omitted -->&quot;<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->style<!-- raw HTML omitted -->:<!-- raw HTML omitted -->UIAlertActionStyleCancel<!-- raw HTML omitted --> <!-- raw HTML omitted -->handler<!-- raw HTML omitted -->:^(<!-- raw HTML omitted --><!-- raw HTML omitted -->UIAlertAction<!-- raw HTML omitted --><!-- raw HTML omitted --> *action) {<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->            [<!-- raw HTML omitted --><!-- raw HTML omitted -->self<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->dismissViewControllerAnimated<!-- raw HTML omitted -->:<!-- raw HTML omitted --><!-- raw HTML omitted -->YES<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->completion<!-- raw HTML omitted -->:<!-- raw HTML omitted --><!-- raw HTML omitted -->nil<!-- raw HTML omitted --><!-- raw HTML omitted -->];<!-- raw HTML omitted --></p>
<p>        }];</p>
<p>        [alertC <!-- raw HTML omitted -->addAction<!-- raw HTML omitted -->:action];</p>
<p>    }<!-- raw HTML omitted -->else<!-- raw HTML omitted -->{</p>
<p>}</p>
]]></content>
		</item>
		
		<item>
			<title>iOS如何判断应用是否开启摄像头权限</title>
			<link>https://blog.v5u.win/ios%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%BA%94%E7%94%A8%E6%98%AF%E5%90%A6%E5%BC%80%E5%90%AF%E6%91%84%E5%83%8F%E5%A4%B4%E6%9D%83%E9%99%90/</link>
			<pubDate>Fri, 19 Jun 2015 03:25:28 +0000</pubDate>
			
			<guid>https://blog.v5u.win/ios%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%BA%94%E7%94%A8%E6%98%AF%E5%90%A6%E5%BC%80%E5%90%AF%E6%91%84%E5%83%8F%E5%A4%B4%E6%9D%83%E9%99%90/</guid>
			<description>}</description>
			<content type="html"><![CDATA[<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>}</p>
]]></content>
		</item>
		
		<item>
			<title>iOS NSString</title>
			<link>https://blog.v5u.win/posts/ios/ios-string/</link>
			<pubDate>Thu, 04 Jun 2015 17:33:36 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-string/</guid>
			<description>字符串处理：截取字符串、匹配字符串、分隔字符串 1.截取字符串 NSString*string=@&amp;#34;sdfsfsfsAdfsdf&amp;#34;; string = [string substringToIndex:7];//截取下标7之后的字符串 NSL</description>
			<content type="html"><![CDATA[<p>字符串处理：截取字符串、匹配字符串、分隔字符串</p>
<p>1.截取字符串</p>
<pre tabindex="0"><code>NSString*string=@&#34;sdfsfsfsAdfsdf&#34;;
string = [string substringToIndex:7];//截取下标7之后的字符串 
NSLog(@&#34;截取的值为：%@&#34;,string); 
[string substringFromIndex:2];//截取下标2之前的字符串 
NSLog(@&#34;截取的值为：%@&#34;,string);
</code></pre><p>匹配字符串</p>
<pre tabindex="0"><code>NSString*string =@&#34;sdfsfsfsAdfsdf&#34;; 
NSRangerange = [stringrangeOfString:@&#34;f&#34;];//匹配得到的下标 
NSLog(@&#34;rang:%@&#34;,NSStringFromRange(range)); 
string = [string substringWithRange:range];//截取范围类的字符串 
NSLog(@&#34;截取的值为：%@&#34;,string);
</code></pre><p>分隔字符串</p>
<pre tabindex="0"><code>NSString*string =@&#34;sdfsfsfsAdfsdf&#34;;
NSArray *array = [string componentsSeparatedByString:@&#34;A&#34;]; //从字符A中分隔成2个元素的数组
NSLog(@&#34;array:%@&#34;,array); //结果是adfsfsfs和dfsdf
</code></pre>]]></content>
		</item>
		
		<item>
			<title>使用Autolayout xib实现动态高度的TableViewCell</title>
			<link>https://blog.v5u.win/posts/ios/ios-autolayouttableviewcell/</link>
			<pubDate>Wed, 03 Jun 2015 15:27:18 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-autolayouttableviewcell/</guid>
			<description>文章来源于http://itony.me/381.html 创建Xib文件 首先将Cell做好布局，调整到满意的位置和宽度，然后开始做Autol</description>
			<content type="html"><![CDATA[<p>文章来源于<a href="http://itony.me/381.html">http://itony.me/381.html</a></p>
<h2 id="创建xib文件">创建Xib文件</h2>
<p>首先将Cell做好布局，调整到满意的位置和宽度，然后开始做Autolayout设定。</p>
<p>Autolayout操作方式有两种，一种是选择目标后，使用右下角的工具栏；另一种是直接使用右键拖拽目标，在弹出的菜单中选择限制项。当选择的目标比较小的时候，可以打开左侧的菜单，在这里做拖拽操作一样是可以的。个人感觉后者更方便一些。</p>
<p>开始之前，先来介绍下使用的基本工具吧。</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>第一个按钮是和对齐有关的，就是控制多个元素（Lable, Button等）的统一约束。例如我们需要让标题和内容按照左，就选择标题和内容元素，选择Leading Edges设置为5即可。</p>
<p><a href="http://itony.me/wp-content/uploads/2013/12/Autolayout_Align.png"><img src="http://itony.me/wp-content/uploads/2013/12/Autolayout_Align.png" alt="Autolayout_Align"></a></p>
<p>第二个按钮是和元素位置固定有关的限制条件，直接看图吧：</p>
<p><a href="http://itony.me/wp-content/uploads/2013/12/Autolayout_Pin.png"><img src="http://itony.me/wp-content/uploads/2013/12/Autolayout_Pin.png" alt="Autolayout_Pin"></a></p>
<p>右侧能够看到当前选择元素限制条件的列表：</p>
<p><a href="http://itony.me/wp-content/uploads/2013/12/Autolayout_Inspector_Constrainsts-list.png"><img src="http://itony.me/wp-content/uploads/2013/12/Autolayout_Inspector_Constrainsts-list.png" alt="Autolayout_Inspector_Constrainsts list"></a>
这里有两个参数，“Content Hugging Priority”和“Content Compression Resistance Priority”，感觉不太好理解，栈爆上找到一篇解释，讲的挺好的：<a href="http://stackoverflow.com/questions/15850417/cocoa-autolayout-content-hugging-vs-content-compression-resistance-priority">Cocoa Autolayout: content hugging vs content compression resistance priority</a></p>
<p>有时候想要一个元素的间距是一个动态值，例如距离右侧至少10pt（即&gt;=10pt），那么可以在上图中点击右侧按钮(齿轮)进入详细设置：</p>
<p><a href="http://itony.me/wp-content/uploads/2013/12/Autolayout_Constraint_Relation-Config.png"><img src="http://itony.me/wp-content/uploads/2013/12/Autolayout_Constraint_Relation-Config.png" alt="Autolayout_Constraint_Relation Config"></a></p>
<p>第三个按钮是有关清除限制条件、根据限制更新视图大小的工具。个人比较常用的是清除限制条件，有时候设置错了很麻烦，直接清除掉重新来就行了。</p>
<p><a href="http://itony.me/wp-content/uploads/2013/12/Autolayout_Resolve-Auto-Layout-Issues.png"><img src="http://itony.me/wp-content/uploads/2013/12/Autolayout_Resolve-Auto-Layout-Issues.png" alt="Autolayout_Resolve Auto Layout Issues"></a></p>
<p>上面这些就是常用到的一些限制条件了。个人觉得使用右键拖拽弹出的菜单选择更方便和直观一些，因为菜单中会根据拖拽内容动态显示可用项供我们选择，菜单如图</p>
<p><a href="http://itony.me/wp-content/uploads/2013/12/Autolayout_ShortAction.png"><img src="http://itony.me/wp-content/uploads/2013/12/Autolayout_ShortAction.png" alt="Autolayout_ShortAction"></a></p>
<p>大致就是这些了吧……</p>
<p>我来谈谈自己的用法。总体上是从上到下，从左到右做约束限制。在这个例子中，就是设置标题-&gt;内容-&gt;发帖人这样的顺序。</p>
<p><a href="http://itony.me/wp-content/uploads/2013/12/Autolayout_Example.png"><img src="http://itony.me/wp-content/uploads/2013/12/Autolayout_Example.png" alt="Autolayout_Example"></a></p>
<ol>
<li>
<p>设置标题的顶部和左侧距离，以及宽度（防止超出边界）。</p>
</li>
<li>
<p>设置内容的顶部（距离标题）和左侧距离，以及宽度。设置最大行数。</p>
</li>
<li>
<p>设置发帖人的顶部和左侧距离，以及高度。</p>
</li>
<li>
<p>设置发帖时间的顶部和左侧距离，距离右侧间距（防止内容过长）。</p>
</li>
<li>
<p><strong>关键步骤，设置发帖人距离底部距离，如果不设置这个参数，那么下面代码计算的Cell高度会永远是0。</strong></p>
</li>
</ol>
<p>多试一试，如果有错误或者缺少限制，XCode会有提示。它报出的错误一般都是必须修正的，但它给的自动修正建议有时并不是我们想要的（正确的），想清楚再添加。</p>
<h2 id="代码部分">代码部分</h2>
<p>使用了xib制作的Cell，那么在原来的项目代码中如何使用呢？看代码：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>1</p>
<p>2</p>
<p>3</p>
<p>4</p>
<p>5</p>
<p>6</p>
<p>7</p>
<p>8</p>
<p>9</p>
<p>10</p>
<p>11</p>
<p>12</p>
<p>13</p>
<p>14</p>
<p>15</p>
<p>16</p>
<p>17</p>
<p>18</p>
<p>19</p>
<p>20</p>
<p>21</p>
<p>22</p>
<p>23</p>
<p>24</p>
<p>25</p>
<p>26</p>
<p>27</p>
<p>28</p>
<p>29</p>
<p>30</p>
<p>31</p>
<p>32</p>
<p>33</p>
<p>34</p>
<p>35</p>
<p>36</p>
<p>37</p>
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted -->static<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->NSString<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->*CellIdentifier<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->=<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->@&quot;CellIdentifier&quot;<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p> </p>
<p><!-- raw HTML omitted -->-<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->(<!-- raw HTML omitted --><!-- raw HTML omitted -->void<!-- raw HTML omitted --><!-- raw HTML omitted -->)<!-- raw HTML omitted --><!-- raw HTML omitted -->viewDidLoad<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->{<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->	<!-- raw HTML omitted --><!-- raw HTML omitted -->//注册TableView中用于复用的Cell<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->	<!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->self<!-- raw HTML omitted --><!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->tableView<!-- raw HTML omitted --><!-- raw HTML omitted --> registerNib<!-- raw HTML omitted --><!-- raw HTML omitted -->:<!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->UINib<!-- raw HTML omitted --><!-- raw HTML omitted --> nibWithNibName<!-- raw HTML omitted --><!-- raw HTML omitted -->:<!-- raw HTML omitted --><!-- raw HTML omitted -->@&quot;BBSPostContentCell&quot;<!-- raw HTML omitted --><!-- raw HTML omitted --> bundle<!-- raw HTML omitted --><!-- raw HTML omitted -->:nil<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted --> forCellReuseIdentifier<!-- raw HTML omitted --><!-- raw HTML omitted -->:CellIdentifier<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->	<!-- raw HTML omitted --><!-- raw HTML omitted -->//&hellip;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->}<!-- raw HTML omitted --></p>
<p> </p>
<p><!-- raw HTML omitted -->//关键方法，获取复用的Cell后模拟赋值，然后取得Cell高度<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->-<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->(<!-- raw HTML omitted --><!-- raw HTML omitted -->CGFloat<!-- raw HTML omitted --><!-- raw HTML omitted -->)<!-- raw HTML omitted --><!-- raw HTML omitted -->tableView<!-- raw HTML omitted --><!-- raw HTML omitted -->:<!-- raw HTML omitted --><!-- raw HTML omitted -->(<!-- raw HTML omitted --><!-- raw HTML omitted -->UITableView<!-- raw HTML omitted -->&lt;span class=&ldquo;crayon-h&rdquo; style=&ldquo;margin: 0px; padding: 0px; outline: 0px; border: 0px; vertical-align: baseline; font-style: inherit; height: inherit; font-size: inherit !important;</p>
<p>line-height: inherit !important; color: rgb(0, 111, 224) !important;&quot;&gt; <!-- raw HTML omitted --><!-- raw HTML omitted --><em><!-- raw HTML omitted --><!-- raw HTML omitted -->)<!-- raw HTML omitted --><!-- raw HTML omitted -->tableView<!-- raw HTML omitted --><!-- raw HTML omitted --> heightForRowAtIndexPath<!-- raw HTML omitted --><!-- raw HTML omitted -->:<!-- raw HTML omitted --><!-- raw HTML omitted -->(<!-- raw HTML omitted --><!-- raw HTML omitted -->NSIndexPath<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted --></em><!-- raw HTML omitted --><!-- raw HTML omitted -->)<!-- raw HTML omitted --><!-- raw HTML omitted -->indexPath<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->{<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    <!-- raw HTML omitted --><!-- raw HTML omitted -->BBSPostContentCell<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->*cell<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->=<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->tableView<!-- raw HTML omitted --><!-- raw HTML omitted --> dequeueReusableCellWithIdentifier<!-- raw HTML omitted --><!-- raw HTML omitted -->:CellIdentifier<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    <!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    <!-- raw HTML omitted --><!-- raw HTML omitted -->NSDictionary<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->*dataSourceItem<!-- raw HTML omitted -->&lt;span class=&ldquo;crayon-h&rdquo; style=&ldquo;m</p>
<p>argin: 0px; padding: 0px; outline: 0px; border: 0px; vertical-align: baseline; font-style: inherit; height: inherit; font-size: inherit !important; line-height: inherit !important; color: rgb(0, 111, 224) !important;&quot;&gt; <!-- raw HTML omitted --><!-- raw HTML omitted -->=<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->self<!-- raw HTML omitted --><!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->dataSource<!-- raw HTML omitted --><!-- raw HTML omitted --> objectAtIndex<!-- raw HTML omitted --><!-- raw HTML omitted -->:indexPath<!-- raw HTML omitted --><!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->row<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    <!-- raw HTML omitted --><!-- raw HTML omitted -->cell<!-- raw HTML omitted --><!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->titleLabel<!-- raw HTML omitted --><!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->text<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->=<!-- raw HTML omitted --><!-- raw HTML omitted -->  <!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->dataSourceItem<!-- raw HTML omitted --><!-- raw HTML omitted --> valueForKey<!-- raw HTML omitted --><!-- raw HTML omitted -->:<!-- raw HTML omitted --><!-- raw HTML omitted -->@&quot;title&quot;<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    <!-- raw HTML omitted --><!-- raw HTML omitted -->cell<!-- raw HTML omitted -->&lt;span class=&ldquo;crayon-sy&rdquo; style=&ldquo;margin: 0px; padding: 0px; outline: 0px; border: 0px; vertical-align: baseline; font-style: in</p>
<p>herit; height: inherit; font-size: inherit !important; line-height: inherit !important; color: rgb(51, 51, 51) !important;&quot;&gt;.<!-- raw HTML omitted --><!-- raw HTML omitted -->contentLabel<!-- raw HTML omitted --><!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->text<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->=<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->dataSourceItem<!-- raw HTML omitted --><!-- raw HTML omitted --> valueForKey<!-- raw HTML omitted --><!-- raw HTML omitted -->:<!-- raw HTML omitted --><!-- raw HTML omitted -->@&quot;body&quot;<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->   <!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    <!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->cell <!-- raw HTML omitted --><!-- raw HTML omitted -->setNeedsUpdateConstraints<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    <!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->cell <!-- raw HTML omitted --><!-- raw HTML omitted -->updateConstraintsIfNeeded<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    <!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    <!-- raw HTML omitted --><!-- raw HTML omitted -->CGFloat<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->&lt;span class=&ldquo;crayon-v&rdquo; style=&ldquo;margin: 0px; padding: 0px; outline: 0px; border: 0px; vertical-align: base</p>
<p>line; font-style: inherit; height: inherit; font-size: inherit !important; line-height: inherit !important; color: rgb(0, 45, 122) !important;&quot;&gt;height<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->=<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->cell<!-- raw HTML omitted --><!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->contentView<!-- raw HTML omitted --><!-- raw HTML omitted --> systemLayoutSizeFittingSize<!-- raw HTML omitted --><!-- raw HTML omitted -->:UILayoutFittingCompressedSize<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->height<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    <!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    <!-- raw HTML omitted --><!-- raw HTML omitted -->return<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->height<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->}<!-- raw HTML omitted --></p>
<p> </p>
<p><!-- raw HTML omitted -->//在cellForRowAtIndexPath中，按照常规方法做赋值就行了<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->-<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->(<!-- raw HTML omitted --><!-- raw HTML omitted -->UITableViewCell<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->*<!-- raw HTML omitted --><!-- raw HTML omitted -->)<!-- raw HTML omitted --><!-- raw HTML omitted -->tableView<!-- raw HTML omitted --><!-- raw HTML omitted -->:<!-- raw HTML omitted -->&lt;span class=&ldquo;cra</p>
<p>yon-sy&rdquo; style=&ldquo;margin: 0px; padding: 0px; outline: 0px; border: 0px; vertical-align: baseline; font-style: inherit; height: inherit; font-size: inherit !important; line-height: inherit !important; color: rgb(51, 51, 51) !important;&quot;&gt;(<!-- raw HTML omitted --><!-- raw HTML omitted -->UITableView<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted --><em><!-- raw HTML omitted --><!-- raw HTML omitted -->)<!-- raw HTML omitted --><!-- raw HTML omitted -->tableView<!-- raw HTML omitted --><!-- raw HTML omitted --> cellForRowAtIndexPath<!-- raw HTML omitted --><!-- raw HTML omitted -->:<!-- raw HTML omitted --><!-- raw HTML omitted -->(<!-- raw HTML omitted --><!-- raw HTML omitted -->NSIndexPath<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted --></em><!-- raw HTML omitted --><!-- raw HTML omitted -->)<!-- raw HTML omitted --><!-- raw HTML omitted -->indexPath<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->{<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->	<!-- raw HTML omitted --><!-- raw HTML omitted -->BBSPostContentCell<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->*cell<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->=<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->tableView<!-- raw HTML omitted --><!-- raw HTML omitted --> dequeueReusableCellWithIdentifier<!-- raw HTML omitted --><!-- raw HTML omitted -->:CellIdentifier<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    <!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    <!-- raw HTML omitted -->&lt;span class=&ldquo;crayon-t&rdquo; style=&ldquo;margin: 0px; padding: 0px; outline: 0px; border: 0px; vertical-align: baseline; font-style: inherit; height: inherit; font-weight: bold</p>
<p>!important; font-size: inherit !important; line-height: inherit !important; color: rgb(128, 0, 128) !important;&quot;&gt;NSDictionary<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->*dic<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->=<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->dataSource<!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->indexPath<!-- raw HTML omitted --><!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->row<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    <!-- raw HTML omitted --><!-- raw HTML omitted -->cell<!-- raw HTML omitted --><!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->titleLabel<!-- raw HTML omitted --><!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->text<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->=<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->dic<!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->@&quot;title&quot;<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    <!-- raw HTML omitted --><!-- raw HTML omitted -->cell<!-- raw HTML omitted --><!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->contentLabel<!-- raw HTML omitted --><!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->text<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->=<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->dic<!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->@&quot;body&quot;<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    <!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    <!-- raw HTML omitted --><!-- raw HTML omitted -->return<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->cell<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->}<!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<p>2014.1.2: 在测试时发现这部分的代码还存在一些性能问题（整个表视图在更新时会卡顿），我会稍后补上。</p>
<p>我在使用Instruments分析发现，heightForRowAtIndexPath中调用dequeueReusableCellWithIdentifier会占用很多CPU资源，因此我试着不使用registerNib方法注册复用Cell，而在代码中手动处理，类似这样：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>1</p>
<p>2</p>
<p>3</p>
<p>4</p>
<p>5</p>
<p>6</p>
<p>7</p>
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted -->BBSPostContentCell<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->*cell&lt;/</p>
<p>span&gt;<!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->=<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->tableView<!-- raw HTML omitted --><!-- raw HTML omitted --> dequeueReusableCellWithIdentifier<!-- raw HTML omitted --><!-- raw HTML omitted -->:CellIdentifier<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->if<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->(<!-- raw HTML omitted --><!-- raw HTML omitted -->cell<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->==<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->nil<!-- raw HTML omitted --><!-- raw HTML omitted -->)<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->{<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    <!-- raw HTML omitted --><!-- raw HTML omitted -->cell<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->=<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->NSBundle<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->mainBundle<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted -->&lt;span class=&ldquo;crayon-e &quot; style=&ldquo;margin: 0px; padding: 0px; outl</p>
<p>ine: 0px; border: 0px; vertical-align: baseline; font-style: inherit; height: inherit; font-size: inherit !important; line-height: inherit !important; color: teal !important;&quot;&gt; loadNibNamed<!-- raw HTML omitted --><!-- raw HTML omitted -->:<!-- raw HTML omitted --><!-- raw HTML omitted -->@&quot;BBSPostContentCell&quot;<!-- raw HTML omitted --><!-- raw HTML omitted --> owner<!-- raw HTML omitted --><!-- raw HTML omitted -->:self<!-- raw HTML omitted --><!-- raw HTML omitted --> options<!-- raw HTML omitted --><!-- raw HTML omitted -->:NULL<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->0<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    <!-- raw HTML omitted --><!-- raw HTML omitted -->NSLog<!-- raw HTML omitted --><!-- raw HTML omitted -->(<!-- raw HTML omitted --><!-- raw HTML omitted -->@&quot;cell loadNibNamed&quot;<!-- raw HTML omitted --><!-- raw HTML omitted -->)<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->}<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->else<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->{<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->	<!-- raw HTML omitted --><!-- raw HTML omitted -->NSLog<!-- raw HTML omitted --><!-- raw HTML omitted -->(<!-- raw HTML omitted --><!-- raw HTML omitted -->@&quot;cell dequeueReusableCellWithIdentifier&quot;<!-- raw HTML omitted --><!-- raw HTML omitted -->)<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->}<!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<p>这时我发现这里的Cell调用dequeueReusableCellWithIdentifier方法总是返回nil，因此每次都是从xib中加载，从而耗费了大量的资源。问题的原因我还不清楚，目前我的解决方法是，单独生成一个Cell用于在heightForRowAtIndexPath方法中计算高度。</p>
<p>其次，在[tableView reloadData]和[tableView insertRowsAtIndexPaths]时，底层会将所有行高重新计算，这个会占用大量的时间，因此我试着对行高做了缓存，暂时解决了这个问题。</p>
<h2 id="关于兼容性问题">关于兼容性问题</h2>
<p>由于Autolayout只能在iOS6.0以上版本使用，而根据友盟统计，目前6.0以下的用户大概还有8%左右（2013.12）。现在有两个办法解决：</p>
<ol>
<li>
<p>哥不在乎，放弃这些用户！（好霸气=。=）把项目的部署版本修改为6.0以上即可。</p>
</li>
<li>
<p>咳…咳…这个嘛，用户还是有必要支持的………恩，那我们来说说这个怎么兼容。</p>
</li>
</ol>
<p>思路很简单，我们告诉XCode，6.0以上版本使用Autolayout，以下的旧版本不要使用这个就可以了。</p>
<p>将原xib文件inspector中选择”Interface Builder Document”-&gt;”Build for”-&gt;”iOS 6.0 and Later”，告诉XCode，这个xib在6.0以上设备编译。</p>
<p>将xib文件拷贝一份副本，命名为”xxx_iOS5.xib”，在inspector中选择”Project Deployment Target”，也就是说使用项目部署目标版本（即最低版本5.0），并取消”Use Autolayout”选项。</p>
<p>在代码中根据系统版本加载不同的xib文件：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>1</p>
<p>2</p>
<p>3</p>
<p>4</p>
<p>5</p>
<p>6</p>
<p>7</p>
<p>8</p>
<p>9</p>
<p>10</p>
<p>11</p>
<p>12</p>
<p>13</p>
<p>14</p>
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted -->#define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v) <!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->(<!-- raw HTML omitted -->&lt;span class=&ldquo;crayon-sy&rdquo; style=&ldquo;margin: 0px; padding: 0px; outline: 0px; border: 0px; vertical-align: baseline; font-st</p>
<p>yle: inherit; height: inherit; font-size: inherit !important; line-height: inherit !important; color: rgb(51, 51, 51) !important;&quot;&gt;[<!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->UIDevice<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->currentDevice<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted --> systemVersion<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted --> compare<!-- raw HTML omitted --><!-- raw HTML omitted -->:v<!-- raw HTML omitted --><!-- raw HTML omitted --> options<!-- raw HTML omitted --><!-- raw HTML omitted -->:NSNumericSearch<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->!=<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->NSOrderedAscending<!-- raw HTML omitted --><!-- raw HTML omitted -->)<!-- raw HTML omitted --></p>
<p> </p>
<p><!-- raw HTML omitted -->#define IS_SUPPORT_AUTOLAYOUT   SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@&quot;6.0&quot;)<!-- raw HTML omitted --></p>
<p> </p>
<p><!-- raw HTML omitted -->-<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->(<!-- raw HTML omitted --><!-- raw HTML omitted -->void<!-- raw HTML omitted --><!-- raw HTML omitted -->)<!-- raw HTML omitted --><!-- raw HTML omitted -->viewDidLoad<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->{<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->	<!-- raw HTML omitted --><!-- raw HTML omitted -->if<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->(<!-- raw HTML omitted -->&lt;span class=&ldquo;crayon-o&rdquo; style=&ldquo;margin: 0px; paddin</p>
<p>g: 0px; outline: 0px; border: 0px; vertical-align: baseline; font-style: inherit; height: inherit; font-size: inherit !important; line-height: inherit !important; color: rgb(0, 111, 224) !important;&quot;&gt;!<!-- raw HTML omitted --><!-- raw HTML omitted -->IS_SUPPORT_AUTOLAYOUT<!-- raw HTML omitted --><!-- raw HTML omitted -->)<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->{<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->	    <!-- raw HTML omitted --><!-- raw HTML omitted -->//for iOS 5.x<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->	    <!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->self<!-- raw HTML omitted --><!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->tableView<!-- raw HTML omitted --><!-- raw HTML omitted --> registerNib<!-- raw HTML omitted --><!-- raw HTML omitted -->:<!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->UINib<!-- raw HTML omitted --><!-- raw HTML omitted --> nibWithNibName<!-- raw HTML omitted --><!-- raw HTML omitted -->:<!-- raw HTML omitted --><!-- raw HTML omitted -->@&quot;BBSPostContentCell_iOS5&quot;<!-- raw HTML omitted --><!-- raw HTML omitted --> bundle<!-- raw HTML omitted --><!-- raw HTML omitted -->:nil<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted --> forCellReuseIdentifier<!-- raw HTML omitted --><!-- raw HTML omitted -->:CellIdentifier<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->	<!-- raw HTML omitted --><!-- raw HTML omitted -->}<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->else<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->&lt;span class=&ldquo;crayon-sy&rdquo; style=&ldquo;marg</p>
<p>in: 0px; padding: 0px; outline: 0px; border: 0px; vertical-align: baseline; font-style: inherit; height: inherit; font-size: inherit !important; line-height: inherit !important; color: rgb(51, 51, 51) !important;&quot;&gt;{<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->	    <!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->self<!-- raw HTML omitted --><!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->tableView<!-- raw HTML omitted --><!-- raw HTML omitted --> registerNib<!-- raw HTML omitted --><!-- raw HTML omitted -->:<!-- raw HTML omitted --><!-- raw HTML omitted -->[<!-- raw HTML omitted --><!-- raw HTML omitted -->UINib<!-- raw HTML omitted --><!-- raw HTML omitted --> nibWithNibName<!-- raw HTML omitted --><!-- raw HTML omitted -->:<!-- raw HTML omitted --><!-- raw HTML omitted -->@&quot;BBSPostContentCell&quot;<!-- raw HTML omitted --><!-- raw HTML omitted --> bundle<!-- raw HTML omitted --><!-- raw HTML omitted -->:nil<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted --> forCellReuseIdentifier<!-- raw HTML omitted --><!-- raw HTML omitted -->:CellIdentifier<!-- raw HTML omitted --><!-- raw HTML omitted -->]<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->	<!-- raw HTML omitted --><!-- raw HTML omitted -->}<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->}<!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<p>最后别忘了在高度计算时，区分下代码：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>x !important; border: none !important; vertical-align: top !important; background-position: 0px 50%;&quot;&gt;<!-- raw HTML omitted --></p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>4</p>
<p>5</p>
<p>6</p>
<p>7</p>
<p>8</p>
<p>9</p>
<p>10</p>
<p>11</p>
<p>12</p>
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted -->-<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->(<!-- raw HTML omitted --><!-- raw HTML omitted -->CGFloat<!-- raw HTML omitted --><!-- raw HTML omitted -->)<!-- raw HTML omitted --><!-- raw HTML omitted -->tableView<!-- raw HTML omitted --><!-- raw HTML omitted -->:<!-- raw HTML omitted --><!-- raw HTML omitted -->(<!-- raw HTML omitted --><!-- raw HTML omitted -->UITableView<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted --><em><!-- raw HTML omitted --><!-- raw HTML omitted -->)<!-- raw HTML omitted --><!-- raw HTML omitted -->tableView<!-- raw HTML omitted --><!-- raw HTML omitted --> heightForRowAtIndexPath<!-- raw HTML omitted --><!-- raw HTML omitted -->:<!-- raw HTML omitted --><!-- raw HTML omitted -->(<!-- raw HTML omitted --><!-- raw HTML omitted -->NSIndexPath<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted --></em><!-- raw HTML omitted --><!-- raw HTML omitted -->)<!-- raw HTML omitted --><!-- raw HTML omitted -->indexPath<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->{<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    <!-- raw HTML omitted --><!-- raw HTML omitted -->if<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->(<!-- raw HTML omitted --><!-- raw HTML omitted -->IS_SUPPORT_AUTOLAYOUT<!-- raw HTML omitted --><!-- raw HTML omitted -->)<!-- raw HTML omitted -->&lt;span class=&ldquo;c</p>
<p>rayon-h&rdquo; style=&ldquo;margin: 0px; padding: 0px; outline: 0px; border: 0px; vertical-align: baseline; font-style: inherit; height: inherit; font-size: inherit !important; line-height: inherit !important; color: rgb(0, 111, 224) !important;&quot;&gt; <!-- raw HTML omitted --><!-- raw HTML omitted -->{<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->        <!-- raw HTML omitted --><!-- raw HTML omitted -->//Autolayout部分代码，同上<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->        <!-- raw HTML omitted --><!-- raw HTML omitted -->//&hellip;..<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->        <!-- raw HTML omitted --><!-- raw HTML omitted -->return<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->height<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    <!-- raw HTML omitted --><!-- raw HTML omitted -->}<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->else<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->{<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    	<!-- raw HTML omitted --><!-- raw HTML omitted -->//for iOS 5.x<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    	<!-- raw HTML omitted --><!-- raw HTML omitted -->//为了简单起见，就直接使用固定值了，当然如果你要自己为iOS5用户手动计算动态高度，也是可以的。<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->        <!-- raw HTML omitted --><!-- raw HTML omitted -->return<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->81<!-- raw HTML omitted --><!-- raw HTML omitted -->;<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->    <!-- raw HTML omitted --><!-- raw HTML omitted -->}<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->}<!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<p>完成了！</p>
<p><!-- raw HTML omitted -->原创文章，采用 <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a> 进行许可。
转载请注明：转载自 <a href="http://itony.me/">Tony's blog</a>，原文网址：<a href="http://itony.me/381.html">http://itony.me/381.html</a><!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>如何避免在Block里用self造成循环引用</title>
			<link>https://blog.v5u.win/posts/ios/ios-%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%9C%A8block%E9%87%8C%E7%94%A8self%E9%80%A0%E6%88%90%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8/</link>
			<pubDate>Fri, 15 May 2015 16:00:00 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%9C%A8block%E9%87%8C%E7%94%A8self%E9%80%A0%E6%88%90%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8/</guid>
			<description>本文原引于Bannings的专栏博客 一般来说我们总会在设置Block之后，在合适的时间回调Block，而不希望回调Block的时候Block</description>
			<content type="html"><![CDATA[<p>本文原引于<a href="http://blog.csdn.net/zhangao0086/article/details/38273239" title="避免block中self循环引用">Bannings的专栏博客</a></p>
<p>一般来说我们总会在设置Block之后，在合适的时间回调Block，而不希望回调Block的时候Block已经被释放了，所以我们需要对Block进行copy，copy到堆中，以便后用。</p>
<p>当一个Block被Copy的时候，如果你在Block里进行了一些调用，那么将会有一个强引用指向这些调用方法的调用者，有两个规则：</p>
<ul>
<li>
<p>如果你是通过引用来访问一个实例变量，那么将强引用至self</p>
</li>
<li>
<p>如果你是通过值来访问一个实例变量，那么将直接强引用至这个“值”变量</p>
</li>
</ul>
<p>苹果官方文档里有两个例子来说明这两种情况：</p>
<p><img src="http://img.blog.csdn.net/20140729170542000?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhhbmdhbzAwODY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>上面第一种情况相当于用self.xxx来访问实例变量，所以强引用指向了self；第二种情况把实例变量变成了本地临时变量，强引用将直接指向这个本地的临时变量。大多数情况下，我们只用处理第一种情况就行了，因为第二种情况虽然会造成循环引用，但是临时变量很快就被释放了，不会造成真正的循环引用。要避免强引用到self的话，用__weak把self重新引用一下就行了，像这样：</p>
<ol>
<li><!-- raw HTML omitted --><!-- raw HTML omitted -->__weak <!-- raw HTML omitted --><!-- raw HTML omitted -->ViewController<!-- raw HTML omitted --><!-- raw HTML omitted --> *weakSelf = <!-- raw HTML omitted --><!-- raw HTML omitted -->self<!-- raw HTML omitted --><!-- raw HTML omitted -->;  <!-- raw HTML omitted --><!-- raw HTML omitted --></li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>NSData转int</title>
			<link>https://blog.v5u.win/posts/ios/ios-nsdata%E8%BD%ACint/</link>
			<pubDate>Wed, 29 Apr 2015 14:03:07 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-nsdata%E8%BD%ACint/</guid>
			<description>有一种借助string的方法，经验证不对，找了半天终于找到了一个合适的，可是没有看的太明白，特补充记录在此。 1.int -&amp;gt; data int i = 1; NSData *data = [NSData dataWithBytes: &amp;amp;i length: si</description>
			<content type="html"><![CDATA[<pre tabindex="0"><code>有一种借助string的方法，经验证不对，找了半天终于找到了一个合适的，可是没有看的太明白，特补充记录在此。
1.int -&gt; data
int i = 1;
NSData *data = [NSData dataWithBytes: &amp;i length: sizeof(i)];//不多解释，不明白请留言
2.data -&gt; int
int i;
[data getBytes: &amp;i length: sizeof(i)];//必须要事先声明 int 变量，此处是将data里的数据赋值到 int变量 i 的地址里。
</code></pre>]]></content>
		</item>
		
		<item>
			<title>SEOer的优化思路</title>
			<link>https://blog.v5u.win/posts/web/web-seoer%E7%9A%84%E4%BC%98%E5%8C%96%E6%80%9D%E8%B7%AF/</link>
			<pubDate>Sun, 26 Apr 2015 17:56:07 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/web/web-seoer%E7%9A%84%E4%BC%98%E5%8C%96%E6%80%9D%E8%B7%AF/</guid>
			<description>SEO是一门复杂的学问，手法很多，提高权重可以从很多角度着手，但是，什么样的网站需要用到什么样的手法，网站的不同阶段，又需要怎么样提高排名？</description>
			<content type="html"><![CDATA[<p>SEO是一门复杂的学问，手法很多，提高权重可以从很多角度着手，但是，什么样的网站需要用到什么样的手法，网站的不同阶段，又需要怎么样提高排名？这就是<!-- raw HTML omitted -->SEO排名思路<!-- raw HTML omitted -->了。</p>
<p>网站上线一段时间，有了很多关键词的排名，每天的流量也有一些，但是怎么也提高不上去，怎么办呢？</p>
<p>我们如果注意观察会发现，百度最近的算法又调整了，很多的大站的排名也出现了波动，最简单的，站长们比较关心的seo这个词的前三页排名可以说大调整。<!-- raw HTML omitted -->北京seo<!-- raw HTML omitted -->鱼非子，最近通过观察很多seo的老站，大站的排名出现了较大的波动，甚至焦大的博客都被黑掉了，这是怎么搞的呢？seo到底要怎么搞呢？</p>
<p>百度算法最近已经调整，这个是毋庸置疑的，如果你比较关注百度官方的话，百度官方最近更新了一些文章，暗示百度的算法的调整方向，下面我就说一下我的感悟。</p>
<p>无疑，参与内页的排名的页面越来越多，内容能不能解决用户的问题，以前研究过google的都晓得，如果百度它是指当一个用户进行搜索时点击了一个结果然后立即点击浏览器的后退按钮，然后点击了另一个站点的结果并在那里停留。这对于搜索引擎来说是一个信号——你没有提供用户想找的内容或者提供了一个差劲的体验。这种情况如果多次发生会让你在搜索引擎的排名迅速下降。</p>
<p>很多站长，或者行业外的人，招人做优化，一般都是给出关键词，给出网站。我想说的是，拍上去，并不难，难的是，稳定住，我们不研究任何的算法，试着想一下。如果你运用了一些手段，让自己百度排名上升了，但是如果你的网页是不安全的，或者不能够解决客户问题的，也就是不能够留住客户的，跳出率必然会很高，长久的下去，百度会检测到你的跳出率的，你的网站不能够帮助到使用百度搜索引擎的人，那百度怎么会给你一个高分呢？</p>
<p>之前，我在文章（什么样的原创才是SEO）里提高过怎么量化评价一个网站的高低，当百度认为你是一个高质量的网页的时候，百度会给你一个还算不错的排名，这时候就需要内容的优化了，也就是seo的根源，客户体验，这个时候才是需要客户体验，才需要做内容优化，写好的内容，做好的图片。</p>
<p>于此同时，我们要做的是配合好权重的导入工作，利用上自己的各种资源，因为一旦你网站百度认识了，认可了，这时候，你把跳出率降下来，让更多的网页给你加分（导入链接）这样权重提高是非常快的。</p>
<p>于此同时在布局文章内容的时候，一定要做好长尾词的建设，我们都知道长尾词虽然没有指数，但是排名是很容易的，尤其当你网站有了一定的权重之后，长尾词的排名是非常容易的，这时候要做的就是多多布局长尾词，让你的网站有更多入口，无论搜索人群输入什么样的长尾关键词都可以看到你的页面，内容还不错的话，就是良性的循环了。</p>
<p>所以SEOer在做网站排名的时候，一定要有一套完整的<strong>SEOer优化思路</strong>，不要今天听大神讲外链有用就去疯狂发外链，明天听另一个大神说原创内容好，又去大量的伪原创，我们SEOer不仅仅要学习，更重要的是要有独立思考的能力，只有这样，慢慢我们自己才能靠近大神。</p>
<p>北京SEO官网 <a href="http://www.aiyw.ne">www.aiyw.net</a><!-- raw HTML omitted --><!-- raw HTML omitted -->‍<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>iOS8.3发布了Swift 1.2带来哪些新变化</title>
			<link>https://blog.v5u.win/posts/ios/ios-ios8.3-swift-changed/</link>
			<pubDate>Tue, 14 Apr 2015 14:59:50 +0000</pubDate>
			
			<guid>https://blog.v5u.win/posts/ios/ios-ios8.3-swift-changed/</guid>
			<description>原文 http://www.cnblogs.com/yuyongjian/p/4371400.html 苹果前几日在面向开发者推送iOS 8.3 Beta的同时，还发布了版本号为6D520o的Xcode 6.3 Beta，其中便包含了iOS 8.3 Beta和O</description>
			<content type="html"><![CDATA[<p>原文  <a href="http://www.cnblogs.com/yuyongjian/p/4371400.html?utm_source=tuicool">http://www.cnblogs.com/yuyongjian/p/4371400.html</a></p>
<p><img src="http://img2.tuicool.com/2EjEfe.jpg" alt="" title="1423710600589982.jpg"></p>
<p>苹果前几日在面向开发者推送iOS 8.3 Beta的同时，还发布了版本号为6D520o的Xcode 6.3 Beta，其中便包含了iOS 8.3 Beta和OS X v10.10 SDK，并进一步提升了Swift与Objective-C代码的交互性，而Swift业已更新至1.2版本。@未来眼之老码团队第一时间翻译了完整的Release Note。共计50多处改动，同时修改了Objective-c的语法，足见苹果对Swift语言的重视。</p>
<p><img src="http://img2.tuicool.com/MBZzA3.jpg" alt="" title="1423710718209509.jpg"></p>
<p>从 <a href="https://developer.apple.com/unauthorized/">Xcode 6.3 Beta Release Notes</a> 看出，Xcode 6.3 Beta包含了很多颇为值得开发者期待的改变，共计50多处改动，同时修改了Objective-C的语法，足见苹果对Swift语言的重视。而其代码迁移工具可以帮助开发者将其代码从Swift 1.1（Xcode 6.1）升级至Swift 1.2（Xcode 6.3），具体执行编辑菜单（Edit）-&gt;转换（Convert）-至（To）Swift1.2即可。 具体更新如下：</p>
<p>Swift语言的增强</p>
<ul>
<li>
<p>Swift现在支持目标增量编译，例如当一个文件改变时不会重新编译Target中的每一个文件。这个基于固有依赖分析。所以你依然会看到有很多文件在必要情况下被重编。如果你发现需要重编但没有重编的情况，请报一个Bug出来。清理Target后再编，会按照往常的流程进行。</p>
</li>
<li>
<p>增加了一个新的Set数据类型，它提供了元素唯一化，且有完整语义的通用数据类型集合。它和NSSet类型桥接，提供和Array和Dictionary相类似的功能。</p>
</li>
<li>
<p>if let语句现在被扩展为可以支持多条条件判断：<!-- raw HTML omitted -->if let a = foo(), b = bar() where a &lt; b,  
let c = baz() {  
 }<!-- raw HTML omitted --></p>
</li>
</ul>
<p>它允许你测试多种选择，并且包含一个bool判断。当然这种情况不包含嵌套判断。</p>
<p>let常量现在生成时不需要立即初始化，新的规则是let常量必须在被首次使用前初始化即可（和var一样）。或者说它只能被初始化，也就是说在初始化后它不能再被改变或者重新赋值，可用的模式如下：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>这个正常的来说需要var变量用法，尽管这里没有任何修改的操作。</p>
<ul>
<li>
<p>“Static”静态方法和属性现在允许在class中使用(作为“class final”的别名)。你现在可以在类中声明一个静态存储属性，它享有全局存储空间和首次使用再初始化的惰性构造功能。协议Protocal现在会声明一个static的类型要求而不是声明一个class的要求。</p>
</li>
<li>
<p>对于表达式闭包的类型引用有了几点改进：</p>
</li>
</ul>
<ol>
<li>
<p>含有单返回语句的闭包现在类型检查时以单表达式闭包处理。</p>
</li>
<li>
<p>匿名的且含有非空返回类型的单表达式现在可以用在Void上下文中。</p>
</li>
<li>
<p>多表达式的闭包类型的情况可能无法被类型推断出来，这归功于缺乏返回类型的情况能被正确的推断出来。</p>
</li>
</ol>
<ul>
<li>Swift中的枚举类型现在可以通过@objc关键字导出到Objective-C中。@objc的枚举类型必须定义一个整型的原始类型，并且该枚举不能泛型化或者不能使用关联值。由于Objective-C中的枚举类型没有命名空间，所以导出到Objective-C中的枚举类型以枚举名字和case项目名字的组合的方式使用。 比如在Swift中的声明：<!-- raw HTML omitted -->@objc  
 enum Bear: Int {  
 case Black, Grizzly, Polar  
 }<!-- raw HTML omitted --></li>
</ul>
<p>导出到Objective-C：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<ul>
<li>
<p>Objective-C语言的扩展语法现在可以判断出Objective-C API中指针或者block的是否为空，同时允许不带ImplicitlyUnwrappedOptional协议地导出Objective-C API函数。</p>
</li>
<li>
<p>Swift现在可以部分支持导入C的联合类型，包括unions、bitfileds、SIMD vector类型以及其他Swift的不支持的C特性。这些不被支持的元素不能在Swift中的直接访问，但是在Swift中，Objective-C或者C可以以参数或者返回类型的方式使用。这包括Foundation NSDecimal类型、GLKit GLKVector和GLKMatrix类型，以及其他一些类型。</p>
</li>
<li>
<p>被导入的C结构体现在在Swift中有一个默认的构造器，它会将结构体中的所有的元素初始化为0，例如：<!-- raw HTML omitted -->import Darwin  
 var devNullStat = stat()  
 stat(&quot;/dev/null&quot;, &amp;devNullStat)<!-- raw HTML omitted --></p>
</li>
</ul>
<p>如果一个结构体的元素不能被正确的初始化为0（比如被标记为新的_nonnull标示符时），这个默认的构造器将会终止。</p>
<ul>
<li>
<p>String的索引类型间新的转换API现在可以用了，如String、String.UnicodeScalarView、String.UTF16View以及String.UTF8View， 同时每个String View转换为String的函数也可使用。</p>
</li>
<li>
<p>类型值在println函数或者字符串内插算法中现在可以打印完整的类型名称了：<!-- raw HTML omitted -->toString(Int.self) // 打印 “Swift.Int&quot;  
 println([Float].self) // 打印 &quot;Swift.Array”  
 println((Int, String).self) // 打印 &quot;(Swift.Int, Swift.String)&quot;<!-- raw HTML omitted --></p>
</li>
<li>
<p>一个新的“@noescape”属性可以用在函数的闭包参数上，这意味着这个参数是唯一可被调用的（或者用在函数调用时以参数的方式出现），其意思是它的生命周期比函数调用的周期短，这有助于一些小小的性能优化，但最重要的是它屏蔽了闭包中对self.的需求。这使得函数的控制流比其他更加透明。在未来的beta版本中，标准库函数将普遍采用这种特性，比如autoreleasepool()：<!-- raw HTML omitted -->func autoreleasepool(@noescape code: () -&gt; ()) {  
   pushAutoreleasePool()  
   code()  
   popAutoreleasePool()  
 }<!-- raw HTML omitted --></p>
</li>
<li>
<p>相比Swift 1.1，Swift 1.2在很多方面的性能上有本质的提高，比如多维数组算法更快，未优化的代码更加快速。</p>
</li>
<li>
<p>表达式类型的错误诊断有了很大的提高。</p>
</li>
<li>
<p>很多通用表达式的检查效率有很大提高，这个有助于降低编译时间和减少“expression too complex”的错误。</p>
</li>
</ul>
<p>Swift语言的改变</p>
<ul>
<li>
<p>“确保转换”和“可失败转换”的概念现在被分为两个操作符。可失败转换现在使用as!运算符，这个！感叹号可以让代码的读者更清晰的明白本次转换可能失败并触发一个运行时错误。“as”操作符会保持向上转换（比如“someDerivedValue转换为Base”）或者类型标注（“0 转换为Int8”），它保证了转换不会失败。</p>
</li>
<li>
<p>结构体和类构造器中的let不可变属性现在被规范为更加标准的通用模型：lets类型初始化后将永不会被改变或重新赋值。以前的实现是，可以在构造器中任意修改，而现在它们只允许被初始化和提供值操作。如果一个属性在声明时已经赋值，那么它会被所有的构造器认为已经含有初始值。</p>
</li>
<li>
<p>从桥接Objective-C类 (NSString/NSArray/NSDictionary）到它Swift中值类型的隐式转化被移除。这将是Swift的类型系统更加简单和可预测。这意味着：<!-- raw HTML omitted -->import Foundation  
func log(s: String) { println(x) }  
let ns: NSString = &quot;some NSString&quot; // Okay  
log(ns) // 错误  
// &quot;'NSString' 不能转换为 'String'&quot;<!-- raw HTML omitted --></p>
</li>
</ul>
<p>为了完成桥接转换，需要用显式转化符标注：</p>
<!-- raw HTML omitted -->
<p>从Swift类型到Objective-C类型的桥接隐式转换依然被允许，比如：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<ul>
<li>
<p>@autoclosure现在标注在参数上，而不是标注在参数的类型上。比如：<!-- raw HTML omitted -->//以前我们这样写：  
 func assert(predicate : @autoclosure () -&gt; Bool) {… }  
//现在需要这样写：  
 func assert(@autoclosure predicate : () -&gt; Bool) {… }<!-- raw HTML omitted --></p>
</li>
<li>
<p>使用在函数参数上的 @autoclosure属性现在含有@noescape新属性的功能，这个改进限制了@autoclosure作为控制流程以及惰性计算的能力。</p>
</li>
<li>
<p>柯里化函数现在可以指定参数标签了：<!-- raw HTML omitted -->func curryUnnamed(a: Int)(_ b: Int) { return a + b }  
curryUnnamed(1)(2)  
func curryNamed(first a: Int)(second b: Int) -&gt; Int { return a + b }  
curryNamed(first: 1)(second: 2)<!-- raw HTML omitted --></p>
</li>
<li>
<p>Swift现在可以检测在Swift类型系统中覆盖和重写的差异以及通过Objective-C运行时可见的影响。比如，下面Objective-C类中对属性的setter和类扩展中对方法的“setProperty”它们之间的冲突现在可以被诊断：<!-- raw HTML omitted -->class A : NSObject {  
 var property: String = &quot;Hello&quot; // 注意: Objective-C 方法 'setProperty:’  
 // 以前这里“属性”这里是通过setter声明  
 }  
 extension A {  
 func setProperty(str: String) { } // 错误：方法&quot;setProperty&quot;  
 // 重复声明了Objective-C方法  
 //'setProperty:'  
 }<!-- raw HTML omitted --></p>
</li>
</ul>
<p>同样地检查在Objective-C中重写：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>和协议的适配性一样：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Swift语言Bug修复</p>
<ul>
<li>
<p>动态转换符(“as!”, “as?“和“is”)现在可以用在Swift的协议类型上，只要该协议类型没有关联类型。</p>
</li>
<li>
<p>在Playground增加的一致性需求现在可以按照预期工作了，比如：<!-- raw HTML omitted -->struct Point {  
 var x, y: Double  
 }  
 extension Point : Printable {  
 var description: String {  
 return &quot;((x), (y))&quot;
 }  
 }  
 var p1 = Point(x: 1.5, y: 2.5)  
 println(p1) // prints &quot;(1.5, 2.5)”<!-- raw HTML omitted --></p>
</li>
<li>
<p>导入的没有文档化的NS_ENUM类型，比如UIViewAnimationCurve，现在可以通过init(rawValue:) 构造器从它的原始整型类型转换出来而不会重设为nil，为解决这个问题而用替代方法unsafeBitCast编写的代码现在可以使用原始值构造器编写了。比如：<!-- raw HTML omitted -->let animationCurve =  
nsafeBitCast(userInfo[UIKeyboardAnimationCurveUserInfoKey].integerValue,  
UIViewAnimationCurve.self)<!-- raw HTML omitted --></p>
</li>
</ul>
<p>现在可以写为：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<ul>
<li>
<p>在枚举类型中负浮点数可以用作原始值了。</p>
</li>
<li>
<p>指向Objective-C类，或者Swift中继承自Objective-C对象的无主引用，在该无主引用指向的对象释放后无主引用被重新赋值时不会再Crash。</p>
</li>
<li>
<p>含有观察访问器的变量或者属性如果它可以从初始值表达式中推断出类型就无需显式指定类型。</p>
</li>
<li>
<p>NSClassFromString函数搜索失败时其结果和nil的比较现在工作正常。</p>
</li>
<li>
<p>子类中的重写基类含有可选类型的方法时，如果涉及到可选类型的转换将不会导致Crash。<!-- raw HTML omitted -->class Base {  
 func foo(x: String) -&gt; String? { return x }  
 }  
 class Derived: Base {  
 override func foo(x: String?) -&gt; String { return x! }  
 }<!-- raw HTML omitted --></p>
</li>
</ul>
<p>关于Objective-C语言的增强</p>
<p>Objective-C API中可以表示参数，返回值，属性，变量等等的“nullability”属性。比如，下面是表达很多UITableView API的为空特性：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>这个nullability标示符影响了Objective-C API在Swift的可选类型值，nonnull标示符标示的类型将会以非可选的类型的导入，这个用来替代隐式解封可选类型如(e.g., UINib!）。而nullable标示符标示的类型则会以可选类型导入（如UITableViewCell?），所以下面的API在Swift中表现如下：</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>可空特性标示符也可以用在指针类型，包括C指针，block指针和C++成员指针，使用双下划线方式，比如：</p>
<!-- raw HTML omitted -->
<p>这里，它自身的回调函数是nullable的，但是它的回调函数的返回类型为nonnull，所以这个API在Swift以如下方式使用：</p>
<!-- raw HTML omitted -->
<p>总的来说，可空特性标示符有三种，可以用双下划线（用在任何指针类型），或者没有下划线的（用在Objective-C属性，方法结果类型或者方法参数类型）。</p>
<p><img src="http://img0.tuicool.com/MjeInmR.jpg" alt="" title="1423711358267173.jpg"></p>
<ul>
<li>
<p>特别是在Objective-C API中，很多指针倾向于nonnull，因此Objective-C提供了“audited”域（通过新的#pragma），它会认为未被标注的指针为nonnull，比如下面的例子等同于上面第一个例子，但是它用的是“audited”域来简化语句表达：<!-- raw HTML omitted -->#pragma clang assume_nonnull begin  
 // …  
 -(void)registerNib:(UINib *)nib forCellReuseIdentifier:(NSString  
<em>)identifier;  
 -(nullable UITableViewCell </em>)cellForRowAtIndexPath:(NSIndexPath)indexPath;  
 @property (nonatomic, readwrite, retain, nullable) UIView *backgroundView;  
 // …  
 #pragma clang assume_nonnull end<!-- raw HTML omitted --></p>
</li>
<li>
<p>为了保证代码的连续性，我们强烈建议你在所有的Objective-C头文件使用“audited”域来表述其api的可空性，同时避免null_unspecified情况，建议使用在将可空性引入到现有的头文件时采用该功能作为过渡工具。</p>
</li>
<li>
<p>Objective-C增加的nullability注解不会影响它的向后兼容性也不会影响代码的编译。比如nonnull在有些情况下依然可以以nil结束，诸如消息路由到一个为nil的接收器，但是，nullability注解只是提高Swift的编程体验，它会在Objective-C中产生一个新的警告，诸如朝一个nonnull的参数赋一个nil的话，这使得Objective-c API更加高效以及使用的正确。</p>
</li>
<li>
<p>Objective-C可以通过null_resettable来表达属性的空属性，该属性setter访问器允许将其设置为nil（设置该属性为默认值），但是它的getter访问器不会提供一个nil值（因为它提供了默认值），有一个这样的属性如UIView’s tintColor，如果没有tint颜色指定时它会提供一个默认的tint颜色值，如：<!-- raw HTML omitted -->@property (nonatomic, retain, null_resettable) UIColor *tintColor;<!-- raw HTML omitted --></p>
</li>
</ul>
<p>这样的API在Swift使用隐式强制解封的方法使用：</p>
<!-- raw HTML omitted -->
<p>C指针类型的参数或者Block指针类型可以使用noescape新属性标志，它用来标明这个指针参数不会离开这个函数或者方法而使用。这种情况下，可以安全的传递一个局部变量地址，noescape block指针在Swift中将会被映射为@noescape参数：</p>
<!-- raw HTML omitted -->
<p>将被影射到Swift为：</p>
<!-- raw HTML omitted -->
<ul>
<li>
<p>LLDB现在包含了一个printf()函数去计算C/C++/Objective-C表达式，这个将在arm64设备上提升表达式计算的体验，但是可能和用户在.lldbinit定义的表达式前缀冲突，如果你发现在表达式计算时出现错误，这可能就是root cause。</p>
</li>
<li>
<p>XCode 6.3将Apple LLVM编译器更新为6.1.0，这个新的编译器版本包含了对C++14标准的全部支持，包括大量的增强的警告诊断和新的优化，对于arm64架构的支持进行了有效的重构来支持ARM的实现， 这个将明显影响矩阵内联函数计算。</p>
</li>
<li>
<p>为arm64 vfma/vfms内联函数预定的参数被移除，虽然这个改变不会产生一个编译时错误，但是它会中断代码运行时操作，我们需要明确这个变化来减少风险。默认的，编译器现在会对使用这种内联属性提供警告并维持固有的行为，在尽可能的情况下，你需要接受这个变化并且定义USE_CORRECT_VFMA_INTRINSICS宏为1告诉编译器接收警告，当然你也可以可以USE_CORRECT_VFMA_INTRINSICS宏为0来屏蔽警告并保持固有行为。但是请不要保留这样的代码太久，因为我们计划在未来的版本中移除对这种旧行为的支持。</p>
</li>
<li>
<p>含有自动尺寸标志的视图以及包含在UITableView、UICollectionView或NSScrollView的视图在打开文档时不会再出现对齐错误。</p>
</li>
<li></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>入定法门</title>
			<link>https://blog.v5u.win/%E5%85%A5%E5%AE%9A%E6%B3%95%E9%97%A8/</link>
			<pubDate>Thu, 09 Apr 2015 01:41:15 +0000</pubDate>
			
			<guid>https://blog.v5u.win/%E5%85%A5%E5%AE%9A%E6%B3%95%E9%97%A8/</guid>
			<description>中国人讲究打坐入定，现在则流行瑜伽冥想，名 不同，而 实 不异。 以下为道家的入定法门： 心如止水无波，太虚无云，一寂然不动之境，然玄开一窍之中。存定</description>
			<content type="html"><![CDATA[<p>中国人讲究打坐入定，现在则流行瑜伽冥想，名 不同，而 实 不异。</p>
<p>以下为道家的入定法门：</p>
<pre><code>心如止水无波，太虚无云，一寂然不动之境，然玄开一窍之中。存定真息真气，使气不离息，息不离气，合为一处，内者不出，外者不入，上下往来于一窍之内。绵绵若存，存于先天祖气，浑融磅礴，温然如春，酣然如醉，美在其中，醉然见于面，盎于背，施于四肢，四肢不言而喻。见之无象；求之无形，无一刻不在于玄关，至引则药归于鼎炉，而火候可行矣。如是则元神妙用自然，运用真火，周流运转于玄关之内</code></pre>
]]></content>
		</item>
		
	</channel>
</rss>

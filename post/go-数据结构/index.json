{
    "title": "Go的数据结构",
    "date": "2019-02-17 00:00:00 +0000 UTC",
    "type": "post",
    "permalink" : "http://blog.v5u.win/post/go-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.json",
    "summary" : "[TOC]
注意：在Go语言中，我们对程序实体的访问权限控制只能通过它们的名字来实现。名字首字母为大写的程序实体可以被任何代码包中的代码访问到。而名字首字母为小写的程序实体则只能被同一个代码包中的代码所访问。
变量声明 var num int = 1 //变量 const channle = &quot;go&quot;	//常量  数据类型 整型，浮点型，
复数 complex64(3.7E+1+5.98E-2i),由两个浮点型组成分别表示实部和虚部
byte 是 uint8 的别名
rune 是 int32 的别名，用来表示Unicode。&rsquo;A&rsquo;: U+0041
字符串
map
slice
struct
字符串 ​ 从表象上来说是字符序列，但是在底层，一个字符串值却是由若干个字节来表现和存储的。一个字符串（也可以说字符序列）会被Go语言用Unicode编码规范中的UTF-8编码格式编码为字节数组。
​ 注意，我们在一个字符串值或者一个字符串类型的变量之上应用Go语言的内置函数len将会得到代表它的那个字节数组的长度。这可能与我们看到的表象是不同的。字符串的表示法有两种，即：原生表示法和解释型表示法。若用原生表示法，需用反引号“`”把字符序列包裹起来。若用解释型表示法，则需用双引号“&rdquo;”包裹字符序列。
​ 二者的区别是，前者表示的值是所见即所得的（除了回车符）。在那对反引号之间的内容就是该字符串值本身。而后者所表示的值中的转义符会起作用并在程序编译期间被转义。所以，如此表示的字符串值的实际值可能会与我们看到的表象不相同。
​ 最后要注意，字符串值是不可变的。也就是说，我们一旦创建了一个此类型的值，就不可能再对它本身做任何修改。
数组 声明：type MyNumbers [3]int
表示数组长度为 3 存储元素类型为 int 的容器，MyNumbers 为 [3]int 的别名类型
声明并赋值：
// 两种声明方式 var numbers = [3]int{1, 2, 3} var numbers = [...]int{1, 2, 3} numbers[1] = 4  最后，要注意，如果我们只声明一个数组类型的变量而不为它赋值，那么该变量的值将会是指定长度的、其中各元素均为元素类型的零值（或称默认值）的数组值。例如，若有这样一个变量："
}
{
    "title": "iOS8.3发布了Swift 1.2带来哪些新变化",
    "date": "2015-04-14 14:59:50 +0000 UTC",
    "type": "post",
    "permalink" : "http://blog.v5u.win/post/ios-ios8.3-swift-changed/index.json",
    "summary" : "原文&nbsp;&nbsp;http://www.cnblogs.com/yuyongjian/p/4371400.html
苹果前几日在面向开发者推送iOS 8.3 Beta的同时，还发布了版本号为6D520o的Xcode 6.3 Beta，其中便包含了iOS 8.3 Beta和OS X v10.10 SDK，并进一步提升了Swift与Objective-C代码的交互性，而Swift业已更新至1.2版本。@未来眼之老码团队第一时间翻译了完整的Release Note。共计50多处改动，同时修改了Objective-c的语法，足见苹果对Swift语言的重视。
从&nbsp;Xcode 6.3 Beta Release Notes&nbsp;看出，Xcode 6.3 Beta包含了很多颇为值得开发者期待的改变，共计50多处改动，同时修改了Objective-C的语法，足见苹果对Swift语言的重视。而其代码迁移工具可以帮助开发者将其代码从Swift 1.1（Xcode 6.1）升级至Swift 1.2（Xcode 6.3），具体执行编辑菜单（Edit）-&gt;转换（Convert）-至（To）Swift1.2即可。 具体更新如下：
Swift语言的增强
 Swift现在支持目标增量编译，例如当一个文件改变时不会重新编译Target中的每一个文件。这个基于固有依赖分析。所以你依然会看到有很多文件在必要情况下被重编。如果你发现需要重编但没有重编的情况，请报一个Bug出来。清理Target后再编，会按照往常的流程进行。
 增加了一个新的Set数据类型，它提供了元素唯一化，且有完整语义的通用数据类型集合。它和NSSet类型桥接，提供和Array和Dictionary相类似的功能。
 if let语句现在被扩展为可以支持多条条件判断：if&nbsp;let&nbsp;a&nbsp;=&nbsp;foo(),&nbsp;b&nbsp;=&nbsp;bar()&nbsp;where&nbsp;a&nbsp;&lt;&nbsp;b,&nbsp;&nbsp; let&nbsp;c&nbsp;=&nbsp;baz()&nbsp;{&nbsp;&nbsp; &nbsp;}
  它允许你测试多种选择，并且包含一个bool判断。当然这种情况不包含嵌套判断。
let常量现在生成时不需要立即初始化，新的规则是let常量必须在被首次使用前初始化即可（和var一样）。或者说它只能被初始化，也就是说在初始化后它不能再被改变或者重新赋值，可用的模式如下： let&nbsp;x:&nbsp;SomeThing&nbsp;&nbsp; &nbsp;if&nbsp;condition&nbsp;{&nbsp;&nbsp; &nbsp;x&nbsp;=&nbsp;foo()&nbsp;&nbsp; &nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp; &nbsp;x&nbsp;=&nbsp;bar()&nbsp;&nbsp; &nbsp;}&nbsp;&nbsp; &nbsp;use(x)
这个正常的来说需要var变量用法，尽管这里没有任何修改的操作。
 “Static”静态方法和属性现在允许在class中使用(作为“class final”的别名)。你现在可以在类中声明一个静态存储属性，它享有全局存储空间和首次使用再初始化的惰性构造功能。协议Protocal现在会声明一个static的类型要求而不是声明一个class的要求。
 对于表达式闭包的类型引用有了几点改进：
   含有单返回语句的闭包现在类型检查时以单表达式闭包处理。
 匿名的且含有非空返回类型的单表达式现在可以用在Void上下文中。
 多表达式的闭包类型的情况可能无法被类型推断出来，这归功于缺乏返回类型的情况能被正确的推断出来。
   Swift中的枚举类型现在可以通过@objc关键字导出到Objective-C中。@objc的枚举类型必须定义一个整型的原始类型，并且该枚举不能泛型化或者不能使用关联值。由于Objective-C中的枚举类型没有命名空间，所以导出到Objective-C中的枚举类型以枚举名字和case项目名字的组合的方式使用。 比如在Swift中的声明：@objc&nbsp;&nbsp; &nbsp;enum&nbsp;Bear:&nbsp;Int&nbsp;{&nbsp;&nbsp; &nbsp;case&nbsp;Black,&nbsp;Grizzly,&nbsp;Polar&nbsp;&nbsp; &nbsp;}  导出到Objective-C： typedef&nbsp;NS_ENUM(NSInteger,&nbsp;Bear)&nbsp;{&nbsp;&nbsp; BearBlack,&nbsp;BearGrizzly,&nbsp;BearPolar&nbsp;&nbsp; };"
}
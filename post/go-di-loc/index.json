{
    "title": "Go DI LoC研究",
    "date": "2019-05-24 00:00:00 +0000 UTC",
    "type": "post",
    "permalink" : "http://blog.v5u.win/post/go-di-loc/index.json",
    "summary" : "依赖注入，控制反转
目的：实现模块与项目的解耦
实现流程
首先模块有指针，其次DI拿到指针，再次DI将指针赋给调用者
共调研了三个框架：iris内置的di&amp;mvc，uber-dig，google/wire
最终决定使用 wire
google DI 框架 wire 它通过使用代码生成构建容器来避免运行时反射。
用法：
// file main.go package main import &quot;bytes&quot; type Logger struct{} func (logger *Logger) Log(message string) { println(message) } type HttpClient struct { logger *Logger } func (client *HttpClient) Get(url string) string { client.logger.Log(&quot;Getting &quot; + url) return &quot;my response from &quot; + url } func NewHttpClient(logger *Logger) *HttpClient { return &amp;HttpClient{logger} } type ConcatService struct { logger *Logger client *HttpClient } func NewConcatService(logger *Logger, client *HttpClient) *ConcatService { return &amp;ConcatService{logger, client} } func (service *ConcatService) GetAll(urls ."
}
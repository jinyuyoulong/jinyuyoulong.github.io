{
    "title": "objective-c代码规范",
    "date": "2016-08-25 16:45:01 +0000 UTC",
    "type": "post",
    "permalink" : "http://blog.v5u.win/post/ios-oc-code-style/index.json",
    "summary" : "Objective-C代码规范 前言 Apple公司提供了一些代码规范文档。如果有内容未在此文档中提及，请参考如下内容：
 The Objective-C Programming Language Cocoa Fundamentals Guide Coding Guidelines for Cocoa iOS App Programming Guide  适用范围 所有适用Objective-C语言开发的项目。 在这里我们希望以类似断言的方式,大家逐条对比写出的代码和下列规范是否吻合,以达到预期的代码的可读性。
代码规范 命名 基于iOS objective-c项目对于命名，目前分为变量名和函数名两类
变量名 在这里我们把描述一个事物或者抽象事物的描述符统称为变量名。变量名目前分为几类: 类名，协议名，组合名，oc类内部变量，全局变量，枚举类型，block类型，结构体类型。 以下分别例举了几种类型的例子。
类名  使用类前缀 需要包含一个名词用来表示这个类是什么,比如 NSString, NSDate, NSScanner等。
@interface MKUserTrackingBarButtonItem : UIBarButtonItem `
协议名 使用类前缀
 在这里我们需要考虑一个重要的问题,不要滥用关键字,。面列了两个协议，&rdquo;delegate&rdquo;通常用于实现委托功能,而第二个用于实现的重载。
 大部分协议实际是包括一组功能相关的函数，并且和具体用于实现的类没有特别紧密的联系。这时候命名要考虑和具体实现类区分开，比如起名为NSLocking而不是NSLock。
 还有一些协议实际上囊括了很多不相关的功能（或者说像是很多个子协议的组合），这时候就可以和具体的实现类保持一致的名字，比如NSObject。
`@protocol MKMapViewDelegate &lt;NSObject&gt; @protocol MKAnnotation &lt;NSObject&gt; ` 组合名 需要类前缀
`@interface NSString (NSStringExtensionMethods) ` oc类内部变量 无需类前缀
 尽可能使用property定义变量
 ."
}
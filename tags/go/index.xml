<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 为吾优</title>
    <link>https://blog.v5u.win/tags/go/</link>
    <description>Recent content in Go on 为吾优</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 12 Sep 2019 02:58:15 +0000</lastBuildDate>
    
	<atom:link href="https://blog.v5u.win/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Crontab v3</title>
      <link>https://blog.v5u.win/go-crontab-v3/</link>
      <pubDate>Thu, 12 Sep 2019 02:58:15 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go-crontab-v3/</guid>
      <description>[TOC] 关于cron更新 Cron V3已经发布！ 要下载特定的标记版本，请运行: go get github.com/robfig/cron/v3@v3.0.0 将其导入您的程序中: import &amp;quot;github.com/robfig/cron/v3&amp;quot; 由于Go Modules的使用，它需要Go 1.1</description>
    </item>
    
    <item>
      <title>Goland 使用</title>
      <link>https://blog.v5u.win/goland-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 01 Sep 2019 11:45:59 +0000</pubDate>
      
      <guid>https://blog.v5u.win/goland-%E4%BD%BF%E7%94%A8/</guid>
      <description>做 Go 开发，一般使用的IDE是 Goland 安装略，自己解决。下面说安装后的事情。 配置文件，配置开发环境 goland 会自动读取 GOROOT 和 GOPATH，所以不用自己填写。我</description>
    </item>
    
    <item>
      <title>Go CGO</title>
      <link>https://blog.v5u.win/go-cgo/</link>
      <pubDate>Tue, 20 Aug 2019 10:40:11 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go-cgo/</guid>
      <description>[TOC] golang 中调用 c/c++ 代码有三种方式 直接嵌套在go文件中使用，最简单直观的 导入动态库 .so 或 dll 的形式，最安全但是很不爽也比较慢的 直接引用 c/c++ 文件的形式，层次</description>
    </item>
    
    <item>
      <title>Go2</title>
      <link>https://blog.v5u.win/go2/</link>
      <pubDate>Tue, 13 Aug 2019 05:59:16 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go2/</guid>
      <description>[TOC] 中文版 English version 介绍 社区做了哪些努力 [这是我上周在Gophercon 2019上发表的博客文章。我们将在演讲结束后添加视频链接。] 我们都正在一起走</description>
    </item>
    
    <item>
      <title>Go Crontab</title>
      <link>https://blog.v5u.win/go-crontab/</link>
      <pubDate>Fri, 19 Jul 2019 10:18:33 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go-crontab/</guid>
      <description>[TOC] 计划任务 from Godoc 包cron实现了cron规范解析器和作业运行器。 安装 要下载特定的标记版本，请运行: go get github.com/robfig/cron/v3@v3.0.0 将其导入您的程序中: import “github.</description>
    </item>
    
    <item>
      <title>Go Toml</title>
      <link>https://blog.v5u.win/go-toml/</link>
      <pubDate>Tue, 16 Jul 2019 05:47:02 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go-toml/</guid>
      <description>[TOC] 常用的配置文件有：ini, ymal, json, toml 说一下为什么要选择 toml。toml 格式是最新公布的配置文件格式，由GitHub创始人 Tom Preston-Werner 发明。TOML 的</description>
    </item>
    
    <item>
      <title>Go语言 imagick 使用总结</title>
      <link>https://blog.v5u.win/go%E8%AF%AD%E8%A8%80-imagick-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 16 Jul 2019 05:45:35 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go%E8%AF%AD%E8%A8%80-imagick-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid>
      <description>Go语言imagick 使用总结 imagick 是一个开源的 c语言图片处理库，所以需要本地安装，并且配置 CGO Mac 安装imagic brew install imagemagick 有的可能需要安装 brew install pkg-config CG</description>
    </item>
    
    <item>
      <title>Go Iris Redis</title>
      <link>https://blog.v5u.win/go-iris-redis/</link>
      <pubDate>Tue, 16 Jul 2019 05:43:58 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go-iris-redis/</guid>
      <description>[TOC] iris 中使用 Redis iris 内置对 Redis 的支持，但是她和 session 结合的比较紧密，比如每一个方法传参都大部分都有 sid，在当前文件 database.go 找了半天没找到在哪里定义了 sid，</description>
    </item>
    
    <item>
      <title>Go-Authorization</title>
      <link>https://blog.v5u.win/go-authorization/</link>
      <pubDate>Tue, 16 Jul 2019 05:40:34 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go-authorization/</guid>
      <description>接口认证 一般接口开发中有以下常用的几种安全机制： 用户认证 数字签名 接口加密 用户认证 一般的接口测试工具都会提供一个User Auth/Author</description>
    </item>
    
    <item>
      <title>Go DI LoC 依赖注入研究</title>
      <link>https://blog.v5u.win/go-di-loc-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%A0%94%E7%A9%B6/</link>
      <pubDate>Wed, 29 May 2019 03:18:11 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go-di-loc-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%A0%94%E7%A9%B6/</guid>
      <description>依赖注入，控制反转 设计模式 目的：实现模块与项目的解耦 实现流程 首先模块有指针，其次DI拿到指针，再次DI将指针赋给调用者 共调研了三个框架：ir</description>
    </item>
    
    <item>
      <title>Go 单例</title>
      <link>https://blog.v5u.win/go-%E5%8D%95%E4%BE%8B/</link>
      <pubDate>Mon, 27 May 2019 09:25:43 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go-%E5%8D%95%E4%BE%8B/</guid>
      <description>单例的作用不用我多说，大家都知道，那么在go中如何构造单例呢，下面是我的总结。 一、 sync.Once用法 在Go中有一个简洁的方法就是使用sy</description>
    </item>
    
    <item>
      <title>Go模板框架自定义包的引用</title>
      <link>https://blog.v5u.win/go%E6%A8%A1%E6%9D%BF%E6%A1%86%E6%9E%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%85%E7%9A%84%E5%BC%95%E7%94%A8/</link>
      <pubDate>Tue, 14 May 2019 09:09:50 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go%E6%A8%A1%E6%9D%BF%E6%A1%86%E6%9E%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%85%E7%9A%84%E5%BC%95%E7%94%A8/</guid>
      <description>源起：最近在调研Go，需要使用Go搭建一套通用式的模板框架，用以当新开其他项目的时候直接基于模板框架开发。 固定化引入自定义包的路径，解决——</description>
    </item>
    
    <item>
      <title>nginx 反向代理 go 服务</title>
      <link>https://blog.v5u.win/nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-go-%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Fri, 10 May 2019 08:04:08 +0000</pubDate>
      
      <guid>https://blog.v5u.win/nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-go-%E6%9C%8D%E5%8A%A1/</guid>
      <description>当我们启动一个go 程序的时候，通常监听的是本地端口如 IP:port 。但是实际的线上环境，解析路径是：通过 DNS 解析 ——&amp;gt; nginx vhost ——&amp;gt; IP:port 这个。单纯的</description>
    </item>
    
    <item>
      <title>有经验开发者，快速入门 Go 语言</title>
      <link>https://blog.v5u.win/%E6%9C%89%E7%BB%8F%E9%AA%8C%E5%BC%80%E5%8F%91%E8%80%85%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-go-%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Wed, 08 May 2019 07:39:21 +0000</pubDate>
      
      <guid>https://blog.v5u.win/%E6%9C%89%E7%BB%8F%E9%AA%8C%E5%BC%80%E5%8F%91%E8%80%85%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-go-%E8%AF%AD%E8%A8%80/</guid>
      <description>有经验开发者，快速入门 Go 语言 发明Go语言是出于更好地完成工作的需要。Go不是计算机科学的最新发展潮流，但它却提供了解决现实问题的最新最快的方</description>
    </item>
    
    <item>
      <title>Go gRPC研究总结</title>
      <link>https://blog.v5u.win/go-grpc%E7%A0%94%E7%A9%B6%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 15 Apr 2019 06:47:55 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go-grpc%E7%A0%94%E7%A9%B6%E6%80%BB%E7%BB%93/</guid>
      <description>什么是RPC RPC（Remote Procedure Call）—远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RP</description>
    </item>
    
    <item>
      <title>Go Web框架选型</title>
      <link>https://blog.v5u.win/go-web%E6%A1%86%E6%9E%B6%E9%80%89%E5%9E%8B/</link>
      <pubDate>Mon, 08 Apr 2019 03:34:20 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go-web%E6%A1%86%E6%9E%B6%E9%80%89%E5%9E%8B/</guid>
      <description>[TOC] Beego 在某些方面，Beego会让人联想到Python中包罗万象的Django Web框架。它具备各种Web应用程序的通用功能，总共有八个模块，你</description>
    </item>
    
    <item>
      <title>为什么需要go语言</title>
      <link>https://blog.v5u.win/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81go%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Thu, 28 Mar 2019 08:40:14 +0000</pubDate>
      
      <guid>https://blog.v5u.win/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81go%E8%AF%AD%E8%A8%80/</guid>
      <description>为什么需要go语言 计算机硬件技术更新频繁，多核CPU不能充分发挥性能 目前的语言不够简洁高效（现有语言：1.风格不统一 2.计算能力不够 3.处理</description>
    </item>
    
    <item>
      <title>go modules 包管理</title>
      <link>https://blog.v5u.win/go-modules-%E5%8C%85%E7%AE%A1%E7%90%86/</link>
      <pubDate>Fri, 22 Mar 2019 08:35:56 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go-modules-%E5%8C%85%E7%AE%A1%E7%90%86/</guid>
      <description>go modules [TOC] 环境配置 1.13 以后 go env -w GOPROXY=https://goproxy.cn,direct 1.13以前 1. 正确配置 GOROOT&amp;lt;/p&amp;gt; 2. `export GOPROXY=&amp;quot;https://athens.azurefd.net&amp;quot; # 微软提供的公共代理，解决golang/x/tools 下载失败` 也可以以此技术建立</description>
    </item>
    
    <item>
      <title>Golang代码规范</title>
      <link>https://blog.v5u.win/golang%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</link>
      <pubDate>Thu, 21 Mar 2019 07:48:02 +0000</pubDate>
      
      <guid>https://blog.v5u.win/golang%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</guid>
      <description>Golang代码规范 参考 https://golang.org/doc/effective_go.html 本文参考blog [TOC] 项目目录结构规范 项目的目录结构尽量做到简明、层次清楚。 文件名命名规范 用小写，尽量见名思义，看见文</description>
    </item>
    
    <item>
      <title>Go HTML template</title>
      <link>https://blog.v5u.win/go-html-template/</link>
      <pubDate>Tue, 05 Mar 2019 09:47:46 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go-html-template/</guid>
      <description>应用</description>
    </item>
    
    <item>
      <title>Go JSON</title>
      <link>https://blog.v5u.win/go-json/</link>
      <pubDate>Tue, 05 Mar 2019 09:45:57 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go-json/</guid>
      <description>标准库 Model 在编码时，默认使用Go语言结构体的成员名字作为JSON的对象（通过reflect反射技术，我们将在12.6节讨论）。只有导出的结构体</description>
    </item>
    
    <item>
      <title>Go 语言简介</title>
      <link>https://blog.v5u.win/go-%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 21 Feb 2019 09:51:30 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go-%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/</guid>
      <description>Go 的底层语言是什么 借用大神的话来说 编译器就是输入源代码输出其他语言源代码的程序 所以这个程序用什么语言实现无所谓 然而，一开始没有go，所以用c</description>
    </item>
    
    <item>
      <title>Go-源码组织方式</title>
      <link>https://blog.v5u.win/go-%E6%BA%90%E7%A0%81%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Tue, 19 Feb 2019 05:13:48 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go-%E6%BA%90%E7%A0%81%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F/</guid>
      <description>Go源码文件以 .go 为后缀。 // path 的相对路径 target 是 go 的 build or run 目录 例： var cpath string = “./config/config.toml” 配置文件使用 github.com/BurntSushi/toml 所有的stru</description>
    </item>
    
    <item>
      <title>vscode安装golang.org的golint</title>
      <link>https://blog.v5u.win/vscode%E5%AE%89%E8%A3%85golang-org%E7%9A%84golint/</link>
      <pubDate>Fri, 15 Feb 2019 07:44:23 +0000</pubDate>
      
      <guid>https://blog.v5u.win/vscode%E5%AE%89%E8%A3%85golang-org%E7%9A%84golint/</guid>
      <description>vscode 安装了 go 插件后，一些 Extensions 无法通过 vscode 自动安装，此时可以手动从控制台安装。下面是一些基础标准库 其中 golint guru gorename 需要手动编译。 因为GitHub中的gol</description>
    </item>
    
  </channel>
</rss>
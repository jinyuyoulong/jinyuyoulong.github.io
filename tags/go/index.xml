<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 为吾优</title>
    <link>https://blog.v5u.win/tags/go/</link>
    <description>Recent content in Go on 为吾优</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 01 Sep 2019 11:45:59 +0000</lastBuildDate>
    
	<atom:link href="https://blog.v5u.win/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Goland 使用</title>
      <link>https://blog.v5u.win/goland-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 01 Sep 2019 11:45:59 +0000</pubDate>
      
      <guid>https://blog.v5u.win/goland-%E4%BD%BF%E7%94%A8/</guid>
      <description>做 Go 开发，一般使用的IDE是 Goland 安装略，自己解决。下面说安装后的事情。 配置文件，配置开发环境 goland 会自动读取 GOROOT 和 GOPATH，所以不用自己填写。我</description>
    </item>
    
    <item>
      <title>Go CGO</title>
      <link>https://blog.v5u.win/posts/go-cgo/</link>
      <pubDate>Tue, 20 Aug 2019 18:06:35 +0800</pubDate>
      
      <guid>https://blog.v5u.win/posts/go-cgo/</guid>
      <description>[TOC] golang 中调用 c/c++ 代码有三种方式 直接嵌套在go文件中使用，最简单直观的 导入动态库 .so 或 dll 的形式，最安全但是很不爽也比较慢的 直接引用 c/c++ 文件的形式，层次</description>
    </item>
    
    <item>
      <title>Go DI LoC 依赖注入研究</title>
      <link>https://blog.v5u.win/go-di-loc-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%A0%94%E7%A9%B6/</link>
      <pubDate>Wed, 29 May 2019 03:18:11 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go-di-loc-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%A0%94%E7%A9%B6/</guid>
      <description>依赖注入，控制反转 设计模式 目的：实现模块与项目的解耦 实现流程 首先模块有指针，其次DI拿到指针，再次DI将指针赋给调用者 共调研了三个框架：ir</description>
    </item>
    
    <item>
      <title>Go-Authorization</title>
      <link>https://blog.v5u.win/posts/go-authorization/</link>
      <pubDate>Mon, 15 Apr 2019 14:52:48 +0000</pubDate>
      
      <guid>https://blog.v5u.win/posts/go-authorization/</guid>
      <description>接口认证 一般接口开发中有以下常用的几种安全机制： 用户认证 数字签名 接口加密 用户认证 一般的接口测试工具都会提供一个User Auth/Author</description>
    </item>
    
    <item>
      <title>Go Web框架选型</title>
      <link>https://blog.v5u.win/go-web%E6%A1%86%E6%9E%B6%E9%80%89%E5%9E%8B/</link>
      <pubDate>Mon, 08 Apr 2019 03:34:20 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go-web%E6%A1%86%E6%9E%B6%E9%80%89%E5%9E%8B/</guid>
      <description>[TOC] Beego 在某些方面，Beego会让人联想到Python中包罗万象的Django Web框架。它具备各种Web应用程序的通用功能，总共有八个模块，你</description>
    </item>
    
    <item>
      <title>为什么需要go语言</title>
      <link>https://blog.v5u.win/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81go%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Thu, 28 Mar 2019 08:40:14 +0000</pubDate>
      
      <guid>https://blog.v5u.win/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81go%E8%AF%AD%E8%A8%80/</guid>
      <description>为什么需要go语言 计算机硬件技术更新频繁，多核CPU不能充分发挥性能 目前的语言不够简洁高效（现有语言：1.风格不统一 2.计算能力不够 3.处理</description>
    </item>
    
    <item>
      <title>Go-iris-template</title>
      <link>https://blog.v5u.win/posts/go-iris-template/</link>
      <pubDate>Fri, 08 Mar 2019 17:25:10 +0000</pubDate>
      
      <guid>https://blog.v5u.win/posts/go-iris-template/</guid>
      <description>Iris 支持五个开箱即用的模板引擎，所有这五个模板引擎都具有通用API的共同特征，如布局，模板功能，特定于派对的布局，部分渲染等。 标准的html,</description>
    </item>
    
    <item>
      <title>Go-源码组织方式</title>
      <link>https://blog.v5u.win/go-%E6%BA%90%E7%A0%81%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Tue, 19 Feb 2019 05:13:48 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go-%E6%BA%90%E7%A0%81%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F/</guid>
      <description>Go源码文件以 .go 为后缀。 // path 的相对路径 target 是 go 的 build or run 目录 例： var cpath string = “./config/config.toml” 配置文件使用 github.com/BurntSushi/toml 所有的stru</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@noescape on 为吾优</title>
    <link>https://blog.v5u.win/tags/noescape/</link>
    <description>Recent content in @noescape on 为吾优</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 13 Dec 2016 15:45:27 +0000</lastBuildDate>
    
	<atom:link href="https://blog.v5u.win/tags/noescape/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>swift 关键字篇</title>
      <link>https://blog.v5u.win/post/swift-%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Tue, 13 Dec 2016 15:45:27 +0000</pubDate>
      
      <guid>https://blog.v5u.win/post/swift-%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>@noescape：no escape(没有逃脱) 用来修饰闭包，含义为非逃逸闭包。 当闭包作为参数传递进函数时，如果这个闭包只在函数中被使用，则开发者可以将这个闭包声明成非逃逸的，即告诉系统当此函数结束后，这个闭包的生命周期也将结束，这样做的好处是可以提高代码性能，将闭包声明成非逃逸的类型使用@noescape关键字。 (1) 默认，swift 3.0 弃用，函数结束后，这个闭包的生命周期也将结束。 (2) 在其内部如果需要使用self这个关键字，self可以被省略。
@escaping 逃逸闭包 逃逸的闭包常用于异步的操作，这类函数会在异步操作开始之后立刻返回，但是闭包直到异步操作结束后才会被调用。例如这个闭包是异步处理一个网络请求，只有当请求结束后，闭包的生命周期才结束。当闭包作为函数的参数传入时，很有可能这个闭包在函数返回之后才会被执行。
@autoclosure 自动闭包 (1)默认非逃逸 (2)闭包也可以被自动的生成，这种闭包被称为自动闭包，自动闭包自动将表达式封装成闭包。 (3)自动闭包不接收任何参数，被调用时会返回被包装在其中的表达式的值。 (4)当闭包作为函数参数时，可以将参数标记 @autoclosure 来接收自动闭包。 (5)自动闭包能够延迟求值,因为代码段不会被执行直到你调用这个闭包。 (6)自动闭包默认是非逃逸的，如果要使用逃逸的闭包，需要手动声明: @autoclosure @escaping 旧版本：@autoclosure(escaping)
//(a)自动闭包演示 var students = [&amp;ldquo;A&amp;rdquo;,&amp;ldquo;B&amp;rdquo;,&amp;ldquo;C&amp;rdquo;] let studentsProvider = { students.remove(at: 0) } //自动闭包自动将表达式封装成闭包 studentsProvider()//(b)自动闭包演示 var list = [1,2,3,4,5,6]
//创建一个显式闭包 let closures = { list.append(7) }
print(list)//将打印[1,2,3,4,5,6]
closures() print(list)//引用传递，将打印[1,2,3,4,5,6,7]
func func1(closure: ()-&amp;gt;Void) -&amp;gt; Void { //执行显式的闭包 closures() }
func func2(auto: @autoclosure ()-&amp;gt;Void) -&amp;gt; Void { //执行自动闭包 auto() }</description>
    </item>
    
  </channel>
</rss>
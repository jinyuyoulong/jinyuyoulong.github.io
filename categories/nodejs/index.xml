<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nodejs on 为吾优</title>
    <link>https://blog.v5u.win/categories/nodejs/</link>
    <description>Recent content in Nodejs on 为吾优</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 23 May 2018 15:44:43 +0000</lastBuildDate>
    
	<atom:link href="https://blog.v5u.win/categories/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>gitbook如何生成epub</title>
      <link>https://blog.v5u.win/736.html</link>
      <pubDate>Wed, 23 May 2018 15:44:43 +0000</pubDate>
      
      <guid>https://blog.v5u.win/736.html</guid>
<<<<<<< HEAD
      <description>全局安装gitbook ：npm install -g gitbook 下载calibre安装应用 将calibre中的执行文件ebook-convert链接到shall环境：$ sudo ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/local/bin 验证ebook-convert可用，terminal下输入ebook-convert 后回车 如果可用，导出epub文件 gitbook epub ./ ./mbook.epub  node: gitbook 项目需要先 npm install 配置好依赖库,再生成 epub 书籍
Gitbook使用方法 http://www.chengweiyang.cn/gitbook/basic-usage/README.html</description>
=======
      <description>全局安装gitbook ：npm install -g gitbook 下载calibre安装应用 将calibre中的执行文件ebook-convert链接到shall环境：$ sudo ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/local/bin 验证ebook-convert可用，terminal下输入ebook-convert 后回车 如果可用，导出epub文件 gitbook epub ./ ./mbook.epub  node: gitbook项目需要先npm install,在生成epub</description>
>>>>>>> master
    </item>
    
    <item>
      <title>mac下nvm 使用记录</title>
      <link>https://blog.v5u.win/post/mac-nvm/</link>
      <pubDate>Tue, 02 May 2017 10:29:55 +0000</pubDate>
      
      <guid>https://blog.v5u.win/post/mac-nvm/</guid>
      <description>mac下nvm 使用记录 断开连接 brew unlink nvm 安装 brew install nvm 环境变量 add to ~/.bash_profile export NVM_DIR=&amp;ldquo;$HOME/.nvm&amp;rdquo; . &amp;ldquo;$(brew &amp;ndash;prefix nvm)/nvm.sh&amp;rdquo; 配置国内镜像源 export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/dist 配置npm镜像源 创建 ~/.npmrc 写入registry=https://registry.npm.taobao.org 更新环境变量 . ~/.bash_profile
查看可安装的nodejs版本 nvm ls-remote 安装node nvm install
删除版本 nvm uninstall v6 查看 nvm ls 切换nvm use //只针对当前shall 设置默认 nvm alias default v7
&amp;nbsp;</description>
    </item>
    
    <item>
      <title>nvm管理不同的node版本</title>
      <link>https://blog.v5u.win/post/nodejs-nvm/</link>
      <pubDate>Fri, 24 Feb 2017 09:59:52 +0000</pubDate>
      
      <guid>https://blog.v5u.win/post/nodejs-nvm/</guid>
      <description>前任栽树后人乘凉 ：http://www.cnblogs.com/kongxianghai/p/5660101.html
安装多版本node  安装nvm 通过下面的命令可进行一步到位的安装，下面两种方式可二选一。 curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.2/install.sh | bash 或者: wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.2/install.sh | bash  安装  在命令行中运行命令，安装当前最新的稳定版。 nvm install stable 运行命令，指明版本，安装早期的版本0.12.4。 nvm install 0.12.4 安装后，当前使用的node版本默认为最后一次安装的版本，在命令行中运行命令可查看当前版本。 nvm current 切换node版本 nvm use 6 显示所有安装的版本 nvm ls 设置默认使用的版本 nvm alias default &amp;amp;lt;version&amp;amp;gt;  卸载  删除引用 nvm deactivate 卸载 nvm uninstall 7  安装全局组件
非nvm管理的情况下，全局组件是安装到/usr/local/lib/node_modules下，然后通过软连接的方式把包中bin目录下的可执行文件链接到/usr/local/bin。不管用什么版本都装到这些目录下，多版本就没法玩了。
在nvm管理下，以沙箱的方式，全局组件会装到.nvm目录的当前版本node下，也就是装在nvm这个沙箱里，跟在指定版本的node下，当前有什么版本的node，就有对应的全局组件。这是nvm强大的地方，在多运行环境的管理和切换极为好用。
使用.nvmrc文件运行
在服务器上很多时候会运行多个应用系统，每个应用系统使用的node版本是不一样的，老系统用0.12.x甚至0.10.x，新系统用了新特新所以用最新的node版本，都很实际很正常。
为了让不同的应用系统使用各自所需的node版本运行，我们只需在各应用系统内的根目录里生成一个.nvmrc文件，在其内写一个版本号，利用nvm run &amp;lt;系统启动文件&amp;gt;的方式运行系统，即可完成要求。详情请看文章开头链接。</description>
    </item>
    
    <item>
      <title>mac下npm的使用方式</title>
      <link>https://blog.v5u.win/post/mac-npm/</link>
      <pubDate>Thu, 08 Sep 2016 14:30:11 +0000</pubDate>
      
      <guid>https://blog.v5u.win/post/mac-npm/</guid>
      <description>npm init #创建package.json文件 npm install xxx -g #全局安装 -g npm install xxx #没有package.json文件的时候使用，当前文件下安装 npm install xxx --save #添加到package.json中的dependencies配置中 npm install xxx --save-dev #添加到package.json中devDependencies配置中 npm uninstall xxx 删除包 npm ls #查看当前目录中已安装的包 -g 全局 npm update xxx #单包更新 npm search xxx #搜索 npm ls xxx 查看xxx包的版本信息 npm ls --depth 0 #查看安装包列表 npm prune -x #删除多余的包 npm ls -g --depth xxx #查看全局npm版本  </description>
    </item>
    
    <item>
      <title>mac下MongoDB</title>
      <link>https://blog.v5u.win/post/mac-bmongodb/</link>
      <pubDate>Mon, 18 Jul 2016 18:16:11 +0000</pubDate>
      
      <guid>https://blog.v5u.win/post/mac-bmongodb/</guid>
      <description>1. 安装 1.1 解压缩mongo文件，将解压缩后的文件移动到自己喜欢的目录下 1.2 由于没有配置环境变量，先测试使用。 终端进入mongodb的安装路径，在bin路径下，执行./mongod启动数据库
有可能报错 exception in initAndListen: 29 Data directory /data/db not found 这是因为/data/db 目录不存在，若启动时，不指定任何参数， MongoDB 会默认使用 /data/db 目录存储数据， 我们可以使用 &amp;ndash;dbpath 来指定其它的路径，比如我使用的是下面这样的命令启动的： ./mongod --dbpath ../data/db 新开一个终端，在bin路径下执行./mongo启动mongodb管理
2. 使用 show dbs 显示 数据库s use dbName 切换数据库 show collections 数据库下的显示表 db.表明.find() 显示表中数据</description>
    </item>
    
    <item>
      <title>NodeJS 文件系统</title>
      <link>https://blog.v5u.win/post/nodejs-filesystem/</link>
      <pubDate>Thu, 30 Jun 2016 11:39:32 +0000</pubDate>
      
      <guid>https://blog.v5u.win/post/nodejs-filesystem/</guid>
      <description>文件加载顺序：
st=&amp;amp;gt;start: 开始require isfc=&amp;amp;gt;condition: 是否在文件缓冲区 isnf=&amp;amp;gt;condition: 是否是原生模块 ff=&amp;amp;gt;operation: 查找文件模块 lfm=&amp;amp;gt;operation: 根据扩展名载入模块 cfm=&amp;amp;gt;operation: 缓存文件模块 isnc=&amp;amp;gt;condition: 是否在原生模块缓存区中 lnf=&amp;amp;gt;operation: 加载原生模块 cnf=&amp;amp;gt;operation: 缓存原生模块 e=&amp;amp;gt;end: 返回exports st-&amp;amp;gt;isfc isfc(yes)-&amp;amp;gt;e isfc(no)-&amp;amp;gt;isnf(no)-&amp;amp;gt;ff-&amp;amp;gt;lfm-&amp;amp;gt;cfm-&amp;amp;gt;e isnf(yes)-&amp;amp;gt;isnc(yes)-&amp;amp;gt;lnf-&amp;amp;gt;cnf-&amp;amp;gt;e isnc(no)-&amp;amp;gt;e  require方法接受以下几种参数的传递： http、fs、path等，原生模块。 ./mod或../mod，相对路径的文件模块。 /pathtomodule/mod，绝对路径的文件模块。 mod，非原生模块的文件模块。</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on 为吾优</title>
    <link>https://blog.v5u.win/categories/swift/</link>
    <description>Recent content in Swift on 为吾优</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 05 Jun 2019 10:37:16 +0800</lastBuildDate>
    
	<atom:link href="https://blog.v5u.win/categories/swift/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>iOS SwiftUI</title>
      <link>https://blog.v5u.win/post/ios-swiftui/</link>
      <pubDate>Wed, 05 Jun 2019 10:37:16 +0800</pubDate>
      
      <guid>https://blog.v5u.win/post/ios-swiftui/</guid>
      <description>[TOC]
什么是swiftUI？ Apple的解释：
 更好的应用。更少的代码。
 SwiftUI是一种创新的，非常简单的方法，可以通过Swift的强大功能在所有Apple平台上构建用户界面。仅使用一组工具和API为任何Apple设备构建用户界面。SwiftUI具有易于阅读和自然编写的声明式Swift语法，可与新的Xcode设计工具无缝协作，使您的代码和设计完美同步。自动支持动态类型，暗模式，本地化和可访问性意味着您的第一行SwiftUI代码已经是您编写过的最强大的UI代码。
声明性语法 SwiftUI使用声明性语法，因此您可以简单地说明您的用户界面应该做什么。例如，您可以编写需要包含文本字段的项目列表，然后描述每个字段的对齐方式，字体和颜色。您的代码比以前更简单，更易于阅读，从而节省您的时间和维护。
import SwiftUI struct Content : View { @State var model = Themes.ListModel var body: some View { List(model.items,action: model.selectItem){ item in Image(item.image) VStack(alignment: .leading){ Text(item.title) Text(item.subtitle) .color(.gray) } } } }  这种声明式风格甚至适用于复杂的概念，如动画。轻松地将动画添加到几乎任何控件中，并选择只有几行代码的即用型效果集合。在运行时，系统会处理创建平滑移动所需的所有步骤，甚至可以处理中断以保持应用稳定。通过动画这么简单，您将寻找新的方法来让您的应用程序活跃起来。
设计工具 Xcode 11包含直观的新设计工具，使得使用SwiftUI构建界面就像拖放一样简单。当您在设计画布中工作时，您编辑的所有内容都与相邻编辑器中的代码完全同步。在您键入时，代码会立即显示为预览，您对该预览所做的任何更改都会立即显示在您的代码中。Xcode会立即重新编译您的更改，并将其插入到应用程序的运行版本中，始终可见且可编辑。
拖放。只需拖动画布上的控件即可在用户界面中排列组件。单击以打开检查器以选择字体，颜色，对齐方式和其他设计选项，并使用光标轻松重新排列控件。许多这些可视化编辑器也可以在代码编辑器中使用，因此您可以使用检查器为每个控件发现新的修改器，即使您更喜欢手动编码界面部分。您还可以从库中拖动控件并将其拖放到设计画布上或直接放在代码上。
动态更换。Swift编译器和运行时完全嵌入到Xcode中，因此您的应用程序将不断构建和运行。您看到的设计画布不仅仅是您的用户界面的近似 - 它是您的实时应用程序。Xcode可以直接在您的实时应用程序中使用“动态替换”交换已编辑的代码，这是Swift中的一项新功能。
预览。您现在可以创建任何SwiftUI视图的一个或多个预览以获取示例数据，并配置用户可能看到的几乎任何内容，例如大字体，本地化或暗模式。预览还可以在任何设备和任何方向上显示您的UI。
所有Apple平台都是原生的 SwiftUI建立在数十年创建世界上最具创新性和直观的用户界面的经验之上。用户喜欢Apple生态系统的所有内容，例如控件和特定于平台的体验，都会在您的代码中呈现出来。SwiftUI是真正的原生，因此您的应用程序可以通过少量代码和交互式设计画布直接访问每个平台的成熟技术。
对开发者和公司的影响 通过swiftUI的发布可以看到，Apple 在逐步拜托对 Objective-C &amp;amp; Cocoa 的依赖，将精力和资源倾斜到swift语言上，这一次是对UIKit的摆脱。以 Apple 一贯的强势政策，很有可能后期会逐步放弃对 Objective-C 的持续优化(事实上有证据表明已经开始了)和App Store 上的政策制裁。以到达逐步引导开发者加入到新的平台上，这是在之前有过先例的：比如Mac OS从 power-pc 架构转到 x86架构.这将会是一个逐步渐进的过程，但是不会太长最多一两年，并且改变不可逆。</description>
    </item>
    
    <item>
      <title>swift中weak和unowned的区别</title>
      <link>https://blog.v5u.win/post/swift-weakunowned/</link>
      <pubDate>Tue, 13 Dec 2016 16:34:00 +0000</pubDate>
      
      <guid>https://blog.v5u.win/post/swift-weakunowned/</guid>
      <description>weak和unowned都是解决循环引用的关键字 区别： 如果您是一直写 Objective-C 过来的，那么从表面的行为上来说 unowned 更像以前的 unsafe_unretained，而 weak 就是以前的 weak。 用通俗的话说，就是 unowned 设置以后即使它原来引用的内容已经被释放了，它仍然会保持对被已经释放了的对象的一个 &amp;ldquo;无效的&amp;rdquo; 引用，它不能是 Optional 值，也不会被指向 nil。如果你尝试调用这个引用的方法或者访问成员属性的话，程序就会崩溃。 而 weak 则友好一些，在引用的内容被释放后，标记为 weak 的成员将会自动地变成 nil (因此被标记为 @weak 的变量一定需要是 Optional 值)。 关于两者使用的选择，Apple 给我们的建议是如果能够确定在访问时不会已被释放的话，尽量使用 unowned，如果存在被释放的可能，那就选择用 weak。</description>
    </item>
    
    <item>
      <title>swift 关键字篇</title>
      <link>https://blog.v5u.win/post/swift-%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Tue, 13 Dec 2016 15:45:27 +0000</pubDate>
      
      <guid>https://blog.v5u.win/post/swift-%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>@noescape：no escape(没有逃脱) 用来修饰闭包，含义为非逃逸闭包。 当闭包作为参数传递进函数时，如果这个闭包只在函数中被使用，则开发者可以将这个闭包声明成非逃逸的，即告诉系统当此函数结束后，这个闭包的生命周期也将结束，这样做的好处是可以提高代码性能，将闭包声明成非逃逸的类型使用@noescape关键字。 (1) 默认，swift 3.0 弃用，函数结束后，这个闭包的生命周期也将结束。 (2) 在其内部如果需要使用self这个关键字，self可以被省略。
@escaping 逃逸闭包 逃逸的闭包常用于异步的操作，这类函数会在异步操作开始之后立刻返回，但是闭包直到异步操作结束后才会被调用。例如这个闭包是异步处理一个网络请求，只有当请求结束后，闭包的生命周期才结束。当闭包作为函数的参数传入时，很有可能这个闭包在函数返回之后才会被执行。
@autoclosure 自动闭包 (1)默认非逃逸 (2)闭包也可以被自动的生成，这种闭包被称为自动闭包，自动闭包自动将表达式封装成闭包。 (3)自动闭包不接收任何参数，被调用时会返回被包装在其中的表达式的值。 (4)当闭包作为函数参数时，可以将参数标记 @autoclosure 来接收自动闭包。 (5)自动闭包能够延迟求值,因为代码段不会被执行直到你调用这个闭包。 (6)自动闭包默认是非逃逸的，如果要使用逃逸的闭包，需要手动声明: @autoclosure @escaping 旧版本：@autoclosure(escaping)
//(a)自动闭包演示 var students = [&amp;ldquo;A&amp;rdquo;,&amp;ldquo;B&amp;rdquo;,&amp;ldquo;C&amp;rdquo;] let studentsProvider = { students.remove(at: 0) } //自动闭包自动将表达式封装成闭包 studentsProvider()//(b)自动闭包演示 var list = [1,2,3,4,5,6]
//创建一个显式闭包 let closures = { list.append(7) }
print(list)//将打印[1,2,3,4,5,6]
closures() print(list)//引用传递，将打印[1,2,3,4,5,6,7]
func func1(closure: ()-&amp;gt;Void) -&amp;gt; Void { //执行显式的闭包 closures() }
func func2(auto: @autoclosure ()-&amp;gt;Void) -&amp;gt; Void { //执行自动闭包 auto() }</description>
    </item>
    
    <item>
      <title>AnyBidirectionalCollection</title>
      <link>https://blog.v5u.win/post/swift-anybidirectionalcollection/</link>
      <pubDate>Thu, 27 Oct 2016 20:01:25 +0000</pubDate>
      
      <guid>https://blog.v5u.win/post/swift-anybidirectionalcollection/</guid>
      <description>A type-erased wrapper over any collection with indices that support bidirectional traversal.
一种类型擦除的集合(索引支持双向遍历)</description>
    </item>
    
    <item>
      <title>as as! as?</title>
      <link>https://blog.v5u.win/post/swift-as/</link>
      <pubDate>Wed, 26 Oct 2016 13:52:46 +0000</pubDate>
      
      <guid>https://blog.v5u.win/post/swift-as/</guid>
      <description>Swift开发之 is、 as、as!、as?三种类型转换操作符
1，as使用场合
（1）从派生类转换为基类，向上转型（upcasts）
class Animal {} class Cat: Animal {} let cat = Cat() let animal = cat as Animal
（2）消除二义性，数值类型转换
let num1 = 42 as CGFloat let num2 = 42 as Int let num3 = 42.5 as Int let num4 = (42 / 2) as Double
（3）switch 语句中进行模式匹配
如果不知道一个对象是什么类型，你可以通过switch语法检测它的类型，并且尝试在不同的情况下使用对应的类型进行相应的处理。
switch animal { case let cat as Cat: print(&amp;ldquo;如果是Cat类型对象，则做相应处理&amp;rdquo;) case let dog as Dog: print(&amp;ldquo;如果是Dog类型对象，则做相应处理&amp;rdquo;) default: break }</description>
    </item>
    
    <item>
      <title>swift Enum</title>
      <link>https://blog.v5u.win/post/swift-enum/</link>
      <pubDate>Tue, 25 Oct 2016 19:50:02 +0000</pubDate>
      
      <guid>https://blog.v5u.win/post/swift-enum/</guid>
      <description>普通创建
enum SomeEnum: NSInteger { case A case B case C }  可以在Objective-C中使用的（添加@objc 关键字）
@objc enum Bear: Int { case Black, Grizzly, Polar }  </description>
    </item>
    
    <item>
      <title>Xcode8添加iOS7真机调试</title>
      <link>https://blog.v5u.win/post/xcode-xcode8-ios7-device/</link>
      <pubDate>Mon, 19 Sep 2016 11:58:47 +0000</pubDate>
      
      <guid>https://blog.v5u.win/post/xcode-xcode8-ios7-device/</guid>
      <description>打开Xcode8和Xcode7的app包内容 Contants/Developer/Platforms/iPhoneOS.platform/DeviceSupport 将Xcode7的iOS7的框架copy到Xcode8内</description>
    </item>
    
    <item>
      <title>struct 和class的区别</title>
      <link>https://blog.v5u.win/post/struct-class/</link>
      <pubDate>Mon, 15 Aug 2016 15:58:34 +0000</pubDate>
      
      <guid>https://blog.v5u.win/post/struct-class/</guid>
      <description>struct是值类型，值类型在传递和赋值时将进行复制。 class是引用类型，引用类型只会使用引用对象的一个『指向』
 class有这几个功能struct没有的：
class可以继承，这样子类可以使用父类的特性和方法 类型转换可以在runtime的时候检查和解释一个实例的类型 可以用deinit来释放资源 一个类可以被多次引用 `
struct也有这样几个优势：
`结构较小，适用于复制操作，相比于一个class的实例被多次引用更加安全 无须担心内存memory leak或者多线程冲突问题
  顺便提一下，array在swift中是用struct实现的。Apple重写过一次array，然后复制就是深度拷贝了。猜测复制是类似参照那样，通过栈上指向堆上位置的指针来实现的。而对于它的复制操作，也是在相对空间较为宽裕的堆上来完成的，所以性能上还是不错的。</description>
    </item>
    
    <item>
      <title>Swift与Objective-C的兼容方法:@objc和Dynamic</title>
      <link>https://blog.v5u.win/post/swift-objcdynamic/</link>
      <pubDate>Tue, 07 Jun 2016 10:02:09 +0000</pubDate>
      
      <guid>https://blog.v5u.win/post/swift-objcdynamic/</guid>
      <description>Swift必须考虑与Objective-C的兼容。
首先通过添加{product-module-name}-Bridging-Header.h文件，并在其中填写想要使用的头文件名称，我们就可以很容易地在Swift中使用Objective-C代码了。Xcode为了简化这个设定，甚至在Swift项目中第一次导入Objective-C文件时会主动弹框进行询问是否要自动创建这个文件，可以说是非常方便。
但是如果想要在Objective-C中使用Swift的类型的时候，事情就复杂一些。如果是来自外部的框架，那么这个框架与Objective-C项目肯定不是处在同一个target中的，我们需要对外部的Swift module进行导入。这个其实和使用Objective-C的原来的Framework是一样的，对于一个项目来说，外界框架是由Swift写的还是Objective-C写的，两者并没有太大区别。我们通过使用2013年新引入的@import来引入module：
[cpp] view plaincopy在CODE上查看代码片派生到我的代码片 @import MySwiftKit;
之后就可以正常使用这个Swift写的框架了。
如果想要在Objective-C里使用的是同一个项目中的Swift的源文件的话，可以直接导入自动生成的头文件{product-module-name}-Swift.h来完成。比如项目的target叫做MyApp的话，我们就需要在Objective-C文件中写：
[cpp] view plaincopy在CODE上查看代码片派生到我的代码片 #import &amp;ldquo;MyApp-Swift.h&amp;rdquo;
但这只是故事的开始。Objective-C和Swift在底层使用的是两套完全不同的机制，Cocoa中的Objective-C对象是基于运行时的，它从骨子里遵循了KVC（Key-Value Coding，通过类似字典的方式存储对象信息）以及动态派发（Dynamic Dispatch，在运行调用时再决定实际调用的具体实现）。而Swift为了追求性能，如果没有特殊需要的话，是不会在运行时再来决定这些的。也就是说，Swift类型的成员或者方法在编译时就已经决定，而运行时便不再需要经过一次查找，而可以直接使用。
显而易见，这带来的问题是如果我们要使用Objective-C的代码或者特性来调用纯Swift的类型时候，我们会因为找不到所需要的这些运行时信息，而导致失败。解决起来也很简单，在Swift类型文件中，我们可以将需要暴露给Objective-C使用的任何地方（包括类，属性和方法等）的声明前面加上@objc修饰符。注意这个步骤只需要对那些不是继承自NSObject的类型进行，如果你用Swift写的class是继承自NSObject的话，Swift会默认自动为所有的非private的类和成员加上@objc。这就是说，对一个NSObject的子类，你只需要导入相应的头文件就可以在Objective-C里使用这个类了。
@objc修饰符的另一个作用是为Objective-C侧重新声明方法或者变量的名字。虽然绝大部分时候自动转换的方法名已经足够好用（比如会将Swift中类似init(name: String) 的方法转换成-initWithName:(NSString *)name这样），但是有时候我们还是期望Objective-C里使用和Swift中不一样的方法名或者类的名字，比如Swift里这样的一个类：
[cpp] view plaincopy在CODE上查看代码片派生到我的代码片 class 我的类 {
func 打招呼(名字: String) { println(&amp;quot;哈喽，&amp;amp;#40;名字)&amp;quot;) }  }
我的类().打招呼(&amp;ldquo;小明&amp;rdquo;)
Objective-C的话是无法使用中文来进行调用的，因此我们必须使用@objc将其转为ASCII才能在Objective-C里访问：
[cpp] view plaincopy在CODE上查看代码片派生到我的代码片 @objc(MyClass)
class 我的类 {
@objc(greeting:) func 打招呼(名字: String) { println(&amp;quot;哈喽，&amp;amp;#40;名字)&amp;quot;) }  }
这样，我们在Objective-C里就能调用 [[MyClass new] greeting:@&amp;ldquo;XiaoMing&amp;rdquo;] 这样的代码了（虽然比起原来一点都不好玩了）。另外，正如上面所说的以及在Selector一节中所提到的，即使是NSObject的子类，Swift也不会在被标记为private的方法或成员上自动加@objc。如果我们需要使用这些内容的动态特性的话，我们需要手动给它们加上@objc修饰。
添加@objc修饰符并不意味着这个方法或者属性会变成动态派发，Swift依然可能会将其优化为静态调用。如果你需要和Objective-C里动态调用时相同的运行时特性的话，你需要使用的修饰符是dynamic。一般情况下在做App开发时应该用不上，但是在施展一些像动态替换方法或者运行时再决定实现这样的 &amp;ldquo;黑魔法&amp;rdquo; 的时候，我们就需要用到dynamic修饰符了。在之后的KVO一节中，我们还会提到一个关于使用dynamic的实例。</description>
    </item>
    
    <item>
      <title>swift 中初始化ViewController</title>
      <link>https://blog.v5u.win/post/swift-init-viewcontroller/</link>
      <pubDate>Mon, 06 Jun 2016 18:25:00 +0000</pubDate>
      
      <guid>https://blog.v5u.win/post/swift-init-viewcontroller/</guid>
      <description>let vc = NameVC()
init(title: String){ super.init(nibName: nil, bundle: nil) self.title = title } required init?(coder aDecoder: NSCoder) { fatalError(&amp;quot;init(coder:) has not been implemented&amp;quot;) }  </description>
    </item>
    
    <item>
      <title>class xxx has no initializers</title>
      <link>https://blog.v5u.win/post/swift-class-xxx-has-no-initializers/</link>
      <pubDate>Mon, 25 Apr 2016 17:09:01 +0000</pubDate>
      
      <guid>https://blog.v5u.win/post/swift-class-xxx-has-no-initializers/</guid>
      <description>error: class xxx has no initializers 这是说变量没有初始化，比如 var label:UILabel 应该写成 var label:UILabel?</description>
    </item>
    
    <item>
      <title>braced block of statements is an unused closure</title>
      <link>https://blog.v5u.win/post/swift-braced-block-of-statements-is-an-unused-closure/</link>
      <pubDate>Tue, 01 Mar 2016 15:31:45 +0000</pubDate>
      
      <guid>https://blog.v5u.win/post/swift-braced-block-of-statements-is-an-unused-closure/</guid>
      <description>使用swift写dome时xcode报一下错误： braced block of statements is an unused closure
原因及收获： for循环的条件语句不能有空格，如：for i=0; i&amp;lt;3; i++ {} 其他控制语句也一样不能有空格</description>
    </item>
    
  </channel>
</rss>
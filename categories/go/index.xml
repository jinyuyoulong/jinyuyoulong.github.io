<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 为吾优</title>
    <link>https://blog.v5u.win/categories/go/</link>
    <description>Recent content in Go on 为吾优</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 30 Oct 2019 06:15:11 +0000</lastBuildDate><atom:link href="https://blog.v5u.win/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go谚语</title>
      <link>https://blog.v5u.win/go%E8%B0%9A%E8%AF%AD/</link>
      <pubDate>Wed, 30 Oct 2019 06:15:11 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go%E8%B0%9A%E8%AF%AD/</guid>
      <description>本文摘自 https://www.kancloud.cn/cserli/golang/524388 本文译自go-proverbs, 脱胎于 Rob Pike 振奋人心的演讲视频 talk at Gopherfest SV 2015 (bilibili). 不要通过共享内存进行通信, 通过通信共享内存 (Don’t communicate by</description>
    </item>
    
    <item>
      <title>Goland 使用</title>
      <link>https://blog.v5u.win/goland-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 01 Sep 2019 11:45:59 +0000</pubDate>
      
      <guid>https://blog.v5u.win/goland-%E4%BD%BF%E7%94%A8/</guid>
      <description>做 Go 开发，一般使用的IDE是 Goland 安装略，自己解决。下面说安装后的事情。 配置文件，配置开发环境 goland 会自动读取 GOROOT 和 GOPATH，所以不用自己填写。我</description>
    </item>
    
    <item>
      <title>Go CGO</title>
      <link>https://blog.v5u.win/posts/go/go-cgo/</link>
      <pubDate>Tue, 20 Aug 2019 18:06:35 +0800</pubDate>
      
      <guid>https://blog.v5u.win/posts/go/go-cgo/</guid>
      <description>[TOC] golang 中调用 c/c++ 代码有三种方式 直接嵌套在go文件中使用，最简单直观的 导入动态库 .so 或 dll 的形式，最安全但是很不爽也比较慢的 直接引用 c/c++ 文件的形式，层次</description>
    </item>
    
    <item>
      <title>Go Gofmt</title>
      <link>https://blog.v5u.win/posts/go/go-gofmt/</link>
      <pubDate>Fri, 16 Aug 2019 17:57:28 +0800</pubDate>
      
      <guid>https://blog.v5u.win/posts/go/go-gofmt/</guid>
      <description>[TOC] 为什么要用 gofmt 大多数人认为我们格式化Go代码gofmt 以使代码看起来更好或结束团队成员之间关于程序布局的争论。但是， 1是，如果一个算法定义围</description>
    </item>
    
    <item>
      <title>Go Bazel构建工具</title>
      <link>https://blog.v5u.win/posts/go/go-bazel%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Fri, 16 Aug 2019 16:02:29 +0800</pubDate>
      
      <guid>https://blog.v5u.win/posts/go/go-bazel%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</guid>
      <description>[TOC] 为什么要了解Bazel 这段时间搞到了bilibili的一部分源码，那个事件你知道的，就不说了。怀着对大牛的向往，打算研究一下，之前听说主程</description>
    </item>
    
    <item>
      <title>Go2</title>
      <link>https://blog.v5u.win/posts/go/go-go2/</link>
      <pubDate>Tue, 13 Aug 2019 14:02:52 +0800</pubDate>
      
      <guid>https://blog.v5u.win/posts/go/go-go2/</guid>
      <description>[TOC] 中文版 English version 介绍 [这是我上周在Gophercon 2019上发表的博客文章。我们将在演讲结束后添加视频链接。] 我们都正在一起走向Go 2的路上，</description>
    </item>
    
    <item>
      <title>Go Crontab</title>
      <link>https://blog.v5u.win/posts/go/go-crontab/</link>
      <pubDate>Fri, 19 Jul 2019 16:51:27 +0800</pubDate>
      
      <guid>https://blog.v5u.win/posts/go/go-crontab/</guid>
      <description>[TOC] 计划任务 from Godoc 包cron实现了cron规范解析器和作业运行器。 安装 要下载特定的标记版本，请运行: go get github.com/robfig/cron/v3@v3.0.0 将其导入您的程序中: import “github.</description>
    </item>
    
    <item>
      <title>Go Crontab v3</title>
      <link>https://blog.v5u.win/posts/go/go-crontab-v3/</link>
      <pubDate>Fri, 19 Jul 2019 16:51:27 +0800</pubDate>
      
      <guid>https://blog.v5u.win/posts/go/go-crontab-v3/</guid>
      <description>[TOC] 关于cron更新 Cron V3已经发布！ 要下载特定的标记版本，请运行: go get github.com/robfig/cron/v3@v3.0.0 将其导入您的程序中: import &amp;quot;github.com/robfig/cron/v3&amp;quot; 由于Go Modules的使用，它需要Go 1.1</description>
    </item>
    
    <item>
      <title>go社区拒绝了try提案</title>
      <link>https://blog.v5u.win/posts/go/go-%E6%8B%92%E7%BB%9D%E4%BA%86try%E6%8F%90%E6%A1%88/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.v5u.win/posts/go/go-%E6%8B%92%E7%BB%9D%E4%BA%86try%E6%8F%90%E6%A1%88/</guid>
      <description>提案：内置的Go错误检查功能， try 该提案已经结束。谢谢大家，感谢您的投入。 在评论之前，请阅读详细的设计文档，并查看截至6月6日的摘要，截至6月</description>
    </item>
    
    <item>
      <title>Go BeeGo VS Gin</title>
      <link>https://blog.v5u.win/go-beego-vs-gin/</link>
      <pubDate>Tue, 16 Jul 2019 05:36:51 +0000</pubDate>
      
      <guid>https://blog.v5u.win/go-beego-vs-gin/</guid>
      <description>[TOC] beego和gin是现在用的最多的两个go框架，所以这里选择比较这两个。 框架选择原则：永远站在大多数人这边。招人，公司，成本，问题解决时间</description>
    </item>
    
  </channel>
</rss>

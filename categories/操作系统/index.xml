<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>操作系统 on 为吾优</title>
    <link>https://blog.v5u.win/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
    <description>Recent content in 操作系统 on 为吾优</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 10 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.v5u.win/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>code review</title>
      <link>https://blog.v5u.win/post/system-codereview/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.v5u.win/post/system-codereview/</guid>
      <description>Code Review的好处我觉得不用多说了，主要是让你的代码可以更好的组织起来，有更易读，有更高的维护性，同时可以达到知识共享，找到bug只是其中的副产品。
我个人认为代码有这几种级别：1）可编译，2）可运行，3）可测试，4）可读，5）可维护，6）可重用。通过自动化测试的代码只能达到第3）级，而通过Code Review的代码少会在第4）级甚至更高。
在Amazon，开发工程师都会被教育拿到需求后一定要问——“为什么要做？业务影响度有多大？有多少用户受益？”，
review实施思路 先Review设计实现思路，然后Review设计模式，接着Review成形的骨干代码，最后Review完成的代码，如果程序复杂的话，需要拆成几个单元或模块分别Review。当然，最佳的practice是，每次Review的代码应该在1000行以内，时间不能超过一部电影的时间——1.5小时（因为据说那个一个正常人的膀胱可以容纳尿液的最长限度）
1.- 经常进行Code Review 2.- Code Review不要太正式，而且要短 3.- 尽可能的让不同的人Reivew你的代码 4.- 保持积极的正面的态度 5.- 学会享受Code Reivew
https://coolshell.cn/articles/1302.html
review工具
1. Review board:
Codestriker:
Groogle:：
 各式各样语言的语法高亮。 支持整个版本树的比较。 支持当个文件不同版本的diff功能，并有一个图形的版本树。 邮件通知所有的Reivew的人当前的状态。 认证机制。  4. Rietveld:
Review board 很像。它也是一个基于Web的应用，并在Google App Engine 上。
5. JCR
基于WEB界面的最初设计给Reivew Java 语言的
JCR 主要想协助：
 审查者。所有的代码更改都会被高亮，以及大多数语言的语法高亮。Code extracts 可以显示代码评审意见。如果你正在Review Java的代码，你可以点击代码中的类名来查看相关的类的声明。 项目所有者。可以 轻松创建并配置需要Review的项目，并不需要集成任何的软件配置管理系统（SCM）。 流程信仰者。 所有的评语都会被记录在数据库中，并且会有状态报告，以及各种各样的统计。 架构师和开发者。 这个系统也可以让我们查看属于单个文件的评语，这样有利于我们重构代码。  JCR 主要面对的是大型的项目，或是非常正式的代码评审，从这方面看来，他并不像上面的那些工具。
Jupiter
它是一个Eclipse IDE 的插件。
Gerrit
使用 Git 作为底层版本控制系统。它分支自Rietveld，作者为Google公司的Shawn Pearce，原先是为了管理Android计划而产生。</description>
    </item>
    
    <item>
      <title>mac虚拟机上的centos 7实现ssh连接</title>
      <link>https://blog.v5u.win/763.html</link>
      <pubDate>Sat, 30 Jun 2018 08:57:11 +0000</pubDate>
      
      <guid>https://blog.v5u.win/763.html</guid>
      <description>mac虚拟机上的centos7实现ssh连接
 查看是否安装ssh rpm -qa | grep ssh（一般都内置了）
 配置sshd_config文件 /etc/ssh/sshd_config
Port 22
ListenAddress 0.0.0.0
ListenAddress ::
 防火墙配置
 安装iptables: yum install iptables-service 配置防火墙文件：vim /etc/sysconfig/iptables 关闭防火墙：systemctl restart iptables.service systemctl enable iptables.service //设置防火墙开机启动   安装netstat：yum install net-tools （查看监听端口：netstat -ntpl | grep 22）
 关闭虚拟机，设置虚拟机网络为host-only方式，virtualbox需要设置全局设置
 cmd+,-&amp;gt;网络-&amp;gt;仅主机(host-only)网络 添加网络   查看虚拟机ip地址，ip ip addr
 主机找到可以ping 通的ip
 ssh登录 ssh root@192.168.xx.xx
  </description>
    </item>
    
    <item>
      <title>centos7 更改系统启动模式</title>
      <link>https://blog.v5u.win/753.html</link>
      <pubDate>Tue, 26 Jun 2018 01:51:41 +0000</pubDate>
      
      <guid>https://blog.v5u.win/753.html</guid>
      <description>centos7 更改系统启动模式
 查看当前启动模式 systemctl get-default 查看配置文件 cat /etc/inittab 设置启动模式为命令行模式 systemctl set-target multi-user.target 重启 shutdown -r now  </description>
    </item>
    
    <item>
      <title>centos7 PHP7环境配置</title>
      <link>https://blog.v5u.win/751.html</link>
      <pubDate>Tue, 26 Jun 2018 01:50:27 +0000</pubDate>
      
      <guid>https://blog.v5u.win/751.html</guid>
      <description>centos7 PHP7环境配置 目录 1. 开启22端口2. 创建其他用户，使用其他用户ssh登录（root账户禁止登录）3. 关闭防火墙4. 关闭selinux5. 安装Apache6. 安装MySQL7. 安装PHP7.28. 配置 [TOC]
 开启22端口
 创建其他用户，使用其他用户ssh登录（root账户禁止登录）
  ssh test@10.211.55.5 (使用eth0网卡IP)
 关闭防火墙
centos7 默认使用firewalld，不在内置iptables //临时关闭 systemctl stop firewalld //禁止开机启动 systemctl disable firewalld
 sudo yum -y install iptables-services
 sudo vi /etc/sysconfig/iptables
 systemctl restart iptables.service （重启）
 systemctl enable iptables.service （开机自启动iptables）注：并不能开机自动关闭firewalld
 关闭selinux
  gedit /etc/sysconfig/selinux
 安装Apache
 sudo yum install httpd
 sudo service httpd start</description>
    </item>
    
    <item>
      <title>docker 使用规则</title>
      <link>https://blog.v5u.win/post/docker-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.v5u.win/post/docker-%E7%AE%80%E4%BB%8B/</guid>
      <description>硬件/操作系统 要求 Docker支持以下的CentOS版本：
 CentOS 7 (64-bit) CentOS 6.5 (64-bit) 或更高的版本  前提条件 目前，CentOS 仅发行版本中的内核支持 Docker。
Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。
Docker 运行在 CentOS-6.5 或更高的版本的 CentOS 上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。
### docker 的组件结构
Docker 由镜像(Image)、容器(Container)、仓库(Repository) 三部分组成。
docker-machine, docker, docker-compose (docker环境)
docker container 容器(运行实例)
docker image 镜像(安装实例)
Dockerfile(用于生成image)
### docker配置+使用
预先安装docker的相关库
 brew install docker docker-compose docker-machine  #### 启动docker-machine
To have launchd start docker-machine now and restart at login: brew services start docker-machine</description>
    </item>
    
  </channel>
</rss>